<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[淘淘的博客]]></title>
  <subtitle><![CDATA[Nothing is given. Everything is earned.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://tonylit.me/"/>
  <updated>2018-05-05T05:37:27.000Z</updated>
  <id>http://tonylit.me/</id>
  
  <author>
    <name><![CDATA[tonyli]]></name>
    <email><![CDATA[489631402@qq.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[ngrinder post请求脚本demo]]></title>
    <link href="http://tonylit.me/2018/05/05/ngrinder%20post%E8%AF%B7%E6%B1%82%E8%84%9A%E6%9C%ACdemo/"/>
    <id>http://tonylit.me/2018/05/05/ngrinder post请求脚本demo/</id>
    <published>2018-05-05T03:37:27.000Z</published>
    <updated>2018-05-05T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>ngrinder脚本支持Jython和Groovy语言，这里介绍<br>Groovy HTTP Post请求脚本编写方式。</p>
<a id="more"></a>
<hr>
<h1 id="post请求脚本">post请求脚本</h1><p><a href="https://pan.baidu.com/s/13pp-UZLF1w4Z71zeIH9qJg" target="_blank" rel="external">相关jar包</a></p>
<p>脚中包括事物定义，参数化等。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> postdemo</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> net.grinder.script.Grinder.grinder</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.grinder.plugin.http.HTTPRequest</span><br><span class="line"><span class="keyword">import</span> net.grinder.plugin.http.HTTPPluginControl</span><br><span class="line"><span class="keyword">import</span> net.grinder.script.GTest</span><br><span class="line"><span class="keyword">import</span> net.grinder.scriptengine.groovy.junit.GrinderRunner</span><br><span class="line"><span class="keyword">import</span> net.grinder.scriptengine.groovy.junit.annotation.BeforeProcess</span><br><span class="line"><span class="keyword">import</span> net.grinder.scriptengine.groovy.junit.annotation.BeforeThread</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Before</span><br><span class="line"><span class="keyword">import</span> org.junit.Test</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> HTTPClient.Cookie</span><br><span class="line"><span class="keyword">import</span> HTTPClient.CookieModule</span><br><span class="line"><span class="keyword">import</span> HTTPClient.HTTPResponse</span><br><span class="line"><span class="keyword">import</span> HTTPClient.NVPair</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@RunWith</span>(GrinderRunner)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostDemo</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> GTest test1</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> GTest test2</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> HTTPRequest request</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> NVPair[] headers = []</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Cookie[] cookies = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; buyerlineList <span class="comment">//存放参数文件记录</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> def buyerRowNumber <span class="comment">//参数行</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * <span class="doctag">@BeforeProcess</span>在每个进程启动前执行该方法</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="annotation">@BeforeProcess</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">beforeProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//设置请求响应超时时间（ms），超过则抛出异常</span></span><br><span class="line">		HTTPPluginControl.getConnectionDefaults().timeout = <span class="number">6000</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//1代表执行顺序，中文代表事物名称</span></span><br><span class="line">		test1 = <span class="keyword">new</span> GTest(<span class="number">1</span>, <span class="string">"第一个事物"</span>)</span><br><span class="line">		<span class="comment">//test2 = new GTest(2, "第二个事务")</span></span><br><span class="line"></span><br><span class="line">		request = <span class="keyword">new</span> HTTPRequest()</span><br><span class="line"></span><br><span class="line">		<span class="comment">//读取参数文件</span></span><br><span class="line">		buyerlineList = <span class="keyword">new</span> File(<span class="string">"./resources/buyertest.txt"</span>).readLines()</span><br><span class="line"></span><br><span class="line">		grinder.logger.info(<span class="string">"before process."</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * <span class="doctag">@BeforeThread</span> 在每个线程启动前执行该方法</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="annotation">@BeforeThread</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">beforeThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//注册事件，启动test1与下面的方法名保持一致</span></span><br><span class="line">		test1.record(<span class="keyword">this</span>, <span class="string">"test1"</span>)</span><br><span class="line"></span><br><span class="line">		grinder.statistics.delayReports=<span class="keyword">true</span>;</span><br><span class="line">		grinder.logger.info(<span class="string">"before thread."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * <span class="doctag">@Before</span>在每次<span class="doctag">@test</span>方法前执行</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="annotation">@Before</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//设置header属性</span></span><br><span class="line">		headers = [</span><br><span class="line">			<span class="keyword">new</span> NVPair(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded;"</span>),</span><br><span class="line">			<span class="keyword">new</span> NVPair(<span class="string">"User-Agent"</span>,<span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT)"</span>),</span><br><span class="line">			<span class="keyword">new</span> NVPair(<span class="string">"Accept"</span>,<span class="string">"*/*"</span>)] as NVPair[];</span><br><span class="line">		request.setHeaders(headers)</span><br><span class="line"></span><br><span class="line">		cookies.each &#123; CookieModule.addCookie(it, HTTPPluginControl.getThreadHTTPClientContext()) &#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*参数化数据，定义参数化迭代方式：此处为随机方式*/</span></span><br><span class="line">		buyerRowNumber = <span class="keyword">new</span> Random().nextInt(buyerlineList.size())</span><br><span class="line">		String buyer = buyerlineList.get(buyerRowNumber);</span><br><span class="line">		<span class="comment">//设置请求的入参--json格式</span></span><br><span class="line">		String testdata=<span class="string">"&#123;\"buyer\":\""</span>+buyer+<span class="string">"\",\"preTotalAmt\":2000,\"afterTotalAmt\":2000&#125;"</span>;</span><br><span class="line">		request.setData(testdata.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line"></span><br><span class="line">		grinder.logger.info(<span class="string">"before thread. init headers and cookies"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			<span class="comment">//发送请求</span></span><br><span class="line">			HTTPResponse result = request.POST(<span class="string">"http://xxxx/aa/bb/cc.html"</span>);</span><br><span class="line">			<span class="comment">//获取返回报文</span></span><br><span class="line">			String respCode = JSONObject.parseObject(result.getText()).get(<span class="string">"responseCode"</span>);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (respCode.equals(<span class="string">"0000"</span>)) &#123;</span><br><span class="line"></span><br><span class="line">				println <span class="string">"===返回==========成功"</span>+result.getText();</span><br><span class="line">				assertTrue(<span class="string">"成功&lt;&lt;&lt;"</span>,respCode.equals(<span class="string">"0000"</span>))</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				grinder.logger.<span class="keyword">error</span>(<span class="string">"===失败=========="</span>+result.getText())</span><br><span class="line">				assertFalse(<span class="string">"失败&gt;&gt;&gt;"</span>,!respCode.equals(<span class="string">"0000"</span>))</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">			assertFalse(<span class="string">"失败&gt;&gt;&gt;"</span>+ex,<span class="keyword">false</span>)</span><br><span class="line">			grinder.logger.<span class="keyword">error</span>(<span class="string">"===异常======"</span>+ex)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行的时候在vm中加入设置：<br>-javaagent:E:\sn\PTlib\PTlib\grinder-dcr-agent-3.9.1.jar<br><img src="/img/ngrinder-post脚本/vm设置.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ngrinder脚本支持Jython和Groovy语言，这里介绍<br>Groovy HTTP Post请求脚本编写方式。</p>]]>
    
    </summary>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring Boot入门]]></title>
    <link href="http://tonylit.me/2018/04/16/Spring%20Boot%E5%85%A5%E9%97%A8/"/>
    <id>http://tonylit.me/2018/04/16/Spring Boot入门/</id>
    <published>2018-04-16T03:37:27.000Z</published>
    <updated>2018-04-16T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.</p>
<p> We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. </p>
<p>Most Spring Boot applications need very little Spring configuration.</p>
<p>化繁为简，简化配置。</p>
<a id="more"></a>
<hr>
<h1 id="SpringBoot_Hello_World">SpringBoot Hello World</h1><p>环境准备：<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">jdk1.8</a>, <a href="http://maven.apache.org/download.cgi" target="_blank" rel="external">maven:3.5.3</a></p>
<p>开发工具：[IntelliJ IDEA] (<a href="https://www.jetbrains.com/idea/" target="_blank" rel="external">https://www.jetbrains.com/idea/</a>)</p>
<p>maven的settings.xml中最好配置阿里的mirror。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="title">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="title">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="title">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="创建spring项目：">创建spring项目：</h2><p><img src="/img/springboot入门/springInitializr.PNG" alt="Alt text"></p>
<p><img src="/img/springboot入门/projectMetata.PNG" alt="Alt text"></p>
<p><img src="/img/springboot入门/newproject.PNG" alt="Alt text"></p>
<p>这里勾选web一个选项即可。</p>
<p><img src="/img/springboot入门/projectfinish.PNG" alt="Alt text"></p>
<p>注意路径不要有中文。</p>
<p><img src="/img/springboot入门/project-list.PNG" alt="Alt text"></p>
<p>生成maven项目。</p>
<hr>
<h2 id="启动项目">启动项目</h2><p>不用做其他任何配置，先直接启动项目，爽一把。（或者命令行：mvn spring-boot run）</p>
<p><img src="/img/springboot入门/项目启动.PNG" alt="Alt text"></p>
<p>启动后，web访问:<a href="http://127.0.0.1:8080/" target="_blank" rel="external">http://127.0.0.1:8080/</a></p>
<p><img src="/img/springboot入门/404.PNG" alt="Alt text"></p>
<p>OK，说明项目启动成功了。</p>
<p>对比之前的spring项目，这个实在是太简单了吧。</p>
<hr>
<h2 id="编写一个helloworld类">编写一个helloworld类</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">package</span> <span class="tag">com</span><span class="class">.tony</span><span class="class">.girl</span>;</span><br><span class="line"></span><br><span class="line"><span class="tag">import</span> <span class="tag">org</span><span class="class">.springframework</span><span class="class">.web</span><span class="class">.bind</span><span class="class">.annotation</span><span class="class">.RequestMapping</span>;</span><br><span class="line"><span class="tag">import</span> <span class="tag">org</span><span class="class">.springframework</span><span class="class">.web</span><span class="class">.bind</span><span class="class">.annotation</span><span class="class">.RequestMethod</span>;</span><br><span class="line"><span class="tag">import</span> <span class="tag">org</span><span class="class">.springframework</span><span class="class">.web</span><span class="class">.bind</span><span class="class">.annotation</span><span class="class">.RestController</span>;</span><br><span class="line"></span><br><span class="line"><span class="at_rule">@<span class="keyword">RestController</span></span><br><span class="line">public class HelloController </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="at_rule">@<span class="keyword">RequestMapping(value</span> = <span class="string">"hello"</span>, method = RequestMethod.GET)</span><br><span class="line">    public String <span class="function">sayHello</span>() </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="tag">return</span> "<span class="tag">hello</span> <span class="tag">world</span> <span class="tag">Spring</span> <span class="tag">Boot</span>";</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重新启动项目，web访问<a href="http://127.0.0.1:8080/hello" target="_blank" rel="external">http://127.0.0.1:8080/hello</a></p>
<p><img src="/img/springboot入门/hellopage.PNG" alt="Alt text"></p>
<hr>
<h1 id="自定义属性配置">自定义属性配置</h1><p>默认提供的配置文件为application.properties,建议使用yml文件格式，更简单便捷。</p>
<p><img src="/img/springboot入门/yml.PNG" alt="Alt text"></p>
<p>将服务端口改成8081. <a href="http://127.0.0.1:8081/hello" target="_blank" rel="external">http://127.0.0.1:8081/hello</a></p>
<hr>
<h2 id="使用属性值">使用属性值</h2><p>在application.yml 中配置：</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">server:</span></span><br><span class="line">  port: <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="label">name:</span> <span class="string">"zhangsan"</span></span><br><span class="line"></span><br><span class="line"><span class="label">age:</span> <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="label">userinfo:</span> <span class="string">"name:$&#123;name&#125;,age:$&#123;age&#125;"</span></span><br></pre></td></tr></table></figure>
<p>HelloController中：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">package</span> <span class="tag">com</span><span class="class">.tony</span><span class="class">.girl</span>;</span><br><span class="line"></span><br><span class="line"><span class="tag">import</span> <span class="tag">org</span><span class="class">.springframework</span><span class="class">.beans</span><span class="class">.factory</span><span class="class">.annotation</span><span class="class">.Value</span>;</span><br><span class="line"><span class="tag">import</span> <span class="tag">org</span><span class="class">.springframework</span><span class="class">.web</span><span class="class">.bind</span><span class="class">.annotation</span><span class="class">.RequestMapping</span>;</span><br><span class="line"><span class="tag">import</span> <span class="tag">org</span><span class="class">.springframework</span><span class="class">.web</span><span class="class">.bind</span><span class="class">.annotation</span><span class="class">.RequestMethod</span>;</span><br><span class="line"><span class="tag">import</span> <span class="tag">org</span><span class="class">.springframework</span><span class="class">.web</span><span class="class">.bind</span><span class="class">.annotation</span><span class="class">.RestController</span>;</span><br><span class="line"></span><br><span class="line"><span class="at_rule">@<span class="keyword">RestController</span></span><br><span class="line">public class HelloController </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="at_rule">@<span class="keyword">Value("$&#123;userinfo&#125;")</span></span><br><span class="line">    private String userinfo</span>;</span><br><span class="line"></span><br><span class="line">    <span class="at_rule">@<span class="keyword">RequestMapping(value</span> = <span class="string">"hello"</span>, method = RequestMethod.GET)</span><br><span class="line">    public String <span class="function">sayHello</span>() </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="tag">return</span> <span class="tag">userinfo</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问：<a href="http://127.0.0.1:8081/hello" target="_blank" rel="external">http://127.0.0.1:8081/hello</a></p>
<p><img src="/img/springboot入门/message.PNG" alt="Alt text"></p>
<hr>
<h3 id="将属性配置映射为bean">将属性配置映射为bean</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span>:</span><br><span class="line">  <span class="attribute">name</span>: <span class="string">"123"</span></span><br><span class="line">  <span class="attribute">age</span>: <span class="number">20</span></span><br></pre></td></tr></table></figure>
<p>新建model类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tony.girl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Component</span></span><br><span class="line"><span class="annotation">@ConfigurationProperties</span>(prefix = <span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用的时候直接注入就行了。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> UserProperties userProperties;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Spring-data-jpa">Spring-data-jpa</h1><p>Spring-data-jpa使用2.0.6版本：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-data-jpa<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.0.6.RELEASE<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在application.yml文件中配置datasource</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">spring</span>:</span><br><span class="line">    <span class="attribute">datasource</span>:</span><br><span class="line">        <span class="attribute">url</span>: <span class="attribute">jdbc</span>:<span class="attribute">mysql</span>:<span class="comment">//localhost:3306/springboot?characterEncoding=utf8</span></span><br><span class="line">        <span class="attribute">username</span>: root</span><br><span class="line">        <span class="attribute">password</span>: root</span><br><span class="line">    <span class="attribute">jpa</span>:</span><br><span class="line">        <span class="attribute">database</span>: MYSQL</span><br><span class="line">        <span class="attribute">show-sql</span>: true</span><br><span class="line">    #Hibernate ddl auto</span><br><span class="line">        <span class="attribute">hibernate</span>:</span><br><span class="line">            <span class="attribute">ddl-auto</span>: create</span><br><span class="line">            <span class="attribute">naming-strategy</span>: org.hibernate.cfg.ImprovedNamingStrategy</span><br><span class="line">        <span class="attribute">properties</span>:</span><br><span class="line">            <span class="attribute">hibernate</span>:</span><br><span class="line">                <span class="attribute">dialect</span>: org.hibernate.dialect.MySQL5Dialect</span><br></pre></td></tr></table></figure>
<p>创建一个Person类，来映射数据库表。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tony.girl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Id</span></span><br><span class="line">    <span class="annotation">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行，到mysql中看到表自动创建出来。</p>
<h2 id="编写一则查询demo">编写一则查询demo</h2><p>先创建一个Person的repository接口，继承JpaRepository。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">package</span> <span class="tag">com</span><span class="class">.tony</span><span class="class">.girl</span>;</span><br><span class="line"></span><br><span class="line"><span class="tag">import</span> <span class="tag">org</span><span class="class">.springframework</span><span class="class">.data</span><span class="class">.jpa</span><span class="class">.repository</span><span class="class">.JpaRepository</span>;</span><br><span class="line"><span class="tag">import</span> <span class="tag">org</span><span class="class">.springframework</span><span class="class">.data</span><span class="class">.jpa</span><span class="class">.repository</span><span class="class">.support</span><span class="class">.JpaRepositoryFactory</span>;</span><br><span class="line"></span><br><span class="line"><span class="tag">public</span> <span class="tag">interface</span> <span class="tag">PersonRepository</span> <span class="tag">extends</span> <span class="tag">JpaRepository</span>&lt;<span class="tag">Person</span>,<span class="tag">Integer</span>&gt;<span class="rules">&#123;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>编写PersonController，为了方便省去service层，直接调用dao接口。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">package</span> <span class="tag">com</span><span class="class">.tony</span><span class="class">.girl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">import</span> <span class="tag">org</span><span class="class">.springframework</span><span class="class">.beans</span><span class="class">.factory</span><span class="class">.annotation</span><span class="class">.Autowired</span>;</span><br><span class="line"><span class="tag">import</span> <span class="tag">org</span><span class="class">.springframework</span><span class="class">.web</span><span class="class">.bind</span><span class="class">.annotation</span><span class="class">.GetMapping</span>;</span><br><span class="line"><span class="tag">import</span> <span class="tag">org</span><span class="class">.springframework</span><span class="class">.web</span><span class="class">.bind</span><span class="class">.annotation</span><span class="class">.RestController</span>;</span><br><span class="line"></span><br><span class="line"><span class="tag">import</span> <span class="tag">java</span><span class="class">.util</span><span class="class">.List</span>;</span><br><span class="line"></span><br><span class="line"><span class="at_rule">@<span class="keyword">RestController</span></span><br><span class="line">public class PersonController </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="at_rule">@<span class="keyword">Autowired</span></span><br><span class="line">    private PersonRepository personRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="at_rule">@<span class="keyword">GetMapping(value="/persons")</span></span><br><span class="line">    public List&lt;Person&gt; <span class="function">personList</span>()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="tag">return</span> <span class="tag">personRepository</span><span class="class">.findAll</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行起来，看下效果。<a href="http://192.168.56.1:8080/persons" target="_blank" rel="external">http://192.168.56.1:8080/persons</a></p>
<p><img src="/img/springboot入门/datasource.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.</p>
<p> We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. </p>
<p>Most Spring Boot applications need very little Spring configuration.</p>
<p>化繁为简，简化配置。</p>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[APM pinpoint 部署]]></title>
    <link href="http://tonylit.me/2018/04/13/APM%20pinpoint%20%E9%83%A8%E7%BD%B2/"/>
    <id>http://tonylit.me/2018/04/13/APM pinpoint 部署/</id>
    <published>2018-04-13T03:37:27.000Z</published>
    <updated>2018-04-13T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/pinpoint安装部署/监控图片.PNG" alt="Alt text"></p>
<p>pinpoint是一款开源的APM监控工具，对代码零浸入，部署简单。</p>
<a id="more"></a>
<hr>
<h1 id="开源APM方案对比">开源APM方案对比</h1><p>业界开源的APM有很多：</p>
<p><img src="/img/pinpoint安装部署/apm对比.PNG" alt="Alt text"></p>
<hr>
<h1 id="pinpoint架构">pinpoint架构</h1><p>pinpoint架构图<br><img src="/img/pinpoint安装部署/pinpoint-architecture.png" alt="Alt text"></p>
<blockquote>
<p>Pinpoint-Collector：收集各种性能数据</p>
<p>Pinpoint-Agent：和自己运行的应用关联起来的探针</p>
<p>Pinpoint-Web：将收集到的数据显示成WEB网页形式</p>
<p>HBase Storage：收集到的数据存到HBase中</p>
</blockquote>
<p><img src="/img/pinpoint安装部署/链路图.png" alt="Alt text"></p>
<p>应用、中间件、DB之间的调用关系链路清晰。</p>
<p><img src="/img/pinpoint安装部署/堆栈图.png" alt="Alt text"></p>
<p>堆栈信息，时间，异常清楚。</p>
<p><img src="/img/pinpoint安装部署/jvm图.png" alt="Alt text"></p>
<p>jvm、cpu、gc信息简单明了。</p>
<hr>
<h1 id="pinpoint部署">pinpoint部署</h1><p>环境要求：jdk1.7</p>
<h2 id="安装Hbase">安装Hbase</h2><p>Hbase用于存储pinpoint收集的测试数据。</p>
<h3 id="下载Hbase">下载Hbase</h3><p>下载地址：<a href="http://archive.apache.org/dist/hbase/1.1.5/" target="_blank" rel="external">http://archive.apache.org/dist/hbase/1.1.5/</a></p>
<p>解压：tar -xvf hbase-1.1.5-bin.tar.gz</p>
<h3 id="修改Hbase配置">修改Hbase配置</h3><p> /hbase-1.1.5/conf 中，修改hbase-env.sh的JAVA_HOME环境变量位置</p>
<p>export JAVA_HOME=/opt/jdk1.7.0_40</p>
<h3 id="启动Hbase">启动Hbase</h3><p>/hbase-1.1.5/bin 中，./start-hbase.sh</p>
<h3 id="执行pinpoint_Hbase初始化脚本">执行pinpoint Hbase初始化脚本</h3><p>脚本地址：<a href="https://github.com/tonylit/pinpoint/tree/master/hbase/scripts" target="_blank" rel="external">https://github.com/tonylit/pinpoint/tree/master/hbase/scripts</a></p>
<p>执行脚本：./hbase  hbase-create.hbase</p>
<p>登录Hbase web，来查看数据是否初始化成功。<a href="http://192.168.1.27:16010/master-status" target="_blank" rel="external">http://192.168.1.27:16010/master-status</a></p>
<p><img src="/img/pinpoint安装部署/hbase-web.PNG" alt="Alt text"></p>
<hr>
<h2 id="安装pinpoint-collector和pinpoint-web">安装pinpoint-collector和pinpoint-web</h2><p>下载地址：<a href="https://github.com/naver/pinpoint/releases/" target="_blank" rel="external">https://github.com/naver/pinpoint/releases/</a></p>
<p>这边使用1.5.1版本。</p>
<p>将pinpoint-collector-1.5.1.war和pinpoint-web-1.5.1.war放入tomcat（apache-tomcat-7.0.65）的webapps中，启动tomcat即可。</p>
<p>./apache-tomcat-7.0.65/bin/catalina.sh start</p>
<h3 id="检查pinpoint启动成功">检查pinpoint启动成功</h3><p>web访问：<a href="http://192.168.1.27:8080/#/main" target="_blank" rel="external">http://192.168.1.27:8080/#/main</a><br><img src="/img/pinpoint安装部署/pinpoint-web.PNG" alt="Alt text"></p>
<hr>
<h2 id="部署pinpoint_agent">部署pinpoint agent</h2><p>下载地址：<a href="https://github.com/naver/pinpoint/releases/" target="_blank" rel="external">https://github.com/naver/pinpoint/releases/</a><br>这里使用resin容器</p>
<h3 id="一、修改pinpoint-config">一、修改pinpoint.config</h3><p>修改 profiler.collector.ip=192.168.1.27， 改成collector服务器地址</p>
<h3 id="二、停止resin">二、停止resin</h3><p>必须先停止，在进行一下操作（修改配置和jar都会导致resin重启）</p>
<h3 id="三、配置resin容器">三、配置resin容器</h3><p>1)JVM持久代调大，推荐为：-XX:PermSize=128m -XX:MaxPermSize=256m<br>2)在resin.conf配置文件中，在class-loader标签下<br>(注意为web-app-default下prologue)，增加pinpoint插件的路径：<tree-loader path="${resin.home}/pinpoint-agent/plugin"><br>3)jvm启动参数增加 <jvm-arg>-javaagent:${resin.home}/pinpoint-agent/pinpoint-bootstrap.jar</jvm-arg><br>4)jvm启动参数增加应用标识参数${dcName}<em>${ appName } </em>${ IP后两位}，如电信点vo：<jvm-arg>-DappName=tc_vo_1_31 </jvm-arg></tree-loader></p>
<p>5 ）拷贝pinpoint-bootstrap-core.jar 到resin lib目录下面</p>
<h3 id="四、启动Resin">四、启动Resin</h3><p>启动后，应用信息会在pinpoint web上显示<br><img src="/img/pinpoint安装部署/test.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/pinpoint安装部署/监控图片.PNG" alt="Alt text"></p>
<p>pinpoint是一款开源的APM监控工具，对代码零浸入，部署简单。</p>]]>
    
    </summary>
    
      <category term="pinpoint" scheme="http://tonylit.me/tags/pinpoint/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[eclipse git安装配置]]></title>
    <link href="http://tonylit.me/2018/04/11/eclipse%20git%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://tonylit.me/2018/04/11/eclipse git安装配置/</id>
    <published>2018-04-11T03:37:27.000Z</published>
    <updated>2018-04-11T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/eclipse-git/egit.PNG" alt="Alt text"></p>
<p>一直使用eclipse svn插件，最近转git，记录eclipse git插件安装使用方法。</p>
<a id="more"></a>
<hr>
<p>新版本的eclipse 自带了git插件，直接使用即可。</p>
<h1 id="eclipse_git插件安装">eclipse git插件安装</h1><p>点击 Help-&gt;Install New Software-&gt;add。</p>
<p>添加一则Repository，url地址：<a href="http://download.eclipse.org/egit/updates/" target="_blank" rel="external">http://download.eclipse.org/egit/updates/</a></p>
<p><img src="/img/eclipse-git/giturl.PNG" alt="Alt text"></p>
<p>选择插件，点击next-&gt;…-&gt;Finish。</p>
<p><img src="/img/eclipse-git/gitplug.PNG" alt="Alt text"></p>
<p>安装完成，在windows–perferences–Team中有git标签</p>
<p><img src="/img/eclipse-git/gitlist.PNG" alt="Alt text"></p>
<hr>
<h1 id="eclipse_git配置">eclipse git配置</h1><p>打开windows–perferences–Team–Git–Configuration，填写github的账户信息。</p>
<p><img src="/img/eclipse-git/github.PNG" alt="Alt text"></p>
<p>生成SSH2 key：windows – perferences–General–Network Commection–SSH2–key  management–General RSA Key</p>
<p><img src="/img/eclipse-git/ssh2key.PNG" alt="Alt text"></p>
<p>生成后点击右下角的Save Private Key-&gt;Apply-&gt;OK</p>
<p>登录自己的github，在settings中加入SSH Key<br><img src="/img/eclipse-git/githubkey.PNG" alt="Alt text"></p>
<p>自己本地check一下，是否报错</p>
<blockquote>
<p>ssh -T git@github.com</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/eclipse-git/egit.PNG" alt="Alt text"></p>
<p>一直使用eclipse svn插件，最近转git，记录eclipse git插件安装使用方法。</p>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[不要让本该属于你自己的灿烂的一生，却在对别人的“讨好”中被埋葬和虚耗。]]></title>
    <link href="http://tonylit.me/2018/04/10/%E8%AE%A8%E5%A5%BD%E5%9E%8B%E4%BA%BA%E6%A0%BC/"/>
    <id>http://tonylit.me/2018/04/10/讨好型人格/</id>
    <published>2018-04-10T03:37:27.000Z</published>
    <updated>2018-04-10T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/改变讨好型人格/讨好型.PNG" alt="Alt text"></p>
<p>真的是蠢，这两年才开始正视自己性格的缺陷。</p>
<p>最近看了一个视频，才真正认识到我是一个“讨好者”。</p>
<p>我的世界观崩塌了。</p>
<a id="more"></a>
<hr>
<h1 id="生活中的你,_也是讨好型人格吗">生活中的你, 也是讨好型人格吗</h1><iframe height="600" width="100%" src="https://v.qq.com/x/page/i0616yczqty.html" frameborder="0" allowfullscreen></iframe>


<p>今年我给自己定的目标是学会”不要脸“，这些年生活和工作中的很多事情都是让别人开心，牺牲自己，害怕受到不好的评价，太好面子。</p>
<p>这视频我看了3遍，每次看完都想哭。才发现我是一个”讨好者“，我性格中的缺陷还有更多。</p>
<hr>
<h1 id="如何改变讨好型人格？">如何改变讨好型人格？</h1><p>在知乎上看到一篇文章（<a href="https://www.zhihu.com/question/27201150/answer/81100747" target="_blank" rel="external">如何改变讨好型人格？</a>），说到我骨子里面。</p>
<hr>
<p>在我过去二十多年的生命里一直是一个“讨好者”。</p>
<p>我总是活在别人对我的期待中，我总是不停的追逐着别人对我的认可，我总是像个卑微的奴才一样去满足别人的需求。</p>
<p>但就和大多数的“讨好者”一样，我们越是寻求别人的认可，越是讨好别人，就越是会被别人不当一回事，越是会被别人看不起，越是会觉得自己一文不值。</p>
<p>在几年前我就已经意识到，做一个“讨好者”是对自己最大的伤害，也是对自我价值、对自己的生命最大的践踏。</p>
<p>我们没有必要去讨好任何人，我们凭什么要对别人低声下气，我们何必为了别人而活着？我们为什么就不能高傲的理直气壮的做自己？</p>
<p>这些年我一直在寻求从这种讨好别人的模式中走出来的方法，看了很多书，做了很多的尝试，走了不少的弯路，却因为过去习惯性的讨好别人的行为模式和对于现实错误的认知令我挣扎徘徊了许久始终不得要领。</p>
<p>但终于在最近这几个月痛苦焦虑的瓶颈期令我获得了许多的成长，我终于从一个“讨好者”蜕变成了一个自尊自爱，不再为别人低下头颅的人。</p>
<p>可是在网上关于“讨好型人格”的文章非常少，许多对此的阐述都只是流于表面化，或者只不过是变相的心灵鸡汤，无法对有此类问题的人产生实质性的帮助。</p>
<p>因此我花了一周的时间写下这篇文章，如果你也受到过和我同样的困扰，如果你也和我一样发誓不要再对别人低声下气，如果你也希望蜕变成现在的我这样自尊自爱，请你静下心，静下心，不要囫囵吞枣，而是逐字逐句的读完这篇很长的文章，我相信，这一定会对现在的你有所帮助。</p>
<hr>
<h2 id="Ⅰ-讨好型人格的表现">Ⅰ.讨好型人格的表现</h2><p>1.内心敏感脆弱，有同理心，总能敏锐的察觉出或「自以为察觉」出别人内心的想法。很会为别人着想，而总会刻意忽略自己的需求和想法，害怕自己为别人「添麻烦」，在获得了别人的帮助时总会受宠若惊，感觉自己承受不起或不配承受别人的帮助与恩惠。</p>
<p>2.很难拒绝别人，即便知道对方的要求不合理也会习惯性的硬着头皮满足对方的需求。在不得不拒绝了对方的情况下会觉得非常的愧疚与惶恐，即便他完全没有任何必要为此道歉。</p>
<p>3.在与他人的交往中倾向于抬高别人，贬低自己。</p>
<p>4.非常在意别人对自己的看法和评价，因此很少会表达自己的真正需求，总是试图在别人面前营造出善良，平和，大度等「没有攻击性」的好形象。对社交中争吵、尴尬、意见冲突等负面的状态会十分的不安，总是试图营造出和谐的气氛，甚至不惜牺牲自己的利益。</p>
<p>5.在社交中表现得很「神经质」，因总会担心自己会给对方造成什么样的印象、说哪些话合不合适、为对方考虑太多等，使其在社交过程中无法坦然的表现自己，反而会令其与别人的社交总会充满了「不自然」的状态。</p>
<p>6.大多数行为的动机往往是为了迎合别人的期望，获得别人的认可。</p>
<p>7.缺乏底线和原则，非常能够容忍或者说是意识不到别人在客观上对他的“逾规”行为。因为其自身的自我边界模糊，所以往往想当然的也以为别人是像他一样没有边界的。这样就造成一方面他们会因为能够轻易地打破人与人之间的交流界限而很容易和一些人变得较为亲密，另一方面又会因为得不到别人更多的回报和关注而更加痛苦。</p>
<hr>
<h2 id="Ⅱ-讨好型人格的内在心理">Ⅱ.讨好型人格的内在心理</h2><p>1.讨好型人格之所以会像上瘾一样不断地讨好别人，在其潜意识中最大的一个动机其实是：<strong>期望他所讨好的对象能够对他的这种讨好给予相应的回报。</strong></p>
<p>讨好型人格一般不会或者是羞于用语言表达出对别人的需求，他们只会用行动、付出、讨好来“暗示”他所讨好的对象他期望对方能够给予他回报。这是因为“讨好者”内心敏感，总能敏锐的觉察出别人的需求，因此他以为别人也都是像他一样同样能够觉察出他的需求。</p>
<p>但是讨好者必须意识到的一点是：讨好者的同理心与对别人内心的敏感远远超越于常人，所以：一般人在大多数情况下是不会体察到“讨好者”的需求的。</p>
<p>然而大多数讨好者并不能意识到这一点，他们总以为被讨好的对象能够理解到他们的需求，所以在讨好对象没有满足他们的需求的时候，他们只会付出更多的讨好，投入更大的付出，期望讨好对象能够觉察到他们的需求。</p>
<p>随着讨好者对于讨好对象的付出越来越多，他就更难停止讨好，就如同买彩票的心理一样，讨好者投入了太多的“沉没成本”，他们往往“不甘心”令自己所有的付出和讨好都化为幻灭，因此只能陷入「无休止的讨好并期盼着别人永远不会到来的回报」之中。     </p>
<p> 2.<strong>“讨好者”的内心是完全空虚的。</strong>因为他们将全部的关注都投放在外界和别人身上，他们只能通过不停的“乞求”别人关注与赞赏来填补内心的空虚。</p>
<p>因为很多年以来他们从来没有关注自身，他们从来没有为自己而活，所以他们自始至终都没有去追求自己的理想与目标，他们也很少会主动的去做他们真正想做的事，他们自始至终都没有建设自己强大的内心，他们也从来没有主动地去培养内心的充实感，他们没有来自自己内心深处的力量给予自己滋养。</p>
<p>现在请你跳脱出来，认清关于你自己的这样一个事实：你从来不关心【你自己】，你从来不主动的培养【你自己】的内心充实——所以你的内心一直以来都处于一种空虚和匮乏的状态——因此你只能通过追逐外界的认可和关注来【暂时】填补你的空虚。</p>
<p>但是你必须要意识到：<strong>内心的空虚永远都无法被“外界”的力量填补</strong>，我必须再重复一遍，你内心的空虚是永远都无法被“外界”的力量填补的，你一定要真正理解并且接受这一点，然后你才能明白，任何“讨好”他人的行为都是毫无意义的，这不会给你带来任何的帮助和满足。</p>
<p>外界的力量，别人对你的关注那都是你无法控制的，你只能对此产生一定的影响，但这种影响也是要建立在你自尊自爱，建立在你内心充实，能自给自足，不再向外寻求的基础上。</p>
<p>所以对于现在的你而言，你需要认识到：在你自己的世界中最重要的永远是你自己，你必须为了你自己而活，你必须为自己完全负责，没有任何外界和别人的力量能够给予你帮助，只有你自己找到你想做的事，只有你努力改善你的生活，只有你令自己成为一个更好的人，你的内心才不会空虚，你才能将这种空虚「整体的」转化为充实和富足，并给予你安全感和滋养。</p>
<p><strong>3.通过为别人负责来逃避对自己的责任。</strong></p>
<p>每个人的生活中都会遇到许多的问题与痛苦，区别只在于那些心智成熟的人能够坦然的面对并接受这些问题和痛苦。</p>
<p>而讨好者却因其脆弱和敏感的内心而往往无法承受自身的痛苦，他们也不愿意付出行动去改善自己的生活。</p>
<p>他们的潜意识里非常清楚的知道自己是脆弱的、懒惰的，但是为了逃避这种潜意识里对自我的负面评价，他们会通过讨好别人、通过帮助别人解决问题，来证明给它自己：“看，其实我是有解决问题的能力的。”</p>
<p>所以当他们讨好别人、为别人付出的时候，其实在他们的内心深处会有一种愉悦感和自我肯定，他们会感觉到自己是有价值的，他们也能以此为借口：“我能够帮助别人解决问题，所以我当然也有能力解决自己的问题。我只是不想去解决我的问题而已，那并不代表我没有解决我自身问题的能力。”</p>
<p>但是你得接受现实：即便是你和你的讨好对象都遇到了同样的问题，你能够帮他解决这个问题，那并不代表你也能为自己也解决这个问题。你心里其实很清楚，当问题发生在别人身上时你是很轻松、毫无压力的。而问题发生在你自己身上时你会很紧张，你会承受很大的压力。</p>
<p>所以不要欺骗自己，现在的你的确是很脆弱，现在的你的确是没有面对自己的问题的勇气，现在的你的确是没有解决你自身问题的能力的。</p>
<p>我不是在蛊惑你否定自己，而是对于现在的你而言认识到并且接受现实才是最重要的，你不用因为需要面对自己身上那些负面的因素而焦虑，事实上如果你能接受这些负面因素，你反而能够因此变得更强大。</p>
<p>如果你无法接受自己的真实状况，那么你接下来还是只会逃避，你还是会不能面对和解决自己的问题。</p>
<p>4.“讨好者”倾向于抬高别人，贬低自己，使自己处于“弱势”的地位，这实际上是因为<strong>当他们处于弱势的时候反而能够给予他们安全感。</strong></p>
<p>因为受到成长环境和原生家庭的影响，讨好者自小就害怕冲突，害怕和别人平等的交流，他们可能从小就会被父母否定、批判、甚至是打骂。</p>
<p>一旦他们表现出真实的自己，必然会有一部分不符合他们父母的期望，为了不被父母或抚养者否定、批判、打骂，他们只能表现出顺从，听话，没有攻击性。通过伪装自己、通过摆出低姿态来迎合父母或抚养者的期望，从而避免被否定或打骂的危险。</p>
<p>这种认知模式会根深蒂固的贯彻在“讨好者”的成长过程中。他们总是会认为别人是无法接受真实的他自己的，一旦他们说出自己的想法，表现出自己的态度，就会被别人否定和拒绝，一旦他们与别人发生冲突那么童年时被父母否定或打骂的痛苦就会再次重现。</p>
<p>所以当他们与人交往时，为了避免冲突和被别人否定，他们会在一开始就完全放弃自己的主动权，他们会完全按照别人说的去做，他们会尽力的满足别人的需求和期望，他们一直小心翼翼的维护着对方的感受生怕对方稍有不顺便会否定或离开自己。</p>
<p>但是作为一个成年人你必须意识到：你已经拥有了养活自己的能力，你不再是像小时候那样完全要依靠父母、要通过乞求父母给予你的关爱才能生存，你已经不再需要从别人那里来获得关爱了。</p>
<p>而且，你必须得接受这一点：在成年人的社交关系中，对方会如何看待你、如何对待你，本质上只是取决于你个人的价值，你对别人的任何讨好行为不仅不会令你和对方的关系变得更好，反而会降低你在对方心目中的价值。</p>
<p>社交关系绝不仅仅是你对别人好，别人也会对你好，你要记住，你对别人的付出能否获得别人的回报，最根本的是取决于你是谁，你是否有足够的价值。</p>
<p>你是一个百万富翁，即便是随手将一个小孩从地上扶起来，小孩的父母都会对你感激涕零；你是一个乞丐，你天天跪着给这小孩的父母磕头，给他们掏粪，给他们打扫卫生，他们也不会感激你。因为他们认为你的价值太低，没有必要回报你。</p>
<p>所以现在你是否明白了？</p>
<p>你根本完全不需要在意别人会如何看待你，别人会如何对待你，你也完全没有任何必要讨好别人，你需要做的只是关注你自身，努力的去提升你自己的“价值”。</p>
<p>你拥有了足够的价值，别人自然会尊重你，或者说在这个时候你为别人的付出才能得到别人的重视，你希望别人满足你的需求才能得到满足；你没有足够的价值，再多的讨好不仅没用，反而会令别人在心底贬低你。</p>
<hr>
<h2 id="Ⅲ-讨好型人格的形成原因">Ⅲ.讨好型人格的形成原因</h2><p>讨好型人格形成的最根本原因在于：<strong>他们在原生家庭中没有得到过父母“无条件的爱”。</strong></p>
<p>父母对他们的爱都是有条件的，只有当他们满足父母的需求、表现出父母期望的样子时才能得到父母的关爱和赞赏，他们才能感觉到自己是安全的，是不会被抛弃的。</p>
<p>当他们违背父母的需求和期望的时候，就会被父母大肆的否定，批判，甚至是打骂。在这个时候因为对于幼儿而言父母无疑是他们心目中最大的权威，并且他们的生存与安全感是完全来自于父母，所以他们会对此形成很大的心理阴影，为了逃避或不再受到这种被父母否定或打骂的痛苦，他们不得不隐藏起自己的真实需求和感受。</p>
<p>在他们既没有迎合父母的期望也没有违背父母期望的时候，他们也很少能得到父母的关注和爱。</p>
<p>一个幼儿是很难独自面对和承受自己的孤独感的，这个时候他就会刻意的想去做些什么来迎合父母的期望和需求，从而能够获得父母的关注和赞赏。</p>
<p>久而久之，这就形成了他的一种习惯，甚至他会逐渐的把父母的需求“内化”为自己的需求，因为在他的认知里：满足了父母的需求就等于满足了自己的需求。</p>
<p>而这也成为了他对今后所有亲密关系的认知蓝本：我是没有价值的，我是不值得被爱的，真实的我无法获得别人的认可和关注。只有当我不断地满足别人的需求和期望的时候，我才能获得别人的关注和爱。</p>
<p>第二个原因在于，<strong>在“讨好者”的认知中，对于获得别人的认可与赞赏的途径，只有“讨好”别人这一个方式。</strong></p>
<p>“讨好者”的内在与心态太过的无力和空虚，他们从一开始就直接忽略了他们其实可以通过努力工作，做出成就，提升自己的能力等这些方式来得到别人的欣赏和认可，从这个层面上来讲“讨好者”是很懒惰且不求上进的，他们就和那些幻想着通过买彩票发大财然后衣食无忧的人一样。</p>
<p>在他们看来，“讨好”别人是获得别人认可的最容易的途径，你只需要多说几句好话，装出善良无害的样子别人就会认同你了，别人就会夸奖你了。</p>
<p>但是像这种廉价的认同与赞赏不过是用来填补他内心一时的空虚和不安全感，因为廉价，所以来的容易，去的也快。醉心于追逐这种廉价的认同和赞赏，只会令“讨好者”越来越依赖和沉迷于那内心的空虚得到暂时满足的假象之中而无法自拔。</p>
<p>第三个原因是：<strong>“讨好行为”已经成为了讨好者的一种习惯，成为了他人格模式的一种。“讨好者”——已经成为了他自我认知的一部分，成为了他潜意识里对自己的定义。</strong></p>
<p>这一点其实是大多数人的心理或认知问题很难被改变的最深层次的原因。</p>
<p>因为在我们的意识层面，是我们的行为习惯，我们的思维习惯，我们的认知习惯等构建成了我们的人格模式，我们的人个模式一旦形成就会变得十分的稳固，因为人个模式将我们的各种习惯和行为等等全部联系并且杂糅在了一起，在我们的认知层面中，我们即便只是想改变人格模式中一个非常小的点，那感觉起来却是我们要将自己全盘否定，我们要将自己的整个人格模式全部改变。</p>
<p>所以我们时常会听到：我懒就是因为我懒啊，如果我不懒了那还是我野生范冰冰么？；我爱吃甜食就是因为我爱吃甜食啊，不吃甜食的坂田银时还有资格叫坂田银时么！；我特么就是喜欢强X郭德纲，一个不强X郭德纲的于小谦活在这世上还有什么意义？</p>
<p>这一类的人不愿意改变自己的缺点其实倒也真不是把“改掉了这一点我就不是我了”当借口，而是在他们的认知中的的确确就是这个样子的，这些缺点或行为是他们自我认知的一部分，改掉了这一部分的确会给他们带来仿佛“整个自我都被否定”或是“我就要不存在了”这样的恐慌。</p>
<p>但是我们要意识到，这种自我认知只是我们意识层面对自己的一个固化的定义，实际上并不存在一个固定的“自我”，也不存在你改变了身上的某个习惯某个点你就不是你了这回事。</p>
<p>固化的自我认知只是为了维持我们的情绪，思维，意识等保持在一个稳固的、不会轻易崩溃的状态中，意识到了这一点你就能明白，坚持固化的自我认知实际上是对自我的限制，同时我们也完全可以改变我们身上的任何方面，这并不会影响我们“是谁”。</p>
<hr>
<h2 id="Ⅳ-如何改变讨好型人格">Ⅳ.如何改变讨好型人格</h2><p>人的自我认知是在「客观与现实」因素的前提下对自我的「主观」评价。</p>
<p>在这里有两个方面，一个是客观与现实因素，一个是主观评价。</p>
<p>当我们意识到或在思考如何改变自己的人格或自我认知的时候，因为往往我们是处于和别人的交谈或是在读文章的情境下，因此我们会习惯性的、或是因为懒惰而只集中在「主观评价」的这个方面，或者可以说当你试图通过看书、找别人解答的时候，你所期望的就是别人能给出你几句令你恍然大悟的话然后你就改变了、你只要在思维层面有所改变你的问题就能解决了、你倾向于忽略现实中实际的行动与付出，你倾向于只靠“想”与“思考”就能解决你的问题。</p>
<p>你必须要意识到：人的自我认知是建立在「客观与现实」因素的前提之前，你在客观与现实层面的价值才是决定你自我认知的主要因素。</p>
<p>不仅仅局限于讨好型人格的问题，我们人类的大多数心理或精神层面的问题其解决方法都是在你的现实中通过行动与付出来改变你的【现实情况】才能解决。</p>
<p>你去看心理医生的时候也并不仅仅只是通过和医生聊天，医生给你讲了什么道理令你“想通了”你的心理问题就能解决了；而是医生能做的是先改变你对现实的理解与认知的偏差，然后令你在现实生活中付出行动去印证你的理解与认知，然后你才能真正的做出改变。</p>
<p>但凡涉及到人的“改变”这个层面的问题，你得清楚，那是真的实实在在的「改变」，你现在的行为模式真的会变得和以往不一样，你的确需要去做一些你以前不会去做的事，你现在的生活状态也必须要向另外一种状态转变。</p>
<p>不要再幻想仅凭着看看书，做做思考你的问题就能解决了，我反复向你强调这一点是为了令你明白，唯有「行动」才是令你能够有所改变的唯一方法，意识层面的理解，思维层面的懂了，那并没有多大的意义。</p>
<p>明白了吗？所以，请从书籍和思考的自己好像可以变得很好的幻想中走出来，不要再自欺欺人。意识到这一点，是你想改变讨好型人格的第一个前提。</p>
<p>第二个你要意识到的前提是，<strong>改变需要时间</strong>。</p>
<p>我知道你听过很多“想做成某某事需要时间需要耐心需要坚持”等之类的说法，我也很清楚这种说法在你的潜意识里会被你下意识的忽略。</p>
<p>但我必须向你指出这个事实：你不会在看完这篇文章后马上就能有所改变，你也不会在按我说的方法尝试了几次之后就能马上改变，即便你现在感觉自己懂了感觉自己找到了方法那也是需要在很长一段时间的行动和努力后你才能真的有所改变。</p>
<p>并且，这个转变所需要的时间绝对比你所想象中需要的时间要长得多。也许是一年，也许是两年，也许甚至是三年五年，但是它永远没有你想象的转变的那么快，也绝对不会如你幻想的转变的那么轻松。</p>
<p>我知道习惯了逃避自己的责任，习惯了用幻想来“解决”问题的你总是会把问题想的太过轻松，所以你现在死了这条心吧，一旦你真的决定改变自己，这个改变的过程会是充满了痛苦，煎熬，和焦虑的。</p>
<p>你要一点一点的否定掉过去的自己，你要硬生生的逼迫自己改变过去的行为习惯，你要承受在得不到别人的关注的状态下独自去面对你内心的空虚，这个过程充满了艰苦，它绝对不是你所想象的那样美好。</p>
<p>还没有结束，我很清楚因为我说的是「改变需要时间」，所以你那狡猾的思维会在潜意识里把这解读为：“只要熬过一段漫长的时间改变就会自动降临到我的身上了。</p>
<p><strong>”并、不、会。</strong></p>
<p>你能否有所改变和你熬过多长的时间没有丝毫的关系，时间不会自动帮你把问题解决，你能否改变只取决于你为改变付出了多少，你为改变做了哪些努力。你习惯了只付出30分的努力然后幻想能够得到100分的回报，但这绝对不会实现，你谁都糊弄不了。</p>
<p>关于你能否有所改变这件事唯有你自己要付完全的责任，如果你不为此付出努力，那么无论你熬过多么漫长的时间，那都不会有任何作用。 </p>
<p>现在你已经了解了这两个前提，接下来我们讨论改变讨好型人格的三个方法。</p>
<p><strong>1.停止讨好任何人。</strong></p>
<p>从现在起，不再讨好你身边的任何一个人。</p>
<p>没错，是任何一个人。我知道现在的你已经在心中不住的盘算并给自己找借口：我还指望老板给我发工资，我不能停止讨好他；我很爱我的女朋友，万一我不再讨好她之后她离开我了怎么办？我现在只有XX这一个朋友，我不讨好他了岂不是会变得非常孤独？</p>
<p>首先，你会产生这样的想法是因为你对于“不讨好别人”的定义理解是错误的，你以为不讨好别人就是完全走向讨好的反面，不讨好别人就是对别人冷若冰霜，就是对别人没有耐心，就是不再帮助别人。</p>
<p>NO，不讨好别人的意思是说你要用一种正常的方式去和别人交往。该笑还是笑，该帮忙还是帮忙，只不过是你该表达愤怒的时候就表达愤怒，该拒绝的时候就拒绝。你只是不再像以往那样再摆出低姿态讨好别人了而已。</p>
<p>但是因为我尝试过许多次，所以我也很清楚，如果让你向着正常的方向去努力的话，这其实并不会起到任何作用，因为当你试图“正常”的和别人交往的时候你总会不由自主的又落回过去的讨好模式中。</p>
<p>因此，在接下来的这段时间里，你不妨带着清醒的觉知尝试着进入到讨好的反面，摆出高姿态，冰冷，拒绝，强硬，不妥协，完全以自我为中心，不在乎任何人的看法和感受。</p>
<p>我知道这让你听起来觉得很疯狂，但相信我，我的确就是用这种方法逐渐从讨好者的状态中摆脱出来的。</p>
<p>因为当你很强硬、当你只以自我为中心外完全不在意别人。当你摆出高姿态的时候，你会发现这样的你反而也能得到别人的关注和认同。</p>
<p>在这个时候当你回过头去再看以前的自己的时候，你才能真正理解：你完全不需要讨好任何人。你才能逐渐从讨好模式中走出来。</p>
<p>我必须再废一遍口舌说服你，一定要做这个尝试。这个尝试真的有可能会改变你的人生。</p>
<p>不要担心你会因为这次尝试而失去很多，事实上这并不会对你的生活产生多大的影响。</p>
<p>退一万步讲，即便是你因此丢了工作，没了女友，没了朋友，那也都无所谓。因为这个尝试带给你的回报比你现在拥有的这点东西要丰厚的多。而且，当你是一个“讨好者”时你所建立的一切人际关系百分之九十五以上都是无效的，因为你是一个讨好者，别人都不会把你当回事，这样的人际关系根本不会在未来带给你什么实质性的利益或帮助。</p>
<p>你首先得拥有放弃无用的东西的勇气，你才能获得追求自己想要的东西的果断和能力。</p>
<p><strong>2.培养内心的充实感与富足感。</strong></p>
<p>讨好者一切讨好行为的根本原因就是在于内心的空虚与匮乏，他们无法自给自足，所以不得不不停地从外界寻求关注和赞赏来填补。</p>
<p>如果我们能够拥有一颗强大的，温暖的内心，我们能够时时刻刻获得来自自己内心深处的力量的滋养和支持，我们就不会在外部世界中迷惘，我们就不会被别人的评价和看法影响，我们就能坦然的接受无论是外界的赞美还是贬低，我们就不会在任何人面前低下头颅，因为那毫无必要。</p>
<p>我们拥有来自自己内心的力量，所以完全不会害怕孤独，也不会陷入迷惘，我们不会在任何人面前紧张失措，我们只会坚定而果断的做自己。</p>
<p>以上我所描述的这些状态绝不是我的幻想或是给你灌输的心灵鸡汤，而是在生活中的的确确就存在这样的人，真的有人的内心能够强大到这种程度。</p>
<p>那么如何培养内心的富足感和充实感？在之前的一篇文章中我就提到过，我并有什么具体的方法或步骤可以教给你，我也不知道任何能够让「你」的内心变得充实的技巧，因为这完全是你自己的责任，你只能凭借自己去摸索，也没有任何其他人的经验能够供你借鉴。因为在关乎心智成熟的道路上，任何试图走捷径的行为都只会令你在未来付出更大的代价。</p>
<p>你必须自己去面对这迷惘的，没有任何方向的前路。</p>
<p>但是我唯一能够向你保证的是：一旦你决定开始有意识的追寻内心的力量，当你做下这个决定这一刻起，你内心深处的力量就已经被唤醒了。</p>
<p>只要你走上这条道路，那么接下来你不管你是向着哪个方向迈出的每一步，都是在令你的内心越来越充实。</p>
<p><strong>3.培养一件能带给你成就感的爱好/努力的做好你的工作/发展你的兴趣/学一个新技能等。</strong></p>
<p>虽然理论上来讲我们只要拥有了强大的内心力量就不会再去讨好别人了，但是在你还没到达那个状态之前，你的内心还会一直是空虚和匮乏的。</p>
<p>为了防止你因为忍受不了这种空虚而又忍不住的会想讨好别人，所以能够从一个你「可以控制」的事物中获得力量是令你度过这段过渡期的一个比较理智的选择。</p>
<p>无论是一个爱好，兴趣，学一个技能，还是做好工作等等，这些都能够带给你成就感，自我满足感，自我确认感，或是别人的关注与赞美等。</p>
<p>但是这时候别人对你的关注和赞美却不是你通过“讨好”得来的，而是因为你为你的工作，爱好，技能等付出了努力，你在这些地方证明了你的价值与能力，所以别人自然而然的给予你关注和赞美。</p>
<p>我所选择的这个过渡期的屏障就是写作，当我很多年前苦苦追求和讨好但却对我不屑一顾的女生有一天兴奋的发给我一篇文章说：“hi，这篇文章是你写的吗？卧槽真是太厉害了！”的时候，我才真正的意识到：我的确是根本没有任何必要去“讨好”别人。</p>
<p>SO，现在你想到自己要发展什么爱好，培养什么兴趣了吗？</p>
<p>关于我所说的一切，只希望你能够真正的理解并愿意付出行动，希望你不要再追逐别人的认同，希望你停止对自我的贬低，希望你学会更多的关注于自身，希望你学会真正的爱自己。</p>
<p><strong>不要让本该属于你自己的灿烂的一生，却在对别人的“讨好”中被埋葬和虚耗。</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/改变讨好型人格/讨好型.PNG" alt="Alt text"></p>
<p>真的是蠢，这两年才开始正视自己性格的缺陷。</p>
<p>最近看了一个视频，才真正认识到我是一个“讨好者”。</p>
<p>我的世界观崩塌了。</p>]]>
    
    </summary>
    
      <category term="life" scheme="http://tonylit.me/tags/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ngrinder任务执行源码解析]]></title>
    <link href="http://tonylit.me/2018/03/11/ngrinder%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://tonylit.me/2018/03/11/ngrinder任务执行源码解析/</id>
    <published>2018-03-11T03:37:27.000Z</published>
    <updated>2018-03-11T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/ngrinder任务执行源码解析/ngrinder用户图.PNG" alt="Alt text"></p>
<p>读了ngrinder任务执行的源码，在此做一些记录。<br>ngrinder版本：3.4.1</p>
<a id="more"></a>
<hr>
<h1 id="源码下载">源码下载</h1><p><a href="https://github.com/naver/ngrinder" target="_blank" rel="external">https://github.com/naver/ngrinder</a></p>
<p><img src="/img/ngrinder任务执行源码解析/java-project.PNG" alt="Alt text"></p>
<hr>
<h1 id="PerfTestRunnable任务执行">PerfTestRunnable任务执行</h1><p>总架构图上对整个系统的流转描述的很清楚了，结合架构图读源码，会容易很多。<br><img src="/img/ngrinder任务执行源码解析/architecture.png" alt="Alt text"></p>
<hr>
<h2 id="入口PerfTestRunnable类init()方法">入口PerfTestRunnable类init()方法</h2><p>ngrinder-controller子项目下：</p>
<p>org.ngrinder.perftest.service.PerfTestRunnable</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@PostConstruct</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// Clean up db first.</span></span><br><span class="line">		doFinish(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">this</span>.startRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			<span class="annotation">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				startPeriodically();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		scheduledTaskService.addFixedDelayedScheduledTask(startRunnable, PERFTEST_RUN_FREQUENCY_MILLISECONDS);</span><br><span class="line">		<span class="keyword">this</span>.finishRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			<span class="annotation">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				finishPeriodically();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		scheduledTaskService.addFixedDelayedScheduledTask(finishRunnable, PERFTEST_RUN_FREQUENCY_MILLISECONDS);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>init()方法在项目启动加载Servlet后执行。</p>
<p>初始化数据库(默认是h2，db配置在/root/.ngrinder/database.conf)。</p>
<p>俩定时任务startPeriodically()，finishPeriodically()，1s一次。核心逻辑在startPeriodically()中。</p>
<hr>
<h2 id="startPeriodically()开始执行任务">startPeriodically()开始执行任务</h2><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">	 * <span class="type">Scheduled</span> <span class="keyword">method</span> <span class="keyword">for</span> test execution. <span class="type">This</span> <span class="keyword">method</span> dispatches the test</span><br><span class="line">	 * candidates <span class="keyword">and</span> run one <span class="keyword">of</span> them. <span class="type">This</span> <span class="keyword">method</span> <span class="keyword">is</span> responsible until a test</span><br><span class="line">	 * <span class="keyword">is</span> executed.</span><br><span class="line">	 */</span><br><span class="line">	public <span class="type">void</span> startPeriodically() &#123;</span><br><span class="line">		doStart();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span> doStart() &#123;</span><br><span class="line">		<span class="keyword">if</span> (config.hasNoMoreTestLock()) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		// <span class="type">Block</span> <span class="keyword">if</span> the count <span class="keyword">of</span> testing exceed the limit</span><br><span class="line">		<span class="keyword">if</span> (!canExecuteMore()) &#123;</span><br><span class="line">			// <span class="type">LOG</span> <span class="type">MORE</span></span><br><span class="line">			<span class="type">List</span>&lt;<span class="type">PerfTest</span>&gt; currentlyRunningTests = perfTestService.getCurrentlyRunningTest();</span><br><span class="line">			<span class="type">LOG</span>.debug(<span class="string">"Currently running test is &#123;&#125;. No more tests can not run."</span>, currentlyRunningTests.size());</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		// <span class="type">Find</span> <span class="keyword">out</span> next ready perftest</span><br><span class="line">		<span class="type">PerfTest</span> runCandidate = getRunnablePerfTest();</span><br><span class="line">		<span class="keyword">if</span> (runCandidate == null) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!isScheduledNow(runCandidate)) &#123;</span><br><span class="line">			// this test project <span class="keyword">is</span> reserved,but it isn't yet going to run test</span><br><span class="line">			// right now.</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!hasEnoughFreeAgents(runCandidate)) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		doTest(runCandidate);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>开始会判断是否超过任务上限，默认10个，可在system.conf中设置。</p>
<p>找到下个准备执行（状态为READY）的任务。</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public PerfTest getNextRunnablePerfTestPerfTestCandidate<span class="params">()</span> &#123;</span><br><span class="line">	List&lt;PerfTest&gt; readyPerfTests = getPerfTestRepository<span class="params">()</span>.findAllByStatusAndRegionOrderByScheduledTimeAsc<span class="params">(</span><br><span class="line">			Status.READY, getConfig<span class="params">()</span>.getRegion<span class="params">()</span>)</span>;</span><br><span class="line">	List&lt;PerfTest&gt; usersFirstPerfTests = filterCurrentlyRunningTestUsersTest<span class="params">(readyPerfTests)</span>;</span><br><span class="line">	return usersFirstPerfTests.isEmpty<span class="params">()</span> ? null : readyPerfTests.get<span class="params">(<span class="number">0</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>判断有没有符合权限的空闲的agent。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">boolean</span> hasEnoughFreeAgents(PerfTest test) &#123;</span><br><span class="line">	<span class="keyword">int</span> <span class="keyword">size</span> = agentManager.getAllFreeApprovedAgentsForUser(test.getCreatedUser()).<span class="keyword">size</span>();</span><br><span class="line">	<span class="keyword">if</span> (test.getAgentCount() != <span class="keyword">null</span> &amp;&amp; test.getAgentCount() &gt; <span class="keyword">size</span>) &#123;</span><br><span class="line">		perfTestService.markProgress(test, <span class="string">"The test is tried to execute but there is not enough free agents."</span></span><br><span class="line">				+ <span class="string">"\n- Current free agent count : "</span> + <span class="keyword">size</span> + <span class="string">"  / Requested : "</span> + test.getAgentCount() + <span class="string">"\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="doTest()开始测试任务">doTest()开始测试任务</h2><p>真正的测试任务执行从该方法开始，之前可以称为准备阶段。</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">	 * Run the given test.</span><br><span class="line">	 * &lt;p/&gt;</span><br><span class="line">	 * If fails, it marks STOP_BY_ERROR in the given &#123;@link PerfTest&#125; status</span><br><span class="line">	 *</span><br><span class="line">	 * @param perfTest perftest instance;</span><br><span class="line">	 */</span></span><br><span class="line">	public void doTest<span class="params">(final PerfTest perfTest)</span> &#123;</span><br><span class="line">		SingleConsole singleConsole = null;</span><br><span class="line">		try &#123;</span><br><span class="line">			singleConsole = startConsole<span class="params">(perfTest)</span>;</span><br><span class="line">			ScriptHandler prepareDistribution = perfTestService.prepareDistribution<span class="params">(perfTest)</span>;</span><br><span class="line">			GrinderProperties grinderProperties = perfTestService.getGrinderProperties<span class="params">(perfTest, prepareDistribution)</span>;</span><br><span class="line">			startAgentsOn<span class="params">(perfTest, grinderProperties, checkCancellation<span class="params">(singleConsole)</span>)</span>;</span><br><span class="line">			distributeFileOn<span class="params">(perfTest, checkCancellation<span class="params">(singleConsole)</span>)</span>;</span><br><span class="line"></span><br><span class="line">			singleConsole.setReportPath<span class="params">(perfTestService.getReportFileDirectory<span class="params">(perfTest)</span>)</span>;</span><br><span class="line">			runTestOn<span class="params">(perfTest, grinderProperties, checkCancellation<span class="params">(singleConsole)</span>)</span>;</span><br><span class="line">		&#125; catch <span class="params">(SingleConsoleCancellationException ex)</span> &#123;</span><br><span class="line">			<span class="comment">// In case of error, mark the occurs error on perftest.</span></span><br><span class="line">			doCancel<span class="params">(perfTest, singleConsole)</span>;</span><br><span class="line">			notifyFinish<span class="params">(perfTest, StopReason.CANCEL_BY_USER)</span>;</span><br><span class="line">		&#125; catch <span class="params">(Exception e)</span> &#123;</span><br><span class="line">			<span class="comment">// In case of error, mark the occurs error on perftest.</span></span><br><span class="line">			LOG.error<span class="params">(<span class="string">"Error while executing test: &#123;&#125; - &#123;&#125; "</span>, perfTest.getTestIdentifier<span class="params">()</span>, e.getMessage<span class="params">()</span>)</span>;</span><br><span class="line">			LOG.debug<span class="params">(<span class="string">"Stack Trace is : "</span>, e)</span>;</span><br><span class="line">			doTerminate<span class="params">(perfTest, singleConsole)</span>;</span><br><span class="line">			notifyFinish<span class="params">(perfTest, StopReason.ERROR_WHILE_PREPARE)</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="准备控制台，通过单例模式实现。">准备控制台，通过单例模式实现。</h3><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">	 * Get an available console.</span><br><span class="line">	 * &lt;p/&gt;</span><br><span class="line">	 * If there is no available console, it waits until available console is returned back. If the specific time is</span><br><span class="line">	 * elapsed, the timeout error occurs and throws &#123;@link org.ngrinder.common.exception.NGrinderRuntimeException&#125; . The</span><br><span class="line">	 * timeout can be adjusted by overriding &#123;@link #getMaxWaitingMilliSecond()&#125;.</span><br><span class="line">	 *</span><br><span class="line">	 * @param baseConsoleProperties base &#123;@link net.grinder.console.model.ConsoleProperties&#125;</span><br><span class="line">	 * @return console</span><br><span class="line">	 */</span></span><br><span class="line">	public SingleConsole getAvailableConsole<span class="params">(ConsoleProperties baseConsoleProperties)</span> &#123;</span><br><span class="line">		ConsoleEntry consoleEntry = null;</span><br><span class="line">		try &#123;</span><br><span class="line">			consoleEntry = consoleQueue.poll<span class="params">(getMaxWaitingMilliSecond<span class="params">()</span>, TimeUnit.MILLISECONDS)</span>;</span><br><span class="line">			<span class="keyword">if</span> <span class="params">(consoleEntry == null)</span> &#123;</span><br><span class="line">				throw processException<span class="params">(<span class="string">"no console entry available"</span>)</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			synchronized <span class="params">(this)</span> &#123;</span><br><span class="line">				consoleEntry.releaseSocket<span class="params">()</span>;</span><br><span class="line">				<span class="comment">// FIXME : It might fail here</span></span><br><span class="line">				ConsoleCommunicationSetting consoleCommunicationSetting = ConsoleCommunicationSetting.asDefault<span class="params">()</span>;</span><br><span class="line">				<span class="keyword">if</span> <span class="params">(config.getInactiveClientTimeOut<span class="params">()</span> &gt; <span class="number">0</span>)</span> &#123;</span><br><span class="line">					consoleCommunicationSetting.setInactiveClientTimeOut<span class="params">(config.getInactiveClientTimeOut<span class="params">()</span>)</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				SingleConsole singleConsole = new SingleConsole<span class="params">(config.getCurrentIP<span class="params">()</span>, consoleEntry.getPort<span class="params">()</span>,</span><br><span class="line">						consoleCommunicationSetting, baseConsoleProperties)</span>;</span><br><span class="line">				getConsoleInUse<span class="params">()</span>.add<span class="params">(singleConsole)</span>;</span><br><span class="line">				singleConsole.setCsvSeparator<span class="params">(config.getCsvSeparator<span class="params">()</span>)</span>;</span><br><span class="line">				return singleConsole;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; catch <span class="params">(Exception e)</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> <span class="params">(consoleEntry != null)</span> &#123;</span><br><span class="line">				consoleQueue.add<span class="params">(consoleEntry)</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			throw processException<span class="params">(<span class="string">"no console entry available"</span>)</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>consoleQueue存储在consoleQueue中，通过ConsoleManager类进行设置，默认队列最大值10,可在system.conf中设置。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">	 * Prepare console queue.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="annotation">@PostConstruct</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> consoleSize = getConsoleSize();</span><br><span class="line">		consoleQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;ConsoleEntry&gt;(consoleSize);</span><br><span class="line">		<span class="keyword">final</span> String currentIP = config.getCurrentIP();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> each : getAvailablePorts(currentIP, consoleSize, getConsolePortBase(), MAX_PORT_NUMBER)) &#123;</span><br><span class="line">			<span class="keyword">final</span> ConsoleEntry e = <span class="keyword">new</span> ConsoleEntry(config.getCurrentIP(), each);</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				e.occupySocket();</span><br><span class="line">				consoleQueue.add(e);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">				LOG.<span class="keyword">error</span>(<span class="string">"socket binding to &#123;&#125;:&#123;&#125; is failed"</span>, config.getCurrentIP(), each);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="准备脚本文件和agent，将脚本传送至agent">准备脚本文件和agent，将脚本传送至agent</h3><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//准备脚本</span></span><br><span class="line">ScriptHandler prepareDistribution = perfTestService.prepareDistribution<span class="params">(perfTest)</span>;</span><br><span class="line"><span class="comment">//封装脚本</span></span><br><span class="line">GrinderProperties grinderProperties = perfTestService.getGrinderProperties<span class="params">(perfTest, prepareDistribution)</span>;</span><br><span class="line"><span class="comment">//启动agent</span></span><br><span class="line">startAgentsOn<span class="params">(perfTest, grinderProperties, checkCancellation<span class="params">(singleConsole)</span>)</span>;</span><br><span class="line"><span class="comment">//将脚本传送至agent</span></span><br><span class="line">distributeFileOn<span class="params">(perfTest, checkCancellation<span class="params">(singleConsole)</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>编写的脚本会保存在服务器上，默认路径/root/.ngrinder/perftest/。</p>
<hr>
<h3 id="runTestOn_运行测试">runTestOn 运行测试</h3><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">	 * Run a given &#123;@link PerfTest&#125; with the given &#123;@link GrinderProperties&#125; and</span><br><span class="line">	 * the &#123;@link SingleConsole&#125; .</span><br><span class="line">	 *</span><br><span class="line">	 * @param perfTest          perftest</span><br><span class="line">	 * @param grinderProperties grinder properties</span><br><span class="line">	 * @param singleConsole     console to be used.</span><br><span class="line">	 */</span></span><br><span class="line">	void runTestOn<span class="params">(final PerfTest perfTest, GrinderProperties grinderProperties, final SingleConsole singleConsole)</span> &#123;</span><br><span class="line">		<span class="comment">// start target monitor</span></span><br><span class="line">		<span class="keyword">for</span> <span class="params">(OnTestLifeCycleRunnable run : pluginManager.getEnabledModulesByClass<span class="params">(OnTestLifeCycleRunnable.class)</span>)</span> &#123;</span><br><span class="line">			run.start<span class="params">(perfTest, perfTestService, config.getVersion<span class="params">()</span>)</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Run test</span></span><br><span class="line">		perfTestService.markStatusAndProgress<span class="params">(perfTest, START_TESTING, <span class="string">"The test is ready to start."</span>)</span>;</span><br><span class="line">		<span class="comment">// Add listener to detect abnormal condition and mark the perfTest</span></span><br><span class="line">		singleConsole.addListener<span class="params">(new ConsoleShutdownListener<span class="params">()</span> &#123;</span><br><span class="line">			@Override</span><br><span class="line">			public void readyToStop<span class="params">(StopReason stopReason)</span> &#123;</span><br><span class="line">				perfTestService.markAbnormalTermination<span class="params">(perfTest, stopReason)</span>;</span><br><span class="line">				LOG.error<span class="params">(<span class="string">"Abnormal test &#123;&#125; due to &#123;&#125;"</span>, perfTest.getId<span class="params">()</span>, stopReason.name<span class="params">()</span>)</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span>;</span><br><span class="line">		long startTime = singleConsole.startTest<span class="params">(grinderProperties)</span>;</span><br><span class="line">		perfTest.setStartTime<span class="params">(new Date<span class="params">(startTime)</span>)</span>;</span><br><span class="line">		addSamplingListeners<span class="params">(perfTest, singleConsole)</span>;</span><br><span class="line">		perfTestService.markStatusAndProgress<span class="params">(perfTest, TESTING, <span class="string">"The test is started."</span>)</span>;</span><br><span class="line">		singleConsole.startSampling<span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>开启监控空间（包括自定义的plugin），开启异常中断监听。</p>
<p> 进行测试结果收集。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">	 * Start sampling with sampling ignore count.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">startSampling</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.sampleModel = getConsoleComponent(SampleModelImplementationEx.class);</span><br><span class="line">		<span class="keyword">this</span>.sampleModel.addTotalSampleListener(<span class="keyword">this</span>);</span><br><span class="line">		<span class="keyword">this</span>.sampleModel.addModelListener(<span class="keyword">new</span> SampleModel.Listener() &#123;</span><br><span class="line">			<span class="annotation">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				capture = SingleConsole.<span class="keyword">this</span>.sampleModel.getState().isCapturing();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="annotation">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">resetTests</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				intervalStatisticMapPerTest.clear();</span><br><span class="line">				accumulatedStatisticMapPerTest.clear();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="annotation">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">newTests</span><span class="params">(Set&lt;Test&gt; newTests, ModelTestIndex modelTestIndex)</span> </span>&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">final</span> Test each : newTests) &#123;</span><br><span class="line">					SingleConsole.<span class="keyword">this</span>.sampleModel.addSampleListener(each, <span class="keyword">new</span> SampleListener() &#123;</span><br><span class="line">						<span class="annotation">@Override</span></span><br><span class="line">						<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(StatisticsSet intervalStatistics, StatisticsSet cumulativeStatistics)</span> </span>&#123;</span><br><span class="line">							intervalStatisticMapPerTest.put(each, intervalStatistics.snapshot());</span><br><span class="line">							accumulatedStatisticMapPerTest.put(each, cumulativeStatistics.snapshot());</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="annotation">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">newSample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		informTestSamplingStart();</span><br><span class="line">		<span class="keyword">this</span>.sampleModel.start();</span><br><span class="line">		LOGGER.info(<span class="string">"Sampling is started"</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h3 id="agent启动运行">agent启动运行</h3><p>agent的启动运行在AgentManager类中，init方法：</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">	 * Initialize agent manager.</span><br><span class="line">	 */</span></span><br><span class="line">	@PostConstruct</span><br><span class="line">	public void init<span class="params">()</span> &#123;</span><br><span class="line">		int port = config.getControllerPort<span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">		ConsoleCommunicationSetting consoleCommunicationSetting = ConsoleCommunicationSetting.asDefault<span class="params">()</span>;</span><br><span class="line">		<span class="keyword">if</span> <span class="params">(config.getInactiveClientTimeOut<span class="params">()</span> &gt; <span class="number">0</span>)</span> &#123;</span><br><span class="line">			consoleCommunicationSetting.setInactiveClientTimeOut<span class="params">(config.getInactiveClientTimeOut<span class="params">()</span>)</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		agentControllerServerDaemon = new AgentControllerServerDaemon<span class="params">(config.getCurrentIP<span class="params">()</span>, port, consoleCommunicationSetting)</span>;</span><br><span class="line">		agentControllerServerDaemon.start<span class="params">()</span>;</span><br><span class="line">		agentControllerServerDaemon.setAgentDownloadRequestListener<span class="params">(this)</span>;</span><br><span class="line">		agentControllerServerDaemon.addLogArrivedListener<span class="params">(new LogArrivedListener<span class="params">()</span> &#123;</span><br><span class="line">			@Override</span><br><span class="line">			public void logArrived<span class="params">(String testId, AgentAddress agentAddress, byte[] logs)</span> &#123;</span><br><span class="line">				AgentControllerIdentityImplementation agentIdentity = convert<span class="params">(agentAddress.getIdentity<span class="params">()</span>)</span>;</span><br><span class="line">				if <span class="params">(ArrayUtils.isEmpty<span class="params">(logs)</span>)</span> &#123;</span><br><span class="line">					LOGGER.error<span class="params">(<span class="string">"Log is arrived from &#123;&#125; but no log content"</span>, agentIdentity.getIp<span class="params">()</span>)</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				File logFile = null;</span><br><span class="line">				try &#123;</span><br><span class="line">					logFile = new File<span class="params">(config.getHome<span class="params">()</span>.getPerfTestLogDirectory<span class="params">(testId.replace<span class="params">(<span class="string">"test_"</span>, <span class="string">""</span>)</span>)</span>,</span><br><span class="line">							agentIdentity.getName<span class="params">()</span> + <span class="string">"-"</span> + agentIdentity.getRegion<span class="params">()</span> + <span class="string">"-log.zip"</span>)</span>;</span><br><span class="line">					FileUtils.writeByteArrayToFile<span class="params">(logFile, logs)</span>;</span><br><span class="line">				&#125; catch <span class="params">(IOException e)</span> &#123;</span><br><span class="line">					LOGGER.error<span class="params">(<span class="string">"Error while write logs from &#123;&#125; to &#123;&#125;"</span>, agentAddress.getIdentity<span class="params">()</span>.getName<span class="params">()</span>,</span><br><span class="line">							logFile.getAbsolutePath<span class="params">()</span>)</span>;</span><br><span class="line">					LOGGER.error<span class="params">(<span class="string">"Error is following"</span>, e)</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>agent 启动后，连接到 controller, 开始控制测试流，直到测试结束。当测试完成后，所使用的 agents 归还给 AgentControllerServer ，以供其他console使用。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/ngrinder任务执行源码解析/ngrinder用户图.PNG" alt="Alt text"></p>
<p>读了ngrinder任务执行的源码，在此做一些记录。<br>ngrinder版本：3.4.1</p>]]>
    
    </summary>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[获取appPackage和appActivity]]></title>
    <link href="http://tonylit.me/2018/01/17/%E8%8E%B7%E5%8F%96appPackage%E5%92%8CappActivity/"/>
    <id>http://tonylit.me/2018/01/17/获取appPackage和appActivity/</id>
    <published>2018-01-17T03:37:27.000Z</published>
    <updated>2018-01-17T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>Appium Desired Capabilities中有两个重要的参数：appPackage和appActivity。</p>
<blockquote>
<p>capabilities.setCapability(“appPackage”,”xxx”);<br>capabilities.setCapability(“appActivity”,”xxx”);</p>
</blockquote>
<a id="more"></a>
<hr>
<h1 id="获取appPackage和appActivity">获取appPackage和appActivity</h1><p>打开APP，使用adb命令：</p>
<blockquote>
<p>adb logcat |grep Displayed</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>-<span class="number">17</span> <span class="number">21</span>:<span class="number">32</span>:<span class="number">24.461</span>   <span class="number">562</span>   <span class="number">584</span> I ActivityManager: Displayed com.android.launcher3/.Launcher: +<span class="number">1</span>s38ms</span><br><span class="line"><span class="number">12</span>-<span class="number">17</span> <span class="number">21</span>:<span class="number">34</span>:<span class="number">12.577</span>   <span class="number">562</span>   <span class="number">584</span> I ActivityManager: Displayed io.appium.settings/.Settings: +<span class="number">573</span>ms</span><br><span class="line"><span class="number">12</span>-<span class="number">17</span> <span class="number">21</span>:<span class="number">34</span>:<span class="number">16.470</span>   <span class="number">562</span>   <span class="number">584</span> I ActivityManager: Displayed com.android.calculator2/.Calculator: +<span class="number">719</span>ms</span><br></pre></td></tr></table></figure>
<blockquote>
<p>appPackage:com.android.calculator2</p>
<p>appActivity:.Calculator</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>Appium Desired Capabilities中有两个重要的参数：appPackage和appActivity。</p>
<blockquote>
<p>capabilities.setCapability(“appPackage”,”xxx”);<br>capabilities.setCapability(“appActivity”,”xxx”);</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Appium" scheme="http://tonylit.me/tags/Appium/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Appium Desktop]]></title>
    <link href="http://tonylit.me/2018/01/02/Appium%20Desktop/"/>
    <id>http://tonylit.me/2018/01/02/Appium Desktop/</id>
    <published>2018-01-02T03:37:27.000Z</published>
    <updated>2018-01-02T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/appium-desktop/appium-desktop.PNG" alt="Alt text"></p>
<p>Appium Desktop is an open source app for Mac, Windows, and Linux which gives you the power of the Appium automation server in a beautiful and flexible UI.</p>
<p>by <strong><a href="https://github.com/appium/appium-desktop" target="_blank" rel="external">https://github.com/appium/appium-desktop</a></strong></p>
<a id="more"></a>
<hr>
<h1 id="引">引</h1><p>Appium Server在15年就停更了，可以把Appium Desktop看做是Appium Server的升级版，用Appium Desktop替代Appium Server。但其实他们是两个不同的产品。</p>
<p>Appium Desktop特点：</p>
<blockquote>
<p>优秀的图形界面。高端大气！<br>可以进行元素定位，同时支持android和ios。实在是方便，可以把uiautomatorviewer扔了！<br>支持多语言脚本录制。very good，人性化十足！</p>
</blockquote>
<p>如果已经安装了Appium Server的，可以直接卸载了。</p>
<hr>
<h1 id="Appium_Desktop安装">Appium Desktop安装</h1><p>下载地址：<a href="https://github.com/appium/appium-desktop/releases/tag/v1.2.7" target="_blank" rel="external">https://github.com/appium/appium-desktop/releases/tag/v1.2.7</a></p>
<p>下载安装即可。</p>
<p><img src="/img/appium-desktop/start-desktop.PNG" alt="Alt text"></p>
<p>点击<strong>start server v1.7.1</strong>按钮，启动服务。<br><img src="/img/appium-desktop/run-desktop.PNG" alt="Alt text"></p>
<hr>
<h1 id="Start_Inspector_Session">Start  Inspector Session</h1><p><img src="/img/appium-desktop/inspector.PNG" alt="Alt text"></p>
<p>可以理解为启动 appium client的UI端。</p>
<h2 id="Appium_Desired_Capabilities">Appium Desired Capabilities</h2><p>java appium-client中设置DesiredCapabilities 通过以下方式：</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DesiredCapabilities capabilities = new DesiredCapabilities<span class="params">()</span>;</span><br><span class="line">	capabilities.setCapability<span class="params">(<span class="string">"deviceName"</span>, <span class="string">"Android Emulator"</span>)</span>;</span><br><span class="line">	capabilities.setCapability<span class="params">(<span class="string">"automationName"</span>, <span class="string">"Appium"</span>)</span>;</span><br><span class="line">	capabilities.setCapability<span class="params">(<span class="string">"platformName"</span>, <span class="string">"Android"</span>)</span>;</span><br><span class="line">	capabilities.setCapability<span class="params">(<span class="string">"platformVersion"</span>, <span class="string">"6.0"</span>)</span>;</span><br><span class="line">	capabilities.setCapability<span class="params">(<span class="string">"appPackage"</span>, <span class="string">"com.android.calculator2"</span>)</span>;</span><br><span class="line">	capabilities.setCapability<span class="params">(<span class="string">"appActivity"</span>, <span class="string">".Calculator"</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>而appium desktop提供了UI的方式填写 Appium Desired Capabilities，<br><img src="/img/appium-desktop/Capabilities.PNG" alt="Alt text"></p>
<p> Desired Capabilities说明文档：</p>
<blockquote>
<p><a href="https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/caps.md" target="_blank" rel="external">https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/caps.md</a></p>
</blockquote>
<p>点击右下角的Start Session 启动Inspector（时间比较长）。</p>
<hr>
<h2 id="The_Inspector">The Inspector</h2><p>Inspector 对App进行可视化，方便进行元素定位、脚本录制、调试等，非常人性化。</p>
<p><img src="/img/appium-desktop/elementui.PNG" alt="Alt text"></p>
<h3 id="Recoding">Recoding</h3><p>对于初学者来说，这里提供了录制功能，方便进行脚本编写。</p>
<p>点击Start Recoding<br><img src="/img/appium-desktop/recoding.PNG" alt="Alt text"></p>
<p>简单录制 1+1=2</p>
<p><img src="/img/appium-desktop/start-recoding.PNG" alt="Alt text"></p>
<p>同时可以选择多种语言。点击生成的java脚本如下：</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">import</span> io.appium.java_client.MobileElement;</span><br><span class="line"><span class="built_in">import</span> io.appium.java_client.android.AndroidDriver;</span><br><span class="line"><span class="built_in">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="built_in">import</span> org.junit.After;</span><br><span class="line"><span class="built_in">import</span> org.junit.Before;</span><br><span class="line"><span class="built_in">import</span> org.junit.Test;</span><br><span class="line"><span class="built_in">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="built_in">import</span> java.net.URL;</span><br><span class="line"><span class="built_in">import</span> org.openqa.selenium.remote.DesiredCapabilities;</span><br><span class="line"></span><br><span class="line">public class SampleTest &#123;</span><br><span class="line"></span><br><span class="line">  private AndroidDriver driver;</span><br><span class="line"></span><br><span class="line">  @Before</span><br><span class="line">  public void setUp<span class="params">()</span> throws MalformedURLException &#123;</span><br><span class="line">    DesiredCapabilities desiredCapabilities = new DesiredCapabilities<span class="params">()</span>;</span><br><span class="line">    desiredCapabilities.setCapability<span class="params">(<span class="string">"deviceName"</span>, <span class="string">"Android Emulator"</span>)</span>;</span><br><span class="line">    desiredCapabilities.setCapability<span class="params">(<span class="string">"automationName"</span>, <span class="string">"Appium"</span>)</span>;</span><br><span class="line">    desiredCapabilities.setCapability<span class="params">(<span class="string">"platformName"</span>, <span class="string">"Android"</span>)</span>;</span><br><span class="line">    desiredCapabilities.setCapability<span class="params">(<span class="string">"platformVersion"</span>, <span class="string">"6.0"</span>)</span>;</span><br><span class="line">    desiredCapabilities.setCapability<span class="params">(<span class="string">"appPackage"</span>, <span class="string">"com.android.calculator2"</span>)</span>;</span><br><span class="line">    desiredCapabilities.setCapability<span class="params">(<span class="string">"appActivity"</span>, <span class="string">".Calculator"</span>)</span>;</span><br><span class="line"></span><br><span class="line">    URL remoteUrl = new URL<span class="params">(<span class="string">"http://localhost:4723/wd/hub"</span>)</span>;</span><br><span class="line"></span><br><span class="line">    driver = new AndroidDriver<span class="params">(remoteUrl, desiredCapabilities)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Test</span><br><span class="line">  public void sampleTest<span class="params">()</span> &#123;</span><br><span class="line">    <span class="params">(new TouchAction<span class="params">(driver)</span>)</span>.tap<span class="params">(<span class="number">110</span>, <span class="number">901</span>)</span>.perform<span class="params">()</span>;</span><br><span class="line">    <span class="params">(new TouchAction<span class="params">(driver)</span>)</span>.tap<span class="params">(<span class="number">644</span>, <span class="number">1079</span>)</span>.perform<span class="params">()</span>;</span><br><span class="line">    <span class="params">(new TouchAction<span class="params">(driver)</span>)</span>.tap<span class="params">(<span class="number">108</span>, <span class="number">906</span>)</span>.perform<span class="params">()</span>;</span><br><span class="line">    <span class="params">(new TouchAction<span class="params">(driver)</span>)</span>.tap<span class="params">(<span class="number">464</span>, <span class="number">1061</span>)</span>.perform<span class="params">()</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @After</span><br><span class="line">  public void tearDown<span class="params">()</span> &#123;</span><br><span class="line">    driver.quit<span class="params">()</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用junit4测试运行：</p>
<p><img src="/img/appium-desktop/testrun.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/appium-desktop/appium-desktop.PNG" alt="Alt text"></p>
<p>Appium Desktop is an open source app for Mac, Windows, and Linux which gives you the power of the Appium automation server in a beautiful and flexible UI.</p>
<p>by <strong><a href="https://github.com/appium/appium-desktop">https://github.com/appium/appium-desktop</a></strong></p>]]>
    
    </summary>
    
      <category term="Appium" scheme="http://tonylit.me/tags/Appium/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Appium环境搭建-Windows版]]></title>
    <link href="http://tonylit.me/2017/12/11/Appium%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-Windows%E7%89%88/"/>
    <id>http://tonylit.me/2017/12/11/Appium环境搭建-Windows版/</id>
    <published>2017-12-11T03:37:27.000Z</published>
    <updated>2017-12-11T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/Appium环境搭建-Windows版/appium.PNG" alt="Alt text"></p>
<p>win7上搭建Appium环境，并进行简单测试。 </p>
<blockquote>
<p>appium server端安装<br>appium java-client安装与测试</p>
</blockquote>
<a id="more"></a>
<hr>
<h1 id="引">引</h1><p>2015年前研究过web自动化测试，开始使用的selenium1.0版本，后来切换到selenium2.0-webdriver，在项目工作中有一些应用。</p>
<p>移动自动化测试兴起后，就想对此技术学习和研究，一直拖到现在…</p>
<p><a href="http://appium.io/" target="_blank" rel="external"><strong>Appium</strong></a>  作为移动自动化测试框架的一种，最近比较热门，功能最为强大。</p>
<blockquote>
<p>跨平台。 支持windows、linux、ios操作系统上运行。<br>一套脚本。IOS和Android 两个平台一套脚本即可。<br>多语言。client支持多种语言，java、python、ruby、<br>简单。使用过webdriver的上手很容易，算是webdriver的一种扩展吧。</p>
</blockquote>
<p>进入正题，开始搭建Appium测试环境。</p>
<hr>
<h1 id="预准备">预准备</h1><h2 id="安装nodejs">安装nodejs</h2><p>node.js下载地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="external">https://nodejs.org/en/download/</a></p>
<p>下载后安装，输入npm验证是否安装成功。</p>
<p><img src="/img/Appium环境搭建-Windows版/npm.PNG" alt="Alt text"></p>
<hr>
<h2 id="Android环境安装">Android环境安装</h2><p>我们使用Android模拟器进行移动自动化测试，<br>需要进行<a href="http://tonylit.me/2017/11/09/Android%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/">Android SDK安装</a>。</p>
<hr>
<h1 id="安装_Appium_Server">安装 Appium Server</h1><p>本机使用的win7操作系统，尽量不要使用低版本。</p>
<p>下载地址：<a href="https://bitbucket.org/appium/appium.app/downloads/" target="_blank" rel="external">https://bitbucket.org/appium/appium.app/downloads/</a></p>
<p>下载最新版本 AppiumForWindows_1_4_16_1.zip ，点击appium-installer.exe 进行安装。</p>
<p><img src="/img/Appium环境搭建-Windows版/appium-server.PNG" alt="Alt text"></p>
<hr>
<h2 id="添加环境变量">添加环境变量</h2><p>添加C:\Program Files (x86)\Appium\node_modules.bin 到系统环境变量path中<br><img src="/img/Appium环境搭建-Windows版/path.PNG" alt="Alt text"></p>
<p>打开cmd，输入“appium-doctor”命令，验证是否安装完成。</p>
<p><img src="/img/Appium环境搭建-Windows版/appium-server.PNG" alt="Alt text"></p>
<blockquote>
<p>如果提示ANDROID_HOME找不到，在环境变量中添加ANDROID_HOME，地址:E:\android-sdk</p>
</blockquote>
<hr>
<h1 id="Appium_java-client安装与测试">Appium java-client安装与测试</h1><p>github：<a href="https://github.com/appium/java-client" target="_blank" rel="external">https://github.com/appium/java-client</a></p>
<h2 id="jar包准备">jar包准备</h2><p>新建一个maven项目，appiumtest</p>
<p>引入appium java-client的jar包：<br><a href="http://maven.outofmemory.cn/io.appium/java-client/" target="_blank" rel="external">http://maven.outofmemory.cn/io.appium/java-client/</a></p>
<p>pom.xml：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">project</span> <span class="attribute">xmlns</span>=<span class="value">"http://maven.apache.org/POM/4.0.0"</span> <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="title">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>appiumtest<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>appiumtest<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">name</span>&gt;</span>appiumtest<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">description</span>&gt;</span>appiumtest<span class="tag">&lt;/<span class="title">description</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="title">dependencies</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>io.appium<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>java-client<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="title">version</span>&gt;</span>4.1.2<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="title">dependencies</span>&gt;</span></span><br><span class="line">  	</span><br><span class="line"><span class="tag">&lt;/<span class="title">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="启动Android模拟器">启动Android模拟器</h2><ol>
<li>启动AVD Manager，启动一个模拟器</li>
<li>启动Appium Server，点击右上角的三角按钮</li>
</ol>
<p><img src="/img/Appium环境搭建-Windows版/start-appium.PNG" alt="Alt text"></p>
<hr>
<h2 id="编写appium测试脚本">编写appium测试脚本</h2><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">package com.appium.test;</span><br><span class="line"></span><br><span class="line"><span class="built_in">import</span> io.appium.java_client.android.AndroidDriver;</span><br><span class="line"></span><br><span class="line"><span class="built_in">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="built_in">import</span> java.net.URL;</span><br><span class="line"><span class="built_in">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="built_in">import</span> org.openqa.selenium.By;</span><br><span class="line"><span class="built_in">import</span> org.openqa.selenium.WebElement;</span><br><span class="line"><span class="built_in">import</span> org.openqa.selenium.remote.DesiredCapabilities;</span><br><span class="line"></span><br><span class="line">public class AppiumTestDemo &#123;</span><br><span class="line"></span><br><span class="line">	public static void main<span class="params">(String[] args)</span> throws MalformedURLException,</span><br><span class="line">			InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 启动android driver</span></span><br><span class="line">		AndroidDriver driver = startDriver<span class="params">()</span>;</span><br><span class="line">		calculator<span class="params">(driver)</span>;</span><br><span class="line">		quit<span class="params">(driver)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 启动driver</span><br><span class="line">	 *</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws MalformedURLException</span><br><span class="line">	 */</span></span><br><span class="line">	public static AndroidDriver startDriver<span class="params">()</span> throws MalformedURLException &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 初始化appium</span></span><br><span class="line">		DesiredCapabilities capabilities = new DesiredCapabilities<span class="params">()</span>;</span><br><span class="line">		capabilities.setCapability<span class="params">(<span class="string">"deviceName"</span>, <span class="string">"Android Emulator"</span>)</span>;</span><br><span class="line">		capabilities.setCapability<span class="params">(<span class="string">"automationName"</span>, <span class="string">"Appium"</span>)</span>;</span><br><span class="line">		capabilities.setCapability<span class="params">(<span class="string">"platformName"</span>, <span class="string">"Android"</span>)</span>;</span><br><span class="line">		capabilities.setCapability<span class="params">(<span class="string">"platformVersion"</span>, <span class="string">"6.0"</span>)</span>;</span><br><span class="line">		capabilities.setCapability<span class="params">(<span class="string">"appPackage"</span>, <span class="string">"com.android.calculator2"</span>)</span>;</span><br><span class="line">		capabilities.setCapability<span class="params">(<span class="string">"appActivity"</span>, <span class="string">".Calculator"</span>)</span>;</span><br><span class="line"></span><br><span class="line">		return new AndroidDriver<span class="params">(new URL<span class="params">(<span class="string">"http://127.0.0.1:4723/wd/hub"</span>)</span>,</span><br><span class="line">				capabilities)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 计算1+1</span><br><span class="line">	 *</span><br><span class="line">	 * @param driver</span><br><span class="line">	 */</span></span><br><span class="line">	public static void calculator<span class="params">(AndroidDriver driver)</span> &#123;</span><br><span class="line"></span><br><span class="line">		driver.findElement<span class="params">(By.name<span class="params">(<span class="string">"1"</span>)</span>)</span>.click<span class="params">()</span>;</span><br><span class="line">		driver.findElement<span class="params">(By.name<span class="params">(<span class="string">"+"</span>)</span>)</span>.click<span class="params">()</span>;</span><br><span class="line">		driver.findElement<span class="params">(By.name<span class="params">(<span class="string">"1"</span>)</span>)</span>.click<span class="params">()</span>;</span><br><span class="line">		driver.findElement<span class="params">(By.name<span class="params">(<span class="string">"="</span>)</span>)</span>.click<span class="params">()</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 退出driver</span><br><span class="line">	 *</span><br><span class="line">	 * @param driver</span><br><span class="line">	 */</span></span><br><span class="line">	public static void quit<span class="params">(AndroidDriver driver)</span> &#123;</span><br><span class="line">		driver.quit<span class="params">()</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/img/Appium环境搭建-Windows版/calu.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/Appium环境搭建-Windows版/appium.PNG" alt="Alt text"></p>
<p>win7上搭建Appium环境，并进行简单测试。 </p>
<blockquote>
<p>appium server端安装<br>appium java-client安装与测试</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Appium" scheme="http://tonylit.me/tags/Appium/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android开发环境安装]]></title>
    <link href="http://tonylit.me/2017/12/09/Android%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    <id>http://tonylit.me/2017/12/09/Android开发环境安装/</id>
    <published>2017-12-09T03:37:27.000Z</published>
    <updated>2017-12-09T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/android开发环境配置/android.PNG" alt="Alt text"></p>
<p>介绍如何安装Android开发环境。</p>
<blockquote>
<p>Android SDK安装<br>Eclipse SDK插件安装（离线）</p>
</blockquote>
<a id="more"></a>
<hr>
<h1 id="Android_SDK安装">Android SDK安装</h1><p><strong>首先保证已经安装了jdk。</strong></p>
<h2 id="下载AndroidSDK">下载AndroidSDK</h2><p>Android SDK下载地址:<br><a href="http://tools.android-studio.org/index.php/sdk" target="_blank" rel="external">http://tools.android-studio.org/index.php/sdk</a></p>
<p><strong> 安装路径不要有空格 </strong></p>
<p>安装完点击“SDK Manager.exe”，出来很多选项，建议将Tools和Extra下面的全部勾选安装。</p>
<p>由于墙的原因，可能有一些包下载失败。可以设置为国内镜像进行下载。</p>
<blockquote>
<p>mirrors.neusoft.edu.cn //东软信息学院<br>ubuntu.buct.edu.cn/ubuntu.buct.cn //北京化工大学<br>mirrors.opencas.cn (mirrors.opencas.org/mirrors.opencas.ac.cn) //中国科学院开源协会<br>sdk.gdgshanghai.com 端口：8000 //上海GDG镜像服务器<br>mirrors.dormforce.net //（栋力无限）电子科技大学<br>网易开源镜像站(mirrors.163.com)<br>搜狐(mirrors.sohu.com)<br>淘宝(ruby.taobao.org)</p>
</blockquote>
<p>Tools-&gt;Options<br><img src="/img/android开发环境配置/options.PNG" alt="Alt text"></p>
<hr>
<h2 id="配置环境变量">配置环境变量</h2><p>将 platform-tools和\tools路径追加到系统环境变量path中。</p>
<p><img src="/img/android开发环境配置/path.PNG" alt="Alt text"></p>
<p>输入adb version 检查是否配置成功。</p>
<p><img src="/img/android开发环境配置/adb.PNG" alt="Alt text"></p>
<hr>
<h2 id="Android模拟器">Android模拟器</h2><p>点击AVD Manager，创建一个模拟器<br><img src="/img/android开发环境配置/avd.PNG" alt="Alt text"></p>
<p>点击start运行模拟器即可</p>
<p><img src="/img/android开发环境配置/moniqi.PNG" alt="Alt text"></p>
<hr>
<h1 id="Eclipse_SDK插件安装（离线）">Eclipse SDK插件安装（离线）</h1><p>Android Development Tools 插件，不翻墙在线安装很难，最好采用离线安装的方法。</p>
<p>ADT-23.0.6下载：<a href="https://pan.baidu.com/s/1nvf2djr" target="_blank" rel="external">https://pan.baidu.com/s/1nvf2djr</a></p>
<p>点击Eclipse-&gt;Help-&gt;Install New Software，点击ADD-&gt;点击Archive，选择下载好的ADT-23.0.6.ZIP，安装插件。</p>
<p><img src="/img/android开发环境配置/add.PNG" alt="Alt text"></p>
<p><img src="/img/android开发环境配置/install.PNG" alt="Alt text"></p>
<p>点击next安装即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/android开发环境配置/android.PNG" alt="Alt text"></p>
<p>介绍如何安装Android开发环境。</p>
<blockquote>
<p>Android SDK安装<br>Eclipse SDK插件安装（离线）</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Android" scheme="http://tonylit.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scrapy网络爬虫]]></title>
    <link href="http://tonylit.me/2017/11/19/Scrapy%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    <id>http://tonylit.me/2017/11/19/Scrapy网络爬虫/</id>
    <published>2017-11-19T03:37:27.000Z</published>
    <updated>2017-11-19T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>网络爬虫简单来说就是模拟用户操作浏览器或者app，并获取、筛选信息的程序。</p>
<p><img src="/img/python爬虫/爬虫.PNG" alt="Alt text"></p>
<a id="more"></a>
<hr>
<h1 id="Scrapy框架介绍">Scrapy框架介绍</h1><p>目前比较流行的python网络爬取框架-<a href="https://scrapy.org/" target="_blank" rel="external">Scrapy</a>,在数据挖掘、监测和自动化测试上也有一些应用。</p>
<h2 id="Scrapy框架图">Scrapy框架图</h2><p>Scrapy 使用 <a href="http://twistedmatrix.com/trac/" target="_blank" rel="external">Twisted</a>异步网络库来处理网络通讯，包含了各种中间件接口，可以灵活的完成各种需求。</p>
<p><img src="/img/python爬虫/scrapy.PNG" alt="Alt text"></p>
<p> Scrapy Engine（引擎）：总负责人。负责其他模块的通信、数据传递等。</p>
<p> Scheduler（调度器）：负责接收引擎发过来的request请求，放入队列中；当引擎需要时返回给引擎。</p>
<p>Downloader（下载器）: 负责下载引擎发送的所有request请求，将获取的reponse返回给引擎，引擎交给spiders模块进行数据处理。</p>
<p>Spiders（爬虫）：使用各种解析规则，分析提取Item数据，并将需要跟进的url提交给引擎，再次进入scheduler。</p>
<p>Item Pipeline（管道）：负责处理spider中获取的item，进行后续详细分析、存储等处理。</p>
<p>Downloader Middlewares和Spider Middlewares: 可以自定义扩展的组件。</p>
<h2 id="整体流程：">整体流程：</h2><blockquote>
<ol>
<li>引擎询问Spiders有木有需要爬取的url。</li>
<li>引擎获取到需要爬取的url，交给Scheduler，放入下载队列中。</li>
<li>引擎从Scheduler队列中拿到下一个需要爬取的url，交给Downloader进行下载。（如果下载失败了URL会再次进入Scheduler队列中）</li>
<li>引擎将Downloader下载的Response交给Spiders进行处理。</li>
<li>Spiders处理Response，把获取的item交给Item Pipeline；将需要继续跟进的url交给引擎放入Scheduler队列中。</li>
<li>循环1~5，直到Scheduler中不存在任何url。</li>
</ol>
</blockquote>
<hr>
<h1 id="制作Scrapy爬虫">制作Scrapy爬虫</h1><p>首先安装Scrapy，这里使用的python2.7版本</p>
<blockquote>
<p>pip install Scrapy </p>
</blockquote>
<p>输入scrapy，验证是否安装成功。<br><img src="/img/python爬虫/pip-scrapy.PNG" alt="Alt text"></p>
<h2 id="新建项目">新建项目</h2><p>执行 scrapy startproject project名字 即可。</p>
<p><img src="/img/python爬虫/startproject.PNG" alt="Alt text"></p>
<p><img src="/img/python爬虫/projectdir.PNG" alt="Alt text"></p>
<blockquote>
<p>scrapy.cfg : 项目的总体配置<br>items.py : 项目的目标文件<br>pipelines.py : 项目的管道文件<br>settings.py ：项目的配置文件<br>spiders文件夹：爬虫代码存储目录</p>
</blockquote>
<hr>
<h2 id="创建Spider">创建Spider</h2><p>进入spiders文件夹，执行scrapy genspider [-t template] <name> <domain> 命令即可</domain></name></p>
<p><img src="/img/python爬虫/genspider.PNG" alt="Alt text"></p>
<p>默认使用basic模板，执行后生成baiduspider.py文件：<br>修改parse方法，打印返回的body</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MicspiderSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'micspider'</span> <span class="comment">#保证唯一性</span></span><br><span class="line">    allowed_domains = [<span class="string">'www.made-in-china.com'</span>] </span><br><span class="line">    start_urls = [<span class="string">'http://www.made-in-china.com/'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span> <span class="comment"># 负责解析返回的response，提取数据或者生成跟进的url对象</span></span><br><span class="line">       	<span class="keyword">print</span> response.body</span><br><span class="line">	<span class="comment"># pass</span></span><br></pre></td></tr></table></figure>
<h3 id="scrapy_check">scrapy check</h3><p>修改完spider文件，check一下。</p>
<blockquote>
<p>scrapy check micspider </p>
</blockquote>
<p>check后面的爬虫名称为spider文件中定义的name名称。</p>
<p><img src="/img/python爬虫/check.PNG" alt="Alt text"></p>
<h3 id="scrapy_crawl运行spider">scrapy crawl运行spider</h3><p>运行spider</p>
<blockquote>
<p>scrapy crawl micspider</p>
</blockquote>
<p>会打印出mic网站的body信息。</p>
<h3 id="pipelines-py">pipelines.py</h3><p>当item在spider中被收集后，它会被传递到item pipeline中，这些item pipeline组件按照settings.py文件中定义的顺序处理item。</p>
<p>我们修改一下生成的pipelines.py，把item打印到文件中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define your item pipelines here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class="line"><span class="comment"># See: http://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpiderprojectPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#可选实现，做一些初始化</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">		self.f = open(<span class="string">"mic.json"</span>,<span class="string">"w"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#必须实现</span></span><br><span class="line">    <span class="comment">#item参数为spider返回的item数据</span></span><br><span class="line">    <span class="comment">#spider参数为获取item的spider对象</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        content = json.dumps(dict(item))</span><br><span class="line">		self.f.write(content)</span><br><span class="line">		<span class="keyword">return</span> item</span><br><span class="line">	</span><br><span class="line">	<span class="comment">#可选实现，放spider启动的时候，调用该方法</span></span><br><span class="line">	<span class="comment">#def open_spider(self,spider):</span></span><br><span class="line">		<span class="keyword">pass</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">#可选实现，当spider关闭时，调用该方法</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self,spider)</span>:</span></span><br><span class="line">		self.f.close()</span><br></pre></td></tr></table></figure></p>
<p>items.py 和 micspider.py 文件做相应修改：</p>
<p>items.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define here the models for your scraped items</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See documentation in:</span></span><br><span class="line"><span class="comment"># http://doc.scrapy.org/en/latest/topics/items.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpiderprojectItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">     name = scrapy.Field()</span><br><span class="line">     </span><br><span class="line">     <span class="comment">#pass</span></span><br></pre></td></tr></table></figure>
<p>micspider.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">".."</span>)</span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> items <span class="keyword">import</span> SpiderprojectItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MicspiderSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'micspider'</span></span><br><span class="line">    allowed_domains = [<span class="string">'www.made-in-china.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://www.made-in-china.com/'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">       </span><br><span class="line">	node = response.body</span><br><span class="line">	</span><br><span class="line">	item = SpiderprojectItem()</span><br><span class="line">	item[<span class="string">'name'</span>] = node</span><br><span class="line"></span><br><span class="line">	<span class="keyword">yield</span>  item</span><br></pre></td></tr></table></figure></p>
<p>修改settings.py文件，把pipeline的设置放开：</p>
<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="component">ITEM_PIPELINES = &#123;</span><br><span class="line">    'spiderproject<span class="string">.pipelines.SpiderprojectPipeline':</span> 300,</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>这里可以设置多个pipeline，300表示权重。<br>权重为1~1000之间，越小表示权重越大。</p>
<p>ok , 配置完以上信息，执行scrapy crawl micspider，<br>执行后会生成一个mic.json文件，里面是mic网站的body。</p>
<p>tips：<br>spider.py文件中，最后return的数据给引擎，由引擎来判断由谁处理数据。<br>当return的数据为item类型时，引擎才交给pipeline处理。</p>
<hr>
<h2 id="scrapy_shell">scrapy shell</h2><p>执行scrapy shell xxxx，启动一个交互终端，方便进行爬取的网页数据调试，比如测试xpath。</p>
<blockquote>
<p>scrapy shell <a href="http://tonylit.me/">http://tonylit.me/</a></p>
</blockquote>
<p><img src="/img/python爬虫/shell.PNG" alt="Alt text"></p>
<hr>
<p>以上就是scrapy爬虫主要的功能点。</p>
<hr>
<h1 id="实例：爬取博客文章信息">实例：爬取博客文章信息</h1><p>下面对我自己的博客进行文章标题、标签、链接、发布时间进行爬取。实现一个简单的scrapy爬虫。</p>
<p>url: <a href="http://tonylit.me/">http://tonylit.me/</a></p>
<p><img src="/img/python爬虫/blog.PNG" alt="Alt text"></p>
<hr>
<h2 id="创建spider项目">创建spider项目</h2><p>项目的名字：myblogspider</p>
<blockquote>
<p>scrapy startproject myblogspider</p>
</blockquote>
<hr>
<h2 id="创建spider爬虫">创建spider爬虫</h2><p>爬虫的名字：tonylitspider </p>
<p>进入myblogspider文件夹中，执行：</p>
<blockquote>
<p>scrapy genspider tonylitspider ‘tonylit.me’</p>
</blockquote>
<p>在spiders文件夹中生成tonylitspider.py的爬虫文件</p>
<hr>
<h2 id="编写爬取逻辑">编写爬取逻辑</h2><p>在编写之前，先把需要爬取信息的xpath弄清楚。</p>
<blockquote>
<p>title-list: //a[@class=’article-title’]/text()<br>tag-list:  //ul[@class=’article-tag-list’]/li/a/text()<br>link-list：//a[@class=’article-title’]/@href<br>time-list ：//time/@datetime</p>
</blockquote>
<h3 id="编写items-py">编写items.py</h3><p>定义四个变量，存储文章的标题、标签、链接、发布时间。</p>
<figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># -*- coding: utf-8 -*-</span><span class="preprocessor"></span><br><span class="line"></span><br><span class="line"># Define here the models for your scraped items</span><span class="preprocessor"></span><br><span class="line">#</span><span class="preprocessor"></span><br><span class="line"># See documentation in:</span><span class="preprocessor"></span><br><span class="line"># http://doc.scrapy.org/en/latest/topics/items.html</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"><span class="keyword">import</span> scrapy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyblogspiderItem</span>(<span class="title">scrapy</span>.<span class="title">Item</span>):</span><span class="preprocessor"></span><br><span class="line">    # define the fields for your item here like:</span><span class="preprocessor"></span><br><span class="line">    # 文章标题</span></span><br><span class="line">    title = scrapy.<span class="keyword">Field</span>()<span class="preprocessor"></span><br><span class="line">    # 文章标签</span></span><br><span class="line">    tag = scrapy.<span class="keyword">Field</span>()<span class="preprocessor"></span><br><span class="line">    # 文章链接</span></span><br><span class="line">    link = scrapy.<span class="keyword">Field</span>()<span class="preprocessor"></span><br><span class="line">    # 发布时间</span></span><br><span class="line">    time = scrapy.<span class="keyword">Field</span>()</span><br></pre></td></tr></table></figure>
<h3 id="编写spider-py">编写spider.py</h3><p>编写上面生成的tonylitspider.py，实现信息的爬取。</p>
<p>找到下一页的xpath：</p>
<blockquote>
<p>下一页：//a[@class=’extend next’]/@href</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">".."</span>)</span><br><span class="line"><span class="keyword">from</span> items <span class="keyword">import</span> MyblogspiderItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TonylitspiderSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#爬虫名称</span></span><br><span class="line">    name = <span class="string">'tonylitspider'</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#爬取域范围，允许爬虫在这个域名下进行爬取（可选）</span></span><br><span class="line">    allowed_domains = [<span class="string">'tonylit.me'</span>]</span><br><span class="line">    </span><br><span class="line">    baseURL = <span class="string">"http://tonylit.me/"</span></span><br><span class="line">    <span class="comment">#从此url开始爬取</span></span><br><span class="line">    start_urls = [<span class="string">'http://tonylit.me/'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">	</span><br><span class="line">        <span class="comment">#获取文章标题</span></span><br><span class="line">	title_list = response.xpath(<span class="string">"//a[@class='article-title']/text()"</span>).extract()</span><br><span class="line">	</span><br><span class="line">        <span class="comment">#获取文章标签</span></span><br><span class="line">        tag_list = response.xpath(<span class="string">"//ul[@class='article-tag-list']/li/a/text()"</span>).extract()</span><br><span class="line"></span><br><span class="line">	<span class="comment">#获取文章链接</span></span><br><span class="line">        link_list = response.xpath(<span class="string">"//a[@class='article-title']/@href"</span>).extract()</span><br><span class="line"></span><br><span class="line">	<span class="comment">#获取发布时间</span></span><br><span class="line">        time_list =  response.xpath(<span class="string">"//time/@datetime"</span>).extract()</span><br><span class="line"></span><br><span class="line">	<span class="comment">#创建items对象-orm</span></span><br><span class="line">	items = MyblogspiderItem()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		<span class="comment">#每页8篇文章</span></span><br><span class="line">		<span class="keyword">for</span> temp <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">8</span>):</span><br><span class="line">	        	<span class="comment">#存储文章标题到item	</span></span><br><span class="line">        		items[<span class="string">'title'</span>] = title_list[temp].encode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line">        		<span class="comment">#存储文章标签到item </span></span><br><span class="line">			items[<span class="string">'tag'</span>] = tag_list[temp].encode(<span class="string">"utf-8"</span>)</span><br><span class="line">	</span><br><span class="line">        		<span class="comment">#存储文章链接到item </span></span><br><span class="line">			items[<span class="string">'link'</span>] = str(<span class="string">"http://tonylit.me"</span>) + link_list[temp].encode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line">        		<span class="comment">#存储发布时间到item </span></span><br><span class="line">			items[<span class="string">'time'</span>] = time_list[temp].encode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line">			<span class="keyword">yield</span> items</span><br><span class="line"></span><br><span class="line">	<span class="keyword">except</span> :</span><br><span class="line">		<span class="keyword">print</span> <span class="string">"error"</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="comment">#进行翻页处理</span></span><br><span class="line">		nextPage = response.xpath(<span class="string">"//a[@class='extend next']/@href"</span>).extract()[<span class="number">0</span>].encode(<span class="string">"utf-8"</span>)</span><br><span class="line">		<span class="keyword">if</span>  len(nextPage) != <span class="number">0</span>:</span><br><span class="line">			nextURL = <span class="string">'http://tonylit.me/'</span>+ str(nextPage) </span><br><span class="line">			<span class="keyword">print</span> nextURL	</span><br><span class="line">			<span class="comment">#递归调用parse</span></span><br><span class="line">			<span class="keyword">yield</span> scrapy.Request(nextURL,callback = self.parse)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span> : </span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h3 id="编写pipeline-py">编写pipeline.py</h3><p>编写管道文件，把爬取的信息输出到文件中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define your item pipelines here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class="line"><span class="comment"># See: http://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyblogspiderPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#初始化，打开tonylit.json文件，用来写入items</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">	self.f = open(<span class="string">"tonylit.json"</span>,<span class="string">"w"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        </span><br><span class="line">	<span class="comment">#把item转成字典，写入文件中</span></span><br><span class="line">     	content = json.dumps(dict(item)) + <span class="string">", \n"</span></span><br><span class="line">        self.f.write(content)</span><br><span class="line">        </span><br><span class="line"> 	<span class="keyword">return</span> item</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#spider全部结束后，关闭文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self,spider)</span>:</span></span><br><span class="line">	self.f.close()</span><br></pre></td></tr></table></figure>
<h3 id="修改settings-py">修改settings.py</h3><p>把ITEM_PIPELINES 配置放开，启用pipeline</p>
<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="component">ITEM_PIPELINES = &#123;</span><br><span class="line">    'myblogspider<span class="string">.pipelines.MyblogspiderPipeline':</span> 300,</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="scrapy_check&amp;&amp;_scrapy_crawl">scrapy check&amp;&amp; scrapy crawl</h2><p>编写完成后，先进行check，再执行爬虫</p>
<blockquote>
<p>scrapy check tonylitspider<br>scrapy crawl tonylitspider</p>
</blockquote>
<p>执行后，生成tonylit.json，里面就是爬取的信息了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>网络爬虫简单来说就是模拟用户操作浏览器或者app，并获取、筛选信息的程序。</p>
<p><img src="/img/python爬虫/爬虫.PNG" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="Python" scheme="http://tonylit.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自制python包并安装到系统中]]></title>
    <link href="http://tonylit.me/2017/11/03/%E8%87%AA%E5%88%B6python%E5%8C%85%E5%B9%B6%E5%AE%89%E8%A3%85%E5%88%B0%E7%B3%BB%E7%BB%9F%E4%B8%AD/"/>
    <id>http://tonylit.me/2017/11/03/自制python包并安装到系统中/</id>
    <published>2017-11-03T03:37:27.000Z</published>
    <updated>2017-11-03T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>简单介绍怎样制作python的包并安装到系统中。<br><img src="/img/python_module/python_module.PNG" alt="Alt text"></p>
<a id="more"></a>
<hr>
<h1 id="编写setup-py文件">编写setup.py文件</h1><p>在自己编写的python包中编写setup.py文件<br><img src="/img/python_module/setup.PNG" alt="Alt text"></p>
<p>testAA.py:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printHello</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="keyword">print</span> <span class="string">"hello python"</span></span><br></pre></td></tr></table></figure>
<h2 id="setup-py">setup.py</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</span><br><span class="line"></span><br><span class="line">setup(name=<span class="string">'tony'</span>,</span><br><span class="line">      version=<span class="string">'1.0'</span>,</span><br><span class="line">      <span class="keyword">description</span>=<span class="string">"tony's module"</span>,</span><br><span class="line">      author=<span class="string">'tony'</span>,</span><br><span class="line">      py_modules=[<span class="string">'testAA'</span>], #py_modules中指明所需包含的py文件</span><br><span class="line">      )</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="编译">编译</h1><p>执行python setup.py build命令进行编译</p>
<p><img src="/img/python_module/build.PNG" alt="Alt text"></p>
<p>执行后生成build文件夹</p>
<hr>
<h1 id="生成发布压缩包">生成发布压缩包</h1><p>执行python setup.py sdist命令，生成发布的压缩包</p>
<p><img src="/img/python_module/sdist.PNG" alt="Alt text"></p>
<hr>
<h1 id="模块安装使用">模块安装使用</h1><ol>
<li><p>解压压缩包</p>
<blockquote>
<p>tar -xvf tony-1.0.tar.gz</p>
</blockquote>
</li>
<li><p>进入文件夹 </p>
<blockquote>
<p>cd tony-1.0</p>
</blockquote>
</li>
</ol>
<ol>
<li>执行python setup.py install</li>
</ol>
<p><img src="/img/python_module/install.PNG" alt="Alt text"></p>
<p>现在模块已经安装到系统中，可以import导入并使用。<br><img src="/img/python_module/import.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>简单介绍怎样制作python的包并安装到系统中。<br><img src="/img/python_module/python_module.PNG" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="Python" scheme="http://tonylit.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Welcome to Python]]></title>
    <link href="http://tonylit.me/2017/10/30/Welcome%20to%20Python/"/>
    <id>http://tonylit.me/2017/10/30/Welcome to Python/</id>
    <published>2017-10-30T03:37:27.000Z</published>
    <updated>2017-10-30T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p><strong>Life is short. You need Python.</strong></p>
<p><img src="/img/python/人生苦短我用python.PNG" alt="Alt text"></p>
<a id="more"></a>
<hr>
<h1 id="python的初印象">python的初印象</h1><p>在学习python之前，我印象的python有几个特点：</p>
<ol>
<li><p>写更少的代码。 比如实现一个功能，C需要100行，java需要20~30 行，Python只需要几行。</p>
</li>
<li><p>解释型的语言。程序不需要编译，每个语句都是执行的时候才翻译。</p>
</li>
<li><p>面向对象。 降低了开发难度，适用团队开发。</p>
</li>
<li><p>强大的第三方库。比如最近火热的机器学习。</p>
</li>
</ol>
<hr>
<h1 id="开发环境">开发环境</h1><p>windows平台使用的sublime text3+ python。<br><a href="https://www.sublimetext.com/" target="_blank" rel="external">https://www.sublimetext.com/</a><br><a href="https://www.python.org/downloads/" target="_blank" rel="external">https://www.python.org/downloads/</a></p>
<p>linux下推荐使用的ipython。<br><a href="https://github.com/ipython/ipython" target="_blank" rel="external">https://github.com/ipython/ipython</a><br>解压后：python setup.py  install，安装即可。</p>
<hr>
<h1 id="python基础数据类型">python基础数据类型</h1><p>  <img src="/img/python/python基础数据类型.PNG" alt="Alt text"></p>
<hr>
<h1 id="输入输出">输入输出</h1><p><strong>print()输出</strong><br><strong>input() &amp;&amp;raw_input()：输入</strong></p>
<p>python2中input输入的为整型，raw_input输入的为字符串。</p>
<p><img src="/img/python/input.PNG" alt="Alt text"></p>
<hr>
<h2 id="输入输出demo">输入输出demo</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/python</span></span><br><span class="line">#coding=utf-8</span><br><span class="line">name = raw_input<span class="list">(<span class="string">"请输入姓名："</span>)</span></span><br><span class="line">passwd = raw_input<span class="list">(<span class="string">"请输入密码："</span>)</span></span><br><span class="line">qq = raw_input<span class="list">(<span class="string">"请输入QQ号："</span>)</span></span><br><span class="line"></span><br><span class="line">print <span class="list">(<span class="string">"姓名：%s 密码：%s QQ号为：%s"</span> %<span class="list">(<span class="keyword">name</span>,passwd,qq)</span>)</span></span><br></pre></td></tr></table></figure>
<p><img src="/img/python/input_demo.PNG" alt="Alt text"></p>
<hr>
<h1 id="if_-_elif_-_else语句">if - elif - else语句</h1><h2 id="if-elif-else语法">if-elif-else语法</h2><p>if 要判断的条件:<br>      …..<br>elif 要判断的条件 :<br>     ……<br>else<br>     ……</p>
<h3 id="if-elif-else_demo:">if-elif-else demo:</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">a</span> = -<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="operator">a</span> &gt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">        print (<span class="operator">a</span>)</span><br><span class="line"></span><br><span class="line">elif <span class="operator">a</span> = <span class="number">0</span>:</span><br><span class="line">       </span><br><span class="line">        print (<span class="operator">a</span>+<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">        print (<span class="operator">a</span>+<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="逻辑运算符">逻辑运算符</h2><p>and ： 与<br>or ：或<br>not ：非</p>
<hr>
<h1 id="循环while">循环while</h1><h2 id="语法：">语法：</h2><p>while 条件:<br>    ……</p>
<h2 id="while_demo:">while demo:</h2><p>打印一个三角图形：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> a &lt; <span class="number">6</span>:</span><br><span class="line">	print(<span class="string">'*'</span>*a)</span><br><span class="line">	a+=<span class="number">1</span>;</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/python/while.PNG" alt="Alt text"></p>
<p>打印99乘法表：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">from</span> __future__ import print_function</span><br><span class="line"><span class="operator">a</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>  <span class="operator">a</span> &lt;= <span class="number">9</span> :</span><br><span class="line">	i = <span class="number">1</span></span><br><span class="line">	<span class="keyword">while</span> i&lt;=<span class="operator">a</span> :</span><br><span class="line">		<span class="built_in">sum</span> = i*<span class="operator">a</span></span><br><span class="line">		print(<span class="string">"%d*%d=%d"</span>%(i,<span class="operator">a</span>,<span class="built_in">sum</span>),<span class="function"><span class="keyword">end</span> = ' ')</span></span><br><span class="line">		i+=<span class="number">1</span></span><br><span class="line">	print(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">	<span class="operator">a</span>+=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><img src="/img/python/99chengfa-while.PNG" alt="Alt text"></p>
<hr>
<h1 id="for_循环">for 循环</h1><h2 id="for循环语法">for循环语法</h2><p>for 变量 in xxx :<br>    ……</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="property">name</span> = <span class="string">"abcdefg"</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="property">name</span>:</span><br><span class="line">	print x</span><br></pre></td></tr></table></figure>
<h2 id="break_和_continue">break 和 continue</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="property">name</span> = <span class="string">"abcdefg"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="property">name</span>:</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> x==<span class="string">"b"</span>:</span><br><span class="line">		<span class="keyword">continue</span></span><br><span class="line">	<span class="keyword">if</span> x==<span class="string">"d"</span>:</span><br><span class="line">		break</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>a<br>c</p>
</blockquote>
<hr>
<h1 id="字符串、列表、元组、字典">字符串、列表、元组、字典</h1><p>字符串：xxxx<br>列表：[xxxx]<br>元组：(xxxx)<br>字典{xxxx:xxxx}</p>
<h2 id="字符串">字符串</h2><p>双引号或者单引号中的数据，就是字符串。<br>a=”abc defg”<br>或者<br>a=’abc defg’</p>
<h3 id="下标">下标</h3><p>name= “abcdef”</p>
<blockquote>
<p>name[0]为a<br>name[1]为b<br>name[5]为f<br>name[-1]为f，取最后一个</p>
</blockquote>
<h3 id="切片">切片</h3><p>切片是对字符串截取的操作，[起始:结束:步长]。<br>选取的区间为左闭右开。<br>name=”abcdef”</p>
<blockquote>
<p>name[0:3]为abc<br>name[0:3:2] 为ac，每次取2步<br>name[3:]为def，取d后面的字符串<br>name[-1:-3:-1] 为fe，从后往前取值，步长为-1（向前取）<br>name[-1::-1]为fedcba<br>name[::-1]为fedcba</p>
</blockquote>
<h3 id="find">find</h3><p>检测字符串中是否包含字符串，包含返回索引值，否则返回-1<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">"abcdefg"</span></span><br><span class="line">str2 = <span class="string">"abc"</span></span><br><span class="line">str3 = <span class="string">"ef"</span></span><br><span class="line">print (str1.<span class="function"><span class="title">find</span><span class="params">(str2)</span></span>)</span><br><span class="line">print (str1.<span class="function"><span class="title">find</span><span class="params">(str3)</span></span>)</span><br><span class="line">print (str1.<span class="function"><span class="title">rfind</span><span class="params">(str3)</span></span>) #从后往前找</span><br></pre></td></tr></table></figure></p>
<p>输出：</p>
<blockquote>
<p>0<br>4<br>4</p>
</blockquote>
<h4 id="find_demo_判断文件以-py结尾">find demo 判断文件以.py结尾</h4><p>这里不使用endswith函数，使用find和下标实现</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fileName=<span class="function"><span class="title">raw_input</span><span class="params">(<span class="string">"please input fileName:"</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> fileName.<span class="function"><span class="title">find</span><span class="params">(<span class="string">"."</span>)</span></span> == -<span class="number">1</span> :</span><br><span class="line">        print (<span class="string">"please input right fileName"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">        str = fileName.<span class="function"><span class="title">rfind</span><span class="params">(<span class="string">"."</span>)</span></span></span><br><span class="line">        fileEnd = fileName[-<span class="number">1</span>:str:-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> fileEnd != <span class="string">"yp"</span> :</span><br><span class="line">                print <span class="string">"please input python file"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">                print fileName</span><br></pre></td></tr></table></figure>
<h3 id="count">count</h3><p>返回字符串出现的次数</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="property">name</span> = <span class="string">"abc abc abcd"</span></span><br><span class="line">print <span class="property">name</span>.<span class="command">count</span>(<span class="string">"abc"</span>)</span><br><span class="line">print <span class="property">name</span>.<span class="command">count</span>(<span class="string">"abc"</span>,<span class="number">3</span>,<span class="number">8</span>)<span class="comment">#从3~8位置找</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>3<br>1</p>
</blockquote>
<h3 id="replace">replace</h3><p>从字符串中替换</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"abc abc abcd"</span></span><br><span class="line">print name.<span class="function"><span class="title">replace</span><span class="params">(<span class="string">"abc"</span>,<span class="string">"ABC"</span>)</span></span></span><br><span class="line">print name.<span class="function"><span class="title">replace</span><span class="params">(<span class="string">"abc"</span>,<span class="string">"ABC"</span>,<span class="number">1</span>)</span></span>#替换<span class="number">1</span>次</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>ABC ABC ABCd<br>ABC abc abcd</p>
</blockquote>
<h3 id="split">split</h3><p>分割字符串</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'abc .abc. abcd'</span></span><br><span class="line">print name.<span class="function"><span class="title">split</span><span class="params">(<span class="string">"."</span>)</span></span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>[‘abc ‘, ‘abc’, ‘ abcd’]</p>
</blockquote>
<h3 id="capitalize">capitalize</h3><p>把字符串第一个字符大写</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'abc abc'</span></span><br><span class="line">print name.<span class="function"><span class="title">capitalize</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>Abc abc</p>
</blockquote>
<h3 id="title">title</h3><p>把字符串中的每个单词首字母大写</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'abc abc'</span></span><br><span class="line">print name.<span class="function"><span class="title">title</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>Abc Abc</p>
</blockquote>
<h3 id="upper_&amp;&amp;lower">upper &amp;&amp;lower</h3><p>upper 把字符串大写<br>lower 把字符串小写</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'Abc aBC'</span></span><br><span class="line">print name.<span class="function"><span class="title">upper</span><span class="params">()</span></span></span><br><span class="line">print name.<span class="function"><span class="title">lower</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>ABC ABC<br>abc abc</p>
</blockquote>
<h3 id="startswith_&amp;&amp;_endswith">startswith &amp;&amp; endswith</h3><p>startswith:检查字符串以XX开头，区分大小写<br>endswith:检查字符串以XX结尾，区分大小写</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'Abc aBC'</span></span><br><span class="line">print name.<span class="function"><span class="title">startswith</span><span class="params">(<span class="string">"Abc"</span>)</span></span></span><br><span class="line">print name.<span class="function"><span class="title">endswith</span><span class="params">(<span class="string">'aBC'</span>)</span></span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>True<br>True</p>
</blockquote>
<hr>
<h2 id="列表">列表</h2><p>有点像c、java中的数组</p>
<p>[100,2000,200000,”abcs”] 可以同时放整型、字符串等多种数据类型。</p>
<h3 id="列表循环">列表循环</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = [<span class="number">1</span>,<span class="string">'a'</span>,<span class="string">'aaa'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> name:</span><br><span class="line">	<span class="built_in">print</span> x</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>1<br>a<br>aaa</p>
</blockquote>
<p>使用枚举enumerate(),可以打印出下标</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="function"><span class="title">enumerate</span><span class="params">(names)</span></span> :</span><br><span class="line">	print name</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>(0, ‘a’)<br>(1, ‘b’)<br>(2, ‘c’)<br>(3, ‘d’)</p>
</blockquote>
<h3 id="列表增、删、改、查">列表增、删、改、查</h3><h4 id="列表增">列表增</h4><h5 id="append">append</h5><p>通过append添加元素<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = [<span class="number">1</span>,<span class="string">'a'</span>,<span class="string">'aaa'</span>]</span><br><span class="line">name.<span class="function"><span class="title">append</span><span class="params">(<span class="string">"bbb"</span>)</span></span></span><br><span class="line">print name</span><br></pre></td></tr></table></figure></p>
<p>输出：</p>
<blockquote>
<p>[1, ‘a’, ‘aaa’, ‘bbb’]</p>
</blockquote>
<h5 id="insert">insert</h5><p>通过insert插入元素，insert(index,object)</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = [<span class="number">1</span>,<span class="string">'a'</span>,<span class="string">'aaa'</span>]</span><br><span class="line">name.<span class="function"><span class="title">insert</span><span class="params">(<span class="number">1</span>,<span class="string">'ss'</span>)</span></span></span><br><span class="line">print name</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>[1, ‘ss’, ‘a’, ‘aaa’]</p>
</blockquote>
<h5 id="extend">extend</h5><p> 通过extend将另外一个集合中的元素添加到列表中。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">name2 = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line">name1.extend(name2)</span><br><span class="line">print name1</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>[1, 2, 3, ‘a’, ‘b’, ‘c’]</p>
</blockquote>
<h4 id="列表改">列表改</h4><p> 修改元素的时候，需要通过下标来确定要修改的元素，然后再修改。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">name[<span class="number">0</span>] = <span class="number">99</span><span class="preprocessor">#修改</span></span><br><span class="line">print name</span><br></pre></td></tr></table></figure>
<p>输出:</p>
<blockquote>
<p>[99, 2, 3]</p>
</blockquote>
<h4 id="列表查">列表查</h4><p>in:存在<br>not in: 不存在</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">name</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span> (<span class="number">1</span> <span class="type">in</span> <span class="keyword">name</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="number">4</span> <span class="type">in</span> <span class="keyword">name</span> )</span><br><span class="line"><span class="built_in">print</span> (<span class="number">4</span> not <span class="type">in</span> <span class="keyword">name</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>True<br>False<br>True</p>
</blockquote>
<h4 id="列表删">列表删</h4><p>del：根据下标删除元素<br>pop：删除最后一个元素<br>remove：根据元素的值删除</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">name1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>]</span><br><span class="line">name2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>]</span><br><span class="line">name3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>]</span><br><span class="line">name4 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>]</span><br><span class="line">del name1 [<span class="number">0</span>] </span><br><span class="line">del name2 [<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">name3.pop()</span><br><span class="line">name4.remove(<span class="number">1</span>) </span><br><span class="line">print name1</span><br><span class="line">print name2</span><br><span class="line">print name3</span><br><span class="line">print name4</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>[2, 3, 4, 5, 6, 7, 8, 9, 0]<br>[5, 6, 7, 8, 9, 0]<br>[1, 2, 3, 4, 5, 6, 7, 8, 9]<br>[2, 3, 4, 5, 6, 7, 8, 9, 0]</p>
</blockquote>
<hr>
<h2 id="元组">元组</h2><p>与列表类似，不同之处在于元祖的元素不能修改。<br>name = (1,2,3,4,5)</p>
<p>常用于存储常量值。</p>
<hr>
<h2 id="字典">字典</h2><p>类似java中的map</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = &#123;<span class="string">"name1"</span>:<span class="string">"lisi"</span>,<span class="string">"name2"</span>:<span class="string">"wangwu"</span>&#125;</span><br><span class="line"><span class="built_in">print</span> name</span><br><span class="line"><span class="built_in">print</span> name[<span class="string">'name1'</span>]</span><br><span class="line"><span class="built_in">print</span> name.<span class="literal">get</span>(<span class="string">'name1'</span>)</span><br><span class="line"><span class="built_in">print</span> name.<span class="literal">get</span>(<span class="string">'name5'</span>,<span class="string">"none"</span>) #没有取到name5，取none</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>{‘name2’: ‘wangwu’, ‘name1’: ‘lisi’}<br>lisi<br>lisi<br>none</p>
</blockquote>
<h5 id="字典添加元素">字典添加元素</h5><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="property">name</span> = &#123;<span class="string">"name1"</span>:<span class="string">"lisi"</span>,<span class="string">"name2"</span>:<span class="string">"wangwu"</span>&#125;</span><br><span class="line"><span class="property">name</span>['name3'] = <span class="string">"maliu"</span></span><br><span class="line">print <span class="property">name</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>{‘name2’: ‘wangwu’, ‘name3’: ‘maliu’, ‘name1’: ‘lisi’}</p>
</blockquote>
<h5 id="字典修改元素">字典修改元素</h5><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="property">name</span> = &#123;<span class="string">"name1"</span>:<span class="string">"lisi"</span>,<span class="string">"name2"</span>:<span class="string">"wangwu"</span>&#125;</span><br><span class="line"><span class="property">name</span>['name1'] = <span class="string">"maliu"</span></span><br><span class="line">print <span class="property">name</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>{‘name2’: ‘wangwu’, ‘name1’: ‘maliu’}</p>
</blockquote>
<h5 id="字段删除元素">字段删除元素</h5><p>del：按key删<br>clear：删除全部元素</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="property">name</span> = &#123;<span class="string">"name1"</span>:<span class="string">"lisi"</span>,<span class="string">"name2"</span>:<span class="string">"wangwu"</span>,<span class="string">"name3"</span>:<span class="string">"maliu"</span>&#125;</span><br><span class="line">del <span class="property">name</span>['name1']</span><br><span class="line">print <span class="property">name</span></span><br><span class="line"></span><br><span class="line"><span class="property">name</span>.clear()</span><br><span class="line">print <span class="property">name</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>{‘name2’: ‘wangwu’, ‘name3’: ‘maliu’}<br>{}</p>
</blockquote>
<h5 id="字典keys_&amp;_values">字典keys &amp; values</h5><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = &#123;<span class="string">"name1"</span>:<span class="string">"lisi"</span>,<span class="string">"name2"</span>:<span class="string">"wangwu"</span>,<span class="string">"name3"</span>:<span class="string">"maliu"</span>&#125;</span><br><span class="line"><span class="keyword">print</span> name.<span class="keyword">keys</span>()</span><br><span class="line"><span class="keyword">print</span> name.<span class="keyword">values</span>()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>[‘name2’, ‘name3’, ‘name1’]<br>[‘wangwu’, ‘maliu’, ‘lisi’]</p>
</blockquote>
<h5 id="items">items</h5><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="property">name</span> = &#123;<span class="string">"name1"</span>:<span class="string">"lisi"</span>,<span class="string">"name2"</span>:<span class="string">"wangwu"</span>,<span class="string">"name3"</span>:<span class="string">"maliu"</span>&#125;</span><br><span class="line">print <span class="property">name</span>.items()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>[(‘name2’, ‘wangwu’), (‘name3’, ‘maliu’), (‘name1’, ‘lisi’)]</p>
</blockquote>
<h5 id="has_key">has_key</h5><p>has_key(key)如果key在字典中，返回true</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="property">name</span> = &#123;<span class="string">"name1"</span>:<span class="string">"lisi"</span>,<span class="string">"name2"</span>:<span class="string">"wangwu"</span>,<span class="string">"name3"</span>:<span class="string">"maliu"</span>&#125;</span><br><span class="line">print <span class="property">name</span>.has_key('name1')</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>True</p>
</blockquote>
<h5 id="字典遍历">字典遍历</h5><p>把字典转化成列表<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = &#123;<span class="string">"name1"</span>:<span class="string">"lisi"</span>,<span class="string">"name2"</span>:<span class="string">"wangwu"</span>,<span class="string">"name3"</span>:<span class="string">"maliu"</span>&#125;</span><br><span class="line"><span class="keyword">for</span> name,<span class="built_in">value</span> <span class="operator">in</span> names.<span class="keyword">items</span>():</span><br><span class="line">	print name,<span class="built_in">value</span></span><br></pre></td></tr></table></figure></p>
<p>输出：</p>
<blockquote>
<p>name2 wangwu<br>name3 maliu<br>name1 lisi</p>
</blockquote>
<hr>
<h1 id="函数">函数</h1><p>一直觉得python之所以这么牛B，主要因为强大的第三方函数库。</p>
<p>python的函数定义和调用很简单。</p>
<p> def methodName(参数) :<br>     ……</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printName</span><span class="params">(name)</span>:</span></span><br><span class="line">	<span class="keyword">print</span> (<span class="string">"hello %s"</span> %name)</span><br><span class="line"></span><br><span class="line">printName(<span class="string">"lisi"</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>hello lisi</p>
</blockquote>
<hr>
<h2 id="函数的参数">函数的参数</h2><p>python支持不按照顺序传参</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">numAdd</span><span class="params">(a,b)</span>:</span></span><br><span class="line">	sum = a + b</span><br><span class="line">	<span class="keyword">print</span> (<span class="string">"%s+%s=%s"</span> %(a,b,sum))</span><br><span class="line"></span><br><span class="line">numAdd(<span class="number">100</span>,<span class="number">200</span>)</span><br><span class="line">numAdd(b=<span class="number">100</span>,a=<span class="number">200</span>)<span class="comment">##指定参数值</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>100+200=300<br>200+100=300</p>
</blockquote>
<h3 id="缺省参数">缺省参数</h3><p>函数中指定一个参数的值，调用的时候可以不用传值。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a,b=<span class="number">110</span>)</span>:</span></span><br><span class="line">	<span class="keyword">print</span> a,b</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">test(<span class="number">1</span>)<span class="comment">#调用的时候b不传值</span></span><br></pre></td></tr></table></figure>
<p>输出:</p>
<blockquote>
<p>1 2<br>1 110</p>
</blockquote>
<h3 id="不定长参数">不定长参数</h3><p>参数的数量不确定。<br><em>参数名为元组数据类型<br>*</em>参数名为字典数据类型</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def <span class="function"><span class="title">test</span><span class="params">(a,*b,**c)</span></span>:</span><br><span class="line">	print <span class="tag">a</span>,<span class="tag">b</span>,c</span><br><span class="line">	print (<span class="function"><span class="title">type</span><span class="params">(b)</span></span>)</span><br><span class="line">	print (<span class="function"><span class="title">type</span><span class="params">(c)</span></span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">test</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,num1=<span class="number">10</span>,num2=<span class="number">100</span>)</span></span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>1 (2, 3, 4) {‘num1’: 10, ‘num2’: 100}</p>
<p><type 'tuple'=""></type></p>
<type 'dict'="">


</type></blockquote>
<hr>
<h2 id="函数返回值">函数返回值</h2><p>return xxx<br>return xxx,xxx 可以返回多个值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numAdd</span><span class="params">(a,b)</span>:</span></span><br><span class="line">	sum = a + b</span><br><span class="line">	<span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line">sum = numAdd(<span class="number">100</span>,<span class="number">200</span>)</span><br><span class="line"><span class="keyword">print</span> sum</span><br></pre></td></tr></table></figure></p>
<p>输出：</p>
<blockquote>
<p>300</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#return多个值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNameAndAge</span><span class="params">()</span>:</span></span><br><span class="line">	name = <span class="string">'lisi'</span></span><br><span class="line">	age = <span class="number">18</span></span><br><span class="line">	<span class="keyword">return</span> name,age</span><br><span class="line"></span><br><span class="line">name,age = getNameAndAge()</span><br><span class="line"><span class="keyword">print</span> name,age</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>lisi 18</p>
</blockquote>
<hr>
<h2 id="局部变量_&amp;&amp;_全局变量">局部变量 &amp;&amp; 全局变量</h2><p>简单来说，函数内部的为局部变量，函数外的为全局变量。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span><br><span class="line">全局变量</span><br><span class="line">'''</span></span><br><span class="line">num1 = <span class="number">10</span></span><br><span class="line">num2 = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">	num1 = <span class="number">100</span><span class="comment">#局部变量</span></span><br><span class="line">	<span class="keyword">print</span> num1,num2</span><br><span class="line"></span><br><span class="line">A()</span><br><span class="line"><span class="keyword">print</span> num1,num2</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>100 20<br>10 20</p>
</blockquote>
<hr>
<h1 id="面向对象编程">面向对象编程</h1><p>一切皆对象！</p>
<hr>
<h2 id="类与对象">类与对象</h2><p><strong>类的构成</strong></p>
<blockquote>
<p>类名<br>属性<br>方法</p>
</blockquote>
<p><strong>对象</strong></p>
<blockquote>
<p>对象名= 类名()</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义类名</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> :</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">#定义方法</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">print</span> (<span class="string">'eat food: %s'</span> %self.food)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建对象</span></span><br><span class="line">wangwu = Person()</span><br><span class="line"><span class="comment">#添加对象属性</span></span><br><span class="line">wangwu.food = <span class="string">'noodle'</span></span><br><span class="line"><span class="comment">#对象的方法调用</span></span><br><span class="line">wangwu.eat()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>eat food: noodle</p>
</blockquote>
<hr>
<h3 id="__init___方法">_ <em>init</em> _ 方法</h3><p>类似java类中的构造函数，对类进行初始化。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> :</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">#创建对象的时候执行</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">		self.food = <span class="string">'rice'</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">print</span> (<span class="string">'eat food: %s'</span> %self.food)</span><br><span class="line"></span><br><span class="line">wangwu = Person()</span><br><span class="line"></span><br><span class="line">wangwu.eat()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>eat food: rice</p>
</blockquote>
<h4 id="__init()___方法参数">_ <em>init()</em> _  方法参数</h4><p>类似java中带参的构造函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> :</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">#含参数</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,food)</span>:</span></span><br><span class="line">		self.food = food</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">print</span> (<span class="string">'eat food: %s'</span> %self.food)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用的时候传参</span></span><br><span class="line">wangwu = Person(<span class="string">'noodle'</span>)</span><br><span class="line"></span><br><span class="line">wangwu.eat()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>eat food: noodle</p>
</blockquote>
<hr>
<h2 id="理解self">理解self</h2><p>字面理解：自己的意思，类似java中的this关键字。</p>
<p>其实可以写成其他任意名字，比如this，temp，使用self我觉得是一种规范吧。</p>
<p>至于为啥不隐藏呢，主要体现语言设计者的品味。</p>
<p>打印self看一下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> :</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">print</span> self</span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line">t.test()</span><br><span class="line"><span class="keyword">print</span> t</span><br></pre></td></tr></table></figure></p>
<p>输出：</p>
<blockquote>
<p><__main__.test instance="" at="" 0x0000000002322a88=""></__main__.test></p>
<__main__.test instance="" at="" 0x0000000002322a88="">

</__main__.test></blockquote>
<p>代表当前对象的地址。</p>
<hr>
<h2 id="__str__方法">_ <em>str</em> _方法</h2><p>python中有许多有意思的魔法方法，当使用print输出对象的时候，如果定义了_ <em>str</em> _(self)方法，则打印该方法return的数据。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> :</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">"hello world"</span></span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line"><span class="keyword">print</span> t <span class="comment"># 打印的是__str__返回的内容</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>hello world</p>
</blockquote>
<hr>
<h2 id="私有属性">私有属性</h2><p> 属性前加双下划线<em> </em>为私有属性</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> :</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,num1,num2)</span>:</span></span><br><span class="line">		self.__num1 = num1 <span class="comment">#私有属性，外部无法修改</span></span><br><span class="line">		self.num2 = num2 <span class="comment">#共有属性，外部可以修改</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">"num1: "</span> + str(self.__num1) + <span class="string">" num2: "</span>+str(self.num2)</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">setNum</span><span class="params">(self,newNum)</span>:</span></span><br><span class="line">		self.__num1 = newNum <span class="comment">#内部可以修改类中的私有属性</span></span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">t = Test(<span class="number">10</span>,<span class="number">100</span>)</span><br><span class="line"><span class="keyword">print</span> t</span><br><span class="line"></span><br><span class="line">t.__num1 = <span class="number">20</span> <span class="comment">#外部设置类中的私有属性，无效</span></span><br><span class="line">t.num2 = <span class="number">200</span></span><br><span class="line"><span class="keyword">print</span> t</span><br><span class="line"></span><br><span class="line">t.setNum(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">print</span> t</span><br></pre></td></tr></table></figure>
<p> 输出：</p>
<blockquote>
<p>num1: 10 num2: 100<br>num1: 10 num2: 200<br>num1: 20 num2: 200</p>
</blockquote>
<h2 id="私有方法">私有方法</h2><p>跟私有属性一样，前面加两个下划线为私有方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__privateMethod</span><span class="params">(self)</span>:</span><span class="comment">#私有方法</span></span><br><span class="line">		<span class="keyword">print</span> <span class="string">"private method"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class <span class="keyword">Animal</span> :</span><br><span class="line"></span><br><span class="line">	def __privcateTest(self):</span><br><span class="line">		print (<span class="string">"private method"</span>)</span><br><span class="line"></span><br><span class="line">	def printinfo(self):#内部访问私有方法</span><br><span class="line">		self.__privcateTest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">animal</span> = <span class="keyword">Animal</span>()</span><br><span class="line"><span class="keyword">animal</span>.printinfo()</span><br><span class="line"><span class="keyword">animal</span>._Animal__privcateTest() #调用的时候，python解析器把所有以双下划线开头的方法翻译成_类名__私有方法的形式。</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p> private method<br>private method</p>
</blockquote>
<hr>
<h2 id="__del__()方法">_ <em>del</em> _()方法</h2><p>创建对象时，python的解释器默认调用_ <em>init </em> <em>方法。<br>当删除一个对象时，python的解释器也会调用一个方法，这个方法就是</em> <em>del</em> _方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> :</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">print</span> (<span class="string">"----python init ----"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">"I'm python"</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">print</span> (<span class="string">"----python del ----"</span>)</span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line"><span class="keyword">print</span> t </span><br><span class="line"><span class="keyword">print</span> <span class="string">"python go go go"</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>—-python init —-<br>I’m python<br>python  go go go<br>—-python del —-</p>
</blockquote>
<p>python解释器，如果检测一个对象没有任何用处了，则把该对象回收掉。</p>
<p>这里的回收主要是使用引用计数法，当该对象的引用数为0的时候，会执行del方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> :</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">print</span> (<span class="string">"----python init ----"</span>)</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">"I'm python"</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">print</span> (<span class="string">"----python del ----"</span>)</span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line">t1 = t</span><br><span class="line">t2 = t</span><br><span class="line">t3 = t</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"------1-------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> t </span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> t1</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"------2-------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> t2</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"------3-------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> t3  <span class="comment">#对象的引用数为0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"------4-------"</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>—-python init —-<br>——1——-<br>——2——-<br>——3——-<br>—-python del —-<br>——4——-</p>
</blockquote>
<hr>
<h2 id="继承">继承</h2><p>与java一样，python也有继承。</p>
<p>class 子类名(父类名):<br>    …..</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> :</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">		self.name = name</span><br><span class="line">		self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span> :</span> <span class="comment">#继承Animal类</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">printInfo</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">print</span> self.name,self.age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">littleDog = Dog (<span class="string">"xiaogougou"</span>,<span class="string">"2"</span>)</span><br><span class="line">littleDog.printInfo()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>xiaogougou 2</p>
</blockquote>
<p><strong>需要注意：父类的私有属性和私有方法无法被继承。</strong></p>
<h3 id="重写">重写</h3><p>子类中有一个和父类相同名字的方法，在子类中的方法覆盖掉父类中同名的方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">(object)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">print</span> <span class="string">"parent method"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Children</span><span class="params">(Parent)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">print</span> <span class="string">"Children method"</span></span><br><span class="line">		Parent.test(self) <span class="comment">#子类中调用父类方法，通过类名.方法名		super(Children,self).test()#子类中调用父类方法，通过super方式</span></span><br><span class="line">		</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">child = Children()</span><br><span class="line">child.test()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>Children method<br>parent method<br>parent method</p>
</blockquote>
<h3 id="多继承">多继承</h3><p>python跟C++一样，支持多继承。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class1</span><span class="params">(object)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">print</span> <span class="string">"test1"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class2</span><span class="params">(object)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">print</span> <span class="string">"test2"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class3</span><span class="params">(Class1,Class2)</span>:</span> <span class="comment">#继承Class1,Class2</span></span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">class3 = Class3()</span><br><span class="line">class3.test1()</span><br><span class="line">class3.test2()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>test1<br>test2</p>
</blockquote>
<p>若父类中有相同名称的方法，就近调用。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class1</span><span class="params">(object)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">print</span> <span class="string">"test1"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class2</span><span class="params">(object)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">print</span> <span class="string">"test2"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class3</span><span class="params">(Class1,Class2)</span>:</span><span class="comment">#Class1,Class2 中都有test方法，就近找Class1中的test</span></span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">class3 = Class3()</span><br><span class="line">class3.test()</span><br><span class="line"><span class="keyword">print</span> (Class3.__mro__)<span class="comment"># 打印调用关系</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>test1<br>(<class '__main__.class3'="">, <class '__main__.class1'="">, <class '__main__.class2'="">, <type 'object'="">)</type></class></class></class></p>
</blockquote>
<hr>
<h2 id="多态">多态</h2><p>相对于java的多态，python的多态更像是一种思想。</p>
<p>也可以简单理解为不同的类中有相同名称的函数，通过调用这些相同名称的函数来实现不同功能。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">print</span> <span class="string">"Animal eat"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">print</span> <span class="string">"Dog eat"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">print</span> <span class="string">"Cat eat"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(temp)</span>:</span> </span><br><span class="line">	temp.eat()<span class="comment">#这个就是多态的表现形式</span></span><br><span class="line"></span><br><span class="line">animal  = Animal()</span><br><span class="line">dog = Dog()</span><br><span class="line">cat = Cat()</span><br><span class="line"></span><br><span class="line">eat(animal)</span><br><span class="line">eat(dog)</span><br><span class="line">eat(cat)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>Animal eat<br>Dog eat<br>Cat eat</p>
</blockquote>
<hr>
<h2 id="类方法">类方法</h2><p>python中的类方法类似java中的static方法，可以直接用类名.方法名调用。</p>
<p>在方法名上加@classmethod注解即可</p>
<p>class A(object):</p>
<pre><code>address = <span class="string">"shandong"</span>

<span class="decorator">@classmethod #类方法</span>
<span class="function"><span class="keyword">def</span> <span class="title">aa</span><span class="params">(cls)</span>:</span>
    cls.address = <span class="string">"beijing"</span>
</code></pre><p>A.aa() #类名直接调用<br>print A.address</p>
<hr>
<p> 输出：</p>
<blockquote>
<p>beijing</p>
</blockquote>
<hr>
<h1 id="异常">异常</h1><p>try:<br>    ….<br>except ErrorType as message:<br>    ….<br>else:<br>    ….#如果没有捕获异常，则执行<br>finally: #一定会执行<br>    …<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	<span class="keyword">print</span> <span class="string">"-------begin-------"</span></span><br><span class="line">	open(<span class="string">"123.txt"</span>,<span class="string">'r'</span>)</span><br><span class="line">	<span class="keyword">print</span> <span class="string">"-------end-------"</span></span><br><span class="line"><span class="keyword">except</span> IOError <span class="keyword">as</span> message:</span><br><span class="line">	<span class="keyword">print</span> <span class="string">"error"</span></span><br><span class="line">	<span class="keyword">print</span> message</span><br><span class="line"><span class="keyword">else</span>:<span class="comment">#没有异常的话，执行下面的</span></span><br><span class="line">	<span class="keyword">print</span> <span class="string">"no exception"</span></span><br><span class="line"><span class="keyword">finally</span>:<span class="comment">#一定执行</span></span><br><span class="line">	<span class="keyword">print</span> <span class="string">"close"</span></span><br></pre></td></tr></table></figure></p>
<p>输出：</p>
<blockquote>
<p>——-begin——-<br>error<br>[Errno 2] No such file or directory: ‘123.txt’<br>close</p>
</blockquote>
<hr>
<h2 id="抛出异常">抛出异常</h2><p>python使用raise关键字抛出异常，类似java的throw</p>
<h3 id="demo:_自定义一个异常，手动抛出。">demo: 自定义一个异常，手动抛出。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#自定义异常类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myException</span><span class="params">(Exception)</span>:</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,mesg)</span>:</span></span><br><span class="line">		Exception.__init__(self)</span><br><span class="line">		<span class="keyword">print</span> <span class="string">"define my exception"</span></span><br><span class="line">		self.mesg = mesg</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	<span class="keyword">print</span> <span class="string">"-------begin-------"</span></span><br><span class="line">	<span class="keyword">raise</span> myException(<span class="string">"I'm exception"</span>) <span class="comment">#手动抛出异常</span></span><br><span class="line">	<span class="keyword">print</span> <span class="string">"-------end-------"</span></span><br><span class="line"><span class="keyword">except</span> IOError <span class="keyword">as</span> message:</span><br><span class="line">	<span class="keyword">print</span> <span class="string">"error"</span></span><br><span class="line">	<span class="keyword">print</span> message</span><br><span class="line"><span class="keyword">except</span> myException,x:<span class="comment">#x变量绑定到异常实例</span></span><br><span class="line">	<span class="keyword">print</span> <span class="string">"myException"</span></span><br><span class="line">	<span class="keyword">print</span> x.mesg</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="keyword">print</span> <span class="string">"no exception"</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">	<span class="keyword">print</span> <span class="string">"close"</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>——-begin——-<br>define my exception<br>myException<br>I’m exception<br>close</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>Life is short. You need Python.</strong></p>
<p><img src="/img/python/人生苦短我用python.PNG" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="Python" scheme="http://tonylit.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[高性能的key-value数据库-Redis]]></title>
    <link href="http://tonylit.me/2017/10/11/%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84key-value%E6%95%B0%E6%8D%AE%E5%BA%93-Redis/"/>
    <id>http://tonylit.me/2017/10/11/高性能的key-value数据库-Redis/</id>
    <published>2017-10-11T03:37:27.000Z</published>
    <updated>2017-10-11T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>很多项目使用了Redis，找了一些资料简单的学习学习。</p>
<a id="more"></a>
<hr>
<h1 id="Redis的特点">Redis的特点</h1><h2 id="数据持久化">数据持久化</h2><p>Redis支持数据的持久化，可以将内存中的数据保存到磁盘上，重启的时候再次加载使用。</p>
<h2 id="支持多数据结构数据">支持多数据结构数据</h2><p>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</p>
<h2 id="性能高">性能高</h2><p>使用Redis自带的性能测试工具-redis-benchmark测试，单机读写均在5w/s以上。</p>
<h2 id="原子性">原子性</h2><p> Redis的所有操作都是原子性的，一个事物要么成功执行要么失败完全不执行。</p>
<hr>
<h1 id="Redis的安装">Redis的安装</h1><p>下载地址：<a href="http://redis.io/download" target="_blank" rel="external">http://redis.io/download</a></p>
<blockquote>
<p>tar -xvf redis-4.0.2.tar.gz<br>cd redis-4.0.2<br>make </p>
</blockquote>
<h2 id="Redis服务启动">Redis服务启动</h2><p>编译完成后进入src目录，里面有服务端、客户端启动脚本。</p>
<blockquote>
<p>./redis-server ../redis.conf </p>
</blockquote>
<p><img src="/img/redis/redis-server启动.PNG" alt="Alt text"></p>
<p>启动后默认的端口为6379，pid：9986，这些可以在redis.conf中设置。</p>
<h2 id="Redis客户端启动">Redis客户端启动</h2><blockquote>
<p>./redis-cli</p>
</blockquote>
<p><img src="/img/redis/redis-cli.PNG" alt="Alt text"></p>
<p>如果需要在其他服务器上执行命令，可以使用：</p>
<blockquote>
<p>./redis-cli -h host -p port -a password 的方式</p>
</blockquote>
<p>port和password 可以在redis.conf中设置（port与requirepass）。</p>
<h3 id="Webdis_-A_Redis_HTTP_interface_with_JSON_output">Webdis -A Redis HTTP interface with JSON output</h3><p>如果你觉得命令行方式操作redis不习惯，可以使用HTTP接口的方式。<br>Webdis 就是这么一款工具，为 Redis 提供 HTTP 接口，通过 HTTP 即可直接操作 Redis。</p>
<p><strong>项目地址</strong>：<br><a href="https://github.com/nicolasff/webdis" target="_blank" rel="external">https://github.com/nicolasff/webdis</a></p>
<p><strong>安装</strong>：</p>
<blockquote>
<p>git clone git://github.com/nicolasff/webdis.git<br>cd webdis<br>make clean all<br>./webdis &amp;</p>
</blockquote>
<p>然后可以通过http的方式操作redis了：</p>
<blockquote>
<p>curl <a href="http://127.0.0.1:7379/SET/hello/world" target="_blank" rel="external">http://127.0.0.1:7379/SET/hello/world</a><br>{“SET”:[true,”OK”]}</p>
<p>curl <a href="http://127.0.0.1:7379/GET/hello" target="_blank" rel="external">http://127.0.0.1:7379/GET/hello</a><br>{“GET”:”world”}</p>
<p>curl -d “GET/hello” <a href="http://127.0.0.1:7379/" target="_blank" rel="external">http://127.0.0.1:7379/</a><br>{“GET”:”world”}</p>
</blockquote>
<hr>
<h1 id="Redis的配置文件-redis-conf">Redis的配置文件-redis.conf</h1><p>参数说明：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程</span><br><span class="line">    daemonize no</span><br><span class="line"><span class="number">2.</span> 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</span><br><span class="line">    pidfile /var/run/redis.pid</span><br><span class="line"><span class="number">3.</span> 指定Redis监听端口，默认端口为<span class="number">6379</span></span><br><span class="line">    port <span class="number">6379</span></span><br><span class="line"><span class="number">4.</span> 绑定的主机地址</span><br><span class="line">    bind <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="number">5.</span> 当客户端闲置多长时间后关闭连接，如果指定为<span class="number">0</span>，表示关闭该功能</span><br><span class="line">    timeout <span class="number">300</span></span><br><span class="line"><span class="number">6.</span> 日志级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</span><br><span class="line">    loglevel verbose</span><br><span class="line"><span class="number">7.</span> 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null</span><br><span class="line">    logfile <span class="built_in">stdout</span></span><br><span class="line"><span class="number">8.</span> 设置数据库的数量，默认数据库为<span class="number">0</span>，可以使用SELECT &lt;dbid&gt;命令在连接上指定数据库id</span><br><span class="line">    databases <span class="number">16</span></span><br><span class="line"><span class="number">9.</span> 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</span><br><span class="line">    save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="line">    Redis默认配置文件中提供了三个条件：</span><br><span class="line">    save <span class="number">900</span> <span class="number">1</span></span><br><span class="line">    save <span class="number">300</span> <span class="number">10</span></span><br><span class="line">    save <span class="number">60</span> <span class="number">10000</span></span><br><span class="line">    分别表示<span class="number">900</span>秒（<span class="number">15</span>分钟）内有<span class="number">1</span>个更改，<span class="number">300</span>秒（<span class="number">5</span>分钟）内有<span class="number">10</span>个更改以及<span class="number">60</span>秒内有<span class="number">10000</span>个更改。</span><br><span class="line"> </span><br><span class="line"><span class="number">10.</span> 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大</span><br><span class="line">    rdbcompression yes</span><br><span class="line"><span class="number">11.</span> 指定本地数据库文件名，默认值为dump.rdb</span><br><span class="line">    dbfilename dump.rdb</span><br><span class="line"><span class="number">12.</span> 指定本地数据库存放目录</span><br><span class="line">    dir ./</span><br><span class="line"><span class="number">13.</span> 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</span><br><span class="line">    slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"><span class="number">14.</span> 当master服务设置了密码保护时，slav服务连接master的密码</span><br><span class="line">    masterauth &lt;master-password&gt;</span><br><span class="line"><span class="number">15.</span> 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH &lt;password&gt;命令提供密码，默认关闭</span><br><span class="line">    requirepass foobared</span><br><span class="line"><span class="number">16.</span> 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients <span class="number">0</span>，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</span><br><span class="line">    maxclients <span class="number">128</span></span><br><span class="line"><span class="number">17.</span> 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区</span><br><span class="line">    maxmemory &lt;bytes&gt;</span><br><span class="line"><span class="number">18.</span> 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no</span><br><span class="line">    appendonly no</span><br><span class="line"><span class="number">19.</span> 指定更新日志文件名，默认为appendonly.aof</span><br><span class="line">     appendfilename appendonly.aof</span><br><span class="line"><span class="number">20.</span> 指定更新日志条件，共有<span class="number">3</span>个可选值： </span><br><span class="line">    no：表示等操作系统进行数据缓存同步到磁盘（快） </span><br><span class="line">    always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） </span><br><span class="line">    everysec：表示每秒同步一次（折衷，默认值）</span><br><span class="line">    appendfsync everysec</span><br><span class="line"> </span><br><span class="line"><span class="number">21.</span> 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中</span><br><span class="line">     vm-enabled no</span><br><span class="line"><span class="number">22.</span> 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享</span><br><span class="line">     vm-swap-file /tmp/redis.swap</span><br><span class="line"><span class="number">23.</span> 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为<span class="number">0</span>的时候,其实是所有value都存在于磁盘。默认值为<span class="number">0</span></span><br><span class="line">     vm-max-memory <span class="number">0</span></span><br><span class="line"><span class="number">24.</span> Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，建议如果存储很多小对象，page大小最好设置为<span class="number">32</span>或者<span class="number">64</span>bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值</span><br><span class="line">     vm-page-size <span class="number">32</span></span><br><span class="line"><span class="number">25.</span> 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每<span class="number">8</span>个pages将消耗<span class="number">1</span>byte的内存。</span><br><span class="line">     vm-pages <span class="number">134217728</span></span><br><span class="line"><span class="number">26.</span> 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为<span class="number">0</span>,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为<span class="number">4</span></span><br><span class="line">     vm-max-threads <span class="number">4</span></span><br><span class="line"><span class="number">27.</span> 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</span><br><span class="line">    glueoutputbuf yes</span><br><span class="line"><span class="number">28.</span> 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</span><br><span class="line">    hash-max-zipmap-entries <span class="number">64</span></span><br><span class="line">    hash-max-zipmap-value <span class="number">512</span></span><br><span class="line"><span class="number">29.</span> 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）</span><br><span class="line">    activerehashing yes</span><br><span class="line"><span class="number">30.</span> 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</span><br><span class="line">    include /path/to/local.conf</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="基础命令">基础命令</h1><p>Redis支持5中数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</p>
<h2 id="string">string</h2><p><strong>set 存值</strong><br><strong>get取值</strong></p>
<p><img src="/img/redis/string.PNG" alt="Alt text"></p>
<h2 id="Hash">Hash</h2><p>Redis hash是一个string类型的field和value的映射表，适合用于存储对象。 </p>
<p><strong>Hmset 存值 </strong><br><strong>Hgetall 取值 </strong></p>
<p><img src="/img/redis/hash.PNG" alt="Alt text"></p>
<h2 id="List">List</h2><p>Redis列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素到列表的头部（左边）或者尾部（右边）。<br>一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。</p>
<p><strong>Lpush 插入 </strong><br><strong>Lrange 查看 </strong></p>
<p><img src="/img/redis/list.PNG" alt="Alt text"></p>
<h2 id="Set">Set</h2><p>Redis的Set是string类型的无序集合。集合成员是唯一的。<br>Redis 中 集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。<br>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p>
<p> <strong>sadd 插入 </strong><br> <strong>smembers查看 </strong><br><img src="/img/redis/set.PNG" alt="Alt text"></p>
<h2 id="Zset">Zset</h2><p>Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。<br>有序集合的成员是唯一的,但分数(score)却可以重复。<br>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p>
<p> <strong>zadd 插入  </strong><br> <strong>zrangebyscore 查看 </strong></p>
<p><img src="/img/redis/zset.PNG" alt="Alt text"></p>
<hr>
<h1 id="Java使用Redis">Java使用Redis</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">　　　　<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">　　　　<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">　　　　<span class="tag">&lt;<span class="title">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>或者下载jar包 <a href="https://pan.baidu.com/s/1miSlXrU" target="_blank" rel="external">https://pan.baidu.com/s/1miSlXrU</a></p>
<h2 id="连接服务器">连接服务器</h2><p>连接的是linux服务器上的redis，</p>
<ol>
<li>先把防火墙关掉 systemctl stop firewalld.service  </li>
<li>修改redis.conf 中的 bind 127.0.0.1 注释掉，protected-mode no设置为no。</li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyRedis</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">		String jedisAddr = <span class="string">"192.168.1.111"</span>;</span><br><span class="line">		Jedis jedis = <span class="keyword">new</span> Jedis(jedisAddr);</span><br><span class="line"></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"连接测试"</span>);		System.<span class="keyword">out</span>.println(jedis.ping());</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/img/redis/connect.PNG" alt="Alt text"></p>
<h2 id="存取数据">存取数据</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class RedisKeyAndValue &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// redis服务器地址</span></span><br><span class="line">		<span class="keyword">String</span> redisServerAddr = <span class="string">"192.168.1.111"</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// redis连接测试</span></span><br><span class="line">		Jedis jedis = redisConnect(redisServerAddr);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// string数据存取</span></span><br><span class="line">		redisStringTest(jedis);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// List数据存取</span></span><br><span class="line">		redisListTest(jedis);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// set数据存取</span></span><br><span class="line">		redisSetTest(jedis);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * redis连接测试</span><br><span class="line">	 *</span><br><span class="line">	 * @param redisServerAddr</span><br><span class="line">	 * @return</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Jedis redisConnect(<span class="keyword">String</span> redisServerAddr) &#123;</span><br><span class="line"></span><br><span class="line">		Jedis jedis = <span class="keyword">new</span> Jedis(redisServerAddr);</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"redis连接测试"</span>);</span><br><span class="line">		System.out.<span class="built_in">println</span>(jedis.ping());</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> jedis;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * String数据存取</span><br><span class="line">	 *</span><br><span class="line">	 * @param jedis</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> redisStringTest(Jedis jedis) &#123;</span><br><span class="line">		jedis.<span class="built_in">set</span>(<span class="string">"string"</span>, <span class="string">"xxx"</span>);</span><br><span class="line"></span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"string :"</span> + jedis.<span class="built_in">get</span>(<span class="string">"string"</span>));</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * List数据存取</span><br><span class="line">	 *</span><br><span class="line">	 * @param jedis</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> redisListTest(Jedis jedis) &#123;</span><br><span class="line">		jedis.lpush(<span class="string">"list"</span>, <span class="string">"a"</span>);</span><br><span class="line">		jedis.lpush(<span class="string">"list"</span>, <span class="string">"b"</span>);</span><br><span class="line">		jedis.lpush(<span class="string">"list"</span>, <span class="string">"c"</span>);</span><br><span class="line">		jedis.lpush(<span class="string">"list"</span>, <span class="string">"d"</span>);</span><br><span class="line"></span><br><span class="line">		List&lt;<span class="keyword">String</span>&gt; list = jedis.lrange(<span class="string">"list"</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">String</span> <span class="built_in">str</span> : list) &#123;</span><br><span class="line"></span><br><span class="line">			System.out.<span class="built_in">println</span>(<span class="string">"List:"</span> + <span class="built_in">str</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * set数据存取</span><br><span class="line">	 *</span><br><span class="line">	 * @param jedis</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> redisSetTest(Jedis jedis) &#123;</span><br><span class="line">		jedis.sadd(<span class="string">"set"</span>, <span class="string">"a"</span>);</span><br><span class="line">		jedis.sadd(<span class="string">"set"</span>, <span class="string">"b"</span>);</span><br><span class="line">		jedis.sadd(<span class="string">"set"</span>, <span class="string">"c"</span>);</span><br><span class="line">		jedis.sadd(<span class="string">"set"</span>, <span class="string">"c"</span>);</span><br><span class="line">		jedis.sadd(<span class="string">"set"</span>, <span class="string">"c"</span>);</span><br><span class="line"></span><br><span class="line">		Set&lt;<span class="keyword">String</span>&gt; <span class="built_in">set</span> = jedis.smembers(<span class="string">"set"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">String</span> <span class="built_in">str</span> : <span class="built_in">set</span>) &#123;</span><br><span class="line">			System.out.<span class="built_in">println</span>(<span class="string">"set:"</span> + <span class="built_in">str</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<hr>
<p>参考文献：<br><a href="http://www.runoob.com/redis/redis-tutorial.html" target="_blank" rel="external">http://www.runoob.com/redis/redis-tutorial.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>很多项目使用了Redis，找了一些资料简单的学习学习。</p>]]>
    
    </summary>
    
      <category term="Redis" scheme="http://tonylit.me/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[tcpcopy的兄弟-gor]]></title>
    <link href="http://tonylit.me/2017/09/20/tcpcopy%E7%9A%84%E5%85%84%E5%BC%9F-gor/"/>
    <id>http://tonylit.me/2017/09/20/tcpcopy的兄弟-gor/</id>
    <published>2017-09-20T03:37:27.000Z</published>
    <updated>2017-09-20T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>之前写了一篇<a href="http://tonylit.me/2016/10/19/tcpcopy/">tcpcopy的使用</a>，解决了线上流量引到测试环境的问题。</p>
<p>最近看到一款更简单易用的流量复制工具-<strong>gor</strong>。</p>
<a id="more"></a>
<hr>
<h1 id="简单介绍gor">简单介绍gor</h1><p>Gor是用Golang写的一个HTTP实时流量复制工具.</p>
<p>github地址：<a href="https://github.com/buger/goreplay" target="_blank" rel="external">https://github.com/buger/goreplay</a></p>
<p>官方描述：</p>
<blockquote>
<p>GoReplay is an open-source tool for capturing and replaying live HTTP traffic into a test environment in order to continuously test your system with real data.<br>It can be used to increase confidence in code deployments, configuration changes and infrastructure changes.</p>
</blockquote>
<p><img src="/img/gor/gor流程图.png" alt="Alt text"></p>
<p>做的事情跟tcpcopy一样，也支持流量的方法、缩小，回放等功能。</p>
<p>gor只能对http协议的流量进行复制，tcp协议的流量复制还要靠tcpcopy，就算如此也解决了工作中绝大多数的应用场景。</p>
<hr>
<h1 id="gor安装">gor安装</h1><p><a href="https://github.com/buger/goreplay/releases" target="_blank" rel="external">https://github.com/buger/goreplay/releases</a>  ，下载最新的包解压后就可以使用了。</p>
<hr>
<h1 id="gor常用命令">gor常用命令</h1><p>gor –help  使用方法写的比较清楚。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"> -cpuprofile string</span><br><span class="line">   	write cpu profile to file</span><br><span class="line"> -debug verbose</span><br><span class="line">   	Turn on debug output, shows all intercepted traffic. Works only when with verbose flag</span><br><span class="line"> -http-allow-header value</span><br><span class="line">   	A regexp to match a specific header against. Requests with non-matching headers will be dropped:</span><br><span class="line"> gor <span class="comment">--input-raw :8080 --output-http staging.com --http-allow-header api-version:^v1 (default [])</span></span><br><span class="line"> -http-allow-method value</span><br><span class="line">   	Whitelist of HTTP methods to replay. Anything else will be dropped:</span><br><span class="line">gor <span class="comment">--input-raw :8080 --output-http staging.com --http-allow-method GET --http-allow-method OPTIONS (default [])</span></span><br><span class="line"> -http-allow-url value</span><br><span class="line">   	A regexp to match requests against. Filter get matched against full url with domain. Anything else will be dropped:</span><br><span class="line"> gor <span class="comment">--input-raw :8080 --output-http staging.com --http-allow-url ^www. (default [])</span></span><br><span class="line"> -http-disallow-header value</span><br><span class="line">   	A regexp to match a specific header against. Requests with matching headers will be dropped:</span><br><span class="line"> gor <span class="comment">--input-raw :8080 --output-http staging.com --http-disallow-header "User-Agent: Replayed by Gor" (default [])</span></span><br><span class="line"> -http-disallow-url value</span><br><span class="line">   	A regexp to match requests against. Filter get matched against full url with domain. Anything else will be forwarded:</span><br><span class="line"> gor <span class="comment">--input-raw :8080 --output-http staging.com --http-disallow-url ^www. (default [])</span></span><br><span class="line"> -http-header-limiter value</span><br><span class="line">   	Takes a fraction of requests, consistently taking or rejecting a request based on the FNV32-1A hash of a specific header:</span><br><span class="line"> gor <span class="comment">--input-raw :8080 --output-http staging.com --http-header-imiter user-id:25% (default [])</span></span><br><span class="line"> -http-original-host</span><br><span class="line">   	Normally gor replaces the Host http header with the host supplied with <span class="comment">--output-http.  This option disables that behavior, preserving the original Host header.</span></span><br><span class="line"> -http-param-limiter value</span><br><span class="line">   	Takes a fraction of requests, consistently taking or rejecting a request based on the FNV32-1A hash of a specific GET param:</span><br><span class="line"> gor <span class="comment">--input-raw :8080 --output-http staging.com --http-param-limiter user_id:25% (default [])</span></span><br><span class="line"> -http-rewrite-url value</span><br><span class="line">   	Rewrite the request url based on a mapping:</span><br><span class="line">gor <span class="comment">--input-raw :8080 --output-http staging.com --http-rewrite-url /v1/user/([^\/]+)/ping:/v2/user/$1/ping (default [])</span></span><br><span class="line"> -http-<span class="operator"><span class="keyword">set</span>-header <span class="keyword">value</span></span><br><span class="line">   	Inject additional headers <span class="keyword">to</span> <span class="keyword">http</span> reqest:</span><br><span class="line">gor <span class="comment">--input-raw :8080 --output-http staging.com --http-set-header 'User-Agent: Gor' (default [])</span></span><br><span class="line"> -<span class="keyword">http</span>-<span class="keyword">set</span>-param <span class="keyword">value</span></span><br><span class="line">   	<span class="keyword">Set</span> request <span class="keyword">url</span> param, <span class="keyword">if</span> param already <span class="keyword">exists</span> it will be overwritten:</span><br><span class="line">gor <span class="comment">--input-raw :8080 --output-http staging.com --http-set-param api_key=1 (default [])</span></span><br><span class="line"> -<span class="keyword">input</span>-dummy <span class="keyword">value</span></span><br><span class="line">   	Used <span class="keyword">for</span> testing outputs. Emits <span class="string">'Get /'</span> request every <span class="number">1</span>s (<span class="keyword">default</span> [])</span><br><span class="line"> -<span class="keyword">input</span>-<span class="keyword">file</span> <span class="keyword">value</span></span><br><span class="line">   	<span class="keyword">Read</span> requests <span class="keyword">from</span> <span class="keyword">file</span>: </span><br><span class="line">gor <span class="comment">--input-file ./requests.gor --output-http staging.com (default [])</span></span><br><span class="line"> -<span class="keyword">input</span>-<span class="keyword">http</span> <span class="keyword">value</span></span><br><span class="line">   	<span class="keyword">Read</span> requests <span class="keyword">from</span> <span class="keyword">HTTP</span>, should be explicitly sent <span class="keyword">from</span> your application:</span><br><span class="line"># Listen <span class="keyword">for</span> <span class="keyword">http</span> <span class="keyword">on</span> <span class="number">9000</span></span><br><span class="line">gor <span class="comment">--input-http :9000 --output-http staging.com (default [])</span></span><br><span class="line"> -<span class="keyword">input</span>-<span class="keyword">raw</span> <span class="keyword">value</span></span><br><span class="line">   	Capture traffic <span class="keyword">from</span> given port (<span class="keyword">use</span> <span class="keyword">RAW</span> sockets <span class="keyword">and</span> require *sudo* <span class="keyword">access</span>):</span><br><span class="line"># Capture traffic <span class="keyword">from</span> <span class="number">8080</span> port</span><br><span class="line">gor <span class="comment">--input-raw :8080 --output-http staging.com (default [])</span></span><br><span class="line"> -<span class="keyword">input</span>-<span class="keyword">raw</span>-<span class="keyword">engine</span> libpcap</span><br><span class="line">   	Intercept traffic <span class="keyword">using</span> libpcap (<span class="keyword">default</span>), <span class="keyword">and</span> <span class="string">`raw_socket`</span> (<span class="keyword">default</span> <span class="string">"libpcap"</span>)</span><br><span class="line"> -<span class="keyword">input</span>-tcp <span class="keyword">value</span></span><br><span class="line">   	Used <span class="keyword">for</span> internal communication <span class="keyword">between</span> Gor instances. Example: </span><br><span class="line"># Receive requests <span class="keyword">from</span> other Gor instances <span class="keyword">on</span> <span class="number">28020</span> port, <span class="keyword">and</span> redirect <span class="keyword">output</span> <span class="keyword">to</span> staging</span><br><span class="line">gor <span class="comment">--input-tcp :28020 --output-http staging.com (default [])</span></span><br><span class="line"> -memprofile <span class="keyword">string</span></span><br><span class="line">   	write <span class="keyword">memory</span> profile <span class="keyword">to</span> this <span class="keyword">file</span></span><br><span class="line"> -middleware <span class="keyword">string</span></span><br><span class="line">   	Used <span class="keyword">for</span> modifying traffic <span class="keyword">using</span> <span class="keyword">external</span> command</span><br><span class="line"> -<span class="keyword">output</span>-dummy <span class="keyword">value</span></span><br><span class="line">   	Used <span class="keyword">for</span> testing inputs. Just prints <span class="keyword">data</span> coming <span class="keyword">from</span> inputs. (<span class="keyword">default</span> [])</span><br><span class="line"> -<span class="keyword">output</span>-<span class="keyword">file</span> <span class="keyword">value</span></span><br><span class="line">   	Write incoming requests <span class="keyword">to</span> <span class="keyword">file</span>: </span><br><span class="line">gor <span class="comment">--input-raw :80 --output-file ./requests.gor (default [])</span></span><br><span class="line"> -<span class="keyword">output</span>-<span class="keyword">http</span> <span class="keyword">value</span></span><br><span class="line">   	Forwards incoming requests <span class="keyword">to</span> given <span class="keyword">http</span> address.</span><br><span class="line"># Redirect all incoming requests <span class="keyword">to</span> staging.com address </span><br><span class="line">gor <span class="comment">--input-raw :80 --output-http http://staging.com (default [])</span></span><br><span class="line"> -<span class="keyword">output</span>-<span class="keyword">http</span>-debug</span><br><span class="line">   	Enables <span class="keyword">http</span> debug <span class="keyword">output</span>.</span><br><span class="line"> -<span class="keyword">output</span>-<span class="keyword">http</span>-elasticsearch <span class="keyword">string</span></span><br><span class="line">   	Send request <span class="keyword">and</span> response stats <span class="keyword">to</span> ElasticSearch:</span><br><span class="line">gor <span class="comment">--input-raw :8080 --output-http staging.com --output-http-elasticsearch 'es_host:api_port/index_name'</span></span><br><span class="line"> -<span class="keyword">output</span>-<span class="keyword">http</span>-header <span class="comment">--output-http-header</span></span><br><span class="line">   	<span class="keyword">WARNING</span>: <span class="comment">--output-http-header DEPRECATED, use `--http-set-header` instead (default [])</span></span><br><span class="line"> -<span class="keyword">output</span>-<span class="keyword">http</span>-header-filter <span class="comment">--output-http-header-filter</span></span><br><span class="line">   	<span class="keyword">WARNING</span>: <span class="comment">--output-http-header-filter DEPRECATED, use `--http-allow-header` instead (default [])</span></span><br><span class="line"> -<span class="keyword">output</span>-<span class="keyword">http</span>-header-<span class="keyword">hash</span>-filter <span class="keyword">output</span>-<span class="keyword">http</span>-header-<span class="keyword">hash</span>-filter</span><br><span class="line">   	<span class="keyword">WARNING</span>: <span class="keyword">output</span>-<span class="keyword">http</span>-header-<span class="keyword">hash</span>-filter DEPRECATED, <span class="keyword">use</span> <span class="string">`--http-header-hash-limiter`</span> instead (<span class="keyword">default</span> [])</span><br><span class="line"> -<span class="keyword">output</span>-<span class="keyword">http</span>-method <span class="comment">--output-http-method</span></span><br><span class="line">   	<span class="keyword">WARNING</span>: <span class="comment">--output-http-method DEPRECATED, use `--http-allow-method` instead (default [])</span></span><br><span class="line"> -<span class="keyword">output</span>-<span class="keyword">http</span>-redirects <span class="built_in">int</span></span><br><span class="line">   	<span class="keyword">Enable</span> how often redirects should be followed.</span><br><span class="line"> -<span class="keyword">output</span>-<span class="keyword">http</span>-rewrite-<span class="keyword">url</span> <span class="comment">--output-http-rewrite-url</span></span><br><span class="line">   	<span class="keyword">WARNING</span>: <span class="comment">--output-http-rewrite-url DEPRECATED, use `--http-rewrite-url` instead (default [])</span></span><br><span class="line"> -<span class="keyword">output</span>-<span class="keyword">http</span>-stats</span><br><span class="line">   	Report <span class="keyword">http</span> <span class="keyword">output</span> queue stats <span class="keyword">to</span> console every <span class="number">5</span> seconds.</span><br><span class="line"> -<span class="keyword">output</span>-<span class="keyword">http</span>-<span class="keyword">timeout</span> <span class="keyword">duration</span></span><br><span class="line">   	Specify <span class="keyword">HTTP</span> request/response <span class="keyword">timeout</span>. <span class="keyword">By</span> <span class="keyword">default</span> <span class="number">5</span>s. Example: <span class="comment">--output-http-timeout 30s</span></span><br><span class="line"> -<span class="keyword">output</span>-<span class="keyword">http</span>-<span class="keyword">url</span>-regexp <span class="comment">--output-http-url-regexp</span></span><br><span class="line">   	<span class="keyword">WARNING</span>: <span class="comment">--output-http-url-regexp DEPRECATED, use `--http-allow-url` instead (default [])</span></span><br><span class="line"> -<span class="keyword">output</span>-<span class="keyword">http</span>-workers <span class="built_in">int</span></span><br><span class="line">   	Gor uses dynamic worker scaling <span class="keyword">by</span> <span class="keyword">default</span>.  Enter a <span class="built_in">number</span> <span class="keyword">to</span> run a <span class="keyword">set</span> <span class="built_in">number</span> <span class="keyword">of</span> workers.</span><br><span class="line"> -<span class="keyword">output</span>-tcp <span class="keyword">value</span></span><br><span class="line">   	Used <span class="keyword">for</span> internal communication <span class="keyword">between</span> Gor instances. Example: </span><br><span class="line"># Listen <span class="keyword">for</span> requests <span class="keyword">on</span> <span class="number">80</span> port <span class="keyword">and</span> forward them <span class="keyword">to</span> other Gor <span class="keyword">instance</span> <span class="keyword">on</span> <span class="number">28020</span> port</span><br><span class="line">gor <span class="comment">--input-raw :80 --output-tcp replay.local:28020 (default [])</span></span><br><span class="line"> -<span class="keyword">output</span>-tcp-stats</span><br><span class="line">   	Report TCP <span class="keyword">output</span> queue stats <span class="keyword">to</span> console every <span class="number">5</span> seconds.</span><br><span class="line"> -<span class="keyword">split</span>-<span class="keyword">output</span> <span class="literal">true</span></span><br><span class="line">   	<span class="keyword">By</span> <span class="keyword">default</span> <span class="keyword">each</span> <span class="keyword">output</span> gets same traffic. <span class="keyword">If</span> <span class="keyword">set</span> <span class="keyword">to</span> <span class="literal">true</span> it splits traffic equally among all outputs.</span><br><span class="line"> -stats</span><br><span class="line">   	Turn <span class="keyword">on</span> queue stats <span class="keyword">output</span></span><br><span class="line"> -verbose</span><br><span class="line">   	Turn <span class="keyword">on</span> more verbose <span class="keyword">output</span></span></span><br></pre></td></tr></table></figure>
<p><em>常用的命令：</em></p>
<p>线上引流的机器为192.168.1.1 ，测试机器为192.168.2.2</p>
<h2 id="实时引流：">实时引流：</h2><blockquote>
<p>gor –input-raw :80 –output-http “192.168.2.2:80”</p>
</blockquote>
<p>把192.168.1.1 80端口上的http请求转到192.168.2.2 80端口上。</p>
<blockquote>
<p>gor –input-tcp :80–output-http “192.168.2.2:80”  –output-http “192.168.3.3:80”</p>
</blockquote>
<p>把流量复制两份到不同的测试机器</p>
<hr>
<h2 id="流量放大、缩小">流量放大、缩小</h2><blockquote>
<p>gor –input-raw :80 –output-http “192.168.2.2:80|1000%”</p>
</blockquote>
<p>流量放大10倍</p>
<blockquote>
<p>gor –input-raw :80 –output-http “192.168.2.2:80|10%”</p>
</blockquote>
<p>流量缩小10倍</p>
<hr>
<h2 id="回放">回放</h2><blockquote>
<p>gor –input-raw :80–output-file requests.gor</p>
</blockquote>
<p>保存请求到文件中</p>
<blockquote>
<p>gor –input-file requests.gor –output-http “192.168.2.2:80”</p>
</blockquote>
<p>回放请求</p>
<hr>
<h2 id="过滤">过滤</h2><blockquote>
<p>gor –input-raw :80–output-http 192.168.2.2:80 –output-http-url-regexp ^www.</p>
</blockquote>
<p>只保留www开头的请求</p>
<hr>
<h2 id="自定义参数">自定义参数</h2><blockquote>
<p>gor –input-raw :80–output-http 192.168.2.2:80 –http-set-header ‘User-Agent: gor’</p>
</blockquote>
<p>在请求头上加入 User-Agent: gor</p>
<hr>
<p>关于gor的其他特性，详见官方wiki：<br><a href="https://github.com/buger/goreplay/wiki" target="_blank" rel="external">https://github.com/buger/goreplay/wiki</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前写了一篇<a href="http://tonylit.me/2016/10/19/tcpcopy/">tcpcopy的使用</a>，解决了线上流量引到测试环境的问题。</p>
<p>最近看到一款更简单易用的流量复制工具-<strong>gor</strong>。</p>]]>
    
    </summary>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java线程池]]></title>
    <link href="http://tonylit.me/2017/09/15/%E8%81%8A%E8%81%8Ajava%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://tonylit.me/2017/09/15/聊聊java线程池/</id>
    <published>2017-09-15T03:37:27.000Z</published>
    <updated>2017-09-15T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>我们使用线程的时候就去创建一个线程，这样实现起来比较简单。<br>但如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。</p>
<a id="more"></a>
<h1 id="使用线程池的好处">使用线程池的好处</h1><p>合理的使用线程池能够带来3个很明显的好处：</p>
<ol>
<li>降低资源消耗：通过重用已经创建的线程来降低线程创建和销毁的消耗</li>
<li>提高响应速度：任务到达时不需要等待线程创建就可以立即执行。</li>
<li>提高线程的可管理性：线程池可以统一管理、分配、调优和监控。</li>
</ol>
<hr>
<h1 id="ThreadPoolExecutor">ThreadPoolExecutor</h1><p>java的线程池支持主要通过ThreadPoolExecutor来实现，</p>
<h2 id="简单的例子：">简单的例子：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span>	threadNum =<span class="number">20</span>;</span><br><span class="line">    useThreadPool(threadNum);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useThreadPool</span><span class="params">(<span class="keyword">int</span> ThreadNum)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 核心线程池的大小</span></span><br><span class="line">		<span class="keyword">int</span> corePoolSize = <span class="number">20</span>;</span><br><span class="line">		<span class="comment">// 线程池最大线程数</span></span><br><span class="line">		<span class="keyword">int</span> maximumPoolSize = ThreadNum;</span><br><span class="line">		<span class="comment">// 表示线程没有任务执行时最多保持多久时间会终止;默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用</span></span><br><span class="line">		<span class="keyword">long</span> keepAliveTime = <span class="number">200</span>;</span><br><span class="line">		<span class="comment">// 参数keepAliveTime的时间单位</span></span><br><span class="line">		TimeUnit unit = TimeUnit.MILLISECONDS;</span><br><span class="line">		<span class="comment">// 一个阻塞队列，用来存储等待执行的任务</span></span><br><span class="line">		BlockingQueue&lt;Runnable&gt; workQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class="number">5</span>);</span><br><span class="line">		</span><br><span class="line">		ThreadPoolExecutor threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">				corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);</span><br><span class="line"></span><br><span class="line">			threadPoolExecutor.execute(<span class="keyword">new</span> MyTask(num));</span><br><span class="line"></span><br><span class="line">		threadPoolExecutor.shutdown();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">		MyTask(<span class="keyword">int</span> num) &#123;</span><br><span class="line">			<span class="keyword">this</span>.num = num;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="annotation">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			System.out.println(num);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="线程池的创建">线程池的创建</h2><p>线程池的创建可以通过ThreadPoolExecutor的构造方法实现，有四个构造函数：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span><br><span class="line">                          <span class="keyword">int</span> maximumPoolSize,</span><br><span class="line">                          <span class="keyword">long</span> keepAliveTime,</span><br><span class="line">                          TimeUnit unit,</span><br><span class="line">                          BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">         Executors.defaultThreadFactory(), defaultHandler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span><br><span class="line">                          <span class="keyword">int</span> maximumPoolSize,</span><br><span class="line">                          <span class="keyword">long</span> keepAliveTime,</span><br><span class="line">                          TimeUnit unit,</span><br><span class="line">                          BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="line">                          ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">         threadFactory, defaultHandler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span><br><span class="line">                          <span class="keyword">int</span> maximumPoolSize,</span><br><span class="line">                          <span class="keyword">long</span> keepAliveTime,</span><br><span class="line">                          TimeUnit unit,</span><br><span class="line">                          BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="line">                          RejectedExecutionHandler <span class="keyword">handler</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">         Executors.defaultThreadFactory(), <span class="keyword">handler</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span><br><span class="line">                          <span class="keyword">int</span> maximumPoolSize,</span><br><span class="line">                          <span class="keyword">long</span> keepAliveTime,</span><br><span class="line">                          TimeUnit unit,</span><br><span class="line">                          BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="line">                          ThreadFactory threadFactory,</span><br><span class="line">                          RejectedExecutionHandler <span class="keyword">handler</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || <span class="keyword">handler</span> == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="keyword">this</span>.<span class="keyword">handler</span> = <span class="keyword">handler</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前面三个都是调用第四个构造函数来实现的。</p>
<p><strong>具体解释一下上面的参数：</strong></p>
<p>corePoolSize: 核心线程池大小。初始为0，当任务来了之后会创建一个线程去执行任务；当线程数大于corePoolSize后，把到达的任务放入缓存任务队列中。</p>
<p>maximumPoolSize: 线程池最大容量。</p>
<p>keepAliveTime :线程没有任务执行时最多保持多久时间会终止。默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用，直到线程池中的线程数不大于corePoolSize。</p>
<p>TimeUnit : KeepAliveTime的时间单位，7种取值：</p>
<blockquote>
<p>TimeUnit.DAYS;               //天<br>TimeUnit.HOURS;             //小时<br>TimeUnit.MINUTES;           //分钟<br>TimeUnit.SECONDS;           //秒<br>TimeUnit.MILLISECONDS;      //毫秒<br>TimeUnit.MICROSECONDS;      //微妙<br>TimeUnit.NANOSECONDS;       //纳秒</p>
</blockquote>
<p>ThreadFactory :线程工厂,主要用来创建线程。</p>
<p>BlockingQueue :缓存任务队列。常见的有以下四种队列：</p>
<blockquote>
<p>ArrayBlockingQueue —基于数组的先进先出队列<br>LinkedBlockingQueue — 基于链表的先进先出队列<br>PriorityBlockingQueue<br>SynchronizedQueue</p>
</blockquote>
<p>RejectedExecutionHandler 线程拒绝策略，有以下四种取值：</p>
<blockquote>
<p>ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。<br>ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。<br>ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务。<br>ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务。</p>
</blockquote>
<hr>
<h2 id="线程任务的执行与终止">线程任务的执行与终止</h2><p>在ThreadPoolExecutor类中有几个非常重要的方法：<br><strong>execute()</strong>  这个方法是ThreadPoolExecutor的核心方法，通过这个方法可以向线程池提交一个任务，交由线程池去执行。<br><strong>submit()</strong>  这个方法也是用来向线程池提交任务的，但是它和execute()方法不同，它能够返回任务执行的结果<br><strong>shutdown()和shutdownNow()方法</strong> 用来关闭线程池。</p>
<blockquote>
<p>shutdown()：不会立即终止线程池，而是要等所有任务缓存队列中的任务都执行完后才终止，不会接受新的任务.<br>shutdownNow()：立即终止线程池，并尝试打断正在执行的任务，并且清空任务缓存队列，返回尚未执行的任务.</p>
</blockquote>
<h3 id="执行过程">执行过程</h3><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public void execute<span class="params">(Runnable command)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="params">(command == null)</span></span><br><span class="line">        throw new NullPointerException<span class="params">()</span>;</span><br><span class="line">        <span class="comment">//如果线程数小于基本线程数，则创建线程并执行当前任务</span></span><br><span class="line">    <span class="keyword">if</span> <span class="params">(poolSize &gt;= corePoolSize || !addIfUnderCorePoolSize<span class="params">(command)</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//如线程数大于等于基本线程数或线程创建失败，则将当前任务放到工作队列中。</span></span><br><span class="line">        <span class="keyword">if</span> <span class="params">(runState == RUNNING &amp;&amp; workQueue.offer<span class="params">(command)</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="params">(runState != RUNNING || poolSize == <span class="number">0</span>)</span></span><br><span class="line">                ensureQueuedTaskHandled<span class="params">(command)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> <span class="params">(!addIfUnderMaximumPoolSize<span class="params">(command)</span>)</span></span><br><span class="line">            reject<span class="params">(command)</span>; <span class="comment">// is shutdown or saturated</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>里面涉及的点比较多，简单的讲：</p>
<blockquote>
<p>首先检查CorePool，如果CorePool内的线程小于CorePoolSize，新创建线程执行任务。<br>如果当前CorePool内的线程大于等于CorePoolSize，那么将线程加入到BlockingQueue。<br>如果不能加入BlockingQueue，在小于MaxPoolSize的情况下创建线程执行任务。<br>如果线程数大于等于MaxPoolSize，那么执行拒绝策略.</p>
</blockquote>
<hr>
<h1 id="常见线程池">常见线程池</h1><p>在java doc帮助文档中，有如此一段话：<br>强烈建议程序员使用较为方便的Executors工厂方法Executors.newCachedThreadPool()（无界线程池，可以进行自动线程回收）、Executors.newFixedThreadPool(int)（固定大小线程池）Executors.newSingleThreadExecutor()（单个后台线程），它们均为大多数使用场景预定义了设置。</p>
<hr>
<h2 id="newFixedThreadPool">newFixedThreadPool</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建一个指定工作线程数量的线程池。每当提交一个任务就创建一个工作线程，如果工作线程数量达到线程池初始的最大数，则将提交的任务存入到池队列中。</p>
<p>FixedThreadPool是一个典型且优秀的线程池，它具有线程池提高程序效率和节省创建线程时所耗的开销的优点。<br>但是，在线程池空闲时，即线程池中没有可运行任务时，它不会释放工作线程，还会占用一定的系统资源。</p>
<hr>
<h2 id="newSingleThreadExecutor">newSingleThreadExecutor</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">        (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建一个单线程化的Executor，即只创建唯一的工作者线程来执行任务，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。<br>如果这个线程异常结束，会有另一个取代它，保证顺序执行。<br>单工作线程最大的特点是可保证顺序地执行各个任务，并且在任意给定的时间不会有多个线程是活动的。</p>
<hr>
<h2 id="newCachedThreadPool">newCachedThreadPool</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</p>
<p>这种类型的线程池特点是：</p>
<p>工作线程的创建数量几乎没有限制(其实也有限制的,数目为Interger. MAX_VALUE), 这样可灵活的往线程池中添加线程。<br>如果长时间没有往线程池中提交任务，即如果工作线程空闲了指定的时间(默认为1分钟)，则该工作线程将自动终止。终止后，如果你又提交了新的任务，则线程池重新创建一个工作线程。<br>在使用CachedThreadPool时，一定要注意控制任务的数量，否则，由于大量线程同时运行，很有会造成系统瘫痪。</p>
<hr>
<p>实际中，如果Executors提供的三个静态方法能满足要求，就尽量使用它提供的三个方法，因为自己去手动配置ThreadPoolExecutor的参数有点麻烦，要根据实际任务的类型和数量来进行配置。</p>
<p>另外，如果ThreadPoolExecutor达不到要求，可以自己继承ThreadPoolExecutor类进行重写。</p>
<hr>
<h2 id="线程池大小">线程池大小</h2><p>可以参考，具体还需要测试：<br>如果是CPU密集型任务，就需要尽量压榨CPU，参考值可以设为 NCPU+1<br>如果是IO密集型任务，参考值可以设置为2*NCPU</p>
<hr>
<p>参考资料：<br><a href="http://www.importnew.com/19011.html" target="_blank" rel="external">http://www.importnew.com/19011.html</a><br><a href="http://blog.csdn.net/nk_tf/article/details/51959276" target="_blank" rel="external">http://blog.csdn.net/nk_tf/article/details/51959276</a><br><a href="http://www.jianshu.com/p/ade771d2c9c0" target="_blank" rel="external">http://www.jianshu.com/p/ade771d2c9c0</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我们使用线程的时候就去创建一个线程，这样实现起来比较简单。<br>但如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。</p>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[字节流与字符流文件读写性能比较]]></title>
    <link href="http://tonylit.me/2017/07/07/%E5%AD%97%E8%8A%82%E6%B5%81%E4%B8%8E%E5%AD%97%E7%AC%A6%E6%B5%81%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83/"/>
    <id>http://tonylit.me/2017/07/07/字节流与字符流文件读写性能比较/</id>
    <published>2017-07-07T03:37:27.000Z</published>
    <updated>2017-07-07T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>这里对java字节流与字符流文件读写进行简单的性能测试，分为以下四种方式：</p>
<ol>
<li>字节读写（InputStream/OutputStream）</li>
<li>字符读取（FileReader/FileWriter）</li>
<li>行读取（BufferedReader/BufferedWriter）</li>
<li>NIO(FileChannel&amp;&amp;ByteBuffer)</li>
</ol>
<p>从实现原理上来看nio&gt;BufferedReader&amp;&amp;FileReader&gt;InputStream<br><a id="more"></a></p>
<hr>
<p>代码如下：读写的文件为jdk 1.6的api文档，<br>JDK_API_1_6_zh_CN.CHM ，35M大小</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="keyword">File</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"></span><br><span class="line">;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> FileFerformanceTest &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">		String intPutFile = <span class="string">"c://JDK_API_1_6_zh_CN.CHM"</span>;</span><br><span class="line">		String outputFile = <span class="string">"c://output.txt"</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span><br><span class="line">		 * 字节流读写文件测试</span><br><span class="line">		 */</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">long</span> fileInputStreamBegin = getTime();</span><br><span class="line">			fileInputStream(intPutFile, outputFile);</span><br><span class="line">			<span class="keyword">long</span> fileInputStreamEnd = getTime();</span><br><span class="line">			System.out.<span class="keyword">println</span>(<span class="string">"InputStream--字节流读写时间花费："</span></span><br><span class="line">					+ (fileInputStreamEnd - fileInputStreamBegin));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span><br><span class="line">		 * 字符流读写文件</span><br><span class="line">		 */</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">long</span> filefileReaderBegin = getTime();</span><br><span class="line">			fileReader(intPutFile, outputFile);</span><br><span class="line">			<span class="keyword">long</span> filefileReaderEnd = getTime();</span><br><span class="line">			System.out.<span class="keyword">println</span>(<span class="string">"fileReader--字符流读写时间花费："</span></span><br><span class="line">					+ (filefileReaderEnd - filefileReaderBegin));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span><br><span class="line">		 * 字符逐行读取</span><br><span class="line">		 */</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">long</span> filebufferedReaderBegin = getTime();</span><br><span class="line">			bufferedReader(intPutFile, outputFile);</span><br><span class="line">			<span class="keyword">long</span> filebufferedReaderEnd = getTime();</span><br><span class="line">			System.out.<span class="keyword">println</span>(<span class="string">"bufferedReader--字符流逐行读写时间花费："</span></span><br><span class="line">					+ (filebufferedReaderEnd - filebufferedReaderBegin));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span><br><span class="line">		 * nio读写文件</span><br><span class="line">		 */</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">long</span> filenioChannelBegin = getTime();</span><br><span class="line">			nioChannel(intPutFile, outputFile);</span><br><span class="line">			<span class="keyword">long</span> filenioChannelEnd = getTime();</span><br><span class="line">			System.out.<span class="keyword">println</span>(<span class="string">"nio--读写时间花费："</span></span><br><span class="line">					+ (filenioChannelEnd - filenioChannelBegin));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> getTime() &#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 字节流读写文件文件</span><br><span class="line">	 *</span><br><span class="line">	 * @param intPutFile</span><br><span class="line">	 * @param outputFile</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> fileInputStream(String intPutFile, String outputFile) &#123;</span><br><span class="line"></span><br><span class="line">		InputStream iputStream = <span class="keyword">null</span>;</span><br><span class="line">		OutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(intPutFile);</span><br><span class="line">		<span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			iputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">file</span>);</span><br><span class="line">			outputStream = <span class="keyword">new</span> FileOutputStream(outputFile);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">while</span> ((temp = iputStream.<span class="keyword">read</span>()) != -<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">				outputStream.<span class="keyword">write</span>(temp);</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				iputStream.close();</span><br><span class="line">				outputStream.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 字符流读写文件</span><br><span class="line">	 *</span><br><span class="line">	 * @param intPutFile</span><br><span class="line">	 * @param outputFile</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> fileReader(String intPutFile, String outputFile) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(intPutFile);</span><br><span class="line">		FileReader fileReader = <span class="keyword">null</span>;</span><br><span class="line">		FileWriter fileWriter = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			fileReader = <span class="keyword">new</span> FileReader(<span class="keyword">file</span>);</span><br><span class="line">			fileWriter = <span class="keyword">new</span> FileWriter(outputFile);</span><br><span class="line">			<span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">while</span> ((temp = fileReader.<span class="keyword">read</span>()) != -<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">				fileWriter.<span class="keyword">write</span>(temp);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				fileReader.close();</span><br><span class="line">				fileWriter.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 字符逐行读取</span><br><span class="line">	 *</span><br><span class="line">	 * @param intPutFile</span><br><span class="line">	 * @param outputFile</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> bufferedReader(String intPutFile, String outputFile) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(intPutFile);</span><br><span class="line"></span><br><span class="line">		BufferedReader bufferedReader = <span class="keyword">null</span>;</span><br><span class="line">		BufferedWriter bufferedWriter = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">file</span>));</span><br><span class="line">			bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(outputFile));</span><br><span class="line"></span><br><span class="line">			String temp = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">while</span> ((temp = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">				bufferedWriter.<span class="keyword">write</span>(temp + <span class="string">"\n"</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				bufferedReader.close();</span><br><span class="line">				bufferedWriter.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * nio读写文件</span><br><span class="line">	 *</span><br><span class="line">	 * @param intPutFile</span><br><span class="line">	 * @param outputFile</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> nioChannel(String intPutFile, String outputFile) &#123;</span><br><span class="line">		<span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(intPutFile);</span><br><span class="line"></span><br><span class="line">		FileInputStream fileInputStream = <span class="keyword">null</span>;</span><br><span class="line">		FileOutputStream fileOutputStream = <span class="keyword">null</span>;</span><br><span class="line">		FileChannel fileChannelIn = <span class="keyword">null</span>;</span><br><span class="line">		FileChannel fileChannelOut = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">int</span> capacity = <span class="number">1024</span>;<span class="comment">// 字节</span></span><br><span class="line">		ByteBuffer buffer = ByteBuffer.allocate(capacity);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">			fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">file</span>);</span><br><span class="line">			fileOutputStream = <span class="keyword">new</span> FileOutputStream(outputFile);</span><br><span class="line">			fileChannelIn = fileInputStream.getChannel();</span><br><span class="line">			fileChannelOut = fileOutputStream.getChannel();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">				<span class="comment">// 将当前位置设置为0，限制设置为容量，目的是尽最大可能让字节，由通道读取到缓冲中</span></span><br><span class="line">				buffer.clear();</span><br><span class="line">				<span class="comment">// 从输入通道中将数据读到缓冲区</span></span><br><span class="line">				<span class="keyword">int</span> r = fileChannelIn.<span class="keyword">read</span>(buffer);</span><br><span class="line">				<span class="keyword">if</span> (r == -<span class="number">1</span>) &#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">// 当前位置置为限制，然后将当前位置置为0，目的是将有数据部分的字节，由缓冲写入到通道中。通常用在读与写之间</span></span><br><span class="line">				buffer.flip();</span><br><span class="line">				fileChannelOut.<span class="keyword">write</span>(buffer);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				fileInputStream.close();</span><br><span class="line">				fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>结果如下：</p>
<p><img src="/img/FileIo/result.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这里对java字节流与字符流文件读写进行简单的性能测试，分为以下四种方式：</p>
<ol>
<li>字节读写（InputStream/OutputStream）</li>
<li>字符读取（FileReader/FileWriter）</li>
<li>行读取（BufferedReader/BufferedWriter）</li>
<li>NIO(FileChannel&amp;&amp;ByteBuffer)</li>
</ol>
<p>从实现原理上来看nio&gt;BufferedReader&amp;&amp;FileReader&gt;InputStream<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java中Arrays.asList不能使用add方法]]></title>
    <link href="http://tonylit.me/2017/06/02/Java%E4%B8%ADArrays.asList%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8add%E6%96%B9%E6%B3%95/"/>
    <id>http://tonylit.me/2017/06/02/Java中Arrays.asList不能使用add方法/</id>
    <published>2017-06-02T03:37:27.000Z</published>
    <updated>2017-06-02T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>我们知道Java数组可以使用Arrays.asList方法，将其转成List集合，操作起来比较方便。<br>最近发现Arrays.asList得到的List无法进行add等操作。</p>
<a id="more"></a>
<p>举个简单的例子：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">	<span class="keyword">String</span>[] <span class="built_in">str</span> = &#123; <span class="string">"aa"</span>, <span class="string">"bb"</span> &#125;;</span><br><span class="line">	List&lt;<span class="keyword">String</span>&gt; list = Arrays.asList(<span class="built_in">str</span>);</span><br><span class="line">	list.<span class="built_in">add</span>(<span class="string">"haha"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行的时候报错：</p>
<p>Exception in thread “main” java.lang.UnsupportedOperationException</p>
<hr>
<p>查看源码发现：<br>Arrays.asList方法返回的ArrayList是继承的AbstractList<br><img src="/img/asList.png" alt="Alt text"></p>
<p>AbstractList 类中实现的add、remove等一些方法中throw UnsupportedOperationException导致。</p>
<hr>
<p>建议使用Apache commons包中的ArrayUtils工具类进行数组相关操作。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我们知道Java数组可以使用Arrays.asList方法，将其转成List集合，操作起来比较方便。<br>最近发现Arrays.asList得到的List无法进行add等操作。</p>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[string堆栈存放]]></title>
    <link href="http://tonylit.me/2017/05/24/string%E5%A0%86%E6%A0%88%E5%AD%98%E6%94%BE/"/>
    <id>http://tonylit.me/2017/05/24/string堆栈存放/</id>
    <published>2017-05-24T03:37:27.000Z</published>
    <updated>2017-05-24T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>java string堆栈存放一直有些困惑，读了一篇很好的帖子，感觉清明了许多。<br>首先明确常量池的概念（方法区中，java8前可以叫做永久代）：<br>常量池(constant pool)指的是在编译期被确定，并被保存在已编译的.class文件中的一些数据。它包括了关于类、方法、接口等中的常量，也包括字符串常量。<br>String str = “abc” 存放在常量池中</p>
<a id="more"></a>
<p>String str1 = “abc”;<br>System.out.println(str1 == “abc”); </p>
<p>步骤：<br>1) 栈中开辟一块空间存放引用str1，<br>2) String常量池中开辟一块空间，存放String常量”abc”，<br>3) 引用str1指向池中String常量”abc”，<br>4) str1所指代的地址即常量”abc”所在地址，输出为true </p>
<hr>
<p>String str2 = new String(“abc”);<br>System.out.println(str2 == “abc”); </p>
<p>步骤：<br>1) 栈中开辟一块空间存放引用str2，<br>2) 堆中开辟一块空间存放一个新建的String对象”abc”，<br>3) 引用str2指向堆中的新建的String对象”abc”，<br>4) str2所指代的对象地址为堆中地址，而常量”abc”地址在常量池中，输出为false </p>
<hr>
<p>String str3 = new String（”abc”);<br>System.out.println(str3 == str2); </p>
<p>步骤：<br>1) 栈中开辟一块空间存放引用str3，<br>2) 堆中开辟一块新空间存放另外一个(不同于str2所指)新建的String对象，<br>3) 引用str3指向另外新建的那个String对象<br>4) str3和str2指向堆中不同的String对象，地址也不相同，输出为false </p>
<hr>
<p>String str4 = “a” + “b”;<br>System.out.println(str4 == “ab”); </p>
<p>步骤：<br>1) 栈中开辟一块空间存放引用str4，<br>2) 根据编译器合并已知量的优化功能，池中开辟一块空间，存放合并后的String常量”ab”，<br>3) 引用str4指向池中常量”ab”，<br>4) str4所指即池中常量”ab”，输出为true </p>
<hr>
<p>String s1 = “a”;<br>String s2 = “b”;<br>String str6 = s1 + s2;<br>System.out.println(str6 == “ab”); </p>
<p>步骤：<br>1) 栈中开辟一块中间存放引用s1，s1指向池中String常量”a”，<br>2) 栈中开辟一块中间存放引用s2，s2指向池中String常量”b”，<br>3) 栈中开辟一块中间存放引用str6，<br>4) s1 + s2通过StringBuilder的最后一步toString()方法还原一个新的String对象”ab”，因此堆中开辟一块空间存放此对象，<br>5) 引用str6指向堆中(s1 + s2)所还原的新String对象，<br>6) str6指向的对象在堆中，而常量”ab”在池中，输出为false </p>
<hr>
<p>String str7 = “abc”.substring(0, 2); </p>
<p>步骤：<br>1) 栈中开辟一块空间存放引用str7，<br>2) substring()方法还原一个新的String对象”ab”（不同于str6所指），堆中开辟一块空间存放此对象，<br>3) 引用str7指向堆中的新String对象， </p>
<hr>
<p>String str8 = “abc”.toUpperCase(); </p>
<p>步骤：<br>1) 栈中开辟一块空间存放引用str6，<br>2) toUpperCase()方法还原一个新的String对象”ABC”，池中并未开辟新的空间存放String常量”ABC”，<br>3) 引用str8指向堆中的新String对象</p>
<hr>
<p>转自：<a href="http://www.cnblogs.com/heima/archive/2012/03/25/2417253.html" target="_blank" rel="external">http://www.cnblogs.com/heima/archive/2012/03/25/2417253.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>java string堆栈存放一直有些困惑，读了一篇很好的帖子，感觉清明了许多。<br>首先明确常量池的概念（方法区中，java8前可以叫做永久代）：<br>常量池(constant pool)指的是在编译期被确定，并被保存在已编译的.class文件中的一些数据。它包括了关于类、方法、接口等中的常量，也包括字符串常量。<br>String str = “abc” 存放在常量池中</p>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[nginx 高并发时出现大量tcp tim-wait解决方法]]></title>
    <link href="http://tonylit.me/2017/04/25/nginx%20%E9%AB%98%E5%B9%B6%E5%8F%91%E6%97%B6%E5%87%BA%E7%8E%B0%E5%A4%A7%E9%87%8Ftcp%20tim-wait%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://tonylit.me/2017/04/25/nginx 高并发时出现大量tcp tim-wait解决方法/</id>
    <published>2017-04-25T03:37:27.000Z</published>
    <updated>2017-04-25T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>nginx 在高并发时出现大量TIME-WAIT状态的tcp连接。<br>ss -ant | awk ‘NR&gt;1 {++s[$1]} END {for(k in s) print k,s[k]}’</p>
<p><img src="/img/tcp-time-wait/tcp.PNG" alt="Alt text"></p>
<a id="more"></a>
<hr>
<h1 id="解决方法">解决方法</h1><h2 id="修改系统配置参数">修改系统配置参数</h2><p>进行操作系统配置参数优化，但是没有解决问题。<br>这里使用的centos6， vim /etc/sysctl.conf</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">net<span class="class">.core</span><span class="class">.rmem_max</span>=<span class="number">16777216</span></span><br><span class="line">net<span class="class">.core</span><span class="class">.wmem_max</span>=<span class="number">16777216</span></span><br><span class="line">net<span class="class">.ipv4</span><span class="class">.tcp_rmem</span>=<span class="number">4096</span> <span class="number">87380</span> <span class="number">16777216</span></span><br><span class="line">net<span class="class">.ipv4</span><span class="class">.tcp_wmem</span>=<span class="number">4096</span> <span class="number">65536</span> <span class="number">16777216</span></span><br><span class="line">net<span class="class">.ipv4</span><span class="class">.tcp_fin_timeout</span> = <span class="number">10</span></span><br><span class="line">net<span class="class">.ipv4</span><span class="class">.tcp_tw_recycle</span> = <span class="number">1</span></span><br><span class="line">net<span class="class">.ipv4</span><span class="class">.tcp_timestamps</span> = <span class="number">0</span></span><br><span class="line">net<span class="class">.ipv4</span><span class="class">.tcp_window_scaling</span> = <span class="number">0</span></span><br><span class="line">net<span class="class">.ipv4</span><span class="class">.tcp_sack</span> = <span class="number">0</span></span><br><span class="line">net<span class="class">.core</span><span class="class">.netdev_max_backlog</span> = <span class="number">30000</span></span><br><span class="line">net<span class="class">.ipv4</span><span class="class">.tcp_no_metrics_save</span>=<span class="number">1</span></span><br><span class="line">net<span class="class">.core</span><span class="class">.somaxconn</span> = <span class="number">262144</span></span><br><span class="line">net<span class="class">.ipv4</span><span class="class">.tcp_syncookies</span> = <span class="number">0</span></span><br><span class="line">net<span class="class">.ipv4</span><span class="class">.tcp_max_orphans</span> = <span class="number">262144</span></span><br><span class="line">net<span class="class">.ipv4</span><span class="class">.tcp_max_syn_backlog</span> = <span class="number">262144</span></span><br><span class="line">net<span class="class">.ipv4</span><span class="class">.tcp_synack_retries</span> = <span class="number">2</span></span><br><span class="line">net<span class="class">.ipv4</span><span class="class">.tcp_syn_retries</span> = <span class="number">2</span></span><br><span class="line">fs<span class="class">.file-max</span> = <span class="number">999999</span></span><br><span class="line">net<span class="class">.ipv4</span><span class="class">.tcp_tw_reuse</span> = <span class="number">1</span></span><br><span class="line">net<span class="class">.nf_conntrack_max</span> = <span class="number">655360</span></span><br><span class="line">net<span class="class">.netfilter</span><span class="class">.nf_conntrack_max</span> = <span class="number">655350</span></span><br><span class="line">net<span class="class">.netfilter</span><span class="class">.nf_conntrack_tcp_timeout_established</span> = <span class="number">1200</span></span><br><span class="line">net<span class="class">.ipv4</span><span class="class">.tcp_max_tw_buckets</span> = <span class="number">2000</span></span><br></pre></td></tr></table></figure>
<p>执行sysctl -p使之生效。<br>发现上面这种方式配置后tcp连接数没有得到改善。</p>
<hr>
<h2 id="修改nginx_配置_，加入http1-1_keepalive">修改nginx 配置 ，加入http1.1 keepalive</h2><p>具体可以参考：<a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive" target="_blank" rel="external">http://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive</a></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">upstream http_backend &#123;</span><br><span class="line">    server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line">    keepalive <span class="number">16</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    location /http/ &#123;</span><br><span class="line">        proxy_pass http:<span class="comment">//http_backend;</span></span><br><span class="line">        proxy_http_version <span class="number">1.1</span>;</span><br><span class="line">        proxy_set_header Connection <span class="string">""</span>;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>经过此优化后，tcp time-wait数量下来了</p>
<p><img src="/img/tcp-time-wait/tcp-nice.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>nginx 在高并发时出现大量TIME-WAIT状态的tcp连接。<br>ss -ant | awk ‘NR&gt;1 {++s[$1]} END {for(k in s) print k,s[k]}’</p>
<p><img src="/img/tcp-time-wait/tcp.PNG" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux tcp端口转发工具-rinetd]]></title>
    <link href="http://tonylit.me/2017/04/20/linux%20tcp%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E5%B7%A5%E5%85%B7-rinetd/"/>
    <id>http://tonylit.me/2017/04/20/linux tcp端口转发工具-rinetd/</id>
    <published>2017-04-20T03:37:27.000Z</published>
    <updated>2017-04-20T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>搭建性能测试环境的时候，3台物理机组一个局域网，只有一台机器对外出口，另外两台机器与外部通信必须通过端口转发服务来实现。<br><img src="/img/rinetd/net.PNG" alt="Alt text"></p>
<a id="more"></a>
<p>对于端口转发，比如haproxy、nginx的4层代理，linux自带的iptables等都能实现，但配置起来都比较麻烦。<br>这里推荐一款工具：rinetd，安装配置非常简单。</p>
<h1 id="rinetd安装">rinetd安装</h1><p>下载安装包：<a href="http://www.boutell.com/rinetd/http/rinetd.tar.gz" target="_blank" rel="external">http://www.boutell.com/rinetd/http/rinetd.tar.gz</a></p>
<p>安装</p>
<blockquote>
<p>tar xvf rinetd.tar.gz<br>cd rinetd<br>make<br>make install</p>
</blockquote>
<p>执行make install时可能出现错误：缺少目录/usr/man/man8，此时执行 mkdir -p /usr/man/man8</p>
<h1 id="配置文件">配置文件</h1><p>vim /etc/rinetd.conf（这个文件不存在，需要手工创建）<br>10.0.0.3 8080 192.168.42.155 80</p>
<h1 id="启动">启动</h1><p>rinetd -c /etc/rinetd.conf</p>
<h1 id="配置文件格式">配置文件格式</h1><p>绑定的地址  绑定的端口  转发的地址  转发的端口<br>10.0.0.3 8080 192.168.42.155 80<br>将所有发往10.0.0.3的8080端口的请求转发到192.168.42.155的80端口</p>
<p>（0.0.0.0表示本机绑定所有可用地址）<br>0.0.0.0 8080 172.19.94.3 8080<br>0.0.0.0 2222 192.168.0.103 3389<br>1.2.3.4 80     192.168.0.10 80</p>
<p>将所有发往本机8080端口的请求转发到172.19.94.3的8080端口<br>将所有发往本机2222端口的请求转发到192.168.0.103的3389端口<br>将所有发往1.2.3.4的80端口请求转发到192.168.0.10的80端口</p>
<hr>
]]></content>
    <summary type="html">
    <![CDATA[<p>搭建性能测试环境的时候，3台物理机组一个局域网，只有一台机器对外出口，另外两台机器与外部通信必须通过端口转发服务来实现。<br><img src="/img/rinetd/net.PNG" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[nGrinder 介绍与安装]]></title>
    <link href="http://tonylit.me/2017/03/23/ngrinder%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    <id>http://tonylit.me/2017/03/23/ngrinder介绍与安装/</id>
    <published>2017-03-23T03:37:27.000Z</published>
    <updated>2017-03-23T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>nGrinder是基于Grinder开源项目，但由NHN公司的nGrinder开发团队进行了重新设计和完善（所以叫做nGrinder）。</p>
<p>它是由一个controller和连接它的多个agent组成，用户可以通过web界面管理和控制测试，以及查看测试报告，controller会把测试分发到一个或多个agent去执行。用户可以设置使用多个进程和线程来并发的执行该脚本，而且在同一线程中，来重复不断的执行测试脚本，来模拟很多并发用户。</p>
<p>nGrinder的测试是基于一个python的测试脚本，用户按照一定规则编写测试脚本以后，controller会将脚本以及需要的其他文件分发到agent，用Jython执行。并在执行过程中收集运行情况、响应时间、测试目标服务器的运行情况等。并保存这些数据生成运行报告，以供以后查看。</p>
<a id="more"></a>
<hr>
<h1 id="为什么选择nGrinder">为什么选择nGrinder</h1><p> <strong>JMeter</strong><br>基于UI操作，容易上手，但是不具备编程能力。其次JMeter基于线程模拟数千用户几乎不可能。</p>
<p><strong>Tsung</strong><br>基于Erlang，能模拟上千用户并且易于扩展。但是基于XML的DSL，描述场景能力弱，而且需要大量的数据处理才知道测试结果。</p>
<p><strong>Locust</strong><br>基于python的gevent，能模拟百万个用户。但是需要对python有一定理解。</p>
<p><strong>Loadrunner</strong><br>这个可以说是应用最多的一个，很方便，但是还是太重。往后的方向肯定是客户端工具逐步向平台化发展，所以loadrunner注定慢慢被淘汰（个人拙见）。而且不开源，扩展性不高，收费。</p>
<p><strong>nGrinder</strong><br>单节点支持3000并发、支持分布式、可监控被测服务器、可录制脚本、开源、平台化。</p>
<p>综上可以看出nGrindr还是有很多优势的。</p>
<hr>
<h1 id="总体架构">总体架构</h1><p><img src="/img/ngrinder介绍与安装/ngriner架构图.PNG" alt="Alt text"></p>
<p>nGrinder 由两个主要的组件组成：</p>
<p>Controller：</p>
<blockquote>
<p>提供性能测试的web接口。<br>协调测试进程。<br>整理和显示测试的统计结果<br>让用户创建和修改脚本。</p>
</blockquote>
<p>Agent:</p>
<blockquote>
<p>在代理服务器上加载运行测试进程和线程<br>监控目标机器的系统性能（例如：CPU/MEMORY）</p>
</blockquote>
<p>当 agent 启动时，它们试图连接到 controller，然后他们都附属在 AgentControllerServer 组件上。AgentControllerServer （可以看做为一个 agent 的池）管理当前 agent 池。每当用户开始性能测试时，一个新的 console 被创建，同时由 AgentControllerServer 提供所需数量的 agent。 SingleConsole (不是 Grinder 中的 Console ) 发送测试脚本和测试源码到多个指定的 agent , 同时开始控制测试流，直到测试结束。当测试完成后，所使用的 agents 归还给 AgentControllerServer ，以便在以后的其他测试中使用。 同样，SingleConsole 也会归还给 ConsoleManager 。</p>
<p>nGrinder 和 Grinder 最大的区别在于 nGrinder 在 controller 中保持多个 console 实例 和 agent 。每个 console 都是独立的，所有 console 都可以同时运行。每当有需要时，许多 agent 可以提前被提前关联和分配。与 grinder 不同，nGrinder 最大化 agent 机器的利用率。</p>
<hr>
<h1 id="ngrinder中文社区">ngrinder中文社区</h1><p><a href="http://ngrinder.642.n7.nabble.com/ngrinder-user-cn-f114.html" target="_blank" rel="external">http://ngrinder.642.n7.nabble.com/ngrinder-user-cn-f114.html</a></p>
<hr>
<h1 id="nGrinder安装">nGrinder安装</h1><p>3台linux服务器：<br>192.168.42.164 部署controller<br>192.168.42.136 部署agent<br>192.168.42.32（被测应用机器）  部署monitor</p>
<h2 id="先决条件">先决条件</h2><p>nGrinder是一个web应用(Controller)和Java应用(Agent, Monitor)的组合，需要安装JDK 1.6或更高的版本。</p>
<p>nGrinder需要用到很多端口</p>
<blockquote>
<p>Agent : Any ==&gt; Controller : 16001<br>Agent : Any ==&gt; Controller : 12000 ~ 12000+(允许并发测试的数量)<br>Controller : Any ==&gt; Monitor : 13243<br>Controller ==&gt; Public user : 这取决于你的Tomcat的配置，默认为8080。</p>
</blockquote>
<h2 id="下载nGrinder">下载nGrinder</h2><p>目前最新的版本是ngrinder3.4.1<br><a href="https://github.com/naver/ngrinder/releases/download/ngrinder-3.4.1-20170131/ngrinder-controller-3.4.1.war" target="_blank" rel="external">https://github.com/naver/ngrinder/releases/download/ngrinder-3.4.1-20170131/ngrinder-controller-3.4.1.war</a></p>
<h2 id="启动nGrinder">启动nGrinder</h2><p>建议使用tomcat，把war包放在tomcat的webapps文件夹下即可.<br>启动tomcat的时候在catalina.sh中加上jvm参数：</p>
<blockquote>
<p>JAVA_OPTS=”-Xms600m -Xmx1024m -XX:MaxPermSize=200m”  </p>
</blockquote>
<p>启动后，打开浏览器访问<a href="http://localhost:8080/ngrinder-controller-X.X" target="_blank" rel="external">http://localhost:8080/ngrinder-controller-X.X</a><br>X.X表示war包名称</p>
<p>我这里问：<a href="http://192.168.42.164:8080/ngrinder-controller-3.4.1/login，登录名/密码：admin/admin" target="_blank" rel="external">http://192.168.42.164:8080/ngrinder-controller-3.4.1/login，登录名/密码：admin/admin</a></p>
<p><img src="/img/ngrinder介绍与安装/ngrinder登录.PNG" alt="Alt text"></p>
<h2 id="安装agent">安装agent</h2><p>agent在controller页面中直接下载<br><img src="/img/ngrinder介绍与安装/agent.PNG" alt="Alt text"></p>
<blockquote>
<p>因为使用的是admin帐号登录，下载的agents包中的配置可以分享给所有的用户使用。<br>如果你登录的是一个普通帐号，下载链接将变成“Download Private Agent” 下载的agents包中的配置只能当前用户使用</p>
</blockquote>
<p>下载后，把agent放在服务器上，解压<br><img src="/img/ngrinder介绍与安装/agent解压缩.PNG" alt="Alt text"></p>
<p>启动前检查 ulimt -a ，调整配置让其运行更多的线程，执行bash run_agent.sh 启动agent。<br><img src="/img/ngrinder介绍与安装/agent启动.PNG" alt="Alt text"></p>
<h2 id="安装monitor">安装monitor</h2><p>nGrinder的Monitor是agent的一个子集，用于收集系统相关数据(比如CPU, MEM and Network) </p>
<p>agent在controller页面中直接下载<br><img src="/img/ngrinder介绍与安装/下载监控.PNG" alt="Alt text"></p>
<p>下载后，把monitor放在服务器上，解压<br><img src="/img/ngrinder介绍与安装/monitor解压缩.PNG" alt="Alt text"></p>
<p>执行bash run_monitor.sh启动monitor<br><img src="/img/ngrinder介绍与安装/monitor启动.PNG" alt="Alt text"></p>
<h1 id="安装完测试">安装完测试</h1><p>nGrinder运行一个压力测试只需3步：</p>
<ol>
<li>编写测试脚本</li>
<li>场景设计：配置并发用户数，执行时间，资源监控</li>
<li>场景执行，结束后自动生成报告</li>
</ol>
<p>这里测试一个简单的get请求：<a href="http://192.168.42.32:82/sourcing/tradeservice/quotation-request.html" target="_blank" rel="external">http://192.168.42.32:82/sourcing/tradeservice/quotation-request.html</a></p>
<h2 id="第一步，编写测试脚本">第一步，编写测试脚本</h2><p>登录ngrinder，输入url，点击开始测试<br><img src="/img/ngrinder介绍与安装/第一步.PNG" alt="Alt text"></p>
<h2 id="第二步，场景设计">第二步，场景设计</h2><p>填写相应场景信息，如并发用户数，场景执行时间等<br><img src="/img/ngrinder介绍与安装/第二步.PNG" alt="Alt text"></p>
<h2 id="第三步，场景执行">第三步，场景执行</h2><p>点击保存并运行按钮，开始场景执行<br><img src="/img/ngrinder介绍与安装/第三步.PNG" alt="Alt text"></p>
<hr>
<p>参考文章：<br><a href="http://ju.outofmemory.cn/entry/197566" target="_blank" rel="external">利用nGrinder进行性能测试操作指南</a><br><a href="http://blog.csdn.net/neven7/article/details/50740018" target="_blank" rel="external">性能测试工具 nGrinder 项目剖析及二次开发</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>nGrinder是基于Grinder开源项目，但由NHN公司的nGrinder开发团队进行了重新设计和完善（所以叫做nGrinder）。</p>
<p>它是由一个controller和连接它的多个agent组成，用户可以通过web界面管理和控制测试，以及查看测试报告，controller会把测试分发到一个或多个agent去执行。用户可以设置使用多个进程和线程来并发的执行该脚本，而且在同一线程中，来重复不断的执行测试脚本，来模拟很多并发用户。</p>
<p>nGrinder的测试是基于一个python的测试脚本，用户按照一定规则编写测试脚本以后，controller会将脚本以及需要的其他文件分发到agent，用Jython执行。并在执行过程中收集运行情况、响应时间、测试目标服务器的运行情况等。并保存这些数据生成运行报告，以供以后查看。</p>]]>
    
    </summary>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[性能测试平台调研]]></title>
    <link href="http://tonylit.me/2017/03/11/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0%E8%B0%83%E7%A0%94/"/>
    <id>http://tonylit.me/2017/03/11/性能测试平台调研/</id>
    <published>2017-03-11T03:37:27.000Z</published>
    <updated>2017-03-11T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p><strong>目标：</strong>通过搭建集脚本、场景、压测、监控和报表展示为一体性能测试平台，降低性能测试入门使用成本，提高性能测试效率。 </p>
<p>为此研究了几款性能测试平台，进行优劣对比，最终选择了ngrinder。</p>
<a id="more"></a>
<hr>
<h1 id="5款性能测试平台">5款性能测试平台</h1><table>
<thead>
<tr>
<th>平台名称</th>
<th style="text-align:center">介绍</th>
<th style="text-align:center">功能介绍</th>
<th>支持协议</th>
<th>demo</th>
</tr>
</thead>
<tbody>
<tr>
<td>性能压测平台（Aperf）</td>
<td style="text-align:center">Aperf是一个基于Jmeter的性能压测平台，它集脚本、场景、压测、监控和报表展示为一体，是一个能快速、低成本实施压测的平台。Java脚本</td>
<td style="text-align:center">Aperf的核心功能包含如下：- 脚本管理：主干脚本库管理和配置，在线编写http脚本。- 场景管理：在线配置场景，如场景设置（并发用户、压测梯度）、场景监控（java、system）等。- 场景执行。 - 性能结果的监控和报表展示。- 执行机管理。- 公共环境管理</td>
<td>支持http/https,TCP等常用的协议脚本</td>
<td><a href="http://ali-aegis.aliyun.com/help/help.html?name=6" target="_blank" rel="external">http://ali-aegis.aliyun.com/help/help.html?name=6</a></td>
</tr>
<tr>
<td>ngrinder</td>
<td style="text-align:center">nGrinder是一个免费的、开放源代码的Web性能测试平台。运行在应用中间件服务器中运行。它由一个控制端和多个代理端组成。通过控制端（浏览器访问）建立测试场景，然后通过分发到代理端进行压力测试，是一个分布式的测试场景。Python脚本</td>
<td style="text-align:center"></td>
<td>支持http/https</td>
<td><a href="https://github.com/naver/ngrinder" target="_blank" rel="external">https://github.com/naver/ngrinder</a> 。演示demo：<a href="http://ngrinder-demo.nhnopensource.org/" target="_blank" rel="external">http://ngrinder-demo.nhnopensource.org/</a></td>
</tr>
<tr>
<td>基于gatling压测平台。不支持分布式</td>
<td style="text-align:center">Scala脚本</td>
<td style="text-align:center"></td>
<td>支持http/https</td>
<td><a href="http://www.tuicool.com/articles/BZFzaiY" target="_blank" rel="external">http://www.tuicool.com/articles/BZFzaiY</a></td>
</tr>
<tr>
<td>阿里云性能测试平台(Trunner)</td>
<td style="text-align:center">Python脚本</td>
<td style="text-align:center"></td>
<td>支持http/https,TCP等常用的协议脚本</td>
<td><a href="https://www.aliyun.com/product/pts" target="_blank" rel="external">https://www.aliyun.com/product/pts</a></td>
</tr>
<tr>
<td>腾讯性能测试平台</td>
<td style="text-align:center">C++脚本</td>
<td style="text-align:center"></td>
<td>支持http/https</td>
<td><a href="http://wetest.qq.com/gaps/?from=content_lab_yc" target="_blank" rel="external">http://wetest.qq.com/gaps/?from=content_lab_yc</a></td>
</tr>
</tbody>
</table>
<p>ngrinder跟阿里云的PTS的共同点：<br>1.BS架构，web界面操作，配置简单<br>2.支持分布式<br>3.在线管理测试脚本、测试任务、测试结果<br>4.Jython测试脚本编写，可以实现较为复杂的逻辑<br>5.可以使用插件（阿里云的PTS录制插件）进行脚本的录制<br>6.可定时执行任务 </p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>目标：</strong>通过搭建集脚本、场景、压测、监控和报表展示为一体性能测试平台，降低性能测试入门使用成本，提高性能测试效率。 </p>
<p>为此研究了几款性能测试平台，进行优劣对比，最终选择了ngrinder。</p>]]>
    
    </summary>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[loadrunner https脚本]]></title>
    <link href="http://tonylit.me/2017/02/22/loadrunner_https%E8%84%9A%E6%9C%AC/"/>
    <id>http://tonylit.me/2017/02/22/loadrunner_https脚本/</id>
    <published>2017-02-22T03:37:27.000Z</published>
    <updated>2017-02-22T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>全站https已经成为互联网公司的主流，</p>
<p>loadrunner对https的支持还算不错。</p>
<a id="more"></a>
<p>这里总结两种loadrunner https支持。</p>
<h1 id="直接设置">直接设置</h1><p>录制脚本的时候不需要进行证书设置，</p>
<p>在options-&gt;Network-&gt;Port Mapping中，将Capture level选择WinNet level data即可</p>
<p><img src="/img/loadrunner_https/port-mapping.PNG" alt="Alt text"></p>
<p>在场景执行的时候，也要选择为WinNet level data。</p>
<hr>
<h1 id="加入证书">加入证书</h1><h2 id="首先拿到-pem类型的证书">首先拿到.pem类型的证书</h2><p>向开发或者运维人员索要.pem证书</p>
<p>大多证书都是.crt结尾，如果能拿到.crt和.key，我们自己可以转成.pem</p>
<p><img src="/img/loadrunner_https/证书.PNG" alt="Alt text"></p>
<p>工具：<a href="https://www.myssl.cn/tools/merge-pem-cert.html" target="_blank" rel="external">https://www.myssl.cn/tools/merge-pem-cert.html</a></p>
<h2 id="录制前设置options">录制前设置options</h2><p>在options-&gt;Network-&gt;Port Mapping中，将Capture level选择<strong>Socket level and WinNet data</strong> </p>
<p>新建New Entry</p>
<p><img src="/img/loadrunner_https/ssl.PNG" alt="Alt text"></p>
<p>开始录制，录制结束后会生成以下脚本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">web_<span class="built_in">set</span>_certificate_ex(<span class="string">"CertFilePath=focuschina.PEM"</span>, </span><br><span class="line">	<span class="string">"CertFormat=PEM"</span>, </span><br><span class="line">	<span class="string">"KeyFilePath=focuschina.PEM"</span>, </span><br><span class="line">	<span class="string">"KeyFormat=PEM"</span>, </span><br><span class="line">	<span class="string">"Password=123456"</span>, </span><br><span class="line">        <span class="string">"CertIndex=1"</span>,</span><br><span class="line">	LAST);</span><br></pre></td></tr></table></figure>
<p>注意   “CertIndex=1”, 如果没有的话，加上。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>全站https已经成为互联网公司的主流，</p>
<p>loadrunner对https的支持还算不错。</p>]]>
    
    </summary>
    
      <category term="loadrunner" scheme="http://tonylit.me/tags/loadrunner/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JVM 配置参数整理]]></title>
    <link href="http://tonylit.me/2017/01/24/JVM%20%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E6%95%B4%E7%90%86/"/>
    <id>http://tonylit.me/2017/01/24/JVM 配置参数整理/</id>
    <published>2017-01-24T03:37:27.000Z</published>
    <updated>2017-01-24T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-XX:+PrintFlagsFinal">-XX:+PrintFlagsFinal</h1><p>当你在网上兴冲冲找到一个可优化的参数时，先用-XX: +PrintFlagsFinal看看，它可能已经默认打开了;<strong>不要轻信网上任何文章，一切以JDK打出来的为准</strong>。<br>-XX:+PrintFlagsFinal显示所有可设置的参数及它们的值（ JDK 6 update 21开始才可以用），默认是不包括diagnostic或experimental系的。<br>要在-XX:+PrintFlagsFinal的输出里看到这两种参数的信息，分别需要显式指定</p>
<blockquote>
<p>-XX:+UnlockDiagnosticVMOptions<br>-XX:+UnlockExperimentalVMOptions</p>
</blockquote>
<p>另外，可以先看一下R大的<a href="http://hllvm.group.iteye.com/group/topic/27945" target="_blank" rel="external">JVM调优的”标准参数”的各种陷阱</a>这篇文章。</p>
<a id="more"></a>
<h1 id="查看jvm运行参数">查看jvm运行参数</h1><p>jinfo -flags pid</p>
<p>在JDK 7开始可以使用<strong><a href="https://segmentfault.com/a/1190000000470139" target="_blank" rel="external">jcmd</a></strong>，<br>jcmd pidVM.flags</p>
<h1 id="常用参数说明">常用参数说明</h1><p>把参数分为全局参数，监控参数，eden区参数，survivor区参数，old区参数，perm区参数</p>
<h2 id="全局参数">全局参数</h2><h3 id="-Xms_-Xmx">-Xms -Xmx</h3><p>-Xms 初始化堆大小，-Xmx 最大堆大小。默认空余堆内存小于40%，自动扩展到-Xmx的值。<br><strong>-Xms和-Xmx一般情况设置相同的值</strong>，避免扩展内存带来的损耗。</p>
<p>单机部署server的情况下，-Xmx的设置建议在物理内存的1/2到2/3之间。<br> Java进程消耗的总内存肯定大于最大堆内存：</p>
<blockquote>
<p>java总内存=堆内存（Xmx）+ 方法区内存（MaxPermSize）+ 栈内存（Xss，包括虚拟机栈和本地方法栈）*线程数 + direct memory +  JNI代码 + 虚拟机和GC本身内存开销 </p>
</blockquote>
<p>留更多的内存提升系统容错性。</p>
<hr>
<h3 id="-XX:+DisableExplicitGC与-XX+ExplicitGCInvokesConcurrent">-XX:+DisableExplicitGC与-XX+ExplicitGCInvokesConcurrent</h3><p><strong>-XX:+DisableExplicitGC：</strong><br>用来禁止system.gc对gc的触发，加上后system.gc（）将不会触发gc。<br>System.gc()的默认效果是引发一次stop-the-world的full GC，对整个GC堆做收集。</p>
<p>为啥要用这个参数呢？<br>最主要的原因是为了防止某些手贱的同学在代码里到处写System.gc()的调用而干扰了程序的正常运行；<br>也有些时候这些调用是在某些库或框架里写的，改不了它们的代码但又不想被这些调用干扰也会用这参数。</p>
<p>开启这个参数会有什么坑？<br>比如Netty中的NIO，使用的是direct memory（不在gc回收范围内），经常、反复的申请DirectByteBuffer，这时候对内存的回收不调用System.gc()的话，会oom。</p>
<p><strong>-XX+ExplicitGCInvokesConcurrent</strong><br>该参数只能配合CMS使用，System.gc()还是会触发GC的，只不过不是触发一个完全stop-the-world的full GC，而是一次并发GC周期（只在ygc和两个remark阶段停顿）。</p>
<p><strong>结论：使用-XX:+ExplicitGCInvokesConcurrent，不要用-XX:+DisableExplicitGC</strong></p>
<p>使用JDK6u23之前的版本，这里有个bug，可以升级JDK版本解决<br><a href="http://bugs.sun.com/view_bug.do?bug_id=6919638" target="_blank" rel="external">6919638 CMS: ExplicitGCInvokesConcurrent misinteracts with gc locker</a> </p>
<h3 id="-XX:+UseAdaptiveSizePolicy">-XX:+UseAdaptiveSizePolicy</h3><p>自适应大小调整：根据对象分配以及存活率自动地对新生代Eden和Survivor空间进行调整以最优化对象老化频率。这种模式下，新生代大小、eden与survivor比例、晋升年老代的对象年龄等参数会被自动调整。</p>
<p>只有Throughput收集器（ParallelOldGC，ParallelGC）才支持自适应大小调整，尝试在非Throughput收集器上启用或禁用自适应大小调整都不会有任何效果，即这种操作是空操作。</p>
<p>即目前HotSpot VM上只有ParallelScavenge系的GC才可以配合-XX:+UseAdaptiveSizePolicy使用；也就是只有-XX:+UseParallelGC或者-XX:+UseParallelOldGC。<br>因此，在使用CMS的时候，不要使用该参数。</p>
<h3 id="-XX:ConcGCThreads">-XX:ConcGCThreads</h3><p>CMS默认启动的并发线程数是（ParallelGCThreads+3）/4。</p>
<p>当有4个并行线程时，有1个并发线程；当有5~8个并行线程时，有2个并发线程。</p>
<p>ParallelGCThreads表示的是GC并行时使用的线程数，如果新生代使用ParNew，那么ParallelGCThreads也就是新生代GC线程数。默认情况下，当CPU数量小于8时，ParallelGCThreads的值就是CPU的数量，当CPU数量大于8时，ParallelGCThreads的值等于3+5*cpuCount/8。</p>
<p>ParallelGCThreads = (ncpus &lt;= 8) ? ncpus : 3 + ((ncpus * 5) / 8)</p>
<p>可以通过-XX:ConcGCThreads或者-XX:ParallelCMSThreads来指定。</p>
<p>并发是指垃圾收集器和应用程序交替执行，并行是指应用程序停止，同时由多个线程一起执行GC。因此并行回收器不是并发的。因为并行回收器执行时，应用程序完全挂起，不存在交替执行的步骤。</p>
<h3 id="-XX:CMSInitiatingOccupancyFraction">-XX:CMSInitiatingOccupancyFraction</h3><p>由于CMS收集器不是独占式的回收器，在CMS回收过程中，应用程序仍然在不停地工作。在应用程序工作过程中，又会不断产生垃圾。这些新垃圾在当前CMS回收过程中是无法清除的。同时，因为应用程序没有中断，所以在CMS回收过程中，还应该确保应用程序由足够的内存可用。因此，CMS回收器不会等待堆内存饱和时才进行垃圾回收，而是当堆内存使用率达到某一阈值时便开始进行回收，以确保应用程序在CMS工作中仍然有足够的空间支持应用程序运行。</p>
<p>-XX:CMSInitiatingOccupancyFraction，默认为68，即当年老代的空间使用率达到68%时，会执行一次CMS回收。如果应用程序的内存使用率增长很快，在CMS的执行过程中，已经出现了内存不足，此时，CMS回收就会失败，虚拟机将启动SerialOld串行收集器进行垃圾回收。如果这样，应用程序将完全中断，直到垃圾回收完成，这时，应用程序的停顿时间可能会较长。</p>
<p>因此，根据应用特点，可以对该值进行调优，如果内存增长缓慢，则可以设置一个稍大的值，大的阈值可以有效降低CMS的触发频率，减少年老代回收的次数可以较为明显地改善应用程序性能。</p>
<p>反之，如果应用程序内存使用率增长很快，则应该降低这个阈值，以避免频繁触发年老代串行收集器。</p>
<h3 id="-XX:-ScavengeBeforeFullGC">-XX:-ScavengeBeforeFullGC</h3><p>在使用吞吐量优先的垃圾回收器时（-XX:+UseParallelOldGC或-XX:+UseParallelGC），如果关闭-XX:-ScavengeBeforeFullGC，则hotspot vm在FullGC之前不会进行MinorGC，如果开启的话，FullGC之前会先进行MinorGC，分担一部分原本FullGC要做的工作，使得在这两次独立的GC之间java线程有机会得以运行，从而缩短最大停顿时间，但也拉长了整体的停顿时间。</p>
<hr>
<h2 id="监控参数">监控参数</h2><h3 id="-XX:HeapDumpPath">-XX:HeapDumpPath</h3><p>-XX:HeapDumpPath=/data/logs/heaperr.log.201504301631-XX:+HeapDumpOnOutOfMemoryError</p>
<p>设置为动态参数的话：</p>
<p>-XX:HeapDumpPath=/data/logs/heaperr-$(date +%Y%m%d-%H%M%S).log</p>
<p>其中XX:HeapDumpPath可以设置为一个目录或者一个文件，这里指定文件。</p>
<h3 id="-verbose:gc与-XX:+PrintGC">-verbose:gc与-XX:+PrintGC</h3><p>-XX:+PrintGC 与 -verbose:gc 的功能是一样的，区别在于-XX:+PrintGC是managable的，可以通过jinfo被开启或关闭。<br>另外，-XX:+PrintGCDetails 在启动脚本可以自动开启-XX:+PrintGC , 如果在命令行使用jinfo开启的话，不会自动开启-XX:+PrintGC</p>
<hr>
<h1 id="参考：">参考：</h1><p><a href="https://segmentfault.com/a/1190000004699398" target="_blank" rel="external">jvm参数备忘</a><br><a href="https://segmentfault.com/a/1190000005036183" target="_blank" rel="external">JVM参数陷阱</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="-XX:+PrintFlagsFinal">-XX:+PrintFlagsFinal</h1><p>当你在网上兴冲冲找到一个可优化的参数时，先用-XX: +PrintFlagsFinal看看，它可能已经默认打开了;<strong>不要轻信网上任何文章，一切以JDK打出来的为准</strong>。<br>-XX:+PrintFlagsFinal显示所有可设置的参数及它们的值（ JDK 6 update 21开始才可以用），默认是不包括diagnostic或experimental系的。<br>要在-XX:+PrintFlagsFinal的输出里看到这两种参数的信息，分别需要显式指定</p>
<blockquote>
<p>-XX:+UnlockDiagnosticVMOptions<br>-XX:+UnlockExperimentalVMOptions</p>
</blockquote>
<p>另外，可以先看一下R大的<a href="http://hllvm.group.iteye.com/group/topic/27945">JVM调优的”标准参数”的各种陷阱</a>这篇文章。</p>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GC combination test]]></title>
    <link href="http://tonylit.me/2016/12/27/GC%20combination%20test/"/>
    <id>http://tonylit.me/2016/12/27/GC combination test/</id>
    <published>2016-12-27T03:37:27.000Z</published>
    <updated>2016-12-27T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>不同的垃圾收集器对系统有不同的性能表现，没有哪种垃圾收集器可以完美匹配所有系统。</p>
<p>生产环境中需要针对不同的应用系统，进行不断的测试，尽可能选择适当的垃圾回收器与gc参数。</p>
<p>所以，对于某个业务系统来说，没有最佳的GC组合，只有最合适的GC组合。</p>
<a id="more"></a>
<hr>
<h1 id="JVM_GC组合方式">JVM GC组合方式</h1><p>Java的gc回收参数有XX:+UseSerialGC，XX:+UseConcMarkSweepGC，XX:+UseParNewGC，XX:+UseParallelGC，XX:+UseParallelOldGC等<br><img src="/img/JVM_GC组合/collection-parameter.PNG" alt="Alt text"></p>
<p>几个参数是如何搭配的，jvm代码写的非常清楚：</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">bool Arguments::check_gc_consistency<span class="params">()</span> &#123;  </span><br><span class="line">  bool status = <span class="literal">true</span>;  </span><br><span class="line">  <span class="comment">// Ensure that the user has not selected conflicting sets  </span></span><br><span class="line">  <span class="comment">// of collectors. [<span class="doctag">Note:</span> this check is merely a user convenience;  </span></span><br><span class="line">  <span class="comment">// collectors over-ride each other so that only a non-conflicting  </span></span><br><span class="line">  <span class="comment">// set is selected; however what the user gets is not what they  </span></span><br><span class="line">  <span class="comment">// may have expected from the combination they asked for. It's  </span></span><br><span class="line">  <span class="comment">// better to reduce user confusion by not allowing them to  </span></span><br><span class="line">  <span class="comment">// select conflicting combinations.  </span></span><br><span class="line">  uint i = <span class="number">0</span>;  </span><br><span class="line">  <span class="keyword">if</span> <span class="params">(UseSerialGC)</span>                       i++;  </span><br><span class="line">  <span class="keyword">if</span> <span class="params">(UseConcMarkSweepGC || UseParNewGC)</span> i++;  </span><br><span class="line">  <span class="keyword">if</span> <span class="params">(UseParallelGC || UseParallelOldGC)</span> i++;  </span><br><span class="line">  <span class="keyword">if</span> <span class="params">(UseG1GC)</span>                           i++;  </span><br><span class="line">  <span class="keyword">if</span> <span class="params">(i &gt; <span class="number">1</span>)</span> &#123;  </span><br><span class="line">    jio_fprintf<span class="params">(defaultStream::error_stream<span class="params">()</span>,  </span><br><span class="line">                <span class="string">"Conflicting collector combinations in option list; "</span>  </span><br><span class="line">                <span class="string">"please refer to the release notes for the combinations "</span>  </span><br><span class="line">                <span class="string">"allowed\n"</span>)</span>;  </span><br><span class="line">    status = <span class="literal">false</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  return status;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里先不考虑G1的情况，将其分成5种进行测试：<br><strong>-XX:+UseSerialGC</strong><br>yong:串行GC<br>old:串行GC</p>
<p><strong>-XX:+UseParallelGC</strong><br>yong:并行回收GC<br>old:串行GC</p>
<p><strong>-XX:+UseConeMarkSweepGC</strong><br>yong:并行GC<br>old:并发GC</p>
<p><strong>-XX:+UseParNewGC</strong><br>yong:并行GC<br>old:串行GC</p>
<p><strong>-XX:+UseParallelOldGC</strong><br>yong:并行回收GC<br>old:并行GC</p>
<p>关于垃圾收集器基础知识，可以参考“<a href="http://tonylit.me/2016/12/07/%E6%B5%85%E8%B0%88JVM%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/">浅谈jvm垃圾收集器</a>”</p>
<hr>
<h1 id="测试一：单个方法测试">测试一：单个方法测试</h1><p>使用本地机器进行测试：<br>JVM: Java HotSpot(TM) Client VM (16.3-b01, mixed mode, sharing)<br>Java: version 1.6.0_20, vendor Sun Microsystems Inc.</p>
<p>windows 7<br><img src="/img/JVM_GC组合/本地机器参数.PNG" alt="Alt text"></p>
<h2 id="测试代码">测试代码</h2><p>每次分配 512*100B 空间，循环1W次。<br>固定参数：-Xmx512M -Xms512M，采用不同的垃圾回收器，输出程序运行所消耗的时间。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * GCTimeTest.java</span><br><span class="line"> * </span><br><span class="line"> * @author lit</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> GCTimeTest &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> HashMap <span class="built_in">map</span> = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> throws InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">60000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> begintime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">map</span>.size() * <span class="number">512</span> / <span class="number">1024</span> / <span class="number">1024</span> &gt;= <span class="number">400</span>) &#123;</span><br><span class="line">                <span class="built_in">map</span>.clear();<span class="comment">// 保护内存不溢出</span></span><br><span class="line">            &#125;</span><br><span class="line">            byte[] b1;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">                b1 = <span class="keyword">new</span> byte[<span class="number">512</span>];</span><br><span class="line">                <span class="built_in">map</span>.put(System.nanoTime(), b1);<span class="comment">// 不断消耗内存</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endtime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"cost time:"</span> + (endtime - begintime));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="-XX:+UseSerialGC">-XX:+UseSerialGC</h2><blockquote>
<p>yong:串行GC<br>old:串行GC<br>VM arguments：-Xmx512M -Xms512M -XX:+UseSerialGC  -Xloggc:C:/gc_product.log -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution</p>
</blockquote>
<p><strong>运行结果：</strong><br>cost time:2915</p>
<p><strong>GC日志：</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">60.429</span>: [GC <span class="number">60.429</span>: [DefNew</span><br><span class="line">Desired survivor size <span class="number">8945664</span> bytes, <span class="keyword">new</span> threshold <span class="number">1</span> (max <span class="number">15</span>)</span><br><span class="line">- age   <span class="number">1</span>:   <span class="number">17891320</span> bytes,   <span class="number">17891320</span> total</span><br><span class="line">: <span class="number">139776</span>K-&gt;<span class="number">17471</span>K(<span class="number">157248</span>K), <span class="number">0.3461929</span> secs] <span class="number">139776</span>K-&gt;<span class="number">136930</span>K(<span class="number">506816</span>K), <span class="number">0.3462939</span> secs] [Times: user=<span class="number">0.20</span> sys=<span class="number">0.13</span>, real=<span class="number">0.35</span> secs] </span><br><span class="line"><span class="number">60.982</span>: [GC <span class="number">60.982</span>: [DefNew</span><br><span class="line">Desired survivor size <span class="number">8945664</span> bytes, <span class="keyword">new</span> threshold <span class="number">1</span> (max <span class="number">15</span>)</span><br><span class="line">- age   <span class="number">1</span>:   <span class="number">17891328</span> bytes,   <span class="number">17891328</span> total</span><br><span class="line">: <span class="number">157247</span>K-&gt;<span class="number">17472</span>K(<span class="number">157248</span>K), <span class="number">0.4087474</span> secs] <span class="number">276706</span>K-&gt;<span class="number">274374</span>K(<span class="number">506816</span>K), <span class="number">0.4088472</span> secs] [Times: user=<span class="number">0.25</span> sys=<span class="number">0.11</span>, real=<span class="number">0.41</span> secs] </span><br><span class="line"><span class="number">61.563</span>: [GC <span class="number">61.563</span>: [DefNew: <span class="number">157248</span>K-&gt;<span class="number">157248</span>K(<span class="number">157248</span>K), <span class="number">0.0000115</span> secs]<span class="number">61.563</span>: [Tenured: <span class="number">256902</span>K-&gt;<span class="number">349567</span>K(<span class="number">349568</span>K), <span class="number">0.7434672</span> secs] <span class="number">414150</span>K-&gt;<span class="number">413941</span>K(<span class="number">506816</span>K), [Perm : <span class="number">374</span>K-&gt;<span class="number">374</span>K(<span class="number">12288</span>K)], <span class="number">0.7436129</span> secs] [Times: user=<span class="number">0.64</span> sys=<span class="number">0.08</span>, real=<span class="number">0.74</span> secs] </span><br><span class="line"><span class="number">62.743</span>: [Full GC <span class="number">62.743</span>: [Tenured: <span class="number">349567</span>K-&gt;<span class="number">48225</span>K(<span class="number">349568</span>K), <span class="number">0.2319682</span> secs] <span class="number">506815</span>K-&gt;<span class="number">48225</span>K(<span class="number">506816</span>K), [Perm : <span class="number">374</span>K-&gt;<span class="number">374</span>K(<span class="number">12288</span>K)], <span class="number">0.2320699</span> secs] [Times: user=<span class="number">0.23</span> sys=<span class="number">0.00</span>, real=<span class="number">0.23</span> secs] </span><br><span class="line">Heap</span><br><span class="line"> def <span class="keyword">new</span> generation   total <span class="number">157248</span>K, used <span class="number">74536</span>K [<span class="number">0x129e0000</span>, <span class="number">0x1d480000</span>, <span class="number">0x1d480000</span>)</span><br><span class="line">  eden space <span class="number">139776</span>K,  <span class="number">53</span>% used [<span class="number">0x129e0000</span>, <span class="number">0x172aa230</span>, <span class="number">0x1b260000</span>)</span><br><span class="line">  from space <span class="number">17472</span>K,   <span class="number">0</span>% used [<span class="number">0x1b260000</span>, <span class="number">0x1b260000</span>, <span class="number">0x1c370000</span>)</span><br><span class="line">  to   space <span class="number">17472</span>K,   <span class="number">0</span>% used [<span class="number">0x1c370000</span>, <span class="number">0x1c370000</span>, <span class="number">0x1d480000</span>)</span><br><span class="line"> tenured generation   total <span class="number">349568</span>K, used <span class="number">48225</span>K [<span class="number">0x1d480000</span>, <span class="number">0x329e0000</span>, <span class="number">0x329e0000</span>)</span><br><span class="line">   the space <span class="number">349568</span>K,  <span class="number">13</span>% used [<span class="number">0x1d480000</span>, <span class="number">0x20398700</span>, <span class="number">0x20398800</span>, <span class="number">0x329e0000</span>)</span><br><span class="line"> compacting perm gen  total <span class="number">12288</span>K, used <span class="number">374</span>K [<span class="number">0x329e0000</span>, <span class="number">0x335e0000</span>, <span class="number">0x369e0000</span>)</span><br><span class="line">   the space <span class="number">12288</span>K,   <span class="number">3</span>% used [<span class="number">0x329e0000</span>, <span class="number">0x32a3d840</span>, <span class="number">0x32a3da00</span>, <span class="number">0x335e0000</span>)</span><br><span class="line">    ro space <span class="number">10240</span>K,  <span class="number">54</span>% used [<span class="number">0x369e0000</span>, <span class="number">0x36f5b760</span>, <span class="number">0x36f5b800</span>, <span class="number">0x373e0000</span>)</span><br><span class="line">    rw space <span class="number">12288</span>K,  <span class="number">55</span>% used [<span class="number">0x373e0000</span>, <span class="number">0x37a7f798</span>, <span class="number">0x37a7f800</span>, <span class="number">0x37fe0000</span>)</span><br></pre></td></tr></table></figure>
<p>从日志中看到：<br>Desired survivor size 8945664 bytes，8945664 bytes 其实是单个survivor区的一半大小，<br>-XX:TargetSurvivorRatio=50 有这么个参数，默认survivor 区到50%使用，就把对象晋升old</p>
<p><strong>GC日志分析：</strong><br><img src="/img/JVM_GC组合/serial-heap.PNG" alt="Alt text"><br><img src="/img/JVM_GC组合/serial-gc.PNG" alt="Alt text"></p>
<hr>
<h2 id="-XX:+UseParallelGC">-XX:+UseParallelGC</h2><blockquote>
<p>yong:并行回收GC<br>old:串行GC<br>VM arguments：-Xmx512M -Xms512M -XX:+UseParallelGC  -Xloggc:C:/gc_product.log -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution</p>
</blockquote>
<p><strong>线程数默认为CPU个数</strong>，CPU很多时，可用–XX:ParallelGCThreads=线程数。<br>这次使用默认值，2核cpu</p>
<p><strong>运行结果：</strong><br>cost time:2808</p>
<p><strong>GC日志：</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">60.506</span>: [GC</span><br><span class="line">Desired survivor size <span class="number">22347776</span> bytes, <span class="keyword">new</span> threshold <span class="number">7</span> (max <span class="number">15</span>)</span><br><span class="line"> [PSYoungGen: <span class="number">131072</span>K-&gt;<span class="number">21816</span>K(<span class="number">152896</span>K)] <span class="number">131072</span>K-&gt;<span class="number">132212</span>K(<span class="number">502464</span>K), <span class="number">0.2156646</span> secs] [Times: user=<span class="number">0.33</span> sys=<span class="number">0.05</span>, real=<span class="number">0.22</span> secs] </span><br><span class="line"><span class="number">60.936</span>: [GC</span><br><span class="line">Desired survivor size <span class="number">22347776</span> bytes, <span class="keyword">new</span> threshold <span class="number">7</span> (max <span class="number">15</span>)</span><br><span class="line"> [PSYoungGen: <span class="number">152888</span>K-&gt;<span class="number">21808</span>K(<span class="number">152896</span>K)] <span class="number">263284</span>K-&gt;<span class="number">264668</span>K(<span class="number">502464</span>K), <span class="number">0.3085561</span> secs] [Times: user=<span class="number">0.39</span> sys=<span class="number">0.02</span>, real=<span class="number">0.31</span> secs] </span><br><span class="line"><span class="number">61.244</span>: [Full GC [PSYoungGen: <span class="number">21808</span>K-&gt;<span class="number">0</span>K(<span class="number">152896</span>K)] [PSOldGen: <span class="number">242860</span>K-&gt;<span class="number">264149</span>K(<span class="number">349568</span>K)] <span class="number">264668</span>K-&gt;<span class="number">264149</span>K(<span class="number">502464</span>K) [PSPermGen: <span class="number">2099</span>K-&gt;<span class="number">2099</span>K(<span class="number">12288</span>K)], <span class="number">0.4015657</span> secs] [Times: user=<span class="number">0.36</span> sys=<span class="number">0.03</span>, real=<span class="number">0.40</span> secs] </span><br><span class="line"><span class="number">61.826</span>: [Full GC [PSYoungGen: <span class="number">131072</span>K-&gt;<span class="number">45522</span>K(<span class="number">152896</span>K)] [PSOldGen: <span class="number">264149</span>K-&gt;<span class="number">349568</span>K(<span class="number">349568</span>K)] <span class="number">395221</span>K-&gt;<span class="number">395090</span>K(<span class="number">502464</span>K) [PSPermGen: <span class="number">2099</span>K-&gt;<span class="number">2099</span>K(<span class="number">12288</span>K)], <span class="number">0.7014297</span> secs] [Times: user=<span class="number">0.70</span> sys=<span class="number">0.00</span>, real=<span class="number">0.70</span> secs] </span><br><span class="line"><span class="number">62.755</span>: [Full GC [PSYoungGen: <span class="number">131072</span>K-&gt;<span class="number">0</span>K(<span class="number">152896</span>K)] [PSOldGen: <span class="number">349568</span>K-&gt;<span class="number">14857</span>K(<span class="number">349568</span>K)] <span class="number">480640</span>K-&gt;<span class="number">14857</span>K(<span class="number">502464</span>K) [PSPermGen: <span class="number">2099</span>K-&gt;<span class="number">2099</span>K(<span class="number">12288</span>K)], <span class="number">0.1491931</span> secs] [Times: user=<span class="number">0.16</span> sys=<span class="number">0.00</span>, real=<span class="number">0.15</span> secs] </span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total <span class="number">152896</span>K, used <span class="number">96649</span>K [<span class="number">0x1db10000</span>, <span class="number">0x285b0000</span>, <span class="number">0x285b0000</span>)</span><br><span class="line">  eden space <span class="number">131072</span>K, <span class="number">73</span>% used [<span class="number">0x1db10000</span>,<span class="number">0x23972778</span>,<span class="number">0x25b10000</span>)</span><br><span class="line">  from space <span class="number">21824</span>K, <span class="number">0</span>% used [<span class="number">0x27060000</span>,<span class="number">0x27060000</span>,<span class="number">0x285b0000</span>)</span><br><span class="line">  to   space <span class="number">21824</span>K, <span class="number">0</span>% used [<span class="number">0x25b10000</span>,<span class="number">0x25b10000</span>,<span class="number">0x27060000</span>)</span><br><span class="line"> PSOldGen        total <span class="number">349568</span>K, used <span class="number">14857</span>K [<span class="number">0x085b0000</span>, <span class="number">0x1db10000</span>, <span class="number">0x1db10000</span>)</span><br><span class="line">  object space <span class="number">349568</span>K, <span class="number">4</span>% used [<span class="number">0x085b0000</span>,<span class="number">0x094325a0</span>,<span class="number">0x1db10000</span>)</span><br><span class="line"> PSPermGen       total <span class="number">12288</span>K, used <span class="number">2104</span>K [<span class="number">0x045b0000</span>, <span class="number">0x051b0000</span>, <span class="number">0x085b0000</span>)</span><br><span class="line">  object space <span class="number">12288</span>K, <span class="number">17</span>% used [<span class="number">0x045b0000</span>,<span class="number">0x047be2f8</span>,<span class="number">0x051b0000</span>)</span><br></pre></td></tr></table></figure>
<p><strong>GC日志分析：</strong></p>
<p><img src="/img/JVM_GC组合/parallel-heap.PNG" alt="Alt text"></p>
<p><img src="/img/JVM_GC组合/parallel-gc.PNG" alt="Alt text"></p>
<hr>
<h2 id="-XX:+UseParallelOldGC">-XX:+UseParallelOldGC</h2><blockquote>
<p>yong:并行回收GC<br>old:并行GC<br>VM arguments：-Xmx512M -Xms512M -XX:+UseParallelOldGC -Xloggc:C:/gc_product.log -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution</p>
</blockquote>
<p><strong>运行结果：</strong><br>cost time:2564</p>
<p><strong>GC日志：</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">60.353</span>: [GC</span><br><span class="line">Desired survivor size <span class="number">22347776</span> bytes, <span class="keyword">new</span> threshold <span class="number">7</span> (max <span class="number">15</span>)</span><br><span class="line"> [PSYoungGen: <span class="number">131072</span>K-&gt;<span class="number">21816</span>K(<span class="number">152896</span>K)] <span class="number">131072</span>K-&gt;<span class="number">132224</span>K(<span class="number">502464</span>K), <span class="number">0.1793418</span> secs] [Times: user=<span class="number">0.30</span> sys=<span class="number">0.06</span>, real=<span class="number">0.18</span> secs] </span><br><span class="line"><span class="number">60.741</span>: [GC</span><br><span class="line">Desired survivor size <span class="number">22347776</span> bytes, <span class="keyword">new</span> threshold <span class="number">7</span> (max <span class="number">15</span>)</span><br><span class="line"> [PSYoungGen: <span class="number">152888</span>K-&gt;<span class="number">21808</span>K(<span class="number">152896</span>K)] <span class="number">263296</span>K-&gt;<span class="number">264672</span>K(<span class="number">502464</span>K), <span class="number">0.2304476</span> secs] [Times: user=<span class="number">0.42</span> sys=<span class="number">0.05</span>, real=<span class="number">0.23</span> secs] </span><br><span class="line"><span class="number">60.971</span>: [Full GC [PSYoungGen: <span class="number">21808</span>K-&gt;<span class="number">0</span>K(<span class="number">152896</span>K)] [ParOldGen: <span class="number">242864</span>K-&gt;<span class="number">257034</span>K(<span class="number">349568</span>K)] <span class="number">264672</span>K-&gt;<span class="number">257034</span>K(<span class="number">502464</span>K) [PSPermGen: <span class="number">2099</span>K-&gt;<span class="number">2098</span>K(<span class="number">12288</span>K)], <span class="number">0.5450639</span> secs] [Times: user=<span class="number">0.97</span> sys=<span class="number">0.00</span>, real=<span class="number">0.55</span> secs] </span><br><span class="line"><span class="number">61.671</span>: [Full GC [PSYoungGen: <span class="number">131072</span>K-&gt;<span class="number">38264</span>K(<span class="number">152896</span>K)] [ParOldGen: <span class="number">257034</span>K-&gt;<span class="number">349567</span>K(<span class="number">349568</span>K)] <span class="number">388106</span>K-&gt;<span class="number">387831</span>K(<span class="number">502464</span>K) [PSPermGen: <span class="number">2098</span>K-&gt;<span class="number">2098</span>K(<span class="number">12288</span>K)], <span class="number">0.6697351</span> secs] [Times: user=<span class="number">1.18</span> sys=<span class="number">0.03</span>, real=<span class="number">0.67</span> secs] </span><br><span class="line"><span class="number">62.593</span>: [Full GC [PSYoungGen: <span class="number">131072</span>K-&gt;<span class="number">0</span>K(<span class="number">152896</span>K)] [ParOldGen: <span class="number">349567</span>K-&gt;<span class="number">22005</span>K(<span class="number">349568</span>K)] <span class="number">480639</span>K-&gt;<span class="number">22005</span>K(<span class="number">502464</span>K) [PSPermGen: <span class="number">2098</span>K-&gt;<span class="number">2098</span>K(<span class="number">12288</span>K)], <span class="number">0.0589215</span> secs] [Times: user=<span class="number">0.06</span> sys=<span class="number">0.00</span>, real=<span class="number">0.06</span> secs] </span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total <span class="number">152896</span>K, used <span class="number">89296</span>K [<span class="number">0x1da20000</span>, <span class="number">0x284c0000</span>, <span class="number">0x284c0000</span>)</span><br><span class="line">  eden space <span class="number">131072</span>K, <span class="number">68</span>% used [<span class="number">0x1da20000</span>,<span class="number">0x23154358</span>,<span class="number">0x25a20000</span>)</span><br><span class="line">  from space <span class="number">21824</span>K, <span class="number">0</span>% used [<span class="number">0x26f70000</span>,<span class="number">0x26f70000</span>,<span class="number">0x284c0000</span>)</span><br><span class="line">  to   space <span class="number">21824</span>K, <span class="number">0</span>% used [<span class="number">0x25a20000</span>,<span class="number">0x25a20000</span>,<span class="number">0x26f70000</span>)</span><br><span class="line"> ParOldGen       total <span class="number">349568</span>K, used <span class="number">22005</span>K [<span class="number">0x084c0000</span>, <span class="number">0x1da20000</span>, <span class="number">0x1da20000</span>)</span><br><span class="line">  object space <span class="number">349568</span>K, <span class="number">6</span>% used [<span class="number">0x084c0000</span>,<span class="number">0x09a3d470</span>,<span class="number">0x1da20000</span>)</span><br><span class="line"> PSPermGen       total <span class="number">12288</span>K, used <span class="number">2103</span>K [<span class="number">0x044c0000</span>, <span class="number">0x050c0000</span>, <span class="number">0x084c0000</span>)</span><br><span class="line">  object space <span class="number">12288</span>K, <span class="number">17</span>% used [<span class="number">0x044c0000</span>,<span class="number">0x046cdfd0</span>,<span class="number">0x050c0000</span>)</span><br></pre></td></tr></table></figure>
<p><strong>GC日志分析：</strong><br>+UseParallelOldGC与 -XX:+UseParallelGC 的GC日志中，full gc收集打出来的：<strong>ParOldGen与PSOldGen</strong>，<br> jvm具体怎么给它们起名的呢？<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="keyword">const</span> <span class="keyword">char</span>* PSOldGen::select_name() &#123;  </span><br><span class="line">  <span class="keyword">return</span> UseParallelOldGC ? <span class="string">"ParOldGen"</span> : <span class="string">"PSOldGen"</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/JVM_GC组合/parallel-old-heap.PNG" alt="Alt text"></p>
<p><img src="/img/JVM_GC组合/parallel-old-gc.PNG" alt="Alt text"></p>
<hr>
<h2 id="-XX:+UseParNewGC">-XX:+UseParNewGC</h2><blockquote>
<p>yong:并行GC<br>old:串行GC<br>VM arguments：-Xmx512M -Xms512M -XX:+UseParNewGC -Xloggc:C:/gc_product.log -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution</p>
</blockquote>
<p><strong>运行结果：</strong><br>cost time:2174</p>
<p><strong>GC日志：</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">60.370</span>: [GC <span class="number">60.370</span>: [ParNew</span><br><span class="line">Desired survivor size <span class="number">8945664</span> bytes, <span class="keyword">new</span> threshold <span class="number">1</span> (max <span class="number">15</span>)</span><br><span class="line">- age   <span class="number">1</span>:   <span class="number">17880440</span> bytes,   <span class="number">17880440</span> total</span><br><span class="line">: <span class="number">139776</span>K-&gt;<span class="number">17471</span>K(<span class="number">157248</span>K), <span class="number">0.2069423</span> secs] <span class="number">139776</span>K-&gt;<span class="number">137270</span>K(<span class="number">506816</span>K), <span class="number">0.2070873</span> secs] [Times: user=<span class="number">0.37</span> sys=<span class="number">0.03</span>, real=<span class="number">0.21</span> secs] </span><br><span class="line"><span class="number">60.771</span>: [GC <span class="number">60.771</span>: [ParNew</span><br><span class="line">Desired survivor size <span class="number">8945664</span> bytes, <span class="keyword">new</span> threshold <span class="number">1</span> (max <span class="number">15</span>)</span><br><span class="line">- age   <span class="number">1</span>:   <span class="number">17890544</span> bytes,   <span class="number">17890544</span> total</span><br><span class="line">: <span class="number">157247</span>K-&gt;<span class="number">17472</span>K(<span class="number">157248</span>K), <span class="number">0.2407578</span> secs] <span class="number">277046</span>K-&gt;<span class="number">274774</span>K(<span class="number">506816</span>K), <span class="number">0.2408691</span> secs] [Times: user=<span class="number">0.36</span> sys=<span class="number">0.11</span>, real=<span class="number">0.24</span> secs] </span><br><span class="line"><span class="number">61.178</span>: [GC <span class="number">61.178</span>: [ParNew: <span class="number">157248</span>K-&gt;<span class="number">157248</span>K(<span class="number">157248</span>K), <span class="number">0.0000106</span> secs]<span class="number">61.178</span>: [Tenured: <span class="number">257302</span>K-&gt;<span class="number">349567</span>K(<span class="number">349568</span>K), <span class="number">0.6391748</span> secs] <span class="number">414550</span>K-&gt;<span class="number">414275</span>K(<span class="number">506816</span>K), [Perm : <span class="number">2099</span>K-&gt;<span class="number">2099</span>K(<span class="number">12288</span>K)], <span class="number">0.6394751</span> secs] [Times: user=<span class="number">0.55</span> sys=<span class="number">0.08</span>, real=<span class="number">0.64</span> secs] </span><br><span class="line"><span class="number">62.010</span>: [Full GC <span class="number">62.010</span>: [Tenured: <span class="number">349567</span>K-&gt;<span class="number">47934</span>K(<span class="number">349568</span>K), <span class="number">0.1982086</span> secs] <span class="number">506815</span>K-&gt;<span class="number">47934</span>K(<span class="number">506816</span>K), [Perm : <span class="number">2099</span>K-&gt;<span class="number">2099</span>K(<span class="number">12288</span>K)], <span class="number">0.1983080</span> secs] [Times: user=<span class="number">0.19</span> sys=<span class="number">0.00</span>, real=<span class="number">0.20</span> secs] </span><br><span class="line">Heap</span><br><span class="line"> par <span class="keyword">new</span> generation   total <span class="number">157248</span>K, used <span class="number">74536</span>K [<span class="number">0x04680000</span>, <span class="number">0x0f120000</span>, <span class="number">0x0f120000</span>)</span><br><span class="line">  eden space <span class="number">139776</span>K,  <span class="number">53</span>% used [<span class="number">0x04680000</span>, <span class="number">0x08f4a230</span>, <span class="number">0x0cf00000</span>)</span><br><span class="line">  from space <span class="number">17472</span>K,   <span class="number">0</span>% used [<span class="number">0x0cf00000</span>, <span class="number">0x0cf00000</span>, <span class="number">0x0e010000</span>)</span><br><span class="line">  to   space <span class="number">17472</span>K,   <span class="number">0</span>% used [<span class="number">0x0e010000</span>, <span class="number">0x0e010000</span>, <span class="number">0x0f120000</span>)</span><br><span class="line"> tenured generation   total <span class="number">349568</span>K, used <span class="number">47934</span>K [<span class="number">0x0f120000</span>, <span class="number">0x24680000</span>, <span class="number">0x24680000</span>)</span><br><span class="line">   the space <span class="number">349568</span>K,  <span class="number">13</span>% used [<span class="number">0x0f120000</span>, <span class="number">0x11fefa20</span>, <span class="number">0x11fefc00</span>, <span class="number">0x24680000</span>)</span><br><span class="line"> compacting perm gen  total <span class="number">12288</span>K, used <span class="number">2104</span>K [<span class="number">0x24680000</span>, <span class="number">0x25280000</span>, <span class="number">0x28680000</span>)</span><br><span class="line">   the space <span class="number">12288</span>K,  <span class="number">17</span>% used [<span class="number">0x24680000</span>, <span class="number">0x2488e2f8</span>, <span class="number">0x2488e400</span>, <span class="number">0x25280000</span>)</span><br><span class="line">No shared spaces configured.</span><br></pre></td></tr></table></figure>
<p><strong>GC日志分析：</strong><br><img src="/img/JVM_GC组合/parnew-heap.PNG" alt="Alt text"></p>
<p><img src="/img/JVM_GC组合/parnew-gc.PNG" alt="Alt text"></p>
<hr>
<h2 id="-XX:+UseConeMarkSweepGC">-XX:+UseConeMarkSweepGC</h2><blockquote>
<p>yong:并行GC<br>old:并发GC<br>VM arguments：-Xmx512M -Xms512M -XX:+UseConcMarkSweepGC-Xloggc:C:/gc_product.log -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution</p>
</blockquote>
<p><strong>运行结果：</strong><br>cost time:2039</p>
<p><strong>GC日志：</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">60.170</span>: [GC <span class="number">60.197</span>: [ParNew</span><br><span class="line">Desired survivor size <span class="number">1671168</span> bytes, <span class="keyword">new</span> threshold <span class="number">1</span> (max <span class="number">4</span>)</span><br><span class="line">- age   <span class="number">1</span>:    <span class="number">3339744</span> bytes,    <span class="number">3339744</span> total</span><br><span class="line">: <span class="number">26240</span>K-&gt;<span class="number">3264</span>K(<span class="number">29504</span>K), <span class="number">0.0394432</span> secs] <span class="number">26240</span>K-&gt;<span class="number">25941</span>K(<span class="number">521024</span>K), <span class="number">0.0668760</span> secs] [Times: user=<span class="number">0.08</span> sys=<span class="number">0.00</span>, real=<span class="number">0.07</span> secs] </span><br><span class="line"><span class="number">60.265</span>: [GC <span class="number">60.266</span>: [ParNew</span><br><span class="line">Desired survivor size <span class="number">1671168</span> bytes, <span class="keyword">new</span> threshold <span class="number">1</span> (max <span class="number">4</span>)</span><br><span class="line">- age   <span class="number">1</span>:    <span class="number">3341880</span> bytes,    <span class="number">3341880</span> total</span><br><span class="line">: <span class="number">29504</span>K-&gt;<span class="number">3264</span>K(<span class="number">29504</span>K), <span class="number">0.0446892</span> secs] <span class="number">52181</span>K-&gt;<span class="number">51634</span>K(<span class="number">521024</span>K), <span class="number">0.0448031</span> secs] [Times: user=<span class="number">0.08</span> sys=<span class="number">0.00</span>, real=<span class="number">0.05</span> secs] </span><br><span class="line"><span class="number">60.341</span>: [GC <span class="number">60.341</span>: [ParNew</span><br><span class="line">Desired survivor size <span class="number">1671168</span> bytes, <span class="keyword">new</span> threshold <span class="number">1</span> (max <span class="number">4</span>)</span><br><span class="line">- age   <span class="number">1</span>:    <span class="number">3341296</span> bytes,    <span class="number">3341296</span> total</span><br><span class="line">: <span class="number">29504</span>K-&gt;<span class="number">3264</span>K(<span class="number">29504</span>K), <span class="number">0.0445981</span> secs] <span class="number">77874</span>K-&gt;<span class="number">77169</span>K(<span class="number">521024</span>K), <span class="number">0.0447130</span> secs] [Times: user=<span class="number">0.06</span> sys=<span class="number">0.02</span>, real=<span class="number">0.05</span> secs] </span><br><span class="line"><span class="number">60.415</span>: [GC <span class="number">60.415</span>: [ParNew</span><br><span class="line">Desired survivor size <span class="number">1671168</span> bytes, <span class="keyword">new</span> threshold <span class="number">1</span> (max <span class="number">4</span>)</span><br><span class="line">- age   <span class="number">1</span>:    <span class="number">3341056</span> bytes,    <span class="number">3341056</span> total</span><br><span class="line">: <span class="number">29504</span>K-&gt;<span class="number">3264</span>K(<span class="number">29504</span>K), <span class="number">0.0451765</span> secs] <span class="number">103409</span>K-&gt;<span class="number">103252</span>K(<span class="number">521024</span>K), <span class="number">0.0452811</span> secs] [Times: user=<span class="number">0.08</span> sys=<span class="number">0.01</span>, real=<span class="number">0.05</span> secs] </span><br><span class="line"><span class="number">60.499</span>: [GC <span class="number">60.499</span>: [ParNew</span><br><span class="line">Desired survivor size <span class="number">1671168</span> bytes, <span class="keyword">new</span> threshold <span class="number">1</span> (max <span class="number">4</span>)</span><br><span class="line">- age   <span class="number">1</span>:    <span class="number">3341104</span> bytes,    <span class="number">3341104</span> total</span><br><span class="line">: <span class="number">29504</span>K-&gt;<span class="number">3264</span>K(<span class="number">29504</span>K), <span class="number">0.0508932</span> secs] <span class="number">129492</span>K-&gt;<span class="number">129371</span>K(<span class="number">521024</span>K), <span class="number">0.0510638</span> secs] [Times: user=<span class="number">0.08</span> sys=<span class="number">0.02</span>, real=<span class="number">0.05</span> secs] </span><br><span class="line"><span class="number">60.585</span>: [GC <span class="number">60.585</span>: [ParNew</span><br><span class="line">Desired survivor size <span class="number">1671168</span> bytes, <span class="keyword">new</span> threshold <span class="number">1</span> (max <span class="number">4</span>)</span><br><span class="line">- age   <span class="number">1</span>:    <span class="number">3342192</span> bytes,    <span class="number">3342192</span> total</span><br><span class="line">: <span class="number">29504</span>K-&gt;<span class="number">3264</span>K(<span class="number">29504</span>K), <span class="number">0.0498377</span> secs] <span class="number">155611</span>K-&gt;<span class="number">155532</span>K(<span class="number">521024</span>K), <span class="number">0.0499417</span> secs] [Times: user=<span class="number">0.11</span> sys=<span class="number">0.00</span>, real=<span class="number">0.05</span> secs] </span><br><span class="line"><span class="number">60.671</span>: [GC <span class="number">60.671</span>: [ParNew</span><br><span class="line">Desired survivor size <span class="number">1671168</span> bytes, <span class="keyword">new</span> threshold <span class="number">1</span> (max <span class="number">4</span>)</span><br><span class="line">- age   <span class="number">1</span>:    <span class="number">3341912</span> bytes,    <span class="number">3341912</span> total</span><br><span class="line">: <span class="number">29504</span>K-&gt;<span class="number">3264</span>K(<span class="number">29504</span>K), <span class="number">0.0577586</span> secs] <span class="number">181772</span>K-&gt;<span class="number">181698</span>K(<span class="number">521024</span>K), <span class="number">0.0578414</span> secs] [Times: user=<span class="number">0.09</span> sys=<span class="number">0.00</span>, real=<span class="number">0.06</span> secs] </span><br><span class="line"><span class="number">60.765</span>: [GC <span class="number">60.765</span>: [ParNew</span><br><span class="line">Desired survivor size <span class="number">1671168</span> bytes, <span class="keyword">new</span> threshold <span class="number">1</span> (max <span class="number">4</span>)</span><br><span class="line">- age   <span class="number">1</span>:    <span class="number">3340400</span> bytes,    <span class="number">3340400</span> total</span><br><span class="line">: <span class="number">29504</span>K-&gt;<span class="number">3262</span>K(<span class="number">29504</span>K), <span class="number">0.0496591</span> secs] <span class="number">207938</span>K-&gt;<span class="number">207908</span>K(<span class="number">521024</span>K), <span class="number">0.0497575</span> secs] [Times: user=<span class="number">0.09</span> sys=<span class="number">0.00</span>, real=<span class="number">0.05</span> secs] </span><br><span class="line"><span class="number">60.864</span>: [GC <span class="number">60.864</span>: [ParNew</span><br><span class="line">Desired survivor size <span class="number">1671168</span> bytes, <span class="keyword">new</span> threshold <span class="number">1</span> (max <span class="number">4</span>)</span><br><span class="line">- age   <span class="number">1</span>:    <span class="number">3340104</span> bytes,    <span class="number">3340104</span> total</span><br><span class="line">: <span class="number">29502</span>K-&gt;<span class="number">3262</span>K(<span class="number">29504</span>K), <span class="number">0.0542709</span> secs] <span class="number">234148</span>K-&gt;<span class="number">234095</span>K(<span class="number">521024</span>K), <span class="number">0.0543777</span> secs] [Times: user=<span class="number">0.09</span> sys=<span class="number">0.02</span>, real=<span class="number">0.06</span> secs] </span><br><span class="line"><span class="number">60.949</span>: [GC <span class="number">60.949</span>: [ParNew</span><br><span class="line">Desired survivor size <span class="number">1671168</span> bytes, <span class="keyword">new</span> threshold <span class="number">1</span> (max <span class="number">4</span>)</span><br><span class="line">- age   <span class="number">1</span>:    <span class="number">3342024</span> bytes,    <span class="number">3342024</span> total</span><br><span class="line">: <span class="number">29502</span>K-&gt;<span class="number">3264</span>K(<span class="number">29504</span>K), <span class="number">0.0494512</span> secs] <span class="number">260335</span>K-&gt;<span class="number">260265</span>K(<span class="number">521024</span>K), <span class="number">0.0495500</span> secs] [Times: user=<span class="number">0.08</span> sys=<span class="number">0.00</span>, real=<span class="number">0.05</span> secs] </span><br><span class="line"><span class="number">60.999</span>: [GC [<span class="number">1</span> CMS-initial-mark: <span class="number">257001</span>K(<span class="number">491520</span>K)] <span class="number">260796</span>K(<span class="number">521024</span>K), <span class="number">0.0020226</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line"><span class="number">61.001</span>: [CMS-concurrent-mark-start]</span><br><span class="line"><span class="number">61.036</span>: [GC <span class="number">61.036</span>: [ParNew</span><br><span class="line">Desired survivor size <span class="number">1671168</span> bytes, <span class="keyword">new</span> threshold <span class="number">1</span> (max <span class="number">4</span>)</span><br><span class="line">- age   <span class="number">1</span>:    <span class="number">3341424</span> bytes,    <span class="number">3341424</span> total</span><br><span class="line">: <span class="number">29504</span>K-&gt;<span class="number">3263</span>K(<span class="number">29504</span>K), <span class="number">0.0523987</span> secs] <span class="number">286505</span>K-&gt;<span class="number">286469</span>K(<span class="number">521024</span>K), <span class="number">0.0525158</span> secs] [Times: user=<span class="number">0.09</span> sys=<span class="number">0.01</span>, real=<span class="number">0.05</span> secs] </span><br><span class="line"><span class="number">61.129</span>: [GC <span class="number">61.129</span>: [ParNew</span><br><span class="line">Desired survivor size <span class="number">1671168</span> bytes, <span class="keyword">new</span> threshold <span class="number">1</span> (max <span class="number">4</span>)</span><br><span class="line">- age   <span class="number">1</span>:    <span class="number">3340472</span> bytes,    <span class="number">3340472</span> total</span><br><span class="line">: <span class="number">29503</span>K-&gt;<span class="number">3263</span>K(<span class="number">29504</span>K), <span class="number">0.0545435</span> secs] <span class="number">312709</span>K-&gt;<span class="number">312686</span>K(<span class="number">521024</span>K), <span class="number">0.0546507</span> secs] [Times: user=<span class="number">0.08</span> sys=<span class="number">0.00</span>, real=<span class="number">0.05</span> secs] </span><br><span class="line"><span class="number">61.217</span>: [GC <span class="number">61.217</span>: [ParNew</span><br><span class="line">Desired survivor size <span class="number">1671168</span> bytes, <span class="keyword">new</span> threshold <span class="number">1</span> (max <span class="number">4</span>)</span><br><span class="line">- age   <span class="number">1</span>:    <span class="number">3340400</span> bytes,    <span class="number">3340400</span> total</span><br><span class="line">: <span class="number">29503</span>K-&gt;<span class="number">3262</span>K(<span class="number">29504</span>K), <span class="number">0.0538670</span> secs] <span class="number">338926</span>K-&gt;<span class="number">338901</span>K(<span class="number">521024</span>K), <span class="number">0.0539802</span> secs] [Times: user=<span class="number">0.08</span> sys=<span class="number">0.02</span>, real=<span class="number">0.05</span> secs] </span><br><span class="line"><span class="number">61.304</span>: [GC <span class="number">61.304</span>: [ParNew</span><br><span class="line">Desired survivor size <span class="number">1671168</span> bytes, <span class="keyword">new</span> threshold <span class="number">1</span> (max <span class="number">4</span>)</span><br><span class="line">- age   <span class="number">1</span>:    <span class="number">3340448</span> bytes,    <span class="number">3340448</span> total</span><br><span class="line">: <span class="number">29502</span>K-&gt;<span class="number">3262</span>K(<span class="number">29504</span>K), <span class="number">0.0626886</span> secs] <span class="number">365141</span>K-&gt;<span class="number">365119</span>K(<span class="number">521024</span>K), <span class="number">0.0628105</span> secs] [Times: user=<span class="number">0.09</span> sys=<span class="number">0.01</span>, real=<span class="number">0.06</span> secs] </span><br><span class="line"><span class="number">61.399</span>: [GC <span class="number">61.399</span>: [ParNew</span><br><span class="line">Desired survivor size <span class="number">1671168</span> bytes, <span class="keyword">new</span> threshold <span class="number">1</span> (max <span class="number">4</span>)</span><br><span class="line">- age   <span class="number">1</span>:    <span class="number">3340376</span> bytes,    <span class="number">3340376</span> total</span><br><span class="line">: <span class="number">29502</span>K-&gt;<span class="number">3262</span>K(<span class="number">29504</span>K), <span class="number">0.0529716</span> secs] <span class="number">391359</span>K-&gt;<span class="number">391340</span>K(<span class="number">521024</span>K), <span class="number">0.0530862</span> secs] [Times: user=<span class="number">0.05</span> sys=<span class="number">0.02</span>, real=<span class="number">0.05</span> secs] </span><br><span class="line"><span class="number">61.496</span>: [GC <span class="number">61.496</span>: [ParNew</span><br><span class="line">Desired survivor size <span class="number">1671168</span> bytes, <span class="keyword">new</span> threshold <span class="number">1</span> (max <span class="number">4</span>)</span><br><span class="line">- age   <span class="number">1</span>:    <span class="number">3339856</span> bytes,    <span class="number">3339856</span> total</span><br><span class="line">: <span class="number">29502</span>K-&gt;<span class="number">3262</span>K(<span class="number">29504</span>K), <span class="number">0.0532713</span> secs] <span class="number">417580</span>K-&gt;<span class="number">417553</span>K(<span class="number">521024</span>K), <span class="number">0.0533851</span> secs] [Times: user=<span class="number">0.05</span> sys=<span class="number">0.05</span>, real=<span class="number">0.05</span> secs] </span><br><span class="line"><span class="number">61.584</span>: [GC <span class="number">61.584</span>: [ParNew</span><br><span class="line">Desired survivor size <span class="number">1671168</span> bytes, <span class="keyword">new</span> threshold <span class="number">1</span> (max <span class="number">4</span>)</span><br><span class="line">- age   <span class="number">1</span>:    <span class="number">3341616</span> bytes,    <span class="number">3341616</span> total</span><br><span class="line">: <span class="number">29502</span>K-&gt;<span class="number">3264</span>K(<span class="number">29504</span>K), <span class="number">0.0529081</span> secs] <span class="number">443793</span>K-&gt;<span class="number">443772</span>K(<span class="number">521024</span>K), <span class="number">0.0530188</span> secs] [Times: user=<span class="number">0.11</span> sys=<span class="number">0.00</span>, real=<span class="number">0.05</span> secs] </span><br><span class="line"><span class="number">61.703</span>: [GC <span class="number">61.703</span>: [ParNew</span><br><span class="line">Desired survivor size <span class="number">1671168</span> bytes, <span class="keyword">new</span> threshold <span class="number">1</span> (max <span class="number">4</span>)</span><br><span class="line">- age   <span class="number">1</span>:    <span class="number">3341080</span> bytes,    <span class="number">3341080</span> total</span><br><span class="line">: <span class="number">29504</span>K-&gt;<span class="number">3262</span>K(<span class="number">29504</span>K), <span class="number">0.0667567</span> secs] <span class="number">470012</span>K-&gt;<span class="number">469993</span>K(<span class="number">521024</span>K), <span class="number">0.0668709</span> secs] [Times: user=<span class="number">0.12</span> sys=<span class="number">0.00</span>, real=<span class="number">0.07</span> secs] </span><br><span class="line"><span class="number">61.801</span>: [GC <span class="number">61.801</span>: [ParNew: <span class="number">29502</span>K-&gt;<span class="number">29502</span>K(<span class="number">29504</span>K), <span class="number">0.0000183</span> secs]<span class="number">61.801</span>: [CMS61<span class="number">.825</span>: [CMS-concurrent-mark: <span class="number">0.371</span>/<span class="number">0.824</span> secs] [Times: user=<span class="number">1.37</span> sys=<span class="number">0.11</span>, real=<span class="number">0.82</span> secs] </span><br><span class="line"> (concurrent mode failure): <span class="number">466731</span>K-&gt;<span class="number">34165</span>K(<span class="number">491520</span>K), <span class="number">0.2074614</span> secs] <span class="number">496233</span>K-&gt;<span class="number">34165</span>K(<span class="number">521024</span>K), [CMS Perm : <span class="number">2099</span>K-&gt;<span class="number">2098</span>K(<span class="number">12288</span>K)], <span class="number">0.2076597</span> secs] [Times: user=<span class="number">0.22</span> sys=<span class="number">0.00</span>, real=<span class="number">0.21</span> secs] </span><br><span class="line"><span class="number">62.036</span>: [GC <span class="number">62.036</span>: [ParNew</span><br><span class="line">Desired survivor size <span class="number">1671168</span> bytes, <span class="keyword">new</span> threshold <span class="number">1</span> (max <span class="number">4</span>)</span><br><span class="line">- age   <span class="number">1</span>:    <span class="number">3340808</span> bytes,    <span class="number">3340808</span> total</span><br><span class="line">: <span class="number">26240</span>K-&gt;<span class="number">3262</span>K(<span class="number">29504</span>K), <span class="number">0.0378126</span> secs] <span class="number">60405</span>K-&gt;<span class="number">60677</span>K(<span class="number">521024</span>K), <span class="number">0.0379156</span> secs] [Times: user=<span class="number">0.08</span> sys=<span class="number">0.00</span>, real=<span class="number">0.04</span> secs] </span><br><span class="line"><span class="number">62.101</span>: [GC <span class="number">62.101</span>: [ParNew</span><br><span class="line">Desired survivor size <span class="number">1671168</span> bytes, <span class="keyword">new</span> threshold <span class="number">1</span> (max <span class="number">4</span>)</span><br><span class="line">- age   <span class="number">1</span>:    <span class="number">3340448</span> bytes,    <span class="number">3340448</span> total</span><br><span class="line">: <span class="number">29502</span>K-&gt;<span class="number">3262</span>K(<span class="number">29504</span>K), <span class="number">0.0443056</span> secs] <span class="number">86917</span>K-&gt;<span class="number">86944</span>K(<span class="number">521024</span>K), <span class="number">0.0444194</span> secs] [Times: user=<span class="number">0.06</span> sys=<span class="number">0.00</span>, real=<span class="number">0.04</span> secs] </span><br><span class="line">Heap</span><br><span class="line"> par <span class="keyword">new</span> generation   total <span class="number">29504</span>K, used <span class="number">24613</span>K [<span class="number">0x04650000</span>, <span class="number">0x06650000</span>, <span class="number">0x06650000</span>)</span><br><span class="line">  eden space <span class="number">26240</span>K,  <span class="number">81</span>% used [<span class="number">0x04650000</span>, <span class="number">0x05b29da8</span>, <span class="number">0x05ff0000</span>)</span><br><span class="line">  from space <span class="number">3264</span>K,  <span class="number">99</span>% used [<span class="number">0x05ff0000</span>, <span class="number">0x0631fa50</span>, <span class="number">0x06320000</span>)</span><br><span class="line">  to   space <span class="number">3264</span>K,   <span class="number">0</span>% used [<span class="number">0x06320000</span>, <span class="number">0x06320000</span>, <span class="number">0x06650000</span>)</span><br><span class="line"> concurrent mark-sweep generation total <span class="number">491520</span>K, used <span class="number">83682</span>K [<span class="number">0x06650000</span>, <span class="number">0x24650000</span>, <span class="number">0x24650000</span>)</span><br><span class="line"> concurrent-mark-sweep perm gen total <span class="number">12288</span>K, used <span class="number">2103</span>K [<span class="number">0x24650000</span>, <span class="number">0x25250000</span>, <span class="number">0x28650000</span>)</span><br></pre></td></tr></table></figure>
<p><strong>GC日志分析：</strong></p>
<p><img src="/img/JVM_GC组合/cms-heap.PNG" alt="Alt text"><br><img src="/img/JVM_GC组合/cms-gc.PNG" alt="Alt text"></p>
<p>关于cms的日志分析，有一篇很好的文章，写的很详细。<br><a href="http://www.cnblogs.com/zhangxiaoguang/p/5792468.html" target="_blank" rel="external">http://www.cnblogs.com/zhangxiaoguang/p/5792468.html</a></p>
<hr>
<p>从上面的测试结果来看，采用不同的gc收集器，默认情况对yong区、old区内存大小的分配不一样，<br>gc日志的格式有一些差异，最重要的一点是对于代码段的整体执行时间有一定影响。</p>
<hr>
<h1 id="测试二：搜索应用调用接口">测试二：搜索应用调用接口</h1><p>上面的测试是对单个方法、短时间的测试，<br>下面对搜索系统的两个搜索接口做压力测试，持续20分钟。</p>
<h2 id="搜索系统机器及jdk情况">搜索系统机器及jdk情况</h2><p>CPU: 8核 Intel(R) Xeon(R) CPU           E5410  @ 2.33GHz<br>MEM: 10G</p>
<p><strong>JDK版本：</strong></p>
<blockquote>
<p>java version “1.7.0_40”<br>Java(TM) SE Runtime Environment (build 1.7.0_40-b43)<br>Java HotSpot(TM) 64-Bit Server VM (build 24.0-b56, mixed mode)</p>
</blockquote>
<hr>
<h2 id="接口与测试脚本">接口与测试脚本</h2><p><strong>两个接口：</strong></p>
<blockquote>
<p>/suggest/pressSuggestTest.do 搜索建议词<br>/suggest/pressSpellCheckTest.do 搜索词纠错</p>
</blockquote>
<p><strong>loadrunner脚本：</strong><br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">lr_start_transaction<span class="list">(<span class="string">"pressSuggestTest"</span>)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">	web_reg_find<span class="list">(<span class="string">"Search=All"</span>,</span><br><span class="line">		<span class="string">"Text=200 OK"</span>,</span><br><span class="line">		LAST)</span><span class="comment">;</span></span><br><span class="line">	web_url<span class="list">(<span class="string">"pressSuggestTest.do"</span>,</span><br><span class="line">		<span class="string">"URL=http://192.168.52.170:82/suggest/pressSuggestTest.do"</span>,</span><br><span class="line">		<span class="string">"Resource=0"</span>,</span><br><span class="line">		<span class="string">"Referer="</span>,</span><br><span class="line">		<span class="string">"Snapshot=t5.inf"</span>,</span><br><span class="line">		LAST)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">	lr_end_transaction<span class="list">(<span class="string">"pressSuggestTest"</span>, LR_AUTO)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	lr_start_transaction<span class="list">(<span class="string">"pressSpellCheckTest"</span>)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">	web_reg_find<span class="list">(<span class="string">"Search=All"</span>,</span><br><span class="line">		<span class="string">"Text=200 OK"</span>,</span><br><span class="line">		LAST)</span><span class="comment">;</span></span><br><span class="line">	web_url<span class="list">(<span class="string">"pressSuggestTest.do"</span>,</span><br><span class="line">		<span class="string">"URL=http://192.168.52.170:82/suggest/pressSpellCheckTest.do"</span>,</span><br><span class="line">		<span class="string">"Resource=0"</span>,</span><br><span class="line">		<span class="string">"Referer="</span>,</span><br><span class="line">		<span class="string">"Snapshot=t5.inf"</span>,</span><br><span class="line">		LAST)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">	lr_end_transaction<span class="list">(<span class="string">"pressSpellCheckTest"</span>, LR_AUTO)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<hr>
<p><strong>以下测试并发用户均为20个，持续时间20分钟</strong></p>
<h2 id="-XX:+UseSerialGC-1">-XX:+UseSerialGC</h2><blockquote>
<p>yong:串行GC<br>old:串行GC<br>VM arguments：-Xms1800m -Xmx1800m -Xmn800m -XX:PermSize=250m -XX:MaxPermSize=250m -Xss2m  -XX:+UseSerialGC  -J-Xloggc:/var/log/gc_product.log -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution<br><img src="/img/JVM_GC组合/search-serial-heap.PNG" alt="Alt text"></p>
</blockquote>
<p><strong>测试结果：</strong></p>
<p><strong>QPS:</strong>797<br><img src="/img/JVM_GC组合/serial-qps.PNG" alt="Alt text"><br>[QPS波动，比较平稳]</p>
<p><strong>Throughput  : </strong> 90.765%<br><strong>Latency:  </strong>Avg GC Time     26 ms ，Max GC Time     6 sec 650 ms<br><strong>GC total time：</strong>Minor GC total time    1 min 13 sec 58 ms，Full GC total time    1 min 930 ms</p>
<p><strong>GC日志分析：</strong><br><img src="/img/JVM_GC组合/search-serial-gc.PNG" alt="Alt text"></p>
<hr>
<h2 id="-XX:+UseParallelGC-1">-XX:+UseParallelGC</h2><blockquote>
<p>yong:串行GC<br>old:串行GC<br>VM arguments：-Xms1800m -Xmx1800m -Xmn800m -XX:PermSize=250m -XX:MaxPermSize=250m -Xss2m  -XX:+UseParallelGC -J-Xloggc:/var/log/gc_product.log -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution</p>
</blockquote>
<p><img src="/img/JVM_GC组合/search-parallel-heap.PNG" alt="Alt text"></p>
<p><strong>测试结果：</strong><br><strong>QPS:</strong>837<br><img src="/img/JVM_GC组合/parallel-qps.PNG" alt="Alt text"><br>[QPS波动，比较平稳]</p>
<p><strong>Throughput  : </strong> 95.59%<br><strong>Latency:  </strong>Avg GC Time     16 ms，Max GC Time     5 sec 560 ms<br><strong>GC total time：</strong>Minor GC total time    52 sec 907 ms，Full GC total time    18 sec 99 ms</p>
<p><strong>GC日志分析：</strong><br><img src="/img/JVM_GC组合/search-parallel-gc.PNG" alt="Alt text"></p>
<hr>
<h2 id="-XX:+UseParallelOldGC-1">-XX:+UseParallelOldGC</h2><blockquote>
<p>yong:串行GC<br>old:串行GC<br>VM arguments：-Xms1800m -Xmx1800m -Xmn800m -XX:PermSize=250m -XX:MaxPermSize=250m -Xss2m  -XX:+UseParallelOldGC  -J-Xloggc:/var/log/gc_product.log -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution<br><img src="/img/JVM_GC组合/search-paraold-heap.PNG" alt="Alt text"></p>
</blockquote>
<p>这边需要着重讲一下ParallelGC与ParallelOldGC 在jmap -heap命令的显示，<br>仔细看yong和old区generation显示的信息：<br><img src="/img/JVM_GC组合/parallel_and_parallelold.PNG" alt="Alt text"></p>
<p>ParallelGC与ParallelOldGC 都这样显示的，原本以为ParallelGC的old也是并行收集，<br>但是看到下面的帖子才明白，ParallelGC的old区确实是串行收集，挺混乱的~<br><a href="http://hllvm.group.iteye.com/group/topic/27629" target="_blank" rel="external">http://hllvm.group.iteye.com/group/topic/27629</a></p>
<p><strong>测试结果：</strong></p>
<p><strong>QPS:</strong>849<br><img src="/img/JVM_GC组合/search-paraolg-qps.PNG" alt="Alt text"></p>
<p>[QPS波动，比较平稳]</p>
<p><strong>Throughput  : </strong> 95.372%<br><strong>Latency:  </strong>Avg GC Time     16 ms，Max GC Time     4 sec 830 ms<br><strong>GC total time：</strong>Minor GC total time    53 sec 857 ms，Full GC total time    16 sec 255 ms</p>
<p><strong>GC日志分析：</strong><br><img src="/img/JVM_GC组合/search-parallelold-gc.PNG" alt="Alt text"></p>
<hr>
<h2 id="-XX:+UseParNewGC-1">-XX:+UseParNewGC</h2><blockquote>
<p>yong:串行GC<br>old:串行GC<br>VM arguments：-Xms1800m -Xmx1800m -Xmn800m -XX:PermSize=250m -XX:MaxPermSize=250m -Xss2m  -XX:+UseParNewGC -J-Xloggc:/var/log/gc_product.log -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution<br><img src="/img/JVM_GC组合/search-parnew-heap.PNG" alt="Alt text"></p>
</blockquote>
<p><strong>测试结果：</strong></p>
<p><strong>QPS:</strong>781<br><img src="/img/JVM_GC组合/parnew-qps.PNG" alt="Alt text"><br>[QPS波动]</p>
<p><strong>Throughput  : </strong> 89.839%<br><strong>Latency:  </strong>Avg GC Time     27 ms，Max GC Time     6 sec 540 ms<br><strong>GC total time：</strong>Minor GC total time    59 sec 257 ms，Full GC total time    1 min 24 sec 420 ms</p>
<p><strong>GC日志分析：</strong><br><img src="/img/JVM_GC组合/search-parnew-gc.PNG" alt="Alt text"></p>
<hr>
<h2 id="-XX:+UseConeMarkSweepGC-1">-XX:+UseConeMarkSweepGC</h2><blockquote>
<p>yong:串行GC<br>old:串行GC<br>VM arguments：-Xms1800m -Xmx1800m -Xmn800m -XX:PermSize=250m -XX:MaxPermSize=250m -Xss2m  -XX:+UseConcMarkSweepGC  -J-Xloggc:/var/log/gc_product.log -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution</p>
</blockquote>
<p><img src="/img/JVM_GC组合/search-cms-heap.PNG" alt="Alt text"></p>
<p><strong>测试结果：</strong></p>
<p><strong>QPS:</strong>746<br><img src="/img/JVM_GC组合/cms-qps.PNG" alt="Alt text"><br>[QPS波动，很平稳]</p>
<p><strong>Throughput  : </strong>93.962%<br><strong>Latency:  </strong>Avg GC Time     20 ms，Max GC Time     7 sec 400 ms<br><strong>GC total time：</strong>Minor GC total time    49 sec 118 ms，Full GC total time    48 sec 700 ms</p>
<p><strong>GC日志分析：</strong><br><img src="/img/JVM_GC组合/search-cms-gc.PNG" alt="Alt text"></p>
<hr>
<p>把上面的测试结果汇总一下，重点关注Throughput  与 Latency：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">QPS</th>
<th style="text-align:right">Throughput</th>
<th style="text-align:right">Latency</th>
<th style="text-align:right">GC total time</th>
</tr>
</thead>
<tbody>
<tr>
<td>-XX:+UseSerialGC</td>
<td style="text-align:center">797</td>
<td style="text-align:right">90.765%</td>
<td style="text-align:right">Avg GC Time 26ms ，Max GC Time     6sec650ms</td>
<td style="text-align:right">Minor GC total time    1min13sec58ms，Full GC total time    1min930ms</td>
</tr>
<tr>
<td>-XX:+UseParallelGC</td>
<td style="text-align:center">837</td>
<td style="text-align:right">95.59%</td>
<td style="text-align:right">Avg GC Time     16ms，Max GC Time     5sec560ms</td>
<td style="text-align:right">Minor GC total time    52 sec907ms，Full GC total time    18sec99ms</td>
</tr>
<tr>
<td>-XX:+UseParallelOldGC</td>
<td style="text-align:center">849</td>
<td style="text-align:right">95.372%</td>
<td style="text-align:right">Avg GC Time     16 ms，Max GC Time     4sec830ms</td>
<td style="text-align:right">Minor GC total time    53 sec857ms，Full GC total time    16sec255ms</td>
</tr>
<tr>
<td>-XX:+UseParNewGC</td>
<td style="text-align:center">781</td>
<td style="text-align:right">89.839%</td>
<td style="text-align:right">Avg GC Time     27ms，Max GC Time     6sec540ms</td>
<td style="text-align:right">Minor GC total time    59 sec257ms，Full GC total time    1 min24sec420ms</td>
</tr>
<tr>
<td>-XX:+UseConeMarkSweepGC</td>
<td style="text-align:center">746</td>
<td style="text-align:right">93.962%</td>
<td style="text-align:right">Avg GC Time 20ms，Max GC Time 7sec400ms</td>
<td style="text-align:right">Minor GC total time    49 sec118ms，Full GC total time 48 sec700ms</td>
</tr>
</tbody>
</table>
<p>单从上面的测试结果来看，-XX:+UseParallelOldGC的效果最好。</p>
<p>这只是一个简单的例子，gc收集器选择的过程远不止这些。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>不同的垃圾收集器对系统有不同的性能表现，没有哪种垃圾收集器可以完美匹配所有系统。</p>
<p>生产环境中需要针对不同的应用系统，进行不断的测试，尽可能选择适当的垃圾回收器与gc参数。</p>
<p>所以，对于某个业务系统来说，没有最佳的GC组合，只有最合适的GC组合。</p>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[线程堆栈监控页面]]></title>
    <link href="http://tonylit.me/2016/12/12/%E7%BA%BF%E7%A8%8B%E5%A0%86%E6%A0%88%E7%9B%91%E6%8E%A7%E9%A1%B5%E9%9D%A2/"/>
    <id>http://tonylit.me/2016/12/12/线程堆栈监控页面/</id>
    <published>2016-12-12T03:37:27.000Z</published>
    <updated>2016-12-12T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>jdk1.5以后，java.lang.Thread类提供了getAllStackTraces() 方法，<br>来获取jvm中所有线程的stackTraceElement对象信息；<strong>其实就是jstack的功能</strong>。<br>我们可以写成一个页面，用浏览器来查看线程堆栈信息，有些时候会比较方便。</p>
<a id="more"></a>
<h1 id="查看StaceTraceElement的JSP页面">查看StaceTraceElement的JSP页面</h1><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">   </span>&lt;%<span class="perl"><span class="variable">@page</span> language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=GBK"</span></span>%&gt;<span class="xml"></span><br><span class="line"></span>&lt;%<span class="perl">@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span></span>%&gt;<span class="xml"></span><br><span class="line"></span>&lt;%<span class="perl">@ taglib prefix=<span class="string">"fmt"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span></span>%&gt;<span class="xml"></span><br><span class="line"></span>&lt;%<span class="perl">@ taglib prefix=<span class="string">"fn"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/functions"</span></span>%&gt;<span class="xml"></span><br><span class="line"></span>&lt;%<span class="perl">@ page isELIgnored=<span class="string">"false"</span></span>%&gt;<span class="xml"></span><br><span class="line"></span>&lt;%<span class="perl">@ page import=<span class="string">"java.util.Map"</span> </span>%&gt;<span class="xml"></span><br><span class="line"><span class="doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">title</span>&gt;</span> Server Thread Strace Info<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">pre</span>&gt;</span></span><br><span class="line"></span>&lt;%<span class="perl"></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Thread , StackTraceElement[]&gt; stackTrace : Thread.getAllStackTraces().entrySet())&#123;</span><br><span class="line">    Thread thread = (Thread)stackTrace.getKey();</span><br><span class="line">    StackTraceElement[] stack = (StackTraceElement[])stackTrace.getValue();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(thread.equals(Thread.currentThread()))&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    out.<span class="keyword">print</span>(<span class="string">"\n Thread:"</span>+thread.getName()+<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(StackTraceElement element:stack)&#123;</span><br><span class="line">        out.<span class="keyword">print</span>(<span class="string">"\t"</span>+element+<span class="string">"\n"</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span>%&gt;<span class="xml"></span><br><span class="line"><span class="tag">&lt;/<span class="title">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><img src="/img/StraceTraceElement.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>jdk1.5以后，java.lang.Thread类提供了getAllStackTraces() 方法，<br>来获取jvm中所有线程的stackTraceElement对象信息；<strong>其实就是jstack的功能</strong>。<br>我们可以写成一个页面，用浏览器来查看线程堆栈信息，有些时候会比较方便。</p>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JAVA程序怎样使用jvm堆栈内存]]></title>
    <link href="http://tonylit.me/2016/12/07/JAVA%E7%A8%8B%E5%BA%8F%E6%80%8E%E6%A0%B7%E4%BD%BF%E7%94%A8jvm%E5%A0%86%E6%A0%88%E5%86%85%E5%AD%98/"/>
    <id>http://tonylit.me/2016/12/07/JAVA程序怎样使用jvm堆栈内存/</id>
    <published>2016-12-07T03:37:27.000Z</published>
    <updated>2016-12-07T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>java是一门面向对象的编程语言，平时我们创建对象通常是通过new的方式。</p>
<p>java虚拟机在遇到new指令的时候，首先去检查new的类是否已经被加载、链接、初始化；<br>如果没有，则必须先执行相应的类加载过程。<br><strong>类加载过程见下图：</strong><br><img src="/img/jvm/class_run_jvm/类加载过程.PNG" alt="Alt text"></p>
<a id="more"></a>
<hr>
<h1 id="程序运行时jvm内存使用">程序运行时jvm内存使用</h1><p>类加载完成以后，程序运行的内存分配工作主要在堆与栈上面了。</p>
<blockquote>
<p>通俗来讲，栈上放局部变量，堆上放成员变量<br>基本类型的变量在栈中直接保存它所对应的值<br>引用类型的变量在栈中保存的是一个指向堆区对应对象存放地址的指针<br><a href="https://www.zhihu.com/question/31203609" target="_blank" rel="external">java是值传递还是引用传递？</a></p>
</blockquote>
<p>以下实例转载（<a href="http://blog.csdn.net/shimiso/article/details/8595564）" target="_blank" rel="external">http://blog.csdn.net/shimiso/article/details/8595564）</a></p>
<p><img src="/img/jvm/class_run_jvm/调用过程一.PNG" alt="Alt text"></p>
<p>1.JVM自动寻找main方法，执行第一句代码，创建一个Test类的实例，<br>在栈中分配一块内存，存放一个指向堆区对象的指针110925。</p>
<p>2.创建一个int型的变量date，由于是基本类型，直接在栈中存放date对应的值9。</p>
<p>3.创建两个BirthDate类的实例d1、d2，在栈中分别存放了对应的指针指向各自的对象。<br>他们在实例化时调用了有参数的构造方法，因此对象中有自定义初始值。</p>
<p><img src="/img/jvm/class_run_jvm/调用过程二.PNG" alt="Alt text"></p>
<p>调用test对象的change1方法，并且以date为参数。<br>JVM读到这段代码时，检测到i是局部变量，因此会把i放在栈中，并且把date的值赋给i。</p>
<p><img src="/img/jvm/class_run_jvm/调用过程三.PNG" alt="Alt text"></p>
<p>把1234赋给i。很简单的一步。</p>
<p><img src="/img/jvm/class_run_jvm/调用过程四.PNG" alt="Alt text"></p>
<p>change1方法执行完毕，立即释放局部变量i所占用的栈空间。</p>
<p><img src="/img/jvm/class_run_jvm/调用过程五.PNG" alt="Alt text"></p>
<p>调用test对象的change2方法，以实例d1为参数。<br>JVM检测到change2方法中的b参数为局部变量，立即加入到栈中，由于是引用类型的变量，<br>所以b中保存的是d1中的指针，此时b和d1指向同一个堆中的对象，在b和d1之间传递是指针。</p>
<p><img src="/img/jvm/class_run_jvm/调用过程六.PNG" alt="Alt text"></p>
<p>change2方法中又实例化了一个BirthDate对象，并且赋给b。<br>在内部执行过程是：在堆区new了一个对象，并且把该对象的指针保存在栈中的b对应空间，<br>此时实例b不再指向实例d1所指向的对象，但是实例d1所指向的对象并无变化，这样无法对d1造成任何影响。</p>
<p><img src="/img/jvm/class_run_jvm/调用过程七.PNG" alt="Alt text"></p>
<p>change2方法执行完毕，立即释放局部引用变量b所占的栈空间，<br><strong>注意只是释放了栈空间，堆空间要等待自动回收</strong>。</p>
<p><img src="/img/jvm/class_run_jvm/调用过程八.PNG" alt="Alt text"></p>
<p>调用test实例的change3方法，以实例d2为参数。<br>同理，JVM会在栈中为局部引用变量b分配空间，并且把d2中的指针存放在b中，此时d2和b指向同一个对象。<br>再调用实例b的setDay方法，其实就是调用d2指向的对象的setDay方法。</p>
<p><img src="/img/jvm/class_run_jvm/调用过程九.PNG" alt="Alt text"></p>
<p>调用实例b的setDay方法会影响d2，因为二者指向的是同一个对象。</p>
<p><img src="/img/jvm/class_run_jvm/调用过程十.PNG" alt="Alt text"></p>
<p>change3方法执行完毕，立即释放局部引用变量b。</p>
<hr>
<h1 id="String对象实例">String对象实例</h1><p>对于String对象的赋值，一直都很模糊，<br>比如下面的例子，</p>
<blockquote>
<p>str1=str2 ？<br>程序执行的时候，内存里到底有几个实例？<br>实例存在内存的哪里?</p>
</blockquote>
<p>String str1 = “Hello”;<br>String str2 = new String(“Hello”);</p>
<p>想深入了解，可以参见：<br><a href="https://www.zhihu.com/question/29884421" target="_blank" rel="external">https://www.zhihu.com/question/29884421</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>java是一门面向对象的编程语言，平时我们创建对象通常是通过new的方式。</p>
<p>java虚拟机在遇到new指令的时候，首先去检查new的类是否已经被加载、链接、初始化；<br>如果没有，则必须先执行相应的类加载过程。<br><strong>类加载过程见下图：</strong><br><img src="/img/jvm/class_run_jvm/类加载过程.PNG" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅谈JVM垃圾收集器]]></title>
    <link href="http://tonylit.me/2016/12/07/%E6%B5%85%E8%B0%88JVM%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
    <id>http://tonylit.me/2016/12/07/浅谈JVM垃圾收集器/</id>
    <published>2016-12-07T03:37:27.000Z</published>
    <updated>2016-12-07T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>Java虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，</p>
<p>因此不同的厂商、不同版本的虚拟机所提供的垃圾收集器都可能会有很大差别，</p>
<p>并且一般都会提供参数供用户根据自己的应用特点和要求组合出各个年代所使用的收集器。</p>
<a id="more"></a>
<hr>
<h1 id="垃圾收集算法">垃圾收集算法</h1><p>垃圾收集算法主要有3种：</p>
<blockquote>
<p>标记-清除算法，如：CMS<br>复制算法，年轻代的基本上都是用copying算法<br>标记-整理算法，如：parallel old使用的该算法</p>
</blockquote>
<p>至于分代收集算法，就是年轻代和年老代使用不同的算法进行组合。</p>
<h2 id="标记-清除算法（Mark-Sweep）">标记-清除算法（Mark-Sweep）</h2><p>这种垃圾收集算法思路非常简单，首先标记出所有需要回收的对象，然后回收所有需要回收的对象。<br><img src="/img/garbage_collection/mark-sweep-gc.PNG" alt="Alt text"></p>
<p>但是这种算法有两个缺点：</p>
<blockquote>
<p>效率问题：标记和清除两个过程的效率都不高<br>碎片问题：标记清除后会产生大量不连续的内存碎片，碎片大多会导致大对象得不到足够连续的内存空间，从而触发另一次垃圾回收。</p>
</blockquote>
<h2 id="复制算法（Copying）">复制算法（Copying）</h2><p>这种算法会将内存空间分配成两块相同的区域A和B。<br>当内存回收的时候，将A中的内存块拷贝到B中，然后一次性清空A。<br><img src="/img/garbage_collection/copy-gc.PNG" alt="Alt text"></p>
<p>这种算法的代价是将内存缩小为原来的一半。</p>
<p>现在的商业虚拟机都采用这种收集算法来回收年轻代。<br>有研究表明，新生代中的对象70%~95%都是“朝生夕死”，并不需要按照1：1的比例来划分内存空间。<br>比如Hotspot虚拟机的年轻代，分为eden区和survivor区（s1+s0），默认的比例大小是8:1，<br>也就是每次年轻代中可用的内存空间是整个年轻代容量的90%（80%+10%），只有10%的内存会被浪费。</p>
<h2 id="标记-整理算法（Mark-Compact）">标记-整理算法（Mark-Compact）</h2><p>“标记-整理”算法中，标记过程和“标记-清除”算法中的“标记”过程一样，<br>但后续的动作不是直接清理不用的对象，而是将所有存活的对象都移动到一端，然后直接清理掉端边界以外的内存。</p>
<p><img src="/img/garbage_collection/mark-compact-gc.PNG" alt="Alt text"></p>
<h2 id="分代收集算法（Generational_Collection）">分代收集算法（Generational Collection）</h2><p>就是年轻代和年老代使用不同的算法进行组合。<br>年轻代中对象的存活率低，采用复制算法；<br>年老代中对象的存活率高，采用“标记-清理”或者“标记-整理算法”；</p>
<hr>
<h1 id="垃圾收集器">垃圾收集器</h1><p>上面整理了几种垃圾收集算法只能算是内存回收的方法论，<br><strong>具体的垃圾收集器就是内存回收的具体实现</strong>。</p>
<p>对应Hotspot虚拟机，我们使用的垃圾收集器大概有7种：</p>
<blockquote>
<p>Serial Garbage Collector<br>ParNew Garbage Collector<br>Parallel Scavenge Garbage Collector<br>Serial Old Garbage Collector<br>Parallel Old Garbage Collector<br>CMS Garbage Collector<br>G1 Garbage Collector</p>
</blockquote>
<p>根据年轻代和年老代对象的存活情况，以及每种收集器特点，选择不同的收集器进行组合。</p>
<p><img src="/img/garbage_collection/gc-type.PNG" alt="Alt text"><br>如果两个收集器之间存在连线，说明它们可以搭配使用。</p>
<h2 id="垃圾收集器使用情况调查">垃圾收集器使用情况调查</h2><p>2013年的时候，Plumbr公司对垃圾收集器使用情况做了<a href="https://plumbr.eu/blog/garbage-collection/what-garbage-collector-are-you-using" target="_blank" rel="external">一次调查研究</a></p>
<p>CMS最受欢迎，我们公司大多数项目使用的也是CMS（B2B，低停顿）<br><img src="/img/garbage_collection/垃圾收集器使用比例.PNG" alt="Alt text"></p>
<hr>
<h2 id="概念理解：">概念理解：</h2><p>以下概念都是gc中经常遇到的，需要了解清楚。</p>
<h3 id="stop-the-world（STW）">stop-the-world（STW）</h3><p>STW意味着 JVM 因为要执行GC而停止了用户应用程序的执行。</p>
<p>STW任何一种GC算法中发生，GC优化很多时候就是指减少Stop-the-world发生的时间。</p>
<h3 id="并行和并发">并行和并发</h3><p>并行（Parallel）：左手写字、右手画画一起做，这叫并行。</p>
<p>并发（Concurrent）：左手写完字，然后右手再画画，这叫并发。</p>
<p>可以参考：<a href="https://www.zhihu.com/question/33515481" target="_blank" rel="external">并行与并发的区别</a></p>
<h3 id="Minor_GC和Major_GC">Minor GC和Major GC</h3><p>新生代GC（Minor GC）：指发生在新生代的垃圾收集动作。</p>
<p>老年代GC（Major GC / Full GC）：指发生在老年代的GC。</p>
<p>出现了Major GC，经常会伴随至少一次的Minor GC（但非绝对的）。</p>
<p>Major GC的速度一般会比Minor GC慢10倍以上。</p>
<h3 id="吞吐量">吞吐量</h3><p>吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量 = 运行用户代码时间 /（运行用户代码时间 + 垃圾收集时间）。</p>
<p>虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。</p>
<hr>
<h2 id="Serial收集器">Serial收集器</h2><p><strong>1. 特性：</strong><br>单线程收集器<br>复制算法<br>整个过程Stop The World</p>
<p><img src="/img/garbage_collection/serial-gc.PNG" alt="Alt text"></p>
<p><strong>2. jvm 配置参数:</strong><br>-XX：+UseSerialGC</p>
<p><strong>3. 应用场景：</strong><br>Serial收集器是虚拟机运行在Client模式下的默认新生代收集器</p>
<p><strong>4. 优势：</strong><br>简单而高效（与其他收集器的单线程比）<br>对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。</p>
<h2 id="ParNew收集器">ParNew收集器</h2><p><strong>1. 特性：</strong><br>ParNew收集器其实就是Serial收集器的多线程版本，也是复制算法收集器。</p>
<p><img src="/img/garbage_collection/parnew-gc.PNG" alt="Alt text"></p>
<p><strong>2. jvm 配置参数:</strong><br>-XX:+UseParNewGC<br>-XX:ParallelGCThreads 限制线程数量</p>
<p><strong>3. 应用场景：</strong><br>ParNew收集器是许多运行在Server模式下的虚拟机中首选的新生代收集器。</p>
<p>主要因为除了Serial收集器外目前只有它能与CMS收集器配合工作。</p>
<p>CMS收集器，这款收集器是HotSpot虚拟机中第一款真正意义上的<strong>并发收集器</strong>，它第一次实现了让垃圾收集线程与用户线程同时工作。</p>
<p>不幸的是，CMS作为老年代的收集器，却无法与JDK 1.4.0中已经存在的新生代收集器Parallel Scavenge配合工作。</p>
<p>所以在JDK 1.5中使用CMS来收集老年代的时候，新生代只能选择ParNew或者Serial收集器中的一个。</p>
<p><strong>4. Serial收集器 VS ParNew收集器：</strong><br>ParNew收集器在单CPU的环境中绝对不会有比Serial收集器更好的效果，甚至由于存在线程交互的开销。</p>
<p>该收集器在通过超线程技术实现的两个CPU的环境中都不能百分之百地保证可以超越Serial收集器。</p>
<p>然而，随着可以使用的CPU的数量的增加，它对于GC时系统资源的有效利用还是很有好处的。</p>
<h2 id="Parallel_Scavenge收集器">Parallel Scavenge收集器</h2><p><strong>1. 特性：</strong><br>Parallel Scavenge收集器是一个新生代收集器，<br>它也是使用复制算法的收集器，又是并行的多线程收集器。<br><img src="/img/garbage_collection/parnew-gc.PNG" alt="Alt text"></p>
<p>CMS等收集器的关注点在低停顿时间，而Parallel Scavenge收集器<strong>更关注吞吐量。</strong></p>
<p><strong>2. jvm 配置参数:</strong><br>-XX:+UseParallelGC<br>-XX:MaxGCPauseMillis 设置最大垃圾收集停顿时间<br>-XX:GCTimeRatio 设置吞吐量大小</p>
<p><strong>3. 应用场景：</strong><br>适合用在后台运算而不需要太多交互的任务</p>
<p><strong>4. Parallel Scavenge收集器 VS ParNew收集器：</strong><br>Parallel Scavenge收集器与ParNew收集器的一个重要区别是它具有自适应调节策略。</p>
<p><strong>GC自适应的调节策略：</strong><br>Parallel Scavenge收集器有一个参数-XX:+UseAdaptiveSizePolicy。<br>当这个参数打开之后，就不需要手工指定新生代的大小、Eden与Survivor区的比例、晋升老年代对象年龄等细节参数了，<br>虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量。<br>这种调节方式称为GC自适应的调节策略（GC Ergonomics）。</p>
<h2 id="Serial_Old收集器">Serial Old收集器</h2><p><strong>1. 特性：</strong><br>Serial Old是Serial收集器的老年代版本<br>单线程收集器<br>使用标记－整理算法</p>
<p><img src="/img/garbage_collection/serial-gc.PNG" alt="Alt text"></p>
<p><strong>2. jvm 配置参数:</strong><br>-XX:+UseSerialGC</p>
<p><strong>3. 应用场景：</strong><br>Client模式<br>Serial Old收集器的主要意义也是在于给Client模式下的虚拟机使用。</p>
<p>Server模式<br>如果在Server模式下，那么它主要还有两大用途：一种用途是在JDK 1.5以及之前的版本中与Parallel Scavenge收集器搭配使用，另一种用途就是<strong>作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure时使用</strong>。</p>
<h2 id="Parallel_Old收集器">Parallel Old收集器</h2><p><strong>1. 特性：</strong><br>Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记－整理”算法。</p>
<p><strong>2. jvm 配置参数:</strong><br>-XX:+UseParallelOldGC</p>
<p><strong>3. 应用场景：</strong><br>在注重吞吐量以及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器。</p>
<hr>
<p>以上所有的收集器当中，当执行GC时，都会stop the world，但是下面的CMS收集器却不会这样。</p>
<h2 id="CMS收集器（Concurrent_Mark_Sweep：并发标记清除）">CMS收集器（Concurrent Mark Sweep：并发标记清除）</h2><p><strong>1. 特性：</strong><br>以获取最短回收停顿时间为目标的收集器<br>回收过程是与用户线程一起并发执行<br>标记-清除算法</p>
<p><img src="/img/garbage_collection/CMS-GC.PNG" alt="Alt text"></p>
<p><strong>2. jvm 配置参数:</strong><br>-XX:+UseConcMarkSweepGC </p>
<p><strong>3. 应用场景：</strong><br>适合应用在互联网站或者B/S系统的服务器上，这类应用尤其重视服务器的响应速度，希望系统停顿时间最短。</p>
<p><strong>4. 垃圾收集过程：</strong></p>
<p><strong>初始标记（CMS initial mark  stop the world）</strong><br>这是CMS中两次stop-the-world事件中的一次。<br>它有两个目标：一是标记老年代中所有的GC Roots；二是标记被年轻代中活着的对象引用的对象。<br><img src="/img/garbage_collection/initial-mark.PNG" alt="Alt text"></p>
<p><strong>并发标记（CMS concurrent mark 和用户线程一起）</strong><br>这个阶段会遍历整个老年代并且标记所有存活的对象，从“初始化标记”阶段找到的GC Roots开始。<br>并发标记的特点是和应用程序线程同时运行。并不是老年代的所有存活对象都会被标记，因为标记的同时应用程序会改变一些对象的引用等。<br><img src="/img/garbage_collection/cuncurrent mark.PNG" alt="Alt text"></p>
<p><strong>重新标记（CMS remark stop the world）</strong></p>
<p>这个阶段是CMS中第二个并且是最后一个STW的阶段。<br>该阶段的任务是完成标记整个年老代的所有的存活对象。</p>
<p>这个阶段的时间比较长，可以开启-XX:+CMSScavengeBeforeRemark选项，强制remark之前开始一次minor gc，减少remark的暂停时间，但是在remark之后也将立即开始又一次minor gc。</p>
<p><strong>并发清除（CMS concurrent sweep 和用户线程一起）</strong><br>和应用线程同时进行，不需要STW。<br>这个阶段的目的就是移除那些不用的对象，回收他们占用的空间并且为将来使用。</p>
<p><img src="/img/garbage_collection/concurrent sweep.PNG" alt="Alt text"></p>
<p><strong>5. CMS收集器的缺点：</strong><br>CMS是一款基于“标记—清除”算法实现的收集器，这意味着收集结束时会有大量空间碎片产生。</p>
<p>空间碎片过多时，将会给大对象分配带来很大麻烦。<br>往往会出现老年代还有很大空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前触发一次Full GC。</p>
<hr>
<h1 id="总结：">总结：</h1><p>虽然我们是在对各个收集器进行比较，但并非为了挑选出一个最好的收集器。</p>
<p>因为直到现在为止还没有最好的收集器出现，更加没有万能的收集器，所以我们选择的只是对具体应用最合适的收集器。</p>
<p>所以，在进行收集器选择的时候，需要进行大量的压测与调优，选择出最符合自身业务的收集器。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Java虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，</p>
<p>因此不同的厂商、不同版本的虚拟机所提供的垃圾收集器都可能会有很大差别，</p>
<p>并且一般都会提供参数供用户根据自己的应用特点和要求组合出各个年代所使用的收集器。</p>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅析JVM内存区域]]></title>
    <link href="http://tonylit.me/2016/11/21/%E6%B5%85%E6%9E%90jvm%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/"/>
    <id>http://tonylit.me/2016/11/21/浅析jvm内存区域/</id>
    <published>2016-11-21T03:37:27.000Z</published>
    <updated>2016-11-21T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>Java虚拟机在执行java程序的时候，会把它所管理的内存划分为若干不同的数据区。<br>这些区域有的随着java进程的启动而生成，有的随着线程的启动和结束而创建和销毁。</p>
<a id="more"></a>
<p>大多数 JVM 将内存区域划分为 <strong>Method Area（Non-Heap）（方法区）,Heap（堆）,Program Counter Register（程序计数器）, VM Stack（虚拟机栈，也有翻译成JAVA 方法栈）,Native Method Stack （本地方法栈）</strong>，<br>其中Method Area和Heap是线程共享的，VMStack，Native Method Stack 和Program Counter Register是线程私有的。<br><img src="/img/jvm/memory_area/JVM结构图.PNG" alt="Alt text"></p>
<p>概括地说来，JVM初始运行的时候都会分配好Method Area（方法区）和Heap（堆），<br>而JVM 每遇到一个线程，就为其分配一个Program Counter Register（程序计数器）, VM Stack（虚拟机栈）和Native Method Stack （本地方法栈），<br>当线程终止时，三者（虚拟机栈，本地方法栈和程序计数器）所占用的内存空间也会被释放掉。</p>
<p>方法区与堆这两块区域的内存清理通过垃圾收集器来回收。</p>
<hr>
<h1 id="程序计数器（Program_Counter_Register）">程序计数器（Program Counter Register）</h1><p>程序计数器是一块较小的内存空间，可以看做是<strong>当前线程执行的字节码的位置指示器</strong>。<br>分支、循环、跳转、异常处理和线程恢复等基础功能都需要依赖这个计算器来完成。</p>
<p>为什么<strong>程序计数器是线程私有的</strong>呢？ 由于java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的。<br>在任何一个时刻，一个处理器都只会处理一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器来保证各条线程之间的程序计数器互不影响，独立存储。</p>
<p>如果线程正在执行的是一个java方法，则计数器记录的是正在执行的虚拟机字节码指令的地址。<br>如果正在执行的是Native方法，则计数器为空（Undefined）。</p>
<p>该内存区域是唯一一个在java虚拟机规范中没有规定任何OOM情况的区域。</p>
<hr>
<h1 id="java虚拟机栈（VM_Stack）">java虚拟机栈（VM Stack）</h1><p><strong>java虚拟机栈也是线程私有的</strong>，它的生命周期与线程相同，线程结束后栈内存也就释放了，所以对于<strong>java虚拟机栈来说不存在垃圾收集的问题</strong>。</p>
<p>有些资料把该区域翻译成java方法栈，大概是因为它所描述的是java方法执行的内存模型。<br>每个方法的执行，同时都会在虚拟机栈上创建一个栈帧（Stack Frame），用于存储<strong>局部变量表</strong>，操作栈（Operand Stack，记录出栈、入栈的操作），方法出口，动态链接等。<br><strong>每个方法被调用直到执行完毕的过程，对应这帧栈在虚拟机栈的入栈和出栈的过程</strong>。有时候方法的递归，会造成大量的栈帧，达到一定的深度，会报StackOverflowError异常。</p>
<p>局部变量表存放了编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double），对象的引用以及returnAddress类型（指向了一条字节码指令的地址）。<br><strong>有一点需要说明:在编译器编译Java代码时，就已经在字节码中为每个方法都设置好了局部变量区和操作数栈的数据和大小。</strong>并在JVM首次加载方法所属的Class文件时， 就将这些数据放进了Method Area（方法区），该局部变量表所需要的内存空间是固定的，运行期间也不会改变。<br>因此在线程调用方法时，只需要根据方法区中的局部变量区和操作数栈的大小来分配一个新的栈帧的内存大小，并堆入Java栈就可以了。<br><img src="/img/jvm/memory_area/栈帧结构.PNG" alt="Alt text"></p>
<p>栈帧是一个内存区块，是一个数据集（类似数据结构中的栈），是一个有关方法(Method)和运行期数据的数据集。<br>当一个方法 A 被调用时就产生了一个栈帧 F1，并被压入到栈中，A 方法又调用了 B 方法，于是产生栈帧 F2 也被压入栈，执行完毕后，先弹出 F2栈帧，再弹出 F1 栈帧，遵循“<strong>先进后出</strong>”原则<br>（对于“先进后出”，这里差个话题，<a href="https://www.zhihu.com/question/34499262/answer/59415153" target="_blank" rel="external">为什么函数调用要用栈实现？</a>，大R的回答）。<br><img src="/img/jvm/memory_area/stackframe.PNG" alt="Alt text"></p>
<p>java虚拟机栈可以动态的扩展，如果扩展时无法申请到足够的内存，则报OOM的错误。</p>
<h2 id="java虚拟机栈内存溢出">java虚拟机栈内存溢出</h2><p>如果线程请求的栈深度大于虚拟机所允许的最大深度，则抛出StackOverFlowError异常。</p>
<p>如果虚拟机在扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。</p>
<p><strong>java虚拟机栈-StackOverFlowError异常测试代码</strong></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * -Xss128k</span><br><span class="line"> * </span><br><span class="line"> * @author lit</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JavaStackOOMTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> stackLength = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stackLeak</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        stackLength++;</span><br><span class="line">        stackLeak();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) throws Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        JavaStackOOMTest oom = <span class="keyword">new</span> JavaStackOOMTest();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            oom.stackLeak();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">"Stack length:"</span> + oom.stackLength);</span><br><span class="line">            <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果：</strong><br><img src="/img/jvm/memory_area/StackOverflowError.PNG" alt="Alt text"></p>
<p>可以看到，我机器上128k的栈容量能承载深度为2401的方法调用。</p>
<p><strong>java虚拟机栈-OutOfMemoryError异常测试代码</strong></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * -Xss1M</span><br><span class="line"> * </span><br><span class="line"> * @author lit</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StackOOM</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AtomicInteger counter_integer = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dnotStop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countThread</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        counter_integer.getAndIncrement();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 一直创建线程</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stackLeakByThread</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"></span><br><span class="line">                @<span class="function">Override</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">                    countThread();</span><br><span class="line"></span><br><span class="line">                    dnotStop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) throws Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        StackOOM oom = <span class="keyword">new</span> StackOOM();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            oom.stackLeakByThread();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">"====&gt;"</span> + counter_integer.<span class="keyword">get</span>());</span><br><span class="line">            <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Xss可以设置大一些，很快就会报错</p>
</blockquote>
<p><strong>运行结果：</strong><br><img src="/img/jvm/memory_area/stackoom.PNG" alt="Alt text"></p>
<hr>
<h1 id="本地方法栈（Native_Method_Stack）">本地方法栈（Native Method Stack）</h1><p><strong>本地方法栈是线程私有的。</strong></p>
<p>与VM Strack相似，VM Strack为JVM提供执行JAVA方法的服务，Native Method Stack则为JVM提供使用native 方法的服务。它的实现比较自由，比如Hotspot把本地方法栈和java虚拟机栈合二为一了。</p>
<p>本地方法栈与java虚拟机栈一样，会报StackOverflowError与OOM异常。</p>
<hr>
<h1 id="java堆（heap区）">java堆（heap区）</h1><p>大多情况下，堆是jvm中最大的一块内存区域。</p>
<p><strong>java堆被所有线程共享</strong>，在虚拟机启动的时候创建，几乎所有的对象实例都在这里分配内存（TLAB与逃逸分析，在栈上分配内存）。</p>
<p>java堆是垃圾收集的主要区域，整个java堆可以细分为：<strong>新生代（eden区、Survivor区（s1、s0））和年老代</strong>。<br>现在的垃圾收集器基本都采用分代收集算法,根据不同代中对象的生命周期长短，采用不同的垃圾收集算法，可以扬长避短。<br><img src="/img/jvm/memory_area/jvm堆内存结构.PNG" alt="Alt text"></p>
<p><strong>Eden Space：</strong>大多情况下，对象在新生代eden区中分配内存（jvm提供了-XX：PretenureSizeThreshold参数，让大于这个值的对象直接进入年老代分配内存，避免eden和survivor区之间发生大量的内存复制）。</p>
<p><strong>Survivor Space</strong>:用于保存在eden区中经过垃圾回收后没有被回收的对象，也就是“幸存还活着”的对象。</p>
<blockquote>
<p>Survivor区分为两个相同大小的区域（s0,s1），<br>在GC开始的时候，对象只会存在于Eden区和名为“From”的Survivor区，Survivor区“To”是空的。<br>紧接着进行GC，Eden区中所有存活的对象都会被复制到“To”，而在“From”区中，仍存活的对象会根据他们的年龄值来决定去向。<br>年龄达到一定值(年龄阈值，可以通过-XX:MaxTenuringThreshold来设置)的对象会被移动到年老代中，没有达到阈值的对象会被复制到“To”区域。<br>经过这次GC后，Eden区和From区已经被清空。这个时候，“From”和“To”会交换他们的角色，也就是新的“To”就是上次GC前的“From”，新的“From”就是上次GC前的“To”。<br>不管怎样，都会保证名为To的Survivor区域是空的。Minor GC会一直重复这样的过程，直到“To”区被填满，“To”区被填满之后，会将所有对象移动到年老代中。<br><img src="/img/jvm/memory_area/survivor.PNG" alt="Alt text"></p>
</blockquote>
<p><strong>Old Space</strong>:有些资料上也叫作Tenured区。对象经过survivor区，每经历过一次垃圾回收，年龄就增加1，超过设定阀值后，被移入年老代，当然也包括由于担保机制移入的对象。</p>
<p>年老代中对象的生命周期相对长一些，当年老代的内存使用到一定阀值的时候（或者晋升失败等其他触发major gc的情况），会触发年老代的垃圾回收，回收不用的对象。</p>
<p>java堆可以处于物理上不连续的内存空间中，只要逻辑上面是连续的即可。<br>堆的大小可以通过jvm参数扩展（-Xmx与-xms，一般情况设置为相同的值，避免堆自动扩展），如果对象的实例进入java堆时，没有足够的内存空间分配，同时堆也无法进行扩展，会报OOM异常。</p>
<h2 id="一个对象的一生">一个对象的一生</h2><p>我是一个普通的java对象，我出生在Eden区，在Eden区我还看到和我长的很像的小兄弟，我们在Eden区中玩了挺长时间。<br>有一天Eden区中的人实在是太多了，我就被迫去了Survivor区的“From”区，自从去了Survivor区，我就开始漂了，有时候在Survivor的“From”区，有时候在Survivor的“To”区，居无定所。<br>直到我18岁的时候，爸爸说我成人了，该去社会上闯闯了，于是我就去了年老代那边。年老代里，人很多，并且年龄都挺大的，我在这里也认识了很多人。在年老代里，我生活了很多年，然后被回收。</p>
<h2 id="java堆内存溢出">java堆内存溢出</h2><p>java堆用于存储对象的实例，只要不断的去创建对象，并且保证GC Roots到对象之间有可达路径来避免垃圾回收机制清除这些对象，那么在对象数量到达最大堆的容量限制后就会产生内存溢出异常。</p>
<p><strong>java堆OutOfMemoryError测试代码：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * VM Args:-Xmx10M -Xms10M -XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line"> * </span><br><span class="line"> * <span class="doctag">@author</span> lit</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapOOMTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] allocation = <span class="keyword">new</span> <span class="keyword">byte</span>[_1MB];</span><br><span class="line"></span><br><span class="line">        List&lt;<span class="keyword">byte</span>[]&gt; list = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">byte</span>[]&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            list.add(allocation);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>XX:+HeapDumpOnOutOfMemoryError 参数可以在jvm出现内存溢出时dump出当前的内存堆快照。</p>
</blockquote>
<p><strong>运行结果：</strong><br><img src="/img/jvm/memory_area/heapoomtest.PNG" alt="Alt text"></p>
<p>OOM在实际的应用中非常常见，当出现java堆内存溢出时，异常堆栈信息“java.lang.OutOfMemoryError”会跟着进一步提示：“java heap space”表明是java堆的溢出。</p>
<hr>
<h1 id="方法区（Method_Area）">方法区（Method Area）</h1><p><strong>方法区和java堆一样，是线程共享的内存区域。</strong> 它用于存储已经被虚拟机加载的类信息、常量、静态变量、及时编译器编译后的代码等数据。<br>为了跟java堆区分开来，它有一个别名叫做Non-Heap。对于HotSpot虚拟机来说，jdk1.8以前该区域经常也会被叫做永久代，<a href="http://www.infoq.com/cn/articles/Java-PERMGEN-Removed" target="_blank" rel="external">1.8以后永久代被取消</a>。</p>
<p>永久代可以使用-XX:MaxPermSize来扩展大小，垃圾回收在这个区域会比较少出现，这个区域内存回收的目的主要针对常量池的回收和类的卸载。<br>当方法区无法满足内存分配需求的时候，会报OOM异常。</p>
<h2 id="运行时常量池（Runtime_Constant_Pool）">运行时常量池（Runtime Constant Pool）</h2><p>运行时常量池是方法区中非常重要的一部分。在字节码文件（Class文件）中，除了有类的版本、字段、方法、接口等先关信息描述外，还有<a href="http://www.jianshu.com/p/c7f47de2ee80" target="_blank" rel="external">常量池（Constant Pool Table）信息</a>，用于存储编译器产生的字面量和符号引用。<br><strong>这部分内容在类被加载后，都会存储到方法区中的运行时常量池中</strong>。值得注意的是，运行时产生的新常量也可以被放入常量池中，比如 String 类中的 intern() 方法产生的常量（大量的使用会造成方法区OOM）。</p>
<h2 id="方法区内存溢出">方法区内存溢出</h2><p>这里使用String.intern()，它的作用是：如果字符串已经在方法区的常量池中，则返回代表池中这个字符串的String对象，否则会把字符串添加到常量池中。</p>
<p><strong>方法区OutOfMemoryError测试代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * -XX:PermSize=10M -XX:MaxPermSize=10M</span><br><span class="line"> * </span><br><span class="line"> * @author lit</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ConstantOOM &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="built_in">list</span>.add(String.valueOf(i++).intern());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>-XX:PermSize和-XX:MaxPermSize来限制方法区的大小</p>
</blockquote>
<p><strong>运行结果：</strong><br><img src="/img/jvm/memory_area/permoom.PNG" alt="Alt text"></p>
<p>方法区存放Class的相关信息，如类名、常量池、字段描述、方法描述等，如果不断的去产生大量的类，方法区也会溢出。<br>尤其是现在越来越多的框架,如Spring AOP、Hibernate等，在对类进行增强时，会使用CGLib这类字节码技术，来转换字节码并生成新的类，<br>所以在我们实际的工作中经常会碰到由此产生的“OutOfMemoryError: PermGen space”异常。</p>
<p><strong>（CGLib）方法区OutOfMemoryError测试代码：</strong></p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"><span class="keyword">import</span> java.lang.reflect.Method;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span></span><br><span class="line"><span class="preprocessor"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span></span><br><span class="line"><span class="preprocessor"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * -XX:PermSize=10M -XX:MaxPermSize=10M</span><br><span class="line"> * </span><br><span class="line"> * @author lit</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodAreaOOM</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OOMOjbect</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * @param args</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            Enhancer eh = <span class="keyword">new</span> Enhancer();</span><br><span class="line">            eh.setSuperclass(OOMOjbect.<span class="keyword">class</span>);</span><br><span class="line">            eh.setUseCache(<span class="literal">false</span>);</span><br><span class="line">            eh.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                <span class="keyword">public</span> Object intercept(Object arg0, Method arg1, Object[] arg2, MethodProxy arg3) throws Throwable &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                    <span class="keyword">return</span> arg3.invokeSuper(arg0, arg2);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">            eh.create();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果：</strong><br><img src="/img/jvm/memory_area/cgliboom.PNG" alt="Alt text"></p>
<hr>
<h1 id="直接内存（Direct_Memory）">直接内存（Direct Memory）</h1><p>直接内存不是java虚拟机运行时数据区的一部分，也不是java虚拟机规范中定义的内存区域。<br>该区域也会在 Java 开发中使用到，并且存在导致内存溢出的隐患。</p>
<p>如果你对 NIO 有所了解，可能会知道 NIO 是可以使用 Native Methods 来使用直接内存区的。<br>NIO是在JDK1.4以后新加入的类，基于通道（Channel）与缓冲区（Buffer）的I/0方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在java堆中的DirectByteBuffer对象作为这块内存的引用来进行操作。<br>这样可以显著提高性能，避免java堆与native堆中来回复制数据。</p>
<p>直接内存不会受到java堆大小的限制，但是会受到本机总内存的大小和处理器寻址空间的限制。所以也可能出现oom的异常。</p>
<hr>
<h1 id="java虚拟机各内存区域图汇总">java虚拟机各内存区域图汇总</h1><p>通过上面的介绍，我们对JVM的内存区域有了一定的理解。JVM内存区域可以分为线程共享和线程私有两部分，线程共享的有堆和方法区，线程私有的有虚拟机栈，本地方法栈和程序计数器；另外，直接内存也是线程共享的。</p>
<p>除了程序计数器，其他区域都有出现OOM的情况。</p>
<p><img src="/img/jvm/memory_area/jvm内存区域图.PNG" alt="Alt text"></p>
<hr>
]]></content>
    <summary type="html">
    <![CDATA[<p>Java虚拟机在执行java程序的时候，会把它所管理的内存划分为若干不同的数据区。<br>这些区域有的随着java进程的启动而生成，有的随着线程的启动和结束而创建和销毁。</p>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[网络带宽瓶颈导致tps上不去]]></title>
    <link href="http://tonylit.me/2016/11/16/%E7%BD%91%E7%BB%9C%E5%B8%A6%E5%AE%BD%E7%93%B6%E9%A2%88%E5%AF%BC%E8%87%B4tps%E4%B8%8A%E4%B8%8D%E5%8E%BB/"/>
    <id>http://tonylit.me/2016/11/16/网络带宽瓶颈导致tps上不去/</id>
    <published>2016-11-16T03:37:27.000Z</published>
    <updated>2016-11-16T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>最近给保险项目组做压力测试，发现增加并发用户数和应用服务器数量，tps一直上不去，<br>最终发现是应用服务器与DB服务器之间网络带宽不够导致。</p>
<a id="more"></a>
<h1 id="背景：">背景：</h1><p>dba的邮件记录：<br><img src="/img/网络带宽导致tps上不去/dbaEmail.PNG" alt="Alt text"></p>
<p>淘宝的邮件记录：<br><img src="/img/网络带宽导致tps上不去/taobaoEmail.PNG" alt="Alt text"></p>
<p>从两封邮件来看，人员之间存在对性能术语理解的偏差。<br>dba邮件中描述<strong>35 并发</strong>，taobao邮件中描述<strong>35 QPS</strong>，由于之前taobao人员没有跟我直接交流，我只看到dba的邮件，所以我以为35是并发用户数，而不是每秒请求数（QPS，这里也可以理解为TPS）。<br>以至于后面几天的测试中，一直以为taobao那边的压测的数据有问题。</p>
<hr>
<h1 id="环境拓扑">环境拓扑</h1><p>模拟线上的机器拓扑，搭建了应用服务。<br>两台物理机，每台机器上虚拟出两台虚拟机，一共4台虚拟机做app server。<br>物理机和DB端，网卡都是千兆全双工。</p>
<hr>
<h1 id="resin_rac配置">resin rac配置</h1><p>/etc/hosts中配置域名指向：<br>ph-mic-test-db1-vip与ph-mic-test-db2-vip</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;database&gt;</span><br><span class="line">           &lt;jndi-name&gt;jdbc/InsDatabase&lt;/jndi-name&gt;</span><br><span class="line">           &lt;driver type=<span class="string">"oracle.jdbc.driver.OracleDriver"</span>&gt;</span><br><span class="line">             &lt;url&gt;jdbc:oracle:thin:@<span class="params">(DESCRIPTION =<span class="params">(LOAD_BALANCE = on)</span><span class="params">(FAILOVER=on)</span><span class="params">(ADDRESS_LIST =<span class="params">(ADDRESS = <span class="params">(PROTOCOL = TCP)</span><span class="params">(HOST = ph-mic-test-db1-vip)</span><span class="params">(PORT = <span class="number">1521</span>)</span>)</span><span class="params">(ADDRESS = <span class="params">(PROTOCOL = TCP)</span><span class="params">(HOST = ph-mic-test-db2-vip)</span><span class="params">(PORT = <span class="number">1521</span>)</span>)</span>)</span><span class="params">(CONNECT_DATA =<span class="params">(SERVER = DEDICATED)</span><span class="params">(SERVICE_NAME = ins.host185)</span><span class="params">(FAILOVER_MODE =<span class="params">(TYPE = SELECT)</span><span class="params">(METHOD = BASIC)</span>)</span>)</span>)</span>&lt;/url&gt;</span><br><span class="line">             &lt;user&gt;ins&lt;/user&gt;</span><br><span class="line">             &lt;password&gt;instest007&lt;/password&gt;</span><br><span class="line">             &lt;init-param QTO=<span class="string">"F"</span>/&gt;</span><br><span class="line">            &lt;/driver&gt;</span><br><span class="line">            &lt;prepared-statement-cache-size&gt;<span class="number">20</span>&lt;/prepared-statement-cache-size&gt;</span><br><span class="line">            &lt;<span class="built_in">max</span>-connections&gt;<span class="number">1024</span>&lt;/<span class="built_in">max</span>-connections&gt;</span><br><span class="line">            &lt;<span class="built_in">max</span>-idle-time&gt;<span class="number">30</span>s&lt;/<span class="built_in">max</span>-idle-time&gt;</span><br><span class="line">          &lt;/database&gt;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="压测">压测</h1><h2 id="脚本">脚本</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">web_custom_request("underwriting", </span><br><span class="line">		"URL=http://192.168.42.162:9001/api/tb/underwriting?com_id=1757208157&amp;sign=c9f56705bb1380f32a2121994680e30e", </span><br><span class="line">		"Method=POST", </span><br><span class="line">		"Resource=0", </span><br><span class="line">        "RecContentType=text/xml",</span><br><span class="line">        "Referer=",</span><br><span class="line">        "Mode=HTML",</span><br><span class="line">        "EncType=text/xml; charset=utf-8",</span><br><span class="line">		"Body="</span><br><span class="line">		"<span class="pi">&lt;?xml version=\"1.0\" encoding=\"GBK\" standalone=\"yes\"?&gt;</span> \n"</span><br><span class="line">		"<span class="tag">&lt;<span class="title">PackageList</span> <span class="attribute">xmlns:xsi</span>=<span class="value">\"http:</span>//<span class="attribute">www.w3.org</span>/<span class="attribute">2001</span>/<span class="attribute">XMLSchema-instance</span>\"&gt;</span> \n"</span><br><span class="line">         "<span class="tag">&lt;<span class="title">Package</span>&gt;</span> \n"</span><br><span class="line">        "<span class="tag">&lt;<span class="title">Header</span>&gt;</span> \n"</span><br><span class="line">          "<span class="tag">&lt;<span class="title">RequestType</span>&gt;</span>01<span class="tag">&lt;/<span class="title">RequestType</span>&gt;</span> \n"</span><br><span class="line">           "<span class="tag">&lt;<span class="title">UUID</span>&gt;</span>2e2830d0-bf96-460e-805a-e4d5cdafbebe<span class="tag">&lt;/<span class="title">UUID</span>&gt;</span> \n"</span><br><span class="line">           "<span class="tag">&lt;<span class="title">ComId</span>&gt;</span>1757208157<span class="tag">&lt;/<span class="title">ComId</span>&gt;</span> \n"</span><br><span class="line">           "<span class="tag">&lt;<span class="title">From</span>&gt;</span>taobao<span class="tag">&lt;/<span class="title">From</span>&gt;</span> \n"</span><br><span class="line">           "<span class="tag">&lt;<span class="title">SendTime</span>&gt;</span>2016-11-07 08:08:17<span class="tag">&lt;/<span class="title">SendTime</span>&gt;</span> \n"</span><br><span class="line">           "<span class="tag">&lt;<span class="title">TaoBaoSerial</span>&gt;</span>&#123;serial&#125;&#123;serial2&#125;<span class="tag">&lt;/<span class="title">TaoBaoSerial</span>&gt;</span> \n"</span><br><span class="line">           "<span class="tag">&lt;<span class="title">ComSerial</span> <span class="attribute">xsi:nil</span>=<span class="value">\"true\"</span>/&gt;</span> \n"</span><br><span class="line">           "<span class="tag">&lt;<span class="title">Asyn</span>&gt;</span>0<span class="tag">&lt;/<span class="title">Asyn</span>&gt;</span> \n"</span><br><span class="line">           "<span class="tag">&lt;<span class="title">ReturnUrl</span>&gt;</span>http://service.baoxian.taobao.com/baoxian/cooperation<span class="tag">&lt;/<span class="title">ReturnUrl</span>&gt;</span> \n"</span><br><span class="line">           "<span class="tag">&lt;<span class="title">ProductCode</span>&gt;</span>1851<span class="tag">&lt;/<span class="title">ProductCode</span>&gt;</span> \n"</span><br><span class="line">       "<span class="tag">&lt;/<span class="title">Header</span>&gt;</span> \n"</span><br><span class="line">        "<span class="tag">&lt;<span class="title">Request</span>&gt;</span> \n"</span><br><span class="line">           "<span class="tag">&lt;<span class="title">Order</span>&gt;</span> \n"</span><br><span class="line">             "<span class="tag">&lt;<span class="title">TBOrderId</span>&gt;</span>&#123;serial&#125;&#123;serial2&#125;<span class="tag">&lt;/<span class="title">TBOrderId</span>&gt;</span> \n"</span><br><span class="line">              "<span class="tag">&lt;<span class="title">TotalPremium</span>&gt;</span>3000<span class="tag">&lt;/<span class="title">TotalPremium</span>&gt;</span> \n"</span><br><span class="line">              "<span class="tag">&lt;<span class="title">PostFee</span> <span class="attribute">xsi:nil</span>=<span class="value">\"true\"</span>/&gt;</span> \n"</span><br><span class="line">              "<span class="tag">&lt;<span class="title">InsBeginDate</span>&gt;</span>2016-11-19 00:00:00<span class="tag">&lt;/<span class="title">InsBeginDate</span>&gt;</span> \n"</span><br><span class="line">               "<span class="tag">&lt;<span class="title">InsEndDate</span>&gt;</span>2017-11-19 00:00:00<span class="tag">&lt;/<span class="title">InsEndDate</span>&gt;</span> \n"</span><br><span class="line">               "<span class="tag">&lt;<span class="title">InsPeriod</span>&gt;</span>1Y<span class="tag">&lt;/<span class="title">InsPeriod</span>&gt;</span> \n"</span><br><span class="line">               "<span class="tag">&lt;<span class="title">ApplyNum</span>&gt;</span>1<span class="tag">&lt;/<span class="title">ApplyNum</span>&gt;</span> \n"</span><br><span class="line">               "<span class="tag">&lt;<span class="title">Item</span>&gt;</span> \n"</span><br><span class="line">                  "<span class="tag">&lt;<span class="title">ItemId</span>&gt;</span>526471633873<span class="tag">&lt;/<span class="title">ItemId</span>&gt;</span> \n"</span><br><span class="line">                  "<span class="tag">&lt;<span class="title">SkuRiskCode</span>&gt;</span>1851<span class="tag">&lt;/<span class="title">SkuRiskCode</span>&gt;</span> \n"</span><br><span class="line">                  "<span class="tag">&lt;<span class="title">ProductCode</span>&gt;</span>1851<span class="tag">&lt;/<span class="title">ProductCode</span>&gt;</span> \n"</span><br><span class="line">                   "<span class="tag">&lt;<span class="title">ProductName</span>&gt;</span>???<span class="tag">&lt;/<span class="title">ProductName</span>&gt;</span> \n"</span><br><span class="line">                   "<span class="tag">&lt;<span class="title">Amount</span> <span class="attribute">xsi:nil</span>=<span class="value">\"true\"</span>/&gt;</span> \n"</span><br><span class="line">                    "<span class="tag">&lt;<span class="title">Premium</span>&gt;</span>3000<span class="tag">&lt;/<span class="title">Premium</span>&gt;</span> \n"</span><br><span class="line">                    "<span class="tag">&lt;<span class="title">ActualPremium</span>&gt;</span>3000<span class="tag">&lt;/<span class="title">ActualPremium</span>&gt;</span> \n"</span><br><span class="line">                    "<span class="tag">&lt;<span class="title">DiscountRate</span>&gt;</span>10000<span class="tag">&lt;/<span class="title">DiscountRate</span>&gt;</span> \n"</span><br><span class="line">                "<span class="tag">&lt;/<span class="title">Item</span>&gt;</span> \n"</span><br><span class="line">                "<span class="tag">&lt;<span class="title">PolicyNo</span> <span class="attribute">xsi:nil</span>=<span class="value">\"true\"</span>/&gt;</span> \n"</span><br><span class="line">            "<span class="tag">&lt;/<span class="title">Order</span>&gt;</span> \n"</span><br><span class="line">            "<span class="tag">&lt;<span class="title">ApplyInfo</span>&gt;</span> \n"</span><br><span class="line">                "<span class="tag">&lt;<span class="title">Holder</span>&gt;</span> \n"</span><br><span class="line">                    "<span class="tag">&lt;<span class="title">CustomList</span>&gt;</span> \n"</span><br><span class="line">                        "<span class="tag">&lt;<span class="title">Custom</span> <span class="attribute">key</span>=<span class="value">\"HolderBirthday\"</span>&gt;</span>1984-08-15<span class="tag">&lt;/<span class="title">Custom</span>&gt;</span> \n"</span><br><span class="line">                        "<span class="tag">&lt;<span class="title">Custom</span> <span class="attribute">key</span>=<span class="value">\"HolderName\"</span>&gt;</span>&#123;name1&#125;&#123;name&#125;<span class="tag">&lt;/<span class="title">Custom</span>&gt;</span> \n"</span><br><span class="line">                        "<span class="tag">&lt;<span class="title">Custom</span> <span class="attribute">key</span>=<span class="value">\"HolderMobile\"</span>&gt;</span>&#123;tel&#125;&#123;tel2&#125;<span class="tag">&lt;/<span class="title">Custom</span>&gt;</span> \n"</span><br><span class="line">                        "<span class="tag">&lt;<span class="title">Custom</span> <span class="attribute">key</span>=<span class="value">\"HolderSex\"</span>&gt;</span>1<span class="tag">&lt;/<span class="title">Custom</span>&gt;</span> \n"</span><br><span class="line">                        "<span class="tag">&lt;<span class="title">Custom</span> <span class="attribute">key</span>=<span class="value">\"HolderCardType\"</span>&gt;</span>1<span class="tag">&lt;/<span class="title">Custom</span>&gt;</span> \n"</span><br><span class="line">                        "<span class="tag">&lt;<span class="title">Custom</span> <span class="attribute">key</span>=<span class="value">\"HolderCardNo\"</span>&gt;</span>320323198804227051<span class="tag">&lt;/<span class="title">Custom</span>&gt;</span> \n"</span><br><span class="line">                    "<span class="tag">&lt;/<span class="title">CustomList</span>&gt;</span> \n"</span><br><span class="line">                "<span class="tag">&lt;/<span class="title">Holder</span>&gt;</span> \n"</span><br><span class="line">                "<span class="tag">&lt;<span class="title">InsuredInfo</span>&gt;</span> \n"</span><br><span class="line">                    "<span class="tag">&lt;<span class="title">IsHolder</span>&gt;</span>0<span class="tag">&lt;/<span class="title">IsHolder</span>&gt;</span> \n"</span><br><span class="line">                    "<span class="tag">&lt;<span class="title">InsuredList</span>&gt;</span> \n"</span><br><span class="line">                        "<span class="tag">&lt;<span class="title">Insured</span>&gt;</span> \n"</span><br><span class="line">                            "<span class="tag">&lt;<span class="title">CustomList</span>&gt;</span> \n"</span><br><span class="line">                                "<span class="tag">&lt;<span class="title">Custom</span> <span class="attribute">key</span>=<span class="value">\"InsuredName\"</span>&gt;</span>&#123;name1&#125;&#123;name&#125;<span class="tag">&lt;/<span class="title">Custom</span>&gt;</span> \n"</span><br><span class="line">                                "<span class="tag">&lt;<span class="title">Custom</span> <span class="attribute">key</span>=<span class="value">\"InsuredCardType\"</span>&gt;</span>1<span class="tag">&lt;/<span class="title">Custom</span>&gt;</span> \n"</span><br><span class="line">                                "<span class="tag">&lt;<span class="title">Custom</span> <span class="attribute">key</span>=<span class="value">\"InsuredRelation\"</span>&gt;</span>1<span class="tag">&lt;/<span class="title">Custom</span>&gt;</span> \n"</span><br><span class="line">                                "<span class="tag">&lt;<span class="title">Custom</span> <span class="attribute">key</span>=<span class="value">\"InsuredSex\"</span>&gt;</span>1<span class="tag">&lt;/<span class="title">Custom</span>&gt;</span> \n"</span><br><span class="line">                                "<span class="tag">&lt;<span class="title">Custom</span> <span class="attribute">key</span>=<span class="value">\"InsuredBirthday\"</span>&gt;</span>1984-08-15<span class="tag">&lt;/<span class="title">Custom</span>&gt;</span> \n"</span><br><span class="line">                                "<span class="tag">&lt;<span class="title">Custom</span> <span class="attribute">key</span>=<span class="value">\"InsuredCardNo\"</span>&gt;</span>320323198804227051<span class="tag">&lt;/<span class="title">Custom</span>&gt;</span> \n"</span><br><span class="line">                            "<span class="tag">&lt;/<span class="title">CustomList</span>&gt;</span> \n"</span><br><span class="line">                            "<span class="tag">&lt;<span class="title">BenefitInfo</span>&gt;</span> \n"</span><br><span class="line">                                "<span class="tag">&lt;<span class="title">IsLegal</span>&gt;</span>1<span class="tag">&lt;/<span class="title">IsLegal</span>&gt;</span> \n"</span><br><span class="line">                                "<span class="tag">&lt;<span class="title">BenefitList</span>/&gt;</span> \n"</span><br><span class="line">                            "<span class="tag">&lt;/<span class="title">BenefitInfo</span>&gt;</span> \n"</span><br><span class="line">                        "<span class="tag">&lt;/<span class="title">Insured</span>&gt;</span> \n"</span><br><span class="line">                    "<span class="tag">&lt;/<span class="title">InsuredList</span>&gt;</span> \n"</span><br><span class="line">                "<span class="tag">&lt;/<span class="title">InsuredInfo</span>&gt;</span> \n"</span><br><span class="line">                "<span class="tag">&lt;<span class="title">OtherInfo</span>&gt;</span> \n"</span><br><span class="line">                    "<span class="tag">&lt;<span class="title">CustomList</span>&gt;</span> \n"</span><br><span class="line">                        "<span class="tag">&lt;<span class="title">Custom</span> <span class="attribute">key</span>=<span class="value">\"bxcifid\"</span>&gt;</span>238810000071764631481<span class="tag">&lt;/<span class="title">Custom</span>&gt;</span> \n"</span><br><span class="line">                    "<span class="tag">&lt;/<span class="title">CustomList</span>&gt;</span> \n"</span><br><span class="line">                "<span class="tag">&lt;/<span class="title">OtherInfo</span>&gt;</span> \n"</span><br><span class="line">                "<span class="tag">&lt;<span class="title">RefundInfo</span>&gt;</span> \n"</span><br><span class="line">                    "<span class="tag">&lt;<span class="title">CustomList</span>/&gt;</span> \n"</span><br><span class="line">                "<span class="tag">&lt;/<span class="title">RefundInfo</span>&gt;</span> \n"</span><br><span class="line">            "<span class="tag">&lt;/<span class="title">ApplyInfo</span>&gt;</span> \n"</span><br><span class="line">        "<span class="tag">&lt;/<span class="title">Request</span>&gt;</span> \n"</span><br><span class="line">    "<span class="tag">&lt;/<span class="title">Package</span>&gt;</span> \n"</span><br><span class="line">"<span class="tag">&lt;/<span class="title">PackageList</span>&gt;</span> \n", </span><br><span class="line">		LAST);</span><br></pre></td></tr></table></figure>
<p>加压的时候发现，压力机运行良好，tps最大在28，cpu和load不高；后来又加了2台app server，tps依然保持在28。<br>之前以为一秒钟仅28个订单提交，网络带宽这块没去考虑，觉得不会有问题。<br>后来分析了下单的请求，很是吃惊，Word天…一次下单有379次DB操作！！！！<br><img src="/img/网络带宽导致tps上不去/server-db.PNG" alt="Alt text"></p>
<p>然后，发送下单请求，抓了一下包：<br><img src="/img/网络带宽导致tps上不去/tcpdump.PNG" alt="Alt text"></p>
<p>请求大概1s一次，每秒19.359Mbit，也就是说，一次下单请求，数据库要返回19.359Mbit的数据！！！</p>
<blockquote>
<p>我们来计算计算，<br>TPS=28，19.359Mbit/s,<br>每秒钟：28*19.359=542Mbit/s</p>
</blockquote>
<p>OK，我们知道了，每秒钟542Mbit/s的吞吐，再测试一下app server与DB之间最大网络传输</p>
<blockquote>
<p>netpert -H 192.168.52.185 -l 30<br><img src="/img/网络带宽导致tps上不去/db-net.PNG" alt="Alt text"></p>
</blockquote>
<p>app server、网关、DB server都是千兆卡，646.81Mbit/s<br>分析来看，带宽可能是瓶颈。</p>
<p>实际压测中,DB端的网络情况：<br><img src="/img/网络带宽导致tps上不去/dbserver-net.PNG" alt="Alt text"><br>然而，DB是两台做的RAC，流量double~<br>看来，确实是带宽的问题</p>
<h1 id="解决">解决</h1><p>将app server 和 db server迁移到同一机房，走同一物理交换机，解决网络带宽问题</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近给保险项目组做压力测试，发现增加并发用户数和应用服务器数量，tps一直上不去，<br>最终发现是应用服务器与DB服务器之间网络带宽不够导致。</p>]]>
    
    </summary>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[tcpcopy1.0使用]]></title>
    <link href="http://tonylit.me/2016/10/19/tcpcopy/"/>
    <id>http://tonylit.me/2016/10/19/tcpcopy/</id>
    <published>2016-10-19T03:37:27.000Z</published>
    <updated>2016-10-19T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>平时我们做的压力测试，很难去模拟线上复杂的真实流量，尤其里面混杂着各种奇异的异常流量。<br>所以，线下压的好好的系统，上线后可能就雪崩了。<br>tcpcopy可以解决以上问题， tcpcopy是一种流量的实时复制工具，可以将线上的流量引到测试环境上做测试。<br> 当然， tcpcopy也可以回放tcpdump的流量包。</p>
<a id="more"></a>
<h1 id="tcpcopy介绍">tcpcopy介绍</h1><p>由网易的<a href="https://github.com/wangbin579/tcpcopy" target="_blank" rel="external">wangbin</a>开发和维护，目前为1.0版本。<br>推荐使用最新的1.0版本，虽然配置稍微麻烦一些，但是有很多好处(具体参见：<a href="https://github.com/wangbin579/tcpcopy" target="_blank" rel="external">https://github.com/wangbin579/tcpcopy</a>)<br>整体工作流程：<br><img src="/img/tcpcopy/流程图.PNG" alt="Alt text"></p>
<h1 id="安装">安装</h1><h2 id="准备三台机器：A,B,C">准备三台机器：A,B,C</h2><p>A:192.168.42.162，作为线上服务器，安装tcpcopy<br>B:192.168.42.164，作为测试服务器<br>C:192.168.42.166，作为辅助服务器，安装intercept</p>
<p><strong>整体流程</strong>：在192.168.42.162上运行tcpcopy把线上流量拷贝到192.168.42.164，在192.168.42.164上我们通过路由将应答转向<br>192.168.42.166，在192.168.42.166上把应答丢弃。<br><img src="/img/tcpcopy/tcpcopy.png" alt="Alt text"><br>再简单解释一下工作原理：</p>
<blockquote>
<p>TCPcopy 从数据链路层 copy 端口请求，然后更改目的 ip 和目的端口。<br>将修改过的数据包传送给数据链路层，并且保持 tcp 连接请求。<br>通过数据链路层从 online server 发送到 test server。<br>在数据链路层解封装后到达 nginx 响应的服务端口。<br>等用户请求的数据返回结果后，回包走数据链路层。<br>通过数据链路层将返回的结果从 test server 发送到 assistant server。注：test server 只有一条默认路由指向 assistant server。<br>数据到达 assistant server 后被 intercept 进程截获。<br>过滤相关信息将请求状态发送给 online server 的 tcpcopy，关闭 tcp 连接。</p>
</blockquote>
<h1 id="在C机器上安装intercept">在C机器上安装intercept</h1><blockquote>
<p>wget <a href="https://github.com/session-replay-tools/intercept/archive/1.0.0.tar.gz" target="_blank" rel="external">https://github.com/session-replay-tools/intercept/archive/1.0.0.tar.gz</a> -O intercept-1.0.0.tar.gz</p>
</blockquote>
<p>centos6以上版本直接安装依赖包：<br>yum -y install libpcap-devel<br>centos5版本上需要卸载低版本的libpcap-devel-0.9.4-15.el5</p>
<blockquote>
<p>yum remove libpcap<br>wget <a href="http://www.tcpdump.org/release/libpcap-1.4.0.tar.gz" target="_blank" rel="external">http://www.tcpdump.org/release/libpcap-1.4.0.tar.gz</a><br>tar zxvf libpcap-1.4.0.tar.gz<br>cd libpcap-1.4.0<br>./configure<br>make<br>make install</p>
<p>tar zxvf intercept-1.0.0.tar.gz<br>cd intercept-1.0.0<br>./configure （默认raw socket方式抓包）<br>make &amp;&amp; make install</p>
</blockquote>
<p>安装完成，启动intercept</p>
<blockquote>
<p>/usr/local/intercept/sbin/intercept -i eth1 -l intercept.log -P /var/run/intercept.pid -F ‘tcp and src port 80’ -d<br>指令说明：<br>-i 监控网卡接口<br>-l 记录日志<br>-F 监控的协议和端口<br>-P 记录pid<br>-d 以daemon形式运行<br>其他参数可以通过/usr/local/intercept/sbin/intercept -h查看</p>
</blockquote>
<p>成功运行后可以观察到的网路连接状态：</p>
<blockquote>
<p>netstat -anp |grep 36524</p>
</blockquote>
<h1 id="在A机器安装tcpcopy">在A机器安装tcpcopy</h1><blockquote>
<p>wget <a href="https://github.com/session-replay-tools/tcpcopy/archive/1.0.0.tar.gz" target="_blank" rel="external">https://github.com/session-replay-tools/tcpcopy/archive/1.0.0.tar.gz</a> -O tcpcopy-1.0.0.tar.gz<br>yum -y install libpcap-devel<br>tar zxvf tcpcopy-1.0.0.tar.gz<br>cd tcpcopy-1.0.0<br>./configure （默认raw socket方式抓包）<br>make<br> make install</p>
</blockquote>
<p>安装完成，运行tcpcopy</p>
<blockquote>
<p>/usr/local/tcpcopy/sbin/tcpcopy -x 80-192.168.42.164:80 -s 192.168.42.166 -c 10.10.10.x -d -C 4 -l tcpcopy.log -P /var/run/tcpcopy.pid</p>
</blockquote>
<p>指令说明：</p>
<blockquote>
<p>-x 80-192.168.42.164:80将本机上80端口的流量复制到192.168.42.164（测试服务器）的80端口<br>-s指定intercept进程所在的服务器192.168.42.166。（丢包服务器）<br>-c修改请求的host地址为10.10.10.x，以便在164测试服务器上设置路由（设置路由是为了将应答转向丢166包服务器）<br>-C 开启4个进程<br>-d 以daemon形式运行<br>-l 记录日志<br>-P 记录pid<br>其他参数可以通过<br>/usr/local/tcpcopy/sbin/tcpcopy -h查看</p>
</blockquote>
<p>运行 tcpcopy 客户端，有几种可选方式：<br>/usr/local/tcpcopy/sbin/tcpcopy -x 80-192.168.42.164:80 -s 192.168.42.166 -d       #全流量复制<br>/usr/local/tcpcopy/sbin/tcpcopy -x 80-192.168.42.164:80 -s 192.168.42.166 -r 20 -d  #复制20%的流量<br>/usr/local/tcpcopy/sbin/tcpcopy -x 80-192.168.42.164:80 -s 192.168.42.166 -n 2 -d    #放大2倍流量</p>
<h1 id="在B机器上配置路由信息">在B机器上配置路由信息</h1><p>在测试机器上需要配置一条路由信息</p>
<blockquote>
<p>route add -net 10.10.10.0 netmask 255.255.255.0 gw 192.168.42.166</p>
</blockquote>
<h1 id="测试一下：">测试一下：</h1><p>我们在线上机器上启动apache：80端口，B机器上也启动apache:80端口，访问线上机器：<br><img src="/img/tcpcopy/apache.PNG" alt="Alt text"></p>
<h1 id="使用tcpdump的cap包，导入流量">使用tcpdump的cap包，导入流量</h1><p>很多情况下我们不能实时导线上流量，需要借助tcpdump先将流量保存下来，然后进行回放。<br><img src="/img/tcpcopy/tcpdump回放.PNG" alt="Alt text"></p>
<h2 id="tcpdump_获取pcap">tcpdump 获取pcap</h2><p>tcpdump -i eth0 -w online.pcap tcp and port 80 </p>
<blockquote>
<p>-i eth0:eth0为网卡，获取方式可在liunx系统下执行ifconfig查看所有的网卡，选取需要的那个。<br>-w online.pcap:为获取pcap文件进行回放，可设置路径，e.g. -w /home/user/test.pcap<br>tcp and port 80:截获端口为80的tcp请求，也可添加udp请求，和更改服务端口80，e.g. tcp and port 16001<br>-s 0:默认的话，tcpdump只显示部分数据包，-s snaplen是控制包长度的，默认是68字节，-s 0 则为全部字节，在使用过程中，如果添加-s则回放时会出现错误。可不使用该参数</p>
</blockquote>
<h2 id="回放">回放</h2><p>/usr/local/tcpcopy/sbin/tcpcopy -x 80-192.168.42.164:80 -s 192.168.42.166  -i /home/user/test.pcap</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>平时我们做的压力测试，很难去模拟线上复杂的真实流量，尤其里面混杂着各种奇异的异常流量。<br>所以，线下压的好好的系统，上线后可能就雪崩了。<br>tcpcopy可以解决以上问题， tcpcopy是一种流量的实时复制工具，可以将线上的流量引到测试环境上做测试。<br> 当然， tcpcopy也可以回放tcpdump的流量包。</p>]]>
    
    </summary>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[测试环境的docker实践]]></title>
    <link href="http://tonylit.me/2016/10/12/%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E7%9A%84docker%E5%AE%9E%E8%B7%B5/"/>
    <id>http://tonylit.me/2016/10/12/测试环境的docker实践/</id>
    <published>2016-10-12T03:37:27.000Z</published>
    <updated>2016-10-12T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>9月底，在焦点技术大会上做了docker方面的分享，<br>先前儿没经历过这么大场面的演讲，慌了好久。<br>讲完以后，回味起来，也没什么嘛，本可以讲的更好。</p>
<a id="more"></a>
<p>技术委员会也很有心，给出了分享后的反馈。<br><img src="/img/测试环境的docker实践/得分.PNG" alt="Alt text"></p>
<h2 id="演讲内容">演讲内容</h2><p><img src="/img/测试环境的docker实践/幻灯片1.jpg" alt="Alt text"><br><img src="/img/测试环境的docker实践/幻灯片2.jpg" alt="Alt text"><br><img src="/img/测试环境的docker实践/幻灯片3.jpg" alt="Alt text"><br><img src="/img/测试环境的docker实践/幻灯片4.jpg" alt="Alt text"><br><img src="/img/测试环境的docker实践/幻灯片5.jpg" alt="Alt text"><br><img src="/img/测试环境的docker实践/幻灯片6.jpg" alt="Alt text"><br><img src="/img/测试环境的docker实践/幻灯片7.jpg" alt="Alt text"><br><img src="/img/测试环境的docker实践/幻灯片8.jpg" alt="Alt text"><br><img src="/img/测试环境的docker实践/幻灯片9.jpg" alt="Alt text"><br><img src="/img/测试环境的docker实践/幻灯片10.jpg" alt="Alt text"><br><img src="/img/测试环境的docker实践/幻灯片11.jpg" alt="Alt text"><br><img src="/img/测试环境的docker实践/幻灯片12.jpg" alt="Alt text"><br><img src="/img/测试环境的docker实践/幻灯片13.jpg" alt="Alt text"><br><img src="/img/测试环境的docker实践/幻灯片14.jpg" alt="Alt text"><br><img src="/img/测试环境的docker实践/幻灯片15.jpg" alt="Alt text"><br><img src="/img/测试环境的docker实践/幻灯片16.jpg" alt="Alt text"><br><img src="/img/测试环境的docker实践/幻灯片17.jpg" alt="Alt text"><br><img src="/img/测试环境的docker实践/幻灯片18.jpg" alt="Alt text"><br><img src="/img/测试环境的docker实践/幻灯片19.jpg" alt="Alt text"><br><img src="/img/测试环境的docker实践/幻灯片20.jpg" alt="Alt text"><br><img src="/img/测试环境的docker实践/幻灯片21.jpg" alt="Alt text"><br><img src="/img/测试环境的docker实践/幻灯片22.jpg" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>9月底，在焦点技术大会上做了docker方面的分享，<br>先前儿没经历过这么大场面的演讲，慌了好久。<br>讲完以后，回味起来，也没什么嘛，本可以讲的更好。</p>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[高级性能测试工程师成长计划]]></title>
    <link href="http://tonylit.me/2016/10/12/%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%88%90%E9%95%BF%E8%AE%A1%E5%88%92/"/>
    <id>http://tonylit.me/2016/10/12/工程师成长计划/</id>
    <published>2016-10-12T03:37:27.000Z</published>
    <updated>2016-10-12T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>公司实施了【<strong>工程师成长计划</strong>】，<br>部门主管结合我所在职级和岗位（中级性能测试工程师），给出了成长计划，罗列出一些需要提升的技术方向。</p>
<a id="more"></a>
<h1 id="成长计划列表:">成长计划列表:</h1><p>注：</p>
<blockquote>
<p>超出，表示完全满足该要求，已经不需要刻意去培养相关能力，甚至可作为讲师给他人答疑/培训<br>达到，表示满足基本要求，可根据需要去提升相关能力<br>有差距，表示不满足该要求，需要尽快提升</p>
</blockquote>
<p><img src="/img/工程师成长计划/成长计划1.PNG" alt="Alt text"><br><img src="/img/工程师成长计划/成长计划2.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>公司实施了【<strong>工程师成长计划</strong>】，<br>部门主管结合我所在职级和岗位（中级性能测试工程师），给出了成长计划，罗列出一些需要提升的技术方向。</p>]]>
    
    </summary>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker容器监控]]></title>
    <link href="http://tonylit.me/2016/09/21/zabbix%20docker%20%E5%AE%B9%E5%99%A8%E7%9B%91%E6%8E%A7/"/>
    <id>http://tonylit.me/2016/09/21/zabbix docker 容器监控/</id>
    <published>2016-09-21T03:37:27.000Z</published>
    <updated>2016-09-21T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/zabbix-docker-容器监控/图标.PNG" alt="Alt text"><br>docker容器监控有很多方案，zabbix,docker stats、cadvisor、datadog、Scout…</p>
<p>这里总结两种监控工具：zabbix+docker+zabbix-docker-monitoring和InfluxDB+cAdvisor+Grafana。</p>
<p>如果公司中已有zabbix监控，可以直接加入zabbix-docker-monitoring即可。</p>
<p>InfluxDB+cAdvisor+Grafana，目前是业界docker监控应用挺多的监控体系，可以尝试尝试。</p>
<a id="more"></a>
<hr>
<p><strong>操作系统：centos7</strong></p>
<h1 id="zabbix+docker+zabbix-docker-monitoring">zabbix+docker+zabbix-docker-monitoring</h1><h2 id="mysql安装">mysql安装</h2><p>首先安装mysql数据库作为zabbix数据存储。</p>
<p>wget <a href="http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm" target="_blank" rel="external">http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</a></p>
<p>yum localinstall mysql57-community-release-el7-8.noarch.rpm</p>
<p>yum install mysql-community-server</p>
<p>启动mysql：</p>
<p>systemctl start mysqld</p>
<p>验证：</p>
<p>systemctl status mysqld</p>
<hr>
<h2 id="zabbix安装-docker-compose方式">zabbix安装-docker-compose方式</h2><h3 id="docker-compose安装">docker-compose安装</h3><p>下载：<br>sudo curl -L <a href="https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname" target="_blank" rel="external">https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname</a> -s<code>-</code>uname -m` -o /usr/local/bin/docker-compose</p>
<p>附权限：<br>sudo chmod +x /usr/local/bin/docker-compose</p>
<p>测试：<br>$ docker-compose –version</p>
<h3 id="zabbix-server安装">zabbix-server安装</h3><p>安装zabbix-server，编写docker-compose.yml：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">version</span>: <span class="string">'2'</span></span><br><span class="line"><span class="attribute">services</span>:</span><br><span class="line">  <span class="attribute">zabbix</span>:</span><br><span class="line">    <span class="attribute">image</span>: monitoringartist/zabbix-xxl</span><br><span class="line">    <span class="attribute">ports</span>:</span><br><span class="line">      - <span class="number">8080</span>:<span class="number">80</span></span><br><span class="line">      - <span class="number">10051</span>:<span class="number">10051</span></span><br><span class="line">    <span class="attribute">volumes</span>:</span><br><span class="line">      - /etc/<span class="attribute">localtime</span>:/etc/<span class="attribute">localtime</span>:ro</span><br><span class="line">    <span class="attribute">depends_on</span>:</span><br><span class="line">      - zabbix.db</span><br><span class="line">    <span class="attribute">environment</span>:</span><br><span class="line">      <span class="attribute">ZS_DBHost</span>: zabbix.db</span><br><span class="line">      <span class="attribute">ZS_DBUser</span>: zabbix</span><br><span class="line">      <span class="attribute">ZS_DBPassword</span>: zabbix_password</span><br><span class="line">  zabbix.<span class="attribute">db</span>:</span><br><span class="line">    <span class="attribute">image</span>: monitoringartist/zabbix-db-mariadb</span><br><span class="line">    <span class="attribute">volumes</span>:</span><br><span class="line">      - /<span class="attribute">backups</span>:/backups</span><br><span class="line">      - /etc/<span class="attribute">localtime</span>:/etc/<span class="attribute">localtime</span>:ro</span><br><span class="line">    <span class="attribute">volumes_from</span>:</span><br><span class="line">      - zabbix-db-storage</span><br><span class="line">    <span class="attribute">environment</span>:</span><br><span class="line">      <span class="attribute">MARIADB_USER</span>: zabbix</span><br><span class="line">      <span class="attribute">MARIADB_PASS</span>: zabbix_password</span><br><span class="line">  <span class="attribute">zabbix-db-storage</span>:</span><br><span class="line">    <span class="attribute">image</span>: <span class="attribute">busybox</span>:latest</span><br><span class="line">    <span class="attribute">volumes</span>:</span><br><span class="line">      - /var/lib/mysql</span><br></pre></td></tr></table></figure>
<p>执行docker-compose up即可。</p>
<hr>
<h3 id="zabbix-agent安装">zabbix-agent安装</h3><p>zabbix-agent安装不推荐使用docker镜像方式，因为不支持 docker.xnet 数据的监控。</p>
<p>执行脚本：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"><span class="hexcolor">#add</span> user</span><br><span class="line">groupadd zabbix</span><br><span class="line">useradd -g zabbix zabbix</span><br><span class="line"></span><br><span class="line"><span class="id">#agent</span> compile</span><br><span class="line">yum  install -y wget autoconf automake gcc subversion make pkg-config</span><br><span class="line">cd ~</span><br><span class="line">mkdir zabbix32</span><br><span class="line">cd zabbix32</span><br><span class="line">svn co svn:<span class="comment">//svn.zabbix.com/branches/3.2 .</span></span><br><span class="line">./bootstrap<span class="class">.sh</span></span><br><span class="line">./configure --enable-agent</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="id">#zabbix_module_docker</span><span class="class">.so</span> compile</span><br><span class="line">cd ~/zabbix32</span><br><span class="line">mkdir src/modules/zabbix_module_docker</span><br><span class="line">cd src/modules/zabbix_module_docker</span><br><span class="line">wget https:<span class="comment">//raw.githubusercontent.com/monitoringartist/Zabbix-Docker-Monitoring/master/src/modules/zabbix_module_docker/zabbix_module_docker.c</span></span><br><span class="line">wget https:<span class="comment">//raw.githubusercontent.com/monitoringartist/Zabbix-Docker-Monitoring/master/src/modules/zabbix_module_docker/Makefile</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">mkdir -<span class="tag">p</span> /usr/local/lib/zabbix/agent/</span><br><span class="line">cp zabbix_module_docker<span class="class">.so</span> /usr/local/lib/zabbix/agent/</span><br></pre></td></tr></table></figure>
<p>创建 /lib/systemd/system/zabbix-agentd.service 文件：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[Unit]</span></span><br><span class="line"><span class="setting">Description=<span class="value">Zabbix Agent</span></span></span><br><span class="line"><span class="setting">After=<span class="value">syslog.target</span></span></span><br><span class="line"><span class="setting">After=<span class="value">network.target</span></span></span><br><span class="line"><span class="title"></span><br><span class="line">[Service]</span></span><br><span class="line"><span class="setting">Environment=<span class="value"><span class="string">"CONFFILE=/usr/local/etc/zabbix_agentd.conf"</span></span></span></span><br><span class="line"><span class="setting">Type=<span class="value">forking</span></span></span><br><span class="line"><span class="setting">Restart=<span class="value"><span class="keyword">on</span>-failure</span></span></span><br><span class="line"><span class="setting">PIDFile=<span class="value">/tmp/zabbix_agentd.pid</span></span></span><br><span class="line"><span class="setting">KillMode=<span class="value">control-group</span></span></span><br><span class="line"><span class="setting">ExecStart=<span class="value">/usr/local/sbin/zabbix_agentd -c <span class="variable">$CONFFILE</span></span></span></span><br><span class="line"><span class="setting">ExecStop=<span class="value">/bin/kill -SIGTERM <span class="variable">$MAINPID</span></span></span></span><br><span class="line"><span class="setting">RestartSec=<span class="value"><span class="number">10</span>s</span></span></span><br><span class="line"><span class="title"></span><br><span class="line">[Install]</span></span><br><span class="line"><span class="setting">WantedBy=<span class="value">multi-user.target</span></span></span><br></pre></td></tr></table></figure>
<p>修改 zabbix-agentd 配置文件 /usr/local/etc/zabbix_agentd.conf 中的几个参数:</p>
<p>启动zabbix-agent：</p>
<p>sudo systemctl enable zabbix-agentd.service<br>systemctl start zabbix-agentd.service</p>
<p>验证：</p>
<p>sudo systemctl status zabbix-agentd.service</p>
<p>ok, 以上server和agent安装完成 </p>
<hr>
<h2 id="登录配置zabbix">登录配置zabbix</h2><p>浏览器访问<a href="http://ZabbixServerIP:Port，账号密码：Admin/zabbix。" target="_blank" rel="external">http://ZabbixServerIP:Port，账号密码：Admin/zabbix。</a><br><img src="/img/zabbix-docker-容器监控/zabbix-login.PNG" alt="Alt text"></p>
<p>在配置-&gt;模板中导入docker监控模板：<a href="https://github.com/monitoringartist/grafana-zabbix-dashboards/blob/master/overview-docker/zabbix-template-app-docker.xml" target="_blank" rel="external">zabbix-template-app-docker.xml</a></p>
<p>在配置-&gt;主机-&gt;模板中选择该模板，更新即可。</p>
<hr>
<h1 id="InfluxDB+cAdvisor+Grafana">InfluxDB+cAdvisor+Grafana</h1><h2 id="安装influxDB">安装influxDB</h2><p>docker run -d -p 8083:8083 -p 8086:8086 –expose 8090 –expose 8099 –name influxsrv tutum/influxdb</p>
<p>influxdb容器运行成功后，访问<a href="http://docker-host-ip:8083后台管理界面。用户名：root" target="_blank" rel="external">http://docker-host-ip:8083后台管理界面。用户名：root</a>, 密码：root。</p>
<hr>
<h3 id="创建数据库信息：">创建数据库信息：</h3><p><img src="/img/zabbix-docker-容器监控/influxdb.PNG" alt="Alt text"></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 创建数据库</span><br><span class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> <span class="string">'cadvisor'</span>;</span> </span><br><span class="line"></span><br><span class="line"># 创建用户</span><br><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">"cadvisor"</span> <span class="keyword">WITH</span> <span class="keyword">PASSWORD</span> <span class="string">'cadvisor'</span> <span class="keyword">WITH</span> ALL <span class="keyword">PRIVILEGES</span></span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="安装cAdvisor">安装cAdvisor</h2><p>docker run –volume=/:/rootfs:ro  –volume=/var/run:/var/run:rw   –volume=/sys:/sys:ro   –volume=/var/lib/docker/:/var/lib/docker:ro   -p 8080:8080   –detach=true   –link influxsrv:influxsrv   –name=cadvisor   google/cadvisor:v0.24.1   -storage_driver=influxdb   -storage_driver_db=cadvisor   -storage_driver_host=influxsrv:8086</p>
<p>cAdvisor容器启动后，访问<a href="http://docker-host-ip:8080，便可以查看cAdvisor监控工具所收集到的Docker主机和容器的资源统计信息。" target="_blank" rel="external">http://docker-host-ip:8080，便可以查看cAdvisor监控工具所收集到的Docker主机和容器的资源统计信息。</a></p>
<p><img src="/img/zabbix-docker-容器监控/acdvisor.PNG" alt="Alt text"></p>
<hr>
<h2 id="安装Grafana">安装Grafana</h2><p>docker run -d -p 3000:3000 -e INFLUXDB_HOST=localhost -e INFLUXDB_PORT=8086 -e INFLUXDB_NAME=cadvisor -e INFLUXDB_USER=root -e INFLUXDB_PASS=root –link influxsrv:influxsrv –name grafana grafana/grafana</p>
<p>Web访问<a href="http://docker-host-ip:3000,登录Grafana管理平台。" target="_blank" rel="external">http://docker-host-ip:3000,登录Grafana管理平台。</a><br>用户名：admin<br>密 码：admin</p>
<p> <img src="/img/zabbix-docker-容器监控/grafana.PNG" alt="Alt text"></p>
<hr>
<h2 id="配置Grafana与influxDB数据库连接">配置Grafana与influxDB数据库连接</h2><h3 id="添加Gtrafana数据源">添加Gtrafana数据源</h3><p><img src="/img/zabbix-docker-容器监控/dbsource.PNG" alt="Alt text"></p>
<p>如果出现502.请关闭防火墙再试。</p>
<hr>
<h3 id="添加Dashboard">添加Dashboard</h3><p>在Dashboard面板中选择相应的组件并拖动到相关的位置。</p>
<p><img src="/img/zabbix-docker-容器监控/dashboard.PNG" alt="Alt text"></p>
<p>做一些sql配置即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/zabbix-docker-容器监控/图标.PNG" alt="Alt text"><br>docker容器监控有很多方案，zabbix,docker stats、cadvisor、datadog、Scout…</p>
<p>这里总结两种监控工具：zabbix+docker+zabbix-docker-monitoring和InfluxDB+cAdvisor+Grafana。</p>
<p>如果公司中已有zabbix监控，可以直接加入zabbix-docker-monitoring即可。</p>
<p>InfluxDB+cAdvisor+Grafana，目前是业界docker监控应用挺多的监控体系，可以尝试尝试。</p>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker-possible memory allocation deadlock in kmem_alloc]]></title>
    <link href="http://tonylit.me/2016/09/20/docker-io-blocked/"/>
    <id>http://tonylit.me/2016/09/20/docker-io-blocked/</id>
    <published>2016-09-20T03:37:27.000Z</published>
    <updated>2016-09-20T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>有几台宿主机使用的devicemapper存储，io经常blocked，负载一直飙升。<br>查看/var/log/messages 日志发现报错：<br><img src="/img/xfs-blocked.PNG" alt="Alt text"></p>
<a id="more"></a>
<h1 id="解决方法:">解决方法:</h1><p>echo 3 &gt; /proc/sys/vm/drop_caches</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有几台宿主机使用的devicemapper存储，io经常blocked，负载一直飙升。<br>查看/var/log/messages 日志发现报错：<br><img src="/img/xfs-blocked.PNG" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker overlayfs]]></title>
    <link href="http://tonylit.me/2016/08/23/docker%20overlayfs/"/>
    <id>http://tonylit.me/2016/08/23/docker overlayfs/</id>
    <published>2016-08-23T03:37:27.000Z</published>
    <updated>2016-08-23T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>环境：centos7.2，3.18以上内核版本，docker1.12</p>
<a id="more"></a>
<p>内核3.18以下的升级吧，3.10虽说也有overlay，但不是一回事儿。</p>
<h1 id="升级内核到3-18以上">升级内核到3.18以上</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> rpm --import https:<span class="comment">//www.elrepo.org/RPM-GPG-KEY-elrepo.org</span></span><br><span class="line"><span class="number">2.</span> rpm -Uvh http:<span class="comment">//www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span></span><br><span class="line"><span class="number">3.</span> yum --enablerepo=elrepo-kernel install  kernel-ml-devel kernel-ml -y</span><br><span class="line"><span class="number">4.</span> grub2-<span class="built_in">set</span>-<span class="keyword">default</span> <span class="number">0</span></span><br><span class="line"><span class="number">5.</span> reboot</span><br></pre></td></tr></table></figure>
<p>重启好确认下内核版本是否成功升级。</p>
<h1 id="docker配置">docker配置</h1><p>在/lib/systemd/system/docker.service 配置文件中修改存储方式：</p>
<blockquote>
<p>ExecStart=/usr/bin/docker daemon  –storage-driver=overlay  –insecure-registry=docker.vemic.com -H 0.0.0.0:2375 -H fd://</p>
</blockquote>
<p>重启docker<br><img src="/img/overlayfs.PNG" alt="Alt text"></p>
<p>存储位置：/var/lib/docker/overlay</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>环境：centos7.2，3.18以上内核版本，docker1.12</p>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用strace定位性能问题]]></title>
    <link href="http://tonylit.me/2016/08/15/%E4%BD%BF%E7%94%A8strace%E5%AE%9A%E4%BD%8D%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98/"/>
    <id>http://tonylit.me/2016/08/15/使用strace定位性能问题/</id>
    <published>2016-08-15T03:37:27.000Z</published>
    <updated>2016-08-15T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>要给php的应用做性能测试，<br>对php不熟，问题定位的时候很惆怅，<br>不知道有什么好用php分析工具（类似jvm的jprofile jconsole jstack）。<br>还好有万能函数调用工具：strace和ltrace。<br>(1) strace —— Trace system calls and signals （跟踪一个进程的系统调用或信号产生的情况）<br>(2) ltrace —— A library call tracer （跟踪进程调用库函数的情况）</p>
<a id="more"></a>
<h1 id="项目背景">项目背景</h1><p>目标站点xxx.xxx.com访问量稍高就会出现无法打开的现象。</p>
<h1 id="服务器配置">服务器配置</h1><p>虚拟机：4核CPU+7G内存<br>php版本：php-5.4.41 </p>
<h1 id="压测结果">压测结果</h1><p>20用户并发（带思考时间）<br>响应时间不高，单是cpu和负载已经彪到很高了，cpu &gt;90%，负载&gt;11。<br><img src="/img/使用strace定位性能问题/top.png" alt="Alt text"></p>
<p>数据库基本无负载，说明压力没到数据库，都在应用上面。<br>可想而知，如果50个、100个用户访问操作，会崩到什么样子。</p>
<h1 id="使用strace定位问题">使用strace定位问题</h1><ol>
<li>找到cpu占用最高的进程<blockquote>
<p>top<br>top -Hp pid</p>
</blockquote>
</li>
</ol>
<ol>
<li>strace -cp [pid] ，查看cpu占用最频繁的调用情况（图中的pid跟上图的没关系，运行了两次，这是第二次的pid）<br><img src="/img/使用strace定位性能问题/strace.PNG" alt="Alt text"></li>
</ol>
<p>可以看到read和lseek调用占用80%以上的cpu。</p>
<ol>
<li>strace -o output.txt -T -tt -e trace=all -p [pid]<br>查看具体调用<br><img src="/img/使用strace定位性能问题/output.PNG" alt="Alt text"></li>
</ol>
<p>定位到文件操作上面有瓶颈，直接缩小了范围。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>要给php的应用做性能测试，<br>对php不熟，问题定位的时候很惆怅，<br>不知道有什么好用php分析工具（类似jvm的jprofile jconsole jstack）。<br>还好有万能函数调用工具：strace和ltrace。<br>(1) strace —— Trace system calls and signals （跟踪一个进程的系统调用或信号产生的情况）<br>(2) ltrace —— A library call tracer （跟踪进程调用库函数的情况）</p>]]>
    
    </summary>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker network 网络设置]]></title>
    <link href="http://tonylit.me/2016/08/15/docker%20network%20%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/"/>
    <id>http://tonylit.me/2016/08/15/docker network 网络设置/</id>
    <published>2016-08-15T03:37:27.000Z</published>
    <updated>2016-08-15T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>测试环境，docker容器替换vmware已经落地，<br>网络配置之前使用的自建网桥+pipework修改容器ip的方式，<br>适用一段时间发现有问题：容器内eth0为docker自己分配的ip，eth1为pipework配置的ip。<br><img src="/img/dockerip.PNG" alt="Alt text"><br>无奈，公司服务化应用将eth0的ip上报zk，导致两台不同物理机上的服务化应用相互找不到。</p>
<a id="more"></a>
<p>使用docker network(1.9以后新特性)解决该问题。</p>
<h1 id="新建docker网桥：">新建docker网桥：</h1><blockquote>
<p>docker network create –subnet=192.168.42.0/24 -d=bridge   –gateway=192.168.42.3  mynetwork</p>
</blockquote>
<h1 id="启动网桥并把网卡桥接上">启动网桥并把网卡桥接上</h1><blockquote>
<p>ifconfig   br-353aab8b89f2  up 0<br>brctl   addif  br-353aab8b89f2 eth1</p>
</blockquote>
<h1 id="docker启动时指定ip和网桥">docker启动时指定ip和网桥</h1><blockquote>
<p>docker  run -it –rm  –ip=192.168.42.130  –net=mynetwork  docker.vemic.com/focustest/centos5:6.18 /bin/bash</p>
</blockquote>
<p>以上就可以了，不再需要pipework修改网络。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>测试环境，docker容器替换vmware已经落地，<br>网络配置之前使用的自建网桥+pipework修改容器ip的方式，<br>适用一段时间发现有问题：容器内eth0为docker自己分配的ip，eth1为pipework配置的ip。<br><img src="/img/dockerip.PNG" alt="Alt text"><br>无奈，公司服务化应用将eth0的ip上报zk，导致两台不同物理机上的服务化应用相互找不到。</p>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Gatling脚本编写]]></title>
    <link href="http://tonylit.me/2016/08/05/Gatling%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99/"/>
    <id>http://tonylit.me/2016/08/05/Gatling脚本编写/</id>
    <published>2016-08-05T03:37:27.000Z</published>
    <updated>2016-08-05T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>Gatling基于Scala开发的压测工具，脚本可以录制也可以自己编写。<br>脚本比较简单常用的没几个，另外gatling封装的也很好我们不需要去专门学习Scala语法。</p>
<p>官网上面有完善参考文档：<br><a href="http://gatling.io/docs/2.2.2/" target="_blank" rel="external">Reference documentation</a><br><a href="http://gatling.io/#/cheat-sheet/2.2.2" target="_blank" rel="external">Gatling’s Cheat sheet</a></p>
<a id="more"></a>
<h1 id="脚本编写">脚本编写</h1><p><a href="https://segmentfault.com/a/1190000005067519" target="_blank" rel="external">Gatling教程系列一简单GET请求测试</a><br><a href="https://segmentfault.com/a/1190000005069468" target="_blank" rel="external">Gatling教程系列一实现GET请求动态参数</a><br><a href="https://segmentfault.com/a/1190000005070213" target="_blank" rel="external">Gatling教程系列一实现POST请求测试</a></p>
<h1 id="官网翻译">官网翻译</h1><p><a href="https://testerhome.com/topics/3633" target="_blank" rel="external">QuickStart</a><br><a href="https://testerhome.com/topics/4028%20https://testerhome.com/joshua/topics" target="_blank" rel="external">Advanced Tutoria</a><br><a href="http://blog.csdn.net/dongmu1986/article/details/50515581" target="_blank" rel="external">Concepts</a><br><a href="https://testerhome.com/topics/4094" target="_blank" rel="external">Simulation Setup</a><br><a href="http://blog.csdn.net/dongmu1986/article/details/50637238" target="_blank" rel="external">Simulation Structure</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Gatling基于Scala开发的压测工具，脚本可以录制也可以自己编写。<br>脚本比较简单常用的没几个，另外gatling封装的也很好我们不需要去专门学习Scala语法。</p>
<p>官网上面有完善参考文档：<br><a href="http://gatling.io/docs/2.2.2/">Reference documentation</a><br><a href="http://gatling.io/#/cheat-sheet/2.2.2">Gatling’s Cheat sheet</a></p>]]>
    
    </summary>
    
      <category term="Gatling" scheme="http://tonylit.me/tags/Gatling/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[性能测试指南]]></title>
    <link href="http://tonylit.me/2016/08/04/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E6%8C%87%E5%8D%97/"/>
    <id>http://tonylit.me/2016/08/04/性能测试指南/</id>
    <published>2016-08-04T03:37:27.000Z</published>
    <updated>2016-08-04T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>平时做性能测试工作，经常拜读性能著作，taobao的白皮书，京东的性能测试指南等，<br>常常翻阅，有所感悟，在此整理一番，以备后用。</p>
<a id="more"></a>
<hr>
<h1 id="引言">引言</h1><p>性能测试指南的目的在于授人以渔而不是授人以鱼，通过在此指引下，能够独立完成性能测试，<br>掌握性能测试过程中所需要的工具、技能、方法等。积累相关的性能测试经验，并提升测试人员自身的技能。</p>
<hr>
<h1 id="性能测试的概念">性能测试的概念</h1><p>在正常、峰值以及异常负载条件下，测试系统的各项性能指标。<br>通过自动化的测试工具模拟进行。</p>
<hr>
<h1 id="术语">术语</h1><h3 id="并发用户数">并发用户数</h3><p>在同一时刻与服务器进行了交互的在线用户数量</p>
<h3 id="响应时间">响应时间</h3><p>客户发出请求到得到响应的整个过程的时间。一般他可以分为三部分：呈现时间，数据传输时间和系统处理时间</p>
<h3 id="吞吐量">吞吐量</h3><p>一次性能测试过程中网络上传输的数据量的总和</p>
<h3 id="每秒处理事务数(TPS)">每秒处理事务数(TPS)</h3><p>每秒钟系统能够处理事务或交易的数量，它是衡量系统处理能力的重要指标。</p>
<h3 id="点击率">点击率</h3><p>点击率可以看做是TPS的一种特定情况。每秒钟用户向web服务器提交的HTTP请求数。</p>
<h3 id="事务成功率">事务成功率</h3><p>本次测试中出现成功的事务数量/事务的总数</p>
<h3 id="并发">并发</h3><p><strong>并发分为狭义和广义两类。</strong><br>狭义的并发，即<strong>所有的用户在同一时刻做同一件事情或操作</strong>，这种操作一般针对同一类型的业务，或者所有用户进行完全一样的操作，比如双11的秒杀活动，目的是测试数据库和程序对并发操作的处理。<br>广义的并发，即<strong>多个用户对系统发出了请求或者进行了操作，但是这些请求或操作可以是不同的</strong>。对整个系统而言，仍然有很多用户同时进行操作，大多数场景都是广义并发，比较接近用户在系统上的操作行为。<br>做性能测试时，一般先做广义并发，再做狭义并发。</p>
<hr>
<h1 id="性能测试类型">性能测试类型</h1><p>在做性能测试之前，需要明白以下4中测试类型。</p>
<blockquote>
<p>1.性能测试。<br>2.负载测试。<br>3.压力测试。<br>4.稳定性测试。</p>
</blockquote>
<p>我们的系统随着单位时间流量的不断增长，压力不断增大，服务器资源会不断被消耗，TPS值会因为这些因素而发生变化，而且符合一定的规律。（建议看看<a href="http://www.cnblogs.com/jackei/archive/2006/11/20/565527.html" target="_blank" rel="external">理发师模型</a>）<br><img src="/img/性能测试指南/性能测试类型.PNG" alt="Alt text"></p>
<blockquote>
<p>a点：性能期望值<br>b点：高于期望，系统资源处于临界点(eg.cpu 50%,load:cpu*0.7)<br>c点：高于期望，性能处于拐点<br>d点：超过负载，资源不够用，系统处于崩溃</p>
</blockquote>
<h2 id="性能测试">性能测试</h2><p>a点到b点之间的系统性能</p>
<p><strong>简述：</strong><br>性能测试是指通过模拟生产运行的业务压力量和使用场景组合，测试系统的性能是否满足生产性能要求。<br><strong>目的：</strong><br>验证系统是否有其要求达到的能力。<br><strong>特点：</strong><br>对系统性能已经有了解的前提，对需求有明确的目标，并在已经确定的环境下进行的。<br><strong>关注点及产出</strong><br>关注的是系统性能是否和具体的性能需求相一致，而当系统性能超过性能需求的时候，系统的表现并不是测试人员关心的重点。</p>
<h2 id="负载测试">负载测试</h2><p>b点的系统性能</p>
<p><strong>简述：</strong><br>狭义的负载测试，是指对系统不断地增加压力或增加一定压力下的持续时间，直到系统的某项或多项性能指标达到安全临界值，例如某种资源已经达到饱和状态等。<br><strong>目的:</strong><br>找到系统处理能力的极限。了解系统的性能容量，或是配合性能调优来使用。<br><strong>关注点及产出</strong><br>1.得出线下系统最有TPS。<br>2.得出线下系统最有TPS时系统资源利用率。<br>3.得出线下系统极限并发数。</p>
<h2 id="压力测试">压力测试</h2><p>b点到d点之间</p>
<p><strong>简述：</strong><br>是指超过安全负载的情况下，对系统不断施加压力，是通过确定一个系统的瓶颈或不能接收用户请求的性能点，来获得系统能提供的最大服务级别的测试<br><strong>目的：</strong><br>检查系统处于大压力性能下时，应用的表现。<br><strong>特点：</strong><br>一般通过模拟负载等方法，使得系统的资源使用达到较高的水平。<br><strong>关注点及产出</strong><br>发现功能测试不能发现的非功能性缺陷。<br>1.得出线下系统崩溃点的TPS。<br>2.得出线下系统崩溃时资源使用率<br>3.得出线下系统极限并发数</p>
<h2 id="稳定性测试">稳定性测试</h2><p>c点的系统性能</p>
<p><strong>简述：</strong><br>在给系统加载到性能拐点（tps最大值）情况下，使系统运行一段时间（一般为4小时），以此检测系统是否稳定。<br><strong>目的：</strong><br>主要目的是验证是否支持长期稳定的运行。<br><strong>关注点及产出</strong><br>关注系统稳定性。<br>得出系统稳定状态下的资源利用、连接池、TPS、响应时间、DB健康情况等数据。</p>
<hr>
<h1 id="性能测试基本流程">性能测试基本流程</h1><p>性能测试工作开展流程，见图：<br><img src="/img/性能测试指南/性能测试流程.png" alt="Alt text"></p>
<h2 id="性能需求分析">性能需求分析</h2><p>性能需求分析是整个性能测试工作开展的基础，如果连性能的需求都没弄清楚，后面的性能测试工具以及执行就无从谈起了。<br>在这一阶段，性能测试人员需要与项目人员进行沟通，同时收集各种项目资料，对系统进行分析，确认测试的目标。并将其转化为可衡量的具体性能指标。</p>
<h3 id="性能需求评估">性能需求评估</h3><p>项目组人员对性能测试业务点没有很好的概念，判断是否进行性能测试可以从以下几个方面进行思考：</p>
<blockquote>
<ol>
<li>从业务角度来分析。<br>如果一个项目上去后使用的人数比较多，量比较大，就有做性能测试的必要，反之，如果一个项目上线后，没有几个人在用，无论系统多大，设计如何复杂，并发性的性能测试是没有必要做的，前期可以否决。</li>
<li>从系统架构角度来分析。<br>如果一个系统采用的框架是老的系统框架，只是在此框架上增加一些应用，其实是没有必要做性能测试。如果一个系统采用的是一种新的框架，可以考虑做负载测试。</li>
<li>从实时性角度来分析。<br>如果一个项目要求某个功能的响应时间，这个有作并发测试的可能性，在大并发量的场景下，查看这个功能的响应时间。</li>
<li>从数据库角度分析。<br>很多情况下，性能测试是大数据量的并发访问、修改数据库，而瓶颈在于连接数据库池的数量，而非数据库本身的负载、吞吐能力。这时，可以结合DBA的建议，来决定是否来做性能测试。</li>
</ol>
</blockquote>
<p>如果要进行性能测试，接下来我们就需要确定相应的性能点。主要从以下 4 个维度进行确定：</p>
<blockquote>
<ol>
<li>关键业务。<br>首要维度，是确定被测项目是否属于关键业务，有哪些主要的业务逻辑点，特别是跟交易相关的功能点。</li>
<li>日请求量。<br>如果日请求量很高，系统压力很大，而且又是关键业务，该项目需要做性能测试；而且其关键业务点，可以被确定为性能点。</li>
<li>逻辑复杂度。<br>如果一个主要业务的日请求量不高，但是逻辑很复杂，则也需要通过性能测试。原因是，在分布式方式的调用中，当某一个环节响应较慢，就会影响到其它环节，造成雪崩效应。</li>
<li>运营推广计划。<br>未雨绸缪、防患于未然、降低运营风险是性能测试的主要目标。被测系统的性能不仅能满足当前压力，更需要满足未来一定时间段内的压力。因此，事先了解运营推广计划，对性能点的制定有很大的作用。<br>例如，运营计划做活动，要求系统每天能支撑多少 PV、多少 UV，或者一个季度后，需要能支撑多大的访问量等等数据。<br>5.其它<br>例如，当一个功能点不满足以上 4 个维度，但又属于内存高消耗、CPU高消耗时，也可列入性能测试点行列。</li>
</ol>
</blockquote>
<p><strong>最终，需要明确以下几点：</strong><br>1.测试业务点，细化到每一步骤<br>2.测试环境搭建（项目组提供还是性能测试人员搭建），测试环境与正式版按比例配置，配置文件同正式版<br>3.测试指标：TPS、并发用户数、响应时间等<br>4.测试数据，按正式版配比，参数化数据至少为并发数的2倍，由项目组准备数据<br>5.测试类型确定：至少做性能测试和稳定性测试，其他测试类型需要确认。<br>6.测试时间点</p>
<h2 id="性能测试准备">性能测试准备</h2><p>主要包括：设计场景，根据场景编写程序、编写脚本、准备测试环境，构造测试数据，环境预调优等；<br>测试数据的设计也是一个重点且容易出问题的地方。生成测试数据量达到未来预期数量只是最基础的一步，更需要考虑的是数据的分布是否合理，需要仔细的确认程序中使用到的各种查询条件，这些重点列的数值要尽可能的模拟真实的数据分布， 否则测试的结果可能是无效的。<br>预调优指根据系统的特点和团队的经验，提前对系统的各个方面做一些优化调整，避免测试执行过程中的无谓返工。比如一个高并发的系统，10000人在线，连接池和线程池的配置还用默认的，显然是会测出问题的。</p>
<h2 id="执行性能测试">执行性能测试</h2><p>执行阶段工作主要包含两个方面的内容：一是执行测试用例模型，包括执行脚本和场景；其次测试过程监控，包括测试结果、记录性能指标和性能计数器的值</p>
<h2 id="结果分析与性能调优">结果分析与性能调优</h2><p>发现问题或者性能指标达不到预期，及时的分析定位，处理后重复测试过程。性能问题通常是相互关联相互影响的，表面上看到的现象很可能不是根本问题，而是另一处出现问题后引起的反应。这就要求监控收集数据时要全面，从多方面多个角度去判断定位。调优的过程其实也是一种平衡的过程，在系统的多个方面达到一个平衡即可。</p>
<h2 id="性能报告与总结">性能报告与总结</h2><p>编写性能测试报告，阐明性能测试目标、性能结果、测试环境、数据构造规则、遇到的问题和解决办法等。并对此次性能测试经验进行总结与沉淀。</p>
<p>   上面所有内容中，如果排除技术上的问题，性能测试中最难做好的，就是<strong>用户模型的分析</strong>。它直接决定了压力测试场景是否能够有效的模拟真实世界压力，而正是这种对真实压力的模拟，才使性能测试有了更大的意义。可以说，性能测试做到一定程度，差距就体现在了模型建立上。<br>　　至于性能问题的分析、定位或者调优，很大程度是一种技术积累，需要多方面的专业知识。</p>
<hr>
<h1 id="性能测试模型">性能测试模型</h1><p>以下引用taobao和网银在线模型分析方法，基本思路都一样。</p>
<h2 id="taobao性能模型分析">taobao性能模型分析</h2><p><strong>PV计算模型</strong><br>为了让性能测试的PV计算更接近生产线真实情况，利用现有最新的数据得出性能测试PV的计算公式。<br>首先，通过<a href="http://monitor.taobao.com采集现有数据，下图所示的是任意选择一天得到的分布图，" target="_blank" rel="external">http://monitor.taobao.com采集现有数据，下图所示的是任意选择一天得到的分布图，</a> 6:00AM到次日的6:00AM，共24小时。<br><img src="/img/性能测试指南/taobao-分布图.PNG" alt="Alt text"></p>
<p>经过长期监控，发现任何一天的分布图都与上图类似，故将这种分布视为整个淘宝网的浏览量分布。<br>其次，进行数据统计：为了和目前真实情况更接近，选择最近一段时间的数据分布来做样本，<br>记录下系统能够监控到的最短时间间隔的数据，考察其值的走势，并且找出每一天的最大值，抽样出每个时刻的值与当天最大值的比例，以此比例值的趋势，得出数据分布趋势，如下图所示：<br>监控系统最精确可以采集到每3分钟的数据，一天24小时可以采集到480个点<br><img src="/img/性能测试指南/taobao-分布图2.PNG" alt="Alt text"></p>
<p>采用微积分思想，将每个时间点视为一个矩形，可以通过求和的方式求出整个分布图的面积，如下图所示：<br><img src="/img/性能测试指南/淘宝-分布图3.PNG" alt="Alt text"></p>
<p><strong>根据80/20原理</strong>，找出占据总体面积80%所用的时间，再计算出平均PV量。<br>选择尽可能大的点计算出占据总体80%的面积，发现点的个数是240，那么意味着此时间长度为总时间长度的50%，则<strong>80/20原则在此可以转换成80/50原则</strong>，则有<br>每台服务器每秒平均PV量 = (80%<em>总PV)/(24</em>60<em>60</em>(240/480))/服务器数量。<br>整理后得：<strong>每台服务器每秒平均PV量 = (1.6<em>总PV)/ (24</em>60*60) /服务器数量</strong>。进而计算出占总面积80%的PV平均值与整个图中的最高峰值的比，可以得出<strong>最高峰的PV量是1.2倍的平均PV量</strong>。<br>即          每台服务器每秒高峰PV量 = (1.2<em>1.6</em>总PV)/(24<em>60</em>60) /服务器数量。<br>整理后得：          <strong>每台服务器每秒高峰PV量= (1.92<em>总PV)/(24</em>60*60) /服务器数量</strong>。</p>
<h3 id="PV-&gt;TPS转换模型">PV-&gt;TPS转换模型</h3><p>为了使PV在性能测试环境下可量化，根据PV的概念，通过以下方式将其转换成TPS。</p>
<blockquote>
<p>1.性能测试脚本中，只保留与性能点相关的内容，异步处理的，保留多个请求，从而确保压力目标。<br>2.在执行场景中，不模拟浏览器缓存，确保每次请求都到达应用服务器，使得LoadRunner的一个请求等同于一个PV。<br>3.在执行场景中，每次迭代，都模拟一个新用户，而且清除用户缓存信息，确保每个用户每次发送请求都是全新的。</p>
</blockquote>
<p>结论：通过以上三步，将PV转化成性能测试工具可识别的TPS。换言之，1PV=1TPS。</p>
<h3 id="TPS-&gt;并发用户数">TPS-&gt;并发用户数</h3><p>根据公式：并发用户数=TPS/响应时间，项目组给出响应时间，然后计算出并发用户。</p>
<h2 id="网银在线性能模型分析">网银在线性能模型分析</h2><p>根据支付宝订单数来做建模demo：</p>
<p>双11当天，支付宝的订单数是1.8亿笔，意味着每小时订单数达到1.8亿 / 24 = 750万笔，也意味着每秒订单数达到750万 / 3600 = <strong>2083笔</strong>。</p>
<p>首先，让我们先来看看吞吐率指标（TPS），假设支付宝有100台前置服务器，分到每台机器就是每秒处理订单2083笔 / 100 = 20笔。</p>
<p>这是不是意味着只要单台服务器的性能达到<strong>20 tps</strong>，我们的线上服务就足以支撑每天1.8亿的交易量呢？<br>答案<strong>显然不是</strong>。</p>
<p>我们先来看看淘宝网每天交易量分布图：<br><img src="/img/性能测试指南/taobao-分布图.PNG" alt="Alt text"></p>
<p>可以看到，交易量并不是24小时平均分布的，从早上8点开始到晚上12点才是交易量发生的主要时间段，也就是说实际上每天只有2/3的时间（16小时）才是有效时间。我们的性能指标应该调整到20tps * 150% = 30tps。</p>
<p>即使是16个小时中，交易量也不是平均的，在午饭和晚饭时间会出现两个波谷，晚上8点到11点之间是一天的最高峰。最高峰大约是平均值的1.2倍，如果我们不想损失掉高峰时期的交易量的话，我们的吞吐率指标需要再上调到30tps * 1.2 = 36tps。</p>
<p>以上只是一个普通日子的交易量分布情况，如果有某些重大活动事件，比如限时抢购、定时秒杀等活动，那么我们很可能在短时间承受几倍甚至十几倍的压力。如下图是京东某年某活动当天的交易量分布图：<br><img src="/img/性能测试指南/jd-分布图.PNG" alt="Alt text"><br>总体交易量是<strong>平日的几倍到十几倍</strong>，交易量从零点开始就达到一个小高峰，凌晨2点后逐渐降到冰点，早上8点又开始了一天的持续热度，<br>下午7点出现一个小波谷紧接着就迎来了晚上11点左右的最高峰。对于这种特别庞大的活动我们需要提前做好性能预案，以往的数据就是我们最好的参考。</p>
<p>通常来讲，我们对于系统的性能要求在每天高峰时期的1.5倍到4倍，如果按2倍计算，那么我们的吞吐率指标就继续上调到 36tps <em> 2 = <em>*72tps</em></em>。</p>
<p>好了，单台服务器的性能达标了72tps。但是100台服务器加起来就能承载 72tps * 100 = 7200tps吗？ </p>
<p>比较难，这依赖于我们的负载均衡算法。假设我们有一个还不错的算法，但也不能保证长时间绝对的公平，所以单台服务器还需要做好压力波动的缓冲，<br>如果按1.5倍计算，这样我们的指标又要上调到72tps<em>150% = <em>*98tps</em></em>。</p>
<p>这里，我们已经把对单台服务器的性能指标从20tps逐渐上调到近100tps，是原来的5倍。当然这里还远没有结束。这1.8亿笔只是单一的下单操作的PV，<br>假设用户每下单一笔，需要伴随着10次查询，3次提交，那么我们的服务器需要再评估其他或查询或提交的性能。假设这些其他附带请求的压力总和可能还得增大5倍，即达到98tps <em> 5 = <em>*500tps</em></em>。</p>
<h3 id="TPS计算公式">TPS计算公式</h3><p>线下单机基线TPS =线上日均交易量 / 86400 / 机器数 <em> 160% </em> F </p>
<blockquote>
<p>注：86400为一天的秒数。<br>注：假设硬件软件环境条件大致相同。<br>注：F为影响因子，默认为1 。</p>
</blockquote>
<p>关键系数160%的由来，简单点讲就是在每天约50%的时间里完成了80%的工作，80% / 50% = 160%。</p>
<p>该公式还只是最简单场景的抽象，真实的情况可能会很复杂（详见前面的数据示例分析），不过作为线下基线TPS来讲具备很重要的参考意义。</p>
<p>线下基线TPS代表着为了达到线上的交易量，我们线下至少应该满足的性能指标。我们在做性能测试和评估的时候，基线TPS是一定要体现并首先要达到的目标。</p>
<p>影响因子F是一个经验值，也是需要不断调优的，线上与线下的软硬件环境不同都会导致F值的变化，甚至不同的业务线可以有不同的值。当我们的性能沙箱建立、性能闭环成型之后，会更加稳定下来。</p>
<h2 id="我们的性能测试模型">我们的性能测试模型</h2><p>从上面taobai和网银在线的模型分析过程，总结下来：</p>
<p><strong>1.线上pv数据统计</strong><br>数据可以找产品人员或者BI人员，爬虫的数据也包括在内。<br><strong>2.根据pv分布图计算基线TPS</strong><br>先按照8/2原则，20%的时间完成80%的事务，找出80%所用的时间，调整8/2比例（8/3，8/4，8/5…..）。<br>单机基线TPS=线上PV总量 <em>80%/ 86400</em>20% / 机器数 。（20%按照实际数值）<br><strong>3.计算峰值tps</strong><br>计算出占总面积80%的PV平均值与整个图中的最高峰值的比，比如taobao是1.2倍<br>TPS=TPS基线<em>1.2<br>通常来讲，我们对于系统的性能要求在每天高峰时期的2倍，那么我们的TPS=TPS基线</em>1.2<em>2<br>即，** 最终TPS=（线上PV总量 </em>80%/ 86400<em>20% / 机器数） </em> 1.2 <em>2 *</em></p>
<hr>
<h1 id="环境搭建">环境搭建</h1><p>环境搭建最理想的情况：<br>拓扑图同线上，软硬件资源同线上，数据同线上。<br>但是基本上不可能有这种资源。我们需要按照线上的环境部署情况按比例缩减。</p>
<h2 id="按容量配比机器">按容量配比机器</h2><p>比如线上6台机器，实际没有这么多机器资源，可不可以按照1：1缩减，缩减为2台机器，相应的流量也缩减3倍。<br>需要做容量规划的测试<br><img src="/img/性能测试指南/容量测试.PNG" alt="Alt text"><br>上图是根据xyz的机器配比做的容量规则，可以看到：机器数量跟并发用户数基本是整倍数增加，我们可以看做是1:1的增加，即并发用户增加一倍，机器数量增加一台。<br>结论：一般情况，可以按照1：1缩减。</p>
<h2 id="依据拓扑图准备机器资源">依据拓扑图准备机器资源</h2><p>按照线上机器缩减的配比准备拓扑图和机器，<br><img src="/img/性能测试指南/拓扑图.png" alt="Alt text"></p>
<p>服务器配置：</p>
<blockquote>
<p>Cpu：8核（4*2）  Intel(R) Xeon(R) CPU           E5620  @ 2.40GHz<br>内存：8G<br>磁盘：30G</p>
</blockquote>
<h2 id="搭建应用环境">搭建应用环境</h2><p>web服务器，应用服务器、中间件、数据库跟线上的版本和配置保持一致，可以跟运维要配置文件。</p>
<h2 id="数据准备">数据准备</h2><p>基础数据从线上导入，保证数据量的充分性，参数化的数据（比如账号密码），需要至少准备并发用户数的2倍，用于模拟缓存。</p>
<hr>
<h1 id="压力工具选择">压力工具选择</h1><p>常用的性能测试工具有：loadrunner11 ，jmeter，gatling ，apache ab，按需选择。<br>多数情况下使用的是loadrunner。</p>
<p>自动化性能测试可以采用：<br>Jenkins+ansible+Gatling的方式。</p>
<hr>
<h1 id="性能分析">性能分析</h1><h2 id="分析思路：">分析思路：</h2><p><a href="http://tonylit.me/2015/11/14/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/">分析过程</a><br>在分布式架构下，性能瓶颈分析也变得相对困难。针对不同的应用系统、不同的测试目标、不同的性能关注点，根据性能指标的表现，采用“拆分问题，隔离分析”的方法进行分析，即逐步定位、从外到内、从表及里、逐层分解、隔离排除。<br>可按以下顺序：</p>
<blockquote>
<p>日志分析—&gt;服务器硬件瓶颈—〉网络瓶颈（对局域网，可以不考虑）—〉服务器操作系统瓶颈（参数配置）—〉中间件瓶颈（参数配置，web服务器等）—〉数据库及应用瓶颈（SQL语句、数据库设计、业务逻辑、算法等）。</p>
</blockquote>
<p>基于上述思想的指导，在具体执行层面，可以参考如下分析过程：</p>
<blockquote>
<ol>
<li>先看CPU利用率，如果CPU利用率不高，但是系统的Throughput和Latency上不去了，这说明我们的程序并没有忙于计算，而是忙于别的一些事，比如IO。（另外，CPU的利用率还要看内核态的和用户态的，内核态的一上去了，整个系统的性能就下来了。而对于多核CPU来说，CPU 0是相当关键的，如果CPU 0的负载高，那么会影响其它核的性能，因为CPU各核间是需要有调度的，这靠CPU0完成）</li>
<li>然后，我们可以看一下IO大不大，IO和CPU一般是反着来的，CPU利用率高则IO不大，IO大则CPU就小。关于IO，我们要看三个事，一个是磁盘文件IO，一个是驱动程序的IO（如：网卡），一个是内存换页率。这三个事都会影响系统性能。</li>
<li>然后，查看一下网络带宽使用情况，在Linux下，你可以使用iftop，iptraf，ntop，tcpdump这些命令来查看。</li>
<li>如果CPU不高，IO不高，内存使用不高，网络带宽使用不高。但是系统的性能上不去。这说明你的程序有问题，比如，你的程序被阻塞了。可能是因为等那个锁，可能是因为等某个资源，或者是在切换上下文。</li>
</ol>
</blockquote>
<p>通过了解操作系统的性能，我们才知道性能的问题，比如：带宽不够，内存不够，TCP缓冲区不够，等等，很多时候，不需要调整程序的，只需要调整一下硬件或操作系统的配置就可以了。</p>
<h2 id="常见性能问题参考">常见性能问题参考</h2><p><strong>操作系统类</strong>    </p>
<blockquote>
<p>Sys的CPU使用率过高<br>User的CPU使用率过高，持续大于80%以上<br>可用物理内存不足导致内存溢出<br> 磁盘空间不足导致交易处理失败，性能下降<br>TCP/IP连接数限制导致用户请求失败<br>磁盘IO使用比较繁忙，持续大于70%</p>
</blockquote>
<p><strong>中间件类</strong>    </p>
<blockquote>
<p>常用主流中间件：Tomcat、apache、nginx、Weblogic、Jboss等<br>线程不回收导致溢出，引发宕机<br>数据库连接池不释放导致溢出<br>JVM内存参数设置不合理，新生代过大或偏小,永久代设置过小，导致栈溢出<br>其它问题</p>
</blockquote>
<p><strong>应用程序类</strong>    </p>
<blockquote>
<p>程序响应时间超长<br>JAVA程序内存溢出，内存中存放大量数据对象<br>JAVA程序循环嵌套过多，过于精细的查询条件，子查询间等待超时<br>程序中存在死循环引起线程死锁，导致CPU使用率达到100%<br>某些返回结果未定义处理方式，导致线程等待，不释放，CPU使用率高</p>
</blockquote>
<p><strong>数据库类</strong>    </p>
<blockquote>
<p>SGA分配不合理，需要具体情况具体分析<br>使用全表扫描<br>对于查询业务比较多的表，未建立索引，或建立的索引不合理，在索引列上使用IS NULL和IS NOT NULL<br>存在数据库死锁导致数据库连接超时或不释放。<br>存在过于复杂的计算，导致CPU、内存和IO使用率较高。<br>数据库读写过于频繁，导致IO使用率比较高</p>
</blockquote>
<p><strong>其他问题</strong>    </p>
<blockquote>
<p>网络问题，被测试环境网络环境小于100M<br>客户端问题等等</p>
</blockquote>
<hr>
<h1 id="性能调优">性能调优</h1><p>调优这块需要大量的知识积累以及多方面的配合。</p>
<h2 id="性能调优目标与策略">性能调优目标与策略</h2><p>性能优化的目标不外乎两个：1.时间性能：减小系统执行的时间；2.空间性能：减小系统占用的空间。</p>
<p><strong>用空间换时间</strong><br>各种cache如CPU L1/L2/RAM到硬盘，都是用空间来换时间的策略。这样策略基本上是把计算的过程一步一步的保存或缓存下来，这样就不用每次用的时候都要再计算一遍，比如数据缓冲，CDN，等。这样的策略还表现为冗余数据，比如数据镜象，负载均衡什么的。</p>
<p><strong>用时间换空间</strong><br>有时候，少量的空间可能性能会更好，比如网络传输，如果有一些压缩数据的算法，这样的算法其实很耗时，但是因为瓶颈在网络传输，所以用时间来换空间反而能省时间。</p>
<p><strong>简化代码</strong><br>最高效的程序就是不执行任何代码的程序，所以，代码越少性能就越高。如：减少循环的层数，减少递归，在循环中少声明变量，少做分配和释放内存的操作，尽量把循环体内的表达式抽到循环外，条件表达的中的多个条件判断的次序，尽量在程序启动时把一些东西准备好，注意函数调用的开销（栈上开销），注意面向对象语言中临时对象的开销，小心使用异常，等等。</p>
<h2 id="调优的基本步骤">调优的基本步骤</h2><p>找出主要的瓶颈，首先解决最容易的，再重复测试。<br>一次修改一个瓶颈，不要对不需要的地方进行调优.</p>
<h2 id="配置项性能调优参考">配置项性能调优参考</h2><p>下面的推荐调优配置都是基于下面的机器配置<br><img src="/img/性能测试指南/虚拟机配置.PNG" alt="Alt text"></p>
<h3 id="Linux系统调优">Linux系统调优</h3><p><strong>Linux limit 配置修改</strong></p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">修改limit 配置文件，提高linux 本身最大限制，都是在文件最后添加，如果有则是修改</span><br><span class="line"> vi /etc/security/limits.<span class="keyword">conf</span>    </span><br><span class="line"><span class="comment">*   soft nproc   102400000</span></span><br><span class="line"><span class="comment">*   hard nproc   102400000</span></span><br><span class="line"><span class="comment">*   soft nofile  1048576</span></span><br><span class="line"><span class="comment">*   hard nofile  1048576</span></span><br><span class="line"></span><br><span class="line">vi  /etc/security/limits.<span class="keyword">d</span>/90-nproc.<span class="keyword">conf</span></span><br><span class="line"><span class="comment">*   soft nproc   102400000</span></span><br><span class="line"><span class="comment">*   hard nproc   102400000</span></span><br><span class="line"><span class="comment">*   soft nofile  1048576</span></span><br><span class="line"><span class="comment">*   hard nofile  1048576</span></span><br><span class="line"></span><br><span class="line">重启生效</span><br><span class="line">service sshd restart</span><br><span class="line"></span><br><span class="line">为每个普通用户修改limit 限制(经过尝试，两台虚拟机最大的)：</span><br><span class="line">vi  /etc/profile</span><br><span class="line">ulimit -<span class="keyword">u</span> 102400000</span><br><span class="line">ulimit -<span class="keyword">n</span> 1048576</span><br><span class="line">ulimit -<span class="keyword">d</span> unlimited</span><br><span class="line">ulimit -<span class="keyword">m</span> unlimited</span><br><span class="line">ulimit -s unlimited</span><br><span class="line">ulimit -t unlimited</span><br><span class="line">ulimit -v unlimited</span><br><span class="line">ulimit -c unlimited</span><br></pre></td></tr></table></figure>
<p><strong>TCP linux 内核参数设置</strong></p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">修改配置文件  /etc/sysctl.<span class="keyword">conf</span></span><br><span class="line"> vi /etc/sysctl.<span class="keyword">conf</span></span><br><span class="line"># Controls the <span class="keyword">use</span> of TCP syncookies</span><br><span class="line"><span class="keyword">net</span>.ipv4.tcp_syncookies = 1</span><br><span class="line"><span class="keyword">net</span>.ipv4.tcp_tw_reuse = 1</span><br><span class="line"><span class="keyword">net</span>.ipv4.tcp_tw_recycle = 1</span><br><span class="line"><span class="keyword">net</span>.ipv4.tcp_fin_timeout = 5</span><br><span class="line"></span><br><span class="line"><span class="keyword">net</span>.ipv4.tcp_keepalive_time = 1200</span><br><span class="line"><span class="keyword">net</span>.ipv4.ip_local_port_range = 10000 65000</span><br><span class="line"><span class="keyword">net</span>.ipv4.tcp_max_syn_backlog = 262144</span><br><span class="line"><span class="keyword">net</span>.core.netdev_max_backlog = 262144 </span><br><span class="line"><span class="keyword">net</span>.ipv4.tcp_max_tw_buckets = 5000</span><br><span class="line"></span><br><span class="line">生效(执行会报错，需要执行中间两个命令)</span><br><span class="line">/sbin/sysctl -p</span><br><span class="line">modprobe bridge</span><br><span class="line">lsmod|grep bridge</span><br><span class="line">/sbin/sysctl –p</span><br></pre></td></tr></table></figure>
<h3 id="JVM_调优">JVM 调优</h3><p>推荐参数：</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAV<span class="built_in">A_ARGS</span>=<span class="string">" -J-Djava.util.logging.manager=com.caucho.log.LogManagerImpl   -J-Dfile.encoding=UTF-8 -J-d64 -J-server -J-Djava.awt.headless=true  -Xms2500m -Xmx2500m -Xmn1100m -XX:PermSize=250m -XX:MaxPermSize=250m -Xss2m  -XX:+UseConcMarkSweepGC -XX:+UseCMSCompactAtFullCollection  -XX:CMSMaxAbortablePrecleanTime=5000 -XX:CMSInitiatingOccupancyFraction=85  -XX:+DisableExplicitGC  -XX:+CMSClassUnloadingEnabled  -J-Xloggc:/var/log/gc_product.log -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution  -Djava.net.preferIPv4Stack=true -XX:+UseCompressedOops -XX:+UseCMSInitiatingOccupancyOnly -XX:MaxTenuringThreshold=8 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp "</span></span><br></pre></td></tr></table></figure>
<p><img src="/img/性能测试指南/堆参数解释.PNG" alt="Alt text"></p>
<h3 id="Nginx_调优">Nginx 调优</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">worker_processes <span class="number">8</span>;</span><br><span class="line">nginx进程数，建议按照cpu数目来指定，一般为它的倍数, <span class="number">2</span>倍左右比较合适。</span><br><span class="line"></span><br><span class="line">worker_cpu_affinity <span class="number">00000001</span> <span class="number">00000010</span> <span class="number">00000100</span> <span class="number">00001000</span> <span class="number">00000001</span> <span class="number">00000010</span> <span class="number">00000100</span> <span class="number">00001000</span>;</span><br><span class="line">为每个进程分配cpu，上例中将<span class="number">8</span>个进程分配到<span class="number">4</span>个cpu，当然可以写多个，或者将一个进程分配到多个cpu。</span><br><span class="line"></span><br><span class="line">worker_rlimit_nofile <span class="number">102400</span>;</span><br><span class="line">这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n的值保持一致。</span><br><span class="line"></span><br><span class="line">use epoll;</span><br><span class="line">使用epoll的I/O模型， epoll 是 linux 内核对AIO的实现。</span><br><span class="line"></span><br><span class="line">worker_connections <span class="number">102400</span>;</span><br><span class="line">每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为worker_processes*worker_connections。</span><br><span class="line"></span><br><span class="line">keepalive_timeout <span class="number">60</span>;</span><br><span class="line">keepalive超时时间。</span><br><span class="line"></span><br><span class="line">client_header_buffer_size <span class="number">4</span>k;</span><br><span class="line">客户端请求头部的缓冲区大小，这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过<span class="number">1</span>k，不过由于一般系统分页都要大于<span class="number">1</span>k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span><br><span class="line"></span><br><span class="line">open_file_cache max=<span class="number">102400</span> inactive=<span class="number">20</span>s;</span><br><span class="line">这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span><br><span class="line"></span><br><span class="line">open_file_cache_valid <span class="number">30</span>s;</span><br><span class="line">这个是指多长时间检查一次缓存的有效信息。</span><br><span class="line"></span><br><span class="line">open_file_cache_min_uses <span class="number">1</span>;</span><br><span class="line">open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span><br></pre></td></tr></table></figure>
<h3 id="MySQLInnoDB调优">MySQLInnoDB调优</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#如果将back_log设定到比你操作系统限制更高的值,将会没有效果, </span></span><br><span class="line"><span class="preprocessor">#对应 Linux tcp 内核参数中的net.core.netdev_max_backlog</span></span><br><span class="line">back_log = <span class="number">30000</span> </span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># MySQL 服务所允许的同时会话数的上限</span></span><br><span class="line">max_connections = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 每个客户端连接最大的错误允许数量</span></span><br><span class="line">max_connect_errors = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 所有线程所打开表的数量</span></span><br><span class="line">table_cache = <span class="number">4096</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 允许外部文件级别的锁. 打开文件锁会对性能造成负面影响</span></span><br><span class="line"><span class="preprocessor">#external-locking</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 服务所能处理的请求包的最大大小以及服务所能处理的最大的请求大小</span></span><br><span class="line">max_allowed_packet = <span class="number">32</span>M</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 在一个事务中binlog为了记录SQL状态所持有的cache大小</span></span><br><span class="line">binlog_cache_size = <span class="number">4</span>M</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 独立的内存表所允许的最大容量.</span></span><br><span class="line">max_heap_table_size = <span class="number">128</span>M</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 排序缓冲被用来处理类似ORDER BY以及GROUP BY队列所引起的排序</span></span><br><span class="line">sort_buffer_size = <span class="number">16</span>M</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 此缓冲被使用来优化全联合(full JOINs 不带索引的联合).</span></span><br><span class="line">join_buffer_size = <span class="number">16</span>M</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 我们在cache中保留多少线程用于重用</span></span><br><span class="line">thread_cache_size = <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 此值只对于支持 thread_concurrency() 函数的系统有意义( 例如Sun Solaris) # 推荐 [CPU数量]*(2~4) 来作为thread_concurrency的值</span></span><br><span class="line">thread_concurrency = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 查询缓冲常被用来缓冲 SELECT 的结果并且在下一次同样查询的时候不再执行直接返回结果</span></span><br><span class="line">query_cache_size = <span class="number">128</span>M</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 此设置用来保护查询缓冲,防止一个极大的结果集将其他所有的查询结果都覆盖.</span></span><br><span class="line">query_cache_limit = <span class="number">4</span>M</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 被全文检索索引的最小的字长.</span></span><br><span class="line">ft_min_word_len = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 线程使用的堆大小. 此容量的内存在每次连接时被预留.</span></span><br><span class="line">thread_stack = <span class="number">512</span>K</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="基础指标">基础指标</h1><h2 id="响应时间-1">响应时间</h2><blockquote>
<p>后端核心服务响应时间不超过100ms<br>后端一般服务响应时间不超过300ms<br>前端用户页面加载时间不超过3s</p>
</blockquote>
<p>这里是指平均响应时间。但性能测试报告必须给出最大、最小、平均、方差等数值。</p>
<h2 id="事务成功率-1">事务成功率</h2><blockquote>
<p>一般为：99.7%~99.9% ，千分之一到千分之三，根据业务类型来。<br>交易型的事务在万分之一。</p>
</blockquote>
<h2 id="负载机的资源利用率">负载机的资源利用率</h2><blockquote>
<p>cpu%&lt;50%<br>内存&lt;80%<br>network&lt;30%,高了容易丢包<br>disk的忙闲&lt;50%<br>disk的空间&lt;90%，高了会碎片整理</p>
</blockquote>
<h2 id="应用服务器硬件性能指标">应用服务器硬件性能指标</h2><blockquote>
<p>TotalCPU%&lt;75%<br>sysCPU%&lt;30%<br>load average&lt;5<br>wio%&lt;40%<br>network%&lt;30%<br>mem%&lt;80%~90%<br>disk%busy&lt;60%<br>disk queueing &lt;5<br>disk usage&lt;90%</p>
</blockquote>
<hr>
<h1 id="性能监控">性能监控</h1><h2 id="JVM监控工具">JVM监控工具</h2><h3 id="jvisualvm">jvisualvm</h3><p>java自带的工具，在jdk的bin目录下，使用方法：<br> 1.到jdk的bin目录下，新建文件jstatd.all.policy<br> 2.编辑文件：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="operator"><span class="keyword">grant</span> codebase <span class="string">"file:$JAVA_HOME/lib/tools.jar"</span> &#123;</span><br><span class="line"> permission <span class="keyword">java</span>.<span class="keyword">security</span>.AllPermission;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>3.启动：jstatd -J-Djava.security.policy=jstatd.all.policy  -J-Djava.rmi.server.hostname=192.168.43.22<br>4.打开jvisualvm，连接remote</p>
<h3 id="jinfo">jinfo</h3><p>观察运行中的java程序的运行环境参数：参数包括Java System属性和JVM命令行参数<br>实例：jinfo 2083<br>其中2083就是java进程id号，可以用jps得到这个id号</p>
<h3 id="jstack">jstack</h3><p>可以观察到jvm中当前所有线程的运行情况和线程当前状态<br>例： jstack 2083</p>
<h3 id="jmap">jmap</h3><p>观察运行中的jvm物理内存的占用情况。<br>参数如下：<br>-heap：打印jvm heap的情况<br>-histo：打印jvm heap的直方图。其输出信息包括类名，对象数量，对象占用大小。<br>-histo：live ：同上，但是只答应存活对象的情况<br>-permstat：打印permanent generation heap情况</p>
<p>命令使用：<br>jmap -heap 2083<br>可以观察到New Generation（Eden Space，From Space，To Space）,<br>tenured generation,Perm Generation的内存使用情况<br>生成 dump 文件：<br>jmap -dump:format=b,file=heap.bin 16113</p>
<h3 id="jprofile">jprofile</h3><p>jprofile使用，<a href="http://tonylit.me/2015/11/25/Jprofiler%E5%AE%89%E8%A3%85/">安装教程</a></p>
<h2 id="linux命令监控">linux命令监控</h2><p>top  ：查看进程活动状态以及一些系统状况<br>vmstat ：  查看系统状态、硬件和系统信息等<br>iostat ：   查看CPU 负载，硬盘状况<br>sar  ：   综合工具，查看系统状况<br>mpstat  ：   查看多处理器状况<br>netstat  ： 查看网络状况<br>iptraf  ：   实时网络状况监测<br>tcpdump  ： 抓取网络数据包，详细分析<br>tcptrace  ：   数据包分析工具<br>netperf ：   网络带宽工具<br>dstat ：   综合工具，综合了 vmstat, iostat, ifstat, netstat ：等多个信息</p>
<h2 id="nmon">nmon</h2><p><a href="http://tonylit.me/2015/12/17/%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7-nmon%E4%BD%BF%E7%94%A8/">nmon使用</a></p>
<h2 id="文件句柄数查看及修改">文件句柄数查看及修改</h2><p>ulimit –a：查看所有限制值<br>ulimit –n：单个进程能够打开的最大文件句柄数量<br>lsof -n | awk ‘{print $2}’ | sort | uniq -c | sort –nr：查看进程打开的句柄数，其中第一列是打开的文件句柄数量，第二列是进程号<br>lsof –n | grep process_name：查看某进程打开了哪些句柄<br>lsof +d ./：查看当前目录下各文件被什么进程占用<br>ulimit -SHn 65535：即时修改限制数，重启失效<br>永久修改办法：<br>1、修改文件：/etc/security/limits.conf，添加：</p>
<ul>
<li>soft nofile 32768 #限制单个进程最大文件句柄数（到达此限制时系统报警）</li>
<li>hard nofile 65536 #限制单个进程最大文件句柄数（到达此限制时系统报错）<br>2、修改文件：/etc/sysctl.conf，在文件中添加：<br>fs.file-max=655350 #限制整个系统最大文件句柄数<br>3、修改完成后，执行如下命令：<br>sbin/sysctl -p<br>使配置生效</li>
</ul>
<h1 id="数据库分析与诊断工具">数据库分析与诊断工具</h1><h2 id="oracle">oracle</h2><p>oracle的可以直接<a href="http://tonylit.me/2015/11/13/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%88%86%E6%9E%90-%E6%95%B0%E6%8D%AE%E5%BA%93/">看awr和addm报告</a>就行了</p>
<hr>
<h1 id="前端性能测试">前端性能测试</h1><p>基本上使用yslow或者firebug自带的网络监控工具即可。<br><a href="http://tonylit.me/2015/10/14/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/">自动化前端性能监控</a>可以通过selenium+showslow+yslow来做。</p>
<p>线上的可以使用公司自己的前端监控平台：<br>焦点检测：<a href="http://www.focusmonitor.com/" target="_blank" rel="external">http://www.focusmonitor.com/</a><br>Probe：<a href="http://192.168.28.137:9500/" target="_blank" rel="external">http://192.168.28.137:9500/</a><br>BetterCode：<a href="http://192.168.28.137:9100/" target="_blank" rel="external">http://192.168.28.137:9100/</a><br><img src="/img/性能测试指南/前端检测.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>平时做性能测试工作，经常拜读性能著作，taobao的白皮书，京东的性能测试指南等，<br>常常翻阅，有所感悟，在此整理一番，以备后用。</p>]]>
    
    </summary>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Gatling 入门]]></title>
    <link href="http://tonylit.me/2016/08/02/Gatling%E5%85%A5%E9%97%A8/"/>
    <id>http://tonylit.me/2016/08/02/Gatling入门/</id>
    <published>2016-08-02T03:37:27.000Z</published>
    <updated>2016-08-02T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>Gatling作为一款开源的性能测试工具，慢慢走入人们视野，很多公司使用Jenkins+gatling做自动化性能测试，<br>它拥有强大的API支持和完善的HTML报表，使用起来比较容易。</p>
<a id="more"></a>
<hr>
<h1 id="Gatling简介">Gatling简介</h1><p>Gatling的Scala基础封装是基于Akka编程的，它是非阻塞异步编程模型，可以高效执行并有极高的容错率。</p>
<blockquote>
<p>   专用web测试。<br>   像LR那样录制脚本，不用从零开始。<br>   脚本使用scala语言，易懂，易修改，控制灵活。<br>   基于JVM，随拷随用。（对比LoadRunner的客户端安装以及JMeter需要XWindow组件，这个方便很多），操作接近apache的ab。<br>   原生支持NIO，并发性能很好，即使性能较差的电脑也能发起很大的负载压力。<br>   基于HTML的报表，简单易读。</p>
</blockquote>
<p><a href="http://www.infoq.com/cn/articles/new-generation-server-testing-tool-gatling/" target="_blank" rel="external">更详细的介绍，与jmeter的比较</a></p>
<hr>
<h1 id="Gatling下载">Gatling下载</h1><p><a href="http://gatling.io/#/resources/download" target="_blank" rel="external">下载地址</a><br>目前最新的是2.2.2版本（jdk1.8），老版本请下载：<br>jdk6对应1.5版本，jdk7以上对应2.0版本。<br>我本地下载的<a href="http://download.csdn.net/download/zrzlj/7080061" target="_blank" rel="external">1.5.4版本</a></p>
<hr>
<h1 id="scala环境准备">scala环境准备</h1><p>gatling脚本使用的scala，需要学习的api不多，如果对java比较了解的话，学习起来很简单。<br><a href="http://tonylit.me/2016/08/01/scala%20eclipse%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">scala环境准备</a></p>
<hr>
<h1 id="Gatling目录结构">Gatling目录结构</h1><p><img src="/img/gatling入门/项目结构.PNG" alt="Alt text"></p>
<h2 id="Recorder-bat_和_gatling-bat">Recorder.bat 和 gatling.bat</h2><p> Recorder.bat和gatling.bat一个用来录脚本，一个用来执行脚本。它们也提供了linux版本.sh。<br>Recorder是个桥接在浏览器和web服务器之间的代理，如果浏览器通过它访问网络时，它能记下浏览器的访问轨迹。<br>Reocrder提供了UI界面，让配置和执行变得简单。 同时，Recoder也是一个scala代码的生成器，它能把访问轨迹记录成scala代码。</p>
<p>Gatling.bat是一个包含了编译，执行scala代码的脚本，它提供了一些参数供使用者指定执行的细节（比如JVM_OPTS）,<br>运行它可以选择需要执行的scala代码，创建非阻塞的线程模型执行压力测试。 </p>
<hr>
<h1 id="录制脚本">录制脚本</h1><p> 使用Recorder.bat录制脚本，过LR或者badboy的不会陌生</p>
<h2 id="启动Recorder">启动Recorder</h2><p><img src="/img/gatling入门/Recorder.png" alt="Alt text"></p>
<p>启动recorder，HTTP和HTTPS默认是8000和8001端口，查看下本地这两个端口有没有被占用，占用的话可以换成别的端口。<br>当点击最下面的start后，8000和8001端口开始监听了，抓取在8000和8001端口交互的包。<br><img src="/img/gatling入门/8000.PNG" alt="Alt text"></p>
<h2 id="浏览器设置">浏览器设置</h2><p> 配置浏览器代理，让它走我们设置的端口 （最好找个专用的浏览器，不用每次改来改去），我这里使用的Firefox<br> <img src="/img/gatling入门/firefox.png" alt="Alt text"></p>
<h2 id="开始录制脚本">开始录制脚本</h2><p>点击start，打开浏览器，开始录制，recorder上面会有各请求的记录<br><img src="/img/gatling入门/开始录制.png" alt="Alt text"></p>
<p>录制完成，保存</p>
<h2 id="编辑脚本">编辑脚本</h2><p>脚本存放位置：<br><img src="/img/gatling入门/脚本保存.PNG" alt="Alt text"></p>
<p>打开脚本，删除不需要的</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.excilys.ebi.gatling.core.<span class="type">Predef</span>._</span><br><span class="line"><span class="keyword">import</span> com.excilys.ebi.gatling.http.<span class="type">Predef</span>._</span><br><span class="line"><span class="keyword">import</span> com.excilys.ebi.gatling.jdbc.<span class="type">Predef</span>._</span><br><span class="line"><span class="keyword">import</span> com.excilys.ebi.gatling.http.<span class="type">Headers</span>.<span class="type">Names</span>._</span><br><span class="line"><span class="keyword">import</span> akka.util.duration._</span><br><span class="line"><span class="keyword">import</span> bootstrap._</span><br><span class="line"><span class="keyword">import</span> assertions._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecordedSimulation</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Simulation</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//httpConf做访问协议</span></span><br><span class="line">	<span class="function"><span class="keyword">val</span> <span class="title">httpConf</span> =</span> httpConfig</span><br><span class="line">			.baseURL(<span class="string">"http://192.168.43.203:99"</span>)</span><br><span class="line">			.acceptHeader(<span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>)</span><br><span class="line">			.acceptEncodingHeader(<span class="string">"gzip, deflate"</span>)</span><br><span class="line">			.acceptLanguageHeader(<span class="string">"zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3"</span>)</span><br><span class="line">			.connection(<span class="string">"keep-alive"</span>)</span><br><span class="line">			.userAgentHeader(<span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//scn描述访问地址和暂停时间</span></span><br><span class="line">	<span class="function"><span class="keyword">val</span> <span class="title">scn</span> =</span> scenario(<span class="string">"Scenario Name"</span>)</span><br><span class="line">		.exec(http(<span class="string">"request_1"</span>)	</span><br><span class="line">		    .get(<span class="string">"/"</span>)</span><br><span class="line">					</span><br><span class="line">			)</span><br><span class="line">  <span class="comment">//scn.users描述并发个数，执行访问</span></span><br><span class="line">	setUp(scn.users(<span class="number">1</span>).protocolConfig(httpConf))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="官网demo">官网demo</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> computerdatabase <span class="comment">// 1 包名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.gatling.core.<span class="type">Predef</span>._ <span class="comment">// 2必须导入的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.gatling.http.<span class="type">Predef</span>._</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.concurrent.duration._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicSimulation</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Simulation</span> &#123;</span> <span class="comment">// 3 类声明，必须继承Simulation</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">val</span> <span class="title">httpConf</span> =</span> http <span class="comment">// 4 所有Http请求普遍配置</span></span><br><span class="line"></span><br><span class="line">.baseURL(<span class="string">"http://computer-database.gatling.io"</span>) <span class="comment">// 5 base URL</span></span><br><span class="line"></span><br><span class="line">.acceptHeader(<span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>) <span class="comment">// 6 请求头</span></span><br><span class="line"></span><br><span class="line">.doNotTrackHeader(<span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line">.acceptLanguageHeader(<span class="string">"en-US,en;q=0.5"</span>)</span><br><span class="line"></span><br><span class="line">.acceptEncodingHeader(<span class="string">"gzip, deflate"</span>)</span><br><span class="line"></span><br><span class="line">.userAgentHeader(<span class="string">"Mozilla/5.0 (Windows NT 5.1; rv:31.0) Gecko/20100101 Firefox/31.0"</span>)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">val</span> <span class="title">scn</span> =</span> scenario(<span class="string">"BasicSimulation"</span>) <span class="comment">// 7 定义场景</span></span><br><span class="line"></span><br><span class="line">.exec(http(<span class="string">"request_1"</span>) <span class="comment">// 8 http请求名称 request_1,这个名称最后会显示在报告中</span></span><br><span class="line"></span><br><span class="line">.get(<span class="string">"/"</span>)) <span class="comment">// 9 get请求方法</span></span><br><span class="line"></span><br><span class="line">.pause(<span class="number">5</span>) <span class="comment">// 10 暂停/思考时间 5s</span></span><br><span class="line"></span><br><span class="line">setUp( <span class="comment">// 11 建立场景</span></span><br><span class="line"></span><br><span class="line">scn.inject(atOnceUsers(<span class="number">1</span>)) <span class="comment">// 12 声明注入一个用户</span></span><br><span class="line"></span><br><span class="line">).protocols(httpConf) <span class="comment">// 13 之前声明的Http请求配置</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="场景执行">场景执行</h1><p>启动gatling.bat<br>看到一个simulation 示例的菜单 ：<br>Choose a simulation number:<br>[0] computerdatabase.BasicSimulation<br>当 simulation 执行完成时，控制台会显示一个HTML报表的链接。<br><img src="/img/gatling入门/result.PNG" alt="Alt text"></p>
<p>到reslut目录下面，查看HTML报错<br><img src="/img/gatling入门/report.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Gatling作为一款开源的性能测试工具，慢慢走入人们视野，很多公司使用Jenkins+gatling做自动化性能测试，<br>它拥有强大的API支持和完善的HTML报表，使用起来比较容易。</p>]]>
    
    </summary>
    
      <category term="Gatling" scheme="http://tonylit.me/tags/Gatling/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[scala eclipse环境搭建]]></title>
    <link href="http://tonylit.me/2016/08/01/scala%20eclipse%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://tonylit.me/2016/08/01/scala eclipse环境搭建/</id>
    <published>2016-08-01T03:37:27.000Z</published>
    <updated>2016-08-01T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>scala的ide有不少，这里选择了eclipse</p>
<a id="more"></a>
<hr>
<h1 id="scala_eclipse_IDE安装">scala eclipse IDE安装</h1><p>有eclipse的，可以直接安装scala的插件就行了，这里安装整套ide环境。</p>
<h2 id="下载scala_eclipse_IDE和scala">下载scala eclipse IDE和scala</h2><p>目前最新版本4.4.1，scala版本2.11.8，我们下载对应的版本（顺便说一句：scala2+以上需要jdk1.7版本支持，如果使用的jdk1.6，可以下载scala1+版本）<br><strong>Download Scala IDE for Eclipse：</strong><br><a href="http://scala-ide.org/download/sdk.html" target="_blank" rel="external">http://scala-ide.org/download/sdk.html</a><br><strong>SCALA 2.11.8</strong><br><a href="http://www.scala-lang.org/download/2.11.8.html" target="_blank" rel="external">http://www.scala-lang.org/download/2.11.8.html</a></p>
<h2 id="安装">安装</h2><ol>
<li>确认安装了对应的jdk版本</li>
<li>Scala IDE for Eclipse，直接解压缩就行了</li>
<li>scala-2.11.8.msi 直接安装，next-&gt;next-&gt;ok<br>安装完成 cmd，输入scala -version验证一下<br><img src="/img/scala eclipse环境搭建/scala-version.PNG" alt="Alt text"></li>
</ol>
<p>以上就安装完了，很简单。</p>
<hr>
<h1 id="写一个hello_world">写一个hello world</h1><p>1.打开eclipse，新建一个scala project<br>2.在项目中新建一个scala object<br><img src="/img/scala eclipse环境搭建/scala project.PNG" alt="Alt text"><br>3.写一个main方法，输出hello world</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package com.test.gatling</span><br><span class="line"></span><br><span class="line">object test &#123;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(args: Array[String])</span>:</span> Unit = &#123;</span><br><span class="line">    println(<span class="string">"hello world"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.右键-&gt;run as-&gt;scala application<br><img src="/img/scala eclipse环境搭建/hello-world.PNG" alt="Alt text"></p>
<hr>
<h1 id="基础语法学习">基础语法学习</h1><p><a href="http://www.yiibai.com/scala/" target="_blank" rel="external">http://www.yiibai.com/scala/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>scala的ide有不少，这里选择了eclipse</p>]]>
    
    </summary>
    
      <category term="scala" scheme="http://tonylit.me/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[spring ibatis多数据源]]></title>
    <link href="http://tonylit.me/2016/07/28/spring%20ibatis%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    <id>http://tonylit.me/2016/07/28/spring ibatis多数据源/</id>
    <published>2016-07-28T03:37:27.000Z</published>
    <updated>2016-07-28T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>项目需要配置两个数据源（spring 3.0.5，ibatis2.3.4），查了一些资料，终于配置成功，在此记录一下<br><a id="more"></a></p>
<h1 id="ibatis多数据源配置">ibatis多数据源配置</h1><p>数据源采用jndi的方式，之前一个datasource的dao.xml配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!--DataSource --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"dataSource"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.jndi.JndiObjectFactoryBean"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"jndiName"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">value</span>&gt;</span>java:comp/env/jdbc/fds<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"sqlMapClient"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.orm.ibatis.SqlMapClientFactoryBean"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"configLocation"</span> <span class="attribute">value</span>=<span class="value">"classpath:context/dao/sql-map-config.xml"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"dataSource"</span> <span class="attribute">ref</span>=<span class="value">"dataSource"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"sqlMapClientTemplate"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.orm.ibatis.SqlMapClientTemplate"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"sqlMapClient"</span> <span class="attribute">ref</span>=<span class="value">"sqlMapClient"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>按照以上的配置，增加一个datasource就copy一份改改，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--DataSource --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"dataSource"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.jndi.JndiObjectFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"jndiName"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">value</span>&gt;</span>java:comp/env/jdbc/fds<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"sqlMapClient"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.orm.ibatis.SqlMapClientFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"configLocation"</span> <span class="attribute">value</span>=<span class="value">"classpath:context/dao/sql-map-config.xml"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"dataSource"</span> <span class="attribute">ref</span>=<span class="value">"dataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">      <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"sqlMapClientTemplate"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.orm.ibatis.SqlMapClientTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"sqlMapClient"</span> <span class="attribute">ref</span>=<span class="value">"sqlMapClient"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">     <span class="comment">&lt;!-- fks --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"fksDataSource"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.jndi.JndiObjectFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"jndiName"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">value</span>&gt;</span>java:comp/env/jdbc/fks<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"fksSqlMapClient"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.orm.ibatis.SqlMapClientFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"configLocation"</span> <span class="attribute">value</span>=<span class="value">"classpath:context/dao/sql-map-config-fks.xml"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"dataSource"</span> <span class="attribute">ref</span>=<span class="value">"fksDataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">  <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"fksSqlMapClientTemplate"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.orm.ibatis.SqlMapClientTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"sqlMapClient"</span> <span class="attribute">ref</span>=<span class="value">"fksSqlMapClient"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>不同的sqlMap放在对应的sql-map-config.xml中</p>
<h1 id="@Qualifier指定SqlMapClient">@Qualifier指定SqlMapClient</h1><p>dao层需要做简单处理，使用新的数据源需要 @Qualifier(“fksSqlMapClient”) 指定一下SqlMapClient即可</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">Repository</span></span><br><span class="line">public class <span class="type">FksAlarmlistDAOImpl</span> extends <span class="type">SqlMapClientDaoSupport</span> implements <span class="type">FksAlarmlistDAO</span> &#123;</span><br><span class="line">    @<span class="type">Autowired</span></span><br><span class="line">    @<span class="type">Qualifier</span>(<span class="string">"fksSqlMapClient"</span>)</span><br><span class="line">    public <span class="type">void</span> setSqlMapClientTemp(<span class="type">SqlMapClient</span> sqlMapClient) &#123;</span><br><span class="line">        setSqlMapClient(sqlMapClient);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * <span class="type">This</span> <span class="keyword">method</span> was generated by <span class="type">MyBatis</span> <span class="type">Generator</span>. <span class="type">This</span> <span class="keyword">method</span> corresponds to the database table fks_alarmlist</span><br><span class="line">     * </span><br><span class="line">     * @mbggenerated <span class="type">Thu</span> <span class="type">Jul</span> <span class="number">28</span> <span class="number">14</span>:<span class="number">43</span>:<span class="number">44</span> <span class="type">CST</span> <span class="number">2016</span></span><br><span class="line">     */</span><br><span class="line">    public <span class="type">FksAlarmlistDAOImpl</span>() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * <span class="type">This</span> <span class="keyword">method</span> was generated by <span class="type">MyBatis</span> <span class="type">Generator</span>. <span class="type">This</span> <span class="keyword">method</span> corresponds to the database table fks_alarmlist</span><br><span class="line">     * </span><br><span class="line">     * @mbggenerated <span class="type">Thu</span> <span class="type">Jul</span> <span class="number">28</span> <span class="number">14</span>:<span class="number">43</span>:<span class="number">44</span> <span class="type">CST</span> <span class="number">2016</span></span><br><span class="line">     */</span><br><span class="line">    public <span class="type">int</span> countByExample(<span class="type">FksAlarmlistExample</span> example) &#123;</span><br><span class="line">        <span class="type">Integer</span> count = (<span class="type">Integer</span>) getSqlMapClientTemplate().queryForObject(<span class="string">"fks_alarmlist.countByExample"</span>, example);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>项目需要配置两个数据源（spring 3.0.5，ibatis2.3.4），查了一些资料，终于配置成功，在此记录一下<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hbase单机安装与基础命令]]></title>
    <link href="http://tonylit.me/2016/07/21/hbase%E5%8D%95%E6%9C%BA%E5%AE%89%E8%A3%85%E4%B8%8E%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <id>http://tonylit.me/2016/07/21/hbase单机安装与基础命令/</id>
    <published>2016-07-21T03:37:27.000Z</published>
    <updated>2016-07-21T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>hbase单机安装与基础命令<br><strong>环境：</strong><br>Centos5.11<br>Jdk1.7<br>Hbase：1.2.2<br><a id="more"></a></p>
<h1 id="hbase下载">hbase下载</h1><p><a href="http://apache.fayea.com/hbase/" target="_blank" rel="external">http://apache.fayea.com/hbase/</a><br>这里下载的最新版1.2.2的，注意不要下载带有src的（源码）</p>
<h1 id="配置安装">配置安装</h1><p>1.放到机器上，解压缩，这里将其放在/app/目录下<br>2.配置hbase环境变量<br>修改/etc/profile文件增加环境变量</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HBASE_HOME=/app/hbase-<span class="number">1.2</span>.<span class="number">2</span></span><br><span class="line">export PATH=<span class="variable">$PATH</span>:<span class="variable">$HBASE</span>_HOME/bin</span><br></pre></td></tr></table></figure>
<p>记得：source /etc/profile<br>3.修改hbase目录下，/conf/hbase-env.sh</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> HBASE_MANAGES_ZK=<span class="literal">true</span></span><br><span class="line"><span class="keyword">export</span> JAVA_HOME=/opt/jdk1<span class="number">.7</span><span class="number">.0</span>_40/</span><br></pre></td></tr></table></figure>
<p>4.配置/conf/hbase-site.xml增加以下内容</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">value</span>&gt;</span>file:///app/hbase-1.2.2/hbase-tmp<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="启动hbase">启动hbase</h1><p>hbase/bin目录下：<br>start-hbase.sh</p>
<p>打开浏览器访问localhost:16010/master-status，可以看到hbase的一些状态信息</p>
<h1 id="hbase常用shell命令">hbase常用shell命令</h1><p>在/bin 目录下 执行  hbase shell 即可进入hbase命令行：</p>
<blockquote>
<p><strong>alter</strong>    修改列族（column family）模式<br><strong>count</strong>    统计表中行的数量<br><strong>create</strong>    创建表:create ‘member’,’member_id’,’address’,’info’<br><strong>describe</strong>    显示表相关的详细信息 describe member<br><strong>delete</strong>    删除指定对象的值（可以为表，行，列对应的值，另外也可以指定时间戳的值）<br><strong>deleteall    </strong>删除指定行的所有元素值<br><strong>disable</strong>    使表无效<br><strong>drop</strong>    删除表<br><strong>enable</strong>    使表有效<br><strong>exists</strong>    测试表是否存在<br><strong>exit    </strong>退出hbase shell<br><strong>get</strong>    获取行或单元（cell）的值 get ‘member’,’xueba’<br><strong>incr</strong>    增加指定表，行或列的值<br><strong>list</strong>    列出hbase中存在的所有表<br><strong>put</strong>    向指向的表单元添加值 put ‘member’,’xueba’,’info:age’,’25’<br><strong>tools</strong>    列出hbase所支持的工具<br><strong>scan</strong>    通过对表的扫描来获取对用的值<br><strong>status</strong>    返回hbase集群的状态信息<br><strong>shutdown</strong>    关闭hbase集群（与exit不同）<br><strong>truncate</strong>    重新创建指定表  truncate ‘member’<br><strong>version</strong>    返回hbase版本信息</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>hbase单机安装与基础命令<br><strong>环境：</strong><br>Centos5.11<br>Jdk1.7<br>Hbase：1.2.2<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker容器时间修改-通过时区偏移量]]></title>
    <link href="http://tonylit.me/2016/07/19/docker%E5%AE%B9%E5%99%A8%E6%97%B6%E9%97%B4%E4%BF%AE%E6%94%B9-%E9%80%9A%E8%BF%87%E6%97%B6%E5%8C%BA%E5%81%8F%E7%A7%BB%E9%87%8F/"/>
    <id>http://tonylit.me/2016/07/19/docker容器时间修改-通过时区偏移量/</id>
    <published>2016-07-19T03:37:27.000Z</published>
    <updated>2016-07-19T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>我们知道docker容器的时间使用的是宿主机内核的时间，没有做date namespace，所以修改docker容器时间的时候，同时修改了宿主机的时间，反之一样。<br>如果需要在容器内做时间修改，但是不影响其他容器，就比较困难。<br>but，我们可以通过修改时区的方式间接修改时间，但是有局限性，只能修改到24h之内的时间。<br><a id="more"></a><br>这边写了个脚本，date.sh<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> != <span class="number">2</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">         <span class="built_in">echo</span> <span class="string">"Please input two parameter,like  '2016-05-20 12:00' "</span></span><br><span class="line">         <span class="built_in">exit</span> <span class="number">200</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#check /etc/profile exits 'export TZ' environment,if exits ,delete</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">checkProfile</span></span>()&#123;</span><br><span class="line">  <span class="built_in">return</span>Str=`grep -ri <span class="string">'export TZ'</span> /etc/profile`</span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$returnStr</span>"</span> !=  <span class="string">""</span>  ]</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">     sed -i <span class="operator">-e</span> <span class="string">'/export TZ/d'</span>  /etc/profile</span><br><span class="line">       </span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line">checkProfile</span><br><span class="line"><span class="comment">#check time format</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">isValidDate</span></span>()&#123;  </span><br><span class="line">    date <span class="operator">-d</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="string">"+%F"</span>|grep -q <span class="string">"<span class="variable">$1</span>"</span> <span class="number">2</span>&gt;/dev/null </span><br><span class="line">    <span class="keyword">if</span> [ $? = <span class="number">0</span> ]; <span class="keyword">then</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"input:"</span> <span class="variable">$1</span> <span class="variable">$2</span> </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Time format is not correct ,please input like '2016-05-20 12:00' "</span> </span><br><span class="line">    <span class="keyword">fi</span>  </span><br><span class="line">&#125;</span><br><span class="line">isValidDate <span class="variable">$1</span> <span class="variable">$2</span></span><br><span class="line">CURTIME=`date <span class="string">"+%Y-%m-%d %H:%M"</span> `;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"now:"</span> <span class="variable">$CURTIME</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">timeExport</span></span>()&#123;</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$2</span>"</span> == <span class="number">1</span> ]</span><br><span class="line">     <span class="keyword">then</span></span><br><span class="line">     timeFormat=`awk <span class="string">'BEGIN&#123;printf "%.2f\n",'</span><span class="variable">$1</span><span class="string">'/3600&#125;'</span>`</span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$1</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$timeFormat</span></span><br><span class="line">     hour=`<span class="built_in">echo</span> <span class="variable">$timeFormat</span>|awk -F <span class="string">'.'</span> <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line">     mins=`<span class="built_in">echo</span> <span class="variable">$timeFormat</span>|awk -F <span class="string">'.'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">     minm=`awk <span class="string">'BEGIN&#123;printf "%.0f\n",0.'</span><span class="variable">$mins</span><span class="string">'*60&#125;'</span>`</span><br><span class="line">     timeRetrunHour=`expr <span class="variable">$hour</span> + <span class="number">8</span>`</span><br><span class="line">      </span><br><span class="line">     <span class="comment">###分钟计算</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"input min:"</span><span class="variable">$3</span></span><br><span class="line">     inputmin=`<span class="built_in">echo</span> <span class="variable">$3</span>|awk -F <span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">     nowmin=`date |awk <span class="string">'&#123;print $4&#125;'</span>|awk -F <span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$nowmin</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$inputmin</span></span><br><span class="line">     <span class="keyword">if</span> [ <span class="string">"<span class="variable">$nowmin</span>"</span> <span class="operator">-gt</span> <span class="string">"<span class="variable">$inputmin</span>"</span> ]</span><br><span class="line">      <span class="keyword">then</span> </span><br><span class="line">       <span class="built_in">let</span> hour=<span class="variable">$hour</span>-<span class="number">1</span></span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line">       </span><br><span class="line">     timeRetrunTime=<span class="variable">$timeRetrunHour</span>:<span class="variable">$minm</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"export TZ=RPC-<span class="variable">$timeRetrunTime</span>"</span>     </span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">       <span class="keyword">if</span> [ <span class="string">"<span class="variable">$2</span>"</span> == <span class="number">2</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">     timeFormat=`awk <span class="string">'BEGIN&#123;printf "%.2f\n",'</span><span class="variable">$1</span><span class="string">'/3600&#125;'</span>`</span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$1</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$timeFormat</span></span><br><span class="line">     hour=`<span class="built_in">echo</span> <span class="variable">$timeFormat</span>|awk -F <span class="string">'.'</span> <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line">     mins=`<span class="built_in">echo</span> <span class="variable">$timeFormat</span>|awk -F <span class="string">'.'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">     minm=`awk <span class="string">'BEGIN&#123;printf "%.0f\n",0.'</span><span class="variable">$mins</span><span class="string">'*60&#125;'</span>`</span><br><span class="line">     <span class="built_in">let</span> timeRetrunHour=<span class="variable">$hour</span>-<span class="number">8</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$timeRetrunHour</span></span><br><span class="line">          <span class="comment">###分钟计算</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"input min:"</span><span class="variable">$3</span></span><br><span class="line">     inputmin=`<span class="built_in">echo</span> <span class="variable">$3</span>|awk -F <span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">     nowmin=`date |awk <span class="string">'&#123;print $4&#125;'</span>|awk -F <span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$nowmin</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$inputmin</span></span><br><span class="line">     <span class="keyword">if</span> [ <span class="string">"<span class="variable">$nowmin</span>"</span> <span class="operator">-gt</span> <span class="string">"<span class="variable">$inputmin</span>"</span> ]</span><br><span class="line">      <span class="keyword">then</span> </span><br><span class="line">       <span class="built_in">let</span> hour=<span class="variable">$hour</span>-<span class="number">1</span></span><br><span class="line">     <span class="keyword">fi</span> </span><br><span class="line">     timeRetrunTime=<span class="variable">$timeRetrunHour</span>:<span class="variable">$minm</span></span><br><span class="line">          <span class="keyword">if</span> [ <span class="string">"<span class="variable">$timeRetrunHour</span>"</span> <span class="operator">-lt</span> <span class="number">0</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">           <span class="built_in">echo</span> <span class="string">"export TZ=RPC-<span class="variable">$&#123;timeRetrunTime#-&#125;</span>"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">           <span class="built_in">echo</span> <span class="string">"export TZ=RPC+<span class="variable">$timeRetrunTime</span>"</span></span><br><span class="line">         <span class="keyword">fi</span></span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Sys_data=`date <span class="operator">-d</span>  <span class="string">"<span class="variable">$CURTIME</span>"</span> +%s`    <span class="comment">#把当前时间转化为Linux时间</span></span><br><span class="line">In_data=`date <span class="operator">-d</span>  <span class="string">"<span class="variable">$1</span> <span class="variable">$2</span>"</span> +%s`</span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$In_data</span> -ge <span class="variable">$Sys_data</span> ]</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">    interval=`expr <span class="variable">$In_data</span> - <span class="variable">$Sys_data</span>`  <span class="comment">#计算2个时间的差</span></span><br><span class="line">    timeExport <span class="variable">$interval</span> <span class="number">1</span> <span class="variable">$2</span></span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">    interval=`expr  <span class="variable">$Sys_data</span> - <span class="variable">$In_data</span>`  </span><br><span class="line">    timeExport <span class="variable">$interval</span> <span class="number">2</span> <span class="variable">$2</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$interval</span></span><br></pre></td></tr></table></figure></p>
<p>然后手动执行输出的结果：<br>export TZ=xxxx</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我们知道docker容器的时间使用的是宿主机内核的时间，没有做date namespace，所以修改docker容器时间的时候，同时修改了宿主机的时间，反之一样。<br>如果需要在容器内做时间修改，但是不影响其他容器，就比较困难。<br>but，我们可以通过修改时区的方式间接修改时间，但是有局限性，只能修改到24h之内的时间。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker crontab不执行解决方法]]></title>
    <link href="http://tonylit.me/2016/07/19/docker%20crontab%E4%B8%8D%E6%89%A7%E8%A1%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://tonylit.me/2016/07/19/docker crontab不执行解决方法/</id>
    <published>2016-07-19T03:37:27.000Z</published>
    <updated>2016-07-19T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>centos镜像，在该镜像中没有安装crond，通过yum安装成功后，crontab没有生效。</p>
<a id="more"></a>
<h1 id="解决办法：">解决办法：</h1><p>修改/etc/pam.d/crond文件，将其中的required改为sufficient即可。</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The PAM configuration file for the cron daemon</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">auth       sufficient pam_env.so</span><br><span class="line">auth       sufficient   pam_rootok.so</span><br><span class="line">auth       <span class="built_in">include</span>    <span class="keyword">system</span>-auth</span><br><span class="line">account    sufficient   pam_access.so</span><br><span class="line">account    <span class="built_in">include</span>    <span class="keyword">system</span>-auth</span><br><span class="line">session    sufficient   pam_loginuid.so</span><br><span class="line">session    <span class="built_in">include</span>    <span class="keyword">system</span>-auth</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>centos镜像，在该镜像中没有安装crond，通过yum安装成功后，crontab没有生效。</p>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jmagick安装-jdk版本问题]]></title>
    <link href="http://tonylit.me/2016/07/14/jmagick%E5%AE%89%E8%A3%85jdk%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86/"/>
    <id>http://tonylit.me/2016/07/14/jmagick安装jdk报错处理/</id>
    <published>2016-07-14T03:37:27.000Z</published>
    <updated>2016-07-14T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p> 这两天一直在处理jmagick图片压缩的问题，各种莫名其妙的jmagick版本不兼容、jdk不兼容。<br> 这里总结一下：<br><a id="more"></a></p>
<h1 id="jmagick和Imagick安装">jmagick和Imagick安装</h1><p>1.环境：centos5.11， jdk1.6<br>2.先装imagick，再装jmagick,jmagick和Imagick的版本一定要一个版本，不然可能会报no scale to image，确认安装了gcc  gcc-c++<br>jmagick安装包汇总<br><a href="http://pan.baidu.com/s/1i5FFUCH" target="_blank" rel="external">http://pan.baidu.com/s/1i5FFUCH</a></p>
<p>安装脚本如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#! /bin/bash</span><br><span class="line"></span></span><br><span class="line">mkdir /home/soft/</span><br><span class="line"><span class="built_in">cd</span> /home/soft/</span><br><span class="line"><span class="comment">##下载好jmagick.jar</span></span><br><span class="line"><span class="comment">##http://pan.baidu.com/s/1i5FFUCH</span></span><br><span class="line">tar -xvf jmagick.tar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">yum install libpng* -y</span><br><span class="line">yum install -y perl-devel perl-CPAN</span><br><span class="line"><span class="built_in">cd</span> support</span><br><span class="line"></span><br><span class="line">tar -xvf freetype-<span class="number">2.3</span>.<span class="number">11</span>.tar.gz </span><br><span class="line"><span class="built_in">cd</span> freetype-<span class="number">2.3</span>.<span class="number">11</span></span><br><span class="line"> ./configure &amp;&amp;make &amp;&amp;make install</span><br><span class="line"><span class="keyword">if</span> [ $? <span class="operator">-gt</span> <span class="number">0</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">unzip jasper-<span class="number">1.900</span>.<span class="number">1</span>.zip</span><br><span class="line"><span class="built_in">cd</span> jasper-<span class="number">1.900</span>.<span class="number">1</span></span><br><span class="line"><span class="built_in">export</span> CFLAGS=<span class="string">"-O2 -fPIC"</span>  &amp;&amp;  ./configure  &amp;&amp;make &amp;&amp;make install</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? <span class="operator">-gt</span> <span class="number">0</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tar -xvf jpegsrc.v7.tar.gz </span><br><span class="line"><span class="built_in">cd</span> jpeg-<span class="number">7</span></span><br><span class="line"> ./configure &amp;&amp;make &amp;&amp;make install</span><br><span class="line"> <span class="keyword">if</span> [ $? <span class="operator">-gt</span> <span class="number">0</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> <span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment">## tar -xvf libpng-1.4.0.tar.gz </span></span><br><span class="line"><span class="comment"># cd libpng-1.4.0</span></span><br><span class="line"><span class="comment">#  ./configure  &amp;&amp;make &amp;&amp;make install </span></span><br><span class="line"><span class="comment">#  if [ $? -gt 0 ];then</span></span><br><span class="line"><span class="comment">#exit</span></span><br><span class="line"><span class="comment">#fi</span></span><br><span class="line"><span class="comment"># cd ..</span></span><br><span class="line"></span><br><span class="line">tar -xvf tiff-<span class="number">3.9</span>.<span class="number">1</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> tiff-<span class="number">3.9</span>.<span class="number">1</span></span><br><span class="line">./configure  &amp;&amp;make &amp;&amp;make install</span><br><span class="line"><span class="keyword">if</span> [ $? <span class="operator">-gt</span> <span class="number">0</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> <span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"> tar -xvf zlib-<span class="number">1.2</span>.<span class="number">3</span>.tar.gz </span><br><span class="line"> <span class="built_in">cd</span> zlib-<span class="number">1.2</span>.<span class="number">3</span></span><br><span class="line">./configure  &amp;&amp;make &amp;&amp;make install</span><br><span class="line"><span class="keyword">if</span> [ $? <span class="operator">-gt</span> <span class="number">0</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> <span class="built_in">cd</span> ../..</span><br><span class="line"></span><br><span class="line"> tar -xvf  ImageMagick-<span class="number">6.4</span>.<span class="number">0</span>-<span class="number">0</span>.tar.gz </span><br><span class="line"> <span class="built_in">cd</span> ImageMagick-<span class="number">6.4</span>.<span class="number">0</span></span><br><span class="line"> ./configure  --with-quantum-depth=<span class="number">8</span>   --enable-share --without-x&amp;&amp; make &amp;&amp;make install</span><br><span class="line"> <span class="keyword">if</span> [ $? <span class="operator">-gt</span> <span class="number">0</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> <span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> tar -xvf jmagick-<span class="number">6.4</span>.<span class="number">0</span>-src.tar.gz </span><br><span class="line"> <span class="built_in">cd</span> <span class="number">6.4</span>.<span class="number">0</span> </span><br><span class="line">  ./configure --with-java-home=/opt/jdk1.<span class="number">6.0</span>_14/&amp;&amp;make &amp;&amp;make install </span><br><span class="line">  <span class="keyword">if</span> [ $? <span class="operator">-gt</span> <span class="number">0</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">cp lib/*.jar  <span class="variable">$JAVA_HOME</span>/jre/lib/ext/</span><br><span class="line">line=$(cat /etc/profile|wc <span class="operator">-l</span>) &amp;&amp; line1=$(( <span class="variable">$line</span> - <span class="number">1</span>))&amp;&amp; sed  -i  <span class="string">"<span class="variable">$line1</span> i LD_LIBRARY_PATH=/usr/local/lib"</span> /etc/profile &amp;&amp;  <span class="built_in">source</span> /etc/profile &amp;&amp; <span class="built_in">echo</span>  <span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"></span><br><span class="line">ln <span class="operator">-s</span>  /usr/<span class="built_in">local</span>/lib/libjpeg.so.<span class="number">7</span> /usr/lib64/libjpeg.so.<span class="number">62</span></span><br></pre></td></tr></table></figure>
<p>OK，其实按照上面的脚本可以一键安装，基本上没问题，<br>哎…..<br>由于当时脚本里面没有写jdk的环境变量，而且在做docker镜像的时候dockerfile中设置了env=jdk1.7，在jmagick编译的时候即使指定了<br>./configure –with-java-home=/opt/jdk1.6.0_14/，也没用，编译出来的jar包还是1.7的，而且jar包比较糊弄人~~</p>
<h1 id="问题处理">问题处理</h1><p>按照上面的脚本安装了jmagick，出现了如下坑爹报错：<br><img src="/img/jmagick/major51-error.PNG" alt="Alt text"></p>
<p>可以看到是jdk版本的问题，项目用的jdk1.6，但是jmagick是1.7的<br>OK，我们把jmagick-6.4.0.jar拿出来看看<br>打开jar包，检查MANIFEST.MF文件<br><img src="/img/jmagick/jar-1.6.PNG" alt="Alt text"></p>
<p>疑~，是1.6的啊，没有问题，怎么回事~~<br>再查看class文件版本<br><img src="/img/jmagick/major51.PNG" alt="Alt text"></p>
<p>看到这边major version:51跟MANIFEST.MF中的jdk1.6不对应。<br>赶紧修改安装脚本，加上jdk环境变量</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/jdk1.<span class="number">6.0</span>_14</span><br><span class="line">export CLASSPATH=<span class="variable">$JAVA_HOME</span>/lib/tools<span class="class">.jar</span>:<span class="variable">$JAVA_HOME</span>/lib/<span class="tag">dt</span><span class="class">.jar</span>:<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JAVA_HOME</span>/jre/lib:</span><br><span class="line"><span class="id">#export</span> LANG=en_US<span class="class">.UTF-8</span></span><br><span class="line">export PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/lib:/usr/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>
<p>重新安装了一遍，没问题了！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p> 这两天一直在处理jmagick图片压缩的问题，各种莫名其妙的jmagick版本不兼容、jdk不兼容。<br> 这里总结一下：<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[修改docker loop-lvm存储大小和位置]]></title>
    <link href="http://tonylit.me/2016/07/04/%E4%BF%AE%E6%94%B9docker%20loop-lvm%E5%AD%98%E5%82%A8%E5%A4%A7%E5%B0%8F%E5%92%8C%E4%BD%8D%E7%BD%AE/"/>
    <id>http://tonylit.me/2016/07/04/修改docker loop-lvm存储大小和位置/</id>
    <published>2016-07-04T03:37:27.000Z</published>
    <updated>2016-07-04T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>刚开始使用docker的时候没有注意系统分区，根目录磁盘分小了，分了50G。<br>centos7 docker默认使用的devicemapper loop-lvm存储，默认大小是100G，导致容器多的时候存储不够。<br><a id="more"></a></p>
<h1 id="存储需求">存储需求</h1><p>1.增大devicemapper loop data的存储大小<br>2.把存储的位置放到/home目录下</p>
<h1 id="解决方案">解决方案</h1><p>很简单，修改docker的启动参数，重启即可<br>修改/lib/systemd/system/docker.service</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/docker daemon --graph=/home/lib/docker --storage-driver=devicemapper --storage-opt dm.fs=ext4 \</span><br><span class="line">                                  --storage-opt dm.loopdatasize=<span class="number">100</span>G --storage-opt dm.loopmetadatasize=<span class="number">8</span>G \</span><br><span class="line">                                  --insecure-registry=docker.vemic.com:<span class="number">5000</span> -H <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">2375</span> -H fd:<span class="comment">//</span></span><br></pre></td></tr></table></figure>
<p>重启docker，ok了<br><img src="/img/devicemapper.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>刚开始使用docker的时候没有注意系统分区，根目录磁盘分小了，分了50G。<br>centos7 docker默认使用的devicemapper loop-lvm存储，默认大小是100G，导致容器多的时候存储不够。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker java时区设置]]></title>
    <link href="http://tonylit.me/2016/06/14/docker%20java%E6%97%B6%E5%8C%BA%E8%AE%BE%E7%BD%AE/"/>
    <id>http://tonylit.me/2016/06/14/docker java时区设置/</id>
    <published>2016-06-14T03:37:27.000Z</published>
    <updated>2016-06-14T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>docker启动的时候通过-v /etc/localtime:/etc/localtime:ro ，<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  -v  <span class="regexp">/etc/</span><span class="string">localtime:</span><span class="regexp">/etc/</span><span class="string">localtime:</span>ro  focustest-centos5  <span class="regexp">/opt/</span>ActivePython-<span class="number">2.7</span><span class="regexp">/bin/</span>supervisord -c <span class="regexp">/opt/</span>supervisor/supervisord.conf &amp;</span><br></pre></td></tr></table></figure></p>
<p>容器内的系统时间确实跟宿主机的一样了，</p>
<p>但是在docker中启动resin，发现resin日志里的时间和系统时间差8个小时…..<br><img src="/img/time-8.PNG" alt="Alt text"></p>
<a id="more"></a>
<h1 id="解决方法">解决方法</h1><h2 id="第一种">第一种</h2><p>在resin的启动脚本中加入TZ环境变量：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TZ=<span class="string">"Asia/Shanghai"</span></span><br><span class="line"><span class="built_in">export</span> TZ</span><br></pre></td></tr></table></figure>
<h2 id="第二种">第二种</h2><p>java启动参数中加上 -Duser.timezone=GMT+08</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAV<span class="built_in">A_ARGS</span>=<span class="string">"-J-Djava.util.logging.manager=com.caucho.log.LogManagerImpl  -J-Dfile.encoding=GBK -Duser.timezone=GMT+08  -J-d64 -J-Djava.awt.headless=true -Xms1024m -Xmx1024m -Xss2m -J-XX:PermSize=256M -J-XX:MaxPermSize=512M "</span></span><br></pre></td></tr></table></figure>
<p>另外，网上很多说设置clock的、timezone的，都试过了，不行~<br>还有，百度真是搜不到东西，用bing了~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>docker启动的时候通过-v /etc/localtime:/etc/localtime:ro ，<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  -v  <span class="regexp">/etc/</span><span class="string">localtime:</span><span class="regexp">/etc/</span><span class="string">localtime:</span>ro  focustest-centos5  <span class="regexp">/opt/</span>ActivePython-<span class="number">2.7</span><span class="regexp">/bin/</span>supervisord -c <span class="regexp">/opt/</span>supervisor/supervisord.conf &amp;</span><br></pre></td></tr></table></figure></p>
<p>容器内的系统时间确实跟宿主机的一样了，</p>
<p>但是在docker中启动resin，发现resin日志里的时间和系统时间差8个小时…..<br><img src="/img/time-8.PNG" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux swap解读]]></title>
    <link href="http://tonylit.me/2016/06/06/swap%E8%A7%A3%E8%AF%BB/"/>
    <id>http://tonylit.me/2016/06/06/swap解读/</id>
    <published>2016-06-06T03:37:27.000Z</published>
    <updated>2016-06-06T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>之前遇到过线上swap导致io频繁的问题，当时运维人员调整的swappiness参数，解决了问题。<br>一直对swap一知半解，今天看到公众号推送一篇关于swap的好文章，<br>主要内容：<strong>swap、swappiness及kswapd原理，swap分区优先级</strong><br>在此转载一下。<br>【转自】<a href="http://mp.weixin.qq.com/s?__biz=MzA4Nzg5Nzc5OA==&amp;mid=2651660097&amp;idx=1&amp;sn=a3d38e3af2c9d8d431c46fe7680b428d&amp;scene=0#wechat_redirect" target="_blank" rel="external">Linux SWAP 深度解读</a><br><a id="more"></a></p>
<h1 id="概述">概述</h1><p>本文讨论的swap基于Linux4.4内核代码。Linux内存管理是一套非常复杂的系统，而swap只是其中一个很小的处理逻辑。<br>希望本文能让读者了解Linux对swap的使用大概是什么样子。阅读完本文，应该可以帮你解决以下问题：</p>
<blockquote>
<p>1、swap到底是干嘛的？<br>2、swappiness到底是用来调节什么的？<br>3、kswapd什么时候会进行swap操作？<br>4、什么是内存水位标记？<br>5、swap分区的优先级（priority）有啥用？</p>
</blockquote>
<h1 id="1、什么是SWAP，到底是干嘛的？">1、什么是SWAP，到底是干嘛的？</h1><p>我们一般所说的swap，指的是一个交换分区或文件。在Linux上可以使用swapon -s命令查看当前系统上正在使用的交换空间有哪些，以及相关信息：<br><img src="/img/swap解读/swapon.PNG" alt="Alt text"><br>从功能上讲，交换分区主要是在内存不够用的时候，将部分内存上的数据交换到swap空间上，以便让系统不会因内存不够用而导致oom或者更致命的情况出现。</p>
<p>所以，当内存使用存在压力，开始触发内存回收的行为时，就可能会使用swap空间。</p>
<p>内核对swap的使用实际上是跟内存回收行为紧密结合的。那么关于内存回收和swap的关系，我们需要思考以下几个问题：</p>
<blockquote>
<p>1.为什么要进行内存回收？<br>2.哪些内存可能会被回收呢？<br>3.回收的过程中什么时候会进行交换呢？<br>4.具体怎么交换？</p>
</blockquote>
<p>下面我们就从这些问题出发，一个一个进行分析。</p>
<h2 id="为什么要进行内存回收？">为什么要进行内存回收？</h2><p>内核之所以要进行内存回收，主要原因有两个：</p>
<blockquote>
<p>1.内核需要为任何时刻突发到来的内存申请提供足够的内存。所以一般情况下保证有足够的free空间对于内核来说是必要的。</p>
<p>另外，Linux内核使用cache的策略虽然是不用白不用，内核会使用内存中的page cache对部分文件进行缓存，以便提升文件的读写效率。</p>
<p>所以内核有必要设计一个周期性回收内存的机制，以便cache的使用和其他相关内存的使用不至于让系统的剩余内存长期处于很少的状态。</p>
<p>2.当真的有大于空闲内存的申请到来的时候，会触发强制内存回收</p>
</blockquote>
<p>所以，<strong>内核在应对这两类回收的需求下，分别实现了两种不同的机制</strong>：</p>
<p> 一个是使用<strong>kswapd进程对内存进行周期检查</strong>，以保证平常状态下剩余内存尽可能够用。</p>
<p> 另一个是<strong>直接内存回收（directpagereclaim）</strong>，就是当内存分配时没有空闲内存可以满足要求时，触发直接内存回收。</p>
<p>这两种内存回收的触发路径不同：<br>一个是由内核进程kswapd直接调用内存回收的逻辑进行内存回收；</p>
<blockquote>
<p>参见mm/vmscan.c中的<a href="http://www.kerneltravel.net/kernel-book/%E7%AC%AC%E5%85%AD%E7%AB%A0%20Linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/6.6.2.htm" target="_blank" rel="external">kswapd()主逻辑</a></p>
</blockquote>
<p>另一个是内存申请的时候进入slow path的内存申请逻辑进行回收。</p>
<blockquote>
<p>参见内核代码中的mm/page_alloc.c中的<a href="http://www.linuxidc.com/Linux/2012-01/51157.htm" target="_blank" rel="external">__alloc_pages_slowpath方法</a></p>
</blockquote>
<p>这两个方法中实际进行内存回收的过程殊途同归，最终都是调用shrink_zone()方法进行针对每个zone的内存页缩减。</p>
<p>这个方法中会再调用shrink_lruvec()这个方法对每个组织页的链表进程检查。找到这个线索之后，我们就可以清晰的看到内存回收操作究竟针对的page有哪些了。</p>
<blockquote>
<p>这些链表主要定义在mm/vmscan.c一个enum中：<br><img src="/img/swap解读/lru.PNG" alt="Alt text"><br>根据这个enum可以看到，内存回收主要需要进行扫描的链表有如下4个：<br>anon的inactive<br>anon的active<br>file的inactive<br>file的active</p>
</blockquote>
<p>就是说，内存回收操作主要针对的就是内存中的文件页（file  cache）和匿名页。</p>
<p>关于活跃（active）还是不活跃（inactive）的判断内核会使用lru算法进行处理并进行标记，我们这里不详细解释这个过程。</p>
<p>整个扫描的过程分几个循环：<br>1.首先扫描每个zone上的cgroup组；</p>
<p>2.然后再以cgroup的内存为单元进行page链表的扫描；</p>
<p>3.内核会先扫描anon的active链表，将不频繁的放进inactive链表中，然后扫描inactive链表，将里面活跃的移回active中；</p>
<p><img src="/img/swap解读/lianbiao.PNG" alt="Alt text"></p>
<p>4.进行swap的时候，先对inactive的页进行换出；</p>
<p>5.如果是file的文件映射page页，则判断其是否为脏数据，如果是脏数据就写回，不是脏数据可以直接释放。</p>
<p>这样看来，<strong>内存回收这个行为会对两种内存的使用进行回收</strong>:</p>
<blockquote>
<p>一种是anon的匿名页内存，主要回收手段是swap；</p>
<p>另一种是file-backed的文件映射页，主要的释放手段是写回和清空。</p>
</blockquote>
<p>因为针对filebased的内存，没必要进行交换，其数据原本就在硬盘上，回收这部分内存只要在有脏数据时写回，并清空内存就可以了，以后有需要再从对应的文件读回来。</p>
<p>内存对匿名页和文件缓存一共用了四条链表进行组织，回收过程主要是针对这四条链表进行扫描和操作。</p>
<h1 id="2、swappiness到底是用来调节什么的？">2、swappiness到底是用来调节什么的？</h1><p>很多人应该都知道/proc/sys/vm/swappiness这个文件，是个可以用来调整跟swap相关的参数。这个文件的默认值是60，可以的取值范围是0-100。</p>
<blockquote>
<p>这很容易给大家一个暗示：我是个百分比哦！</p>
</blockquote>
<p>那么这个文件具体到底代表什么意思呢？我们先来看一下说明：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">======</span><br><span class="line">swappiness</span><br><span class="line"></span><br><span class="line">This control <span class="keyword">is</span> used <span class="keyword">to</span> define how aggressive <span class="keyword">the</span> kernel will swap memory pages. Higher values will increase agressiveness, lower values decrease <span class="keyword">the</span> amount <span class="keyword">of</span> swap.</span><br><span class="line"></span><br><span class="line">A value <span class="keyword">of</span> <span class="number">0</span> instructs <span class="keyword">the</span> kernel <span class="keyword">not</span> <span class="keyword">to</span> initiate swap <span class="keyword">until</span> <span class="keyword">the</span> amount <span class="keyword">of</span> free <span class="keyword">and</span> <span class="type">file</span>-backed pages <span class="keyword">is</span> <span class="keyword">less than</span> <span class="keyword">the</span> high water mark <span class="keyword">in</span> a zone.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The default value <span class="keyword">is</span> <span class="number">60.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">======</span><br></pre></td></tr></table></figure>
<p>这个文件的值用来定义内核使用swap的积极程度：</p>
<blockquote>
<p>值越高，内核就会越积极的使用swap；<br>值越低，就会降低对swap的使用积极性。<br>如果这个值为0，那么内存在free和file-backed使用的页面总量小于高水位标记（high water mark）之前，不会发生交换。</p>
</blockquote>
<p>在这里我们可以理解file-backed这个词的含义了，实际上就是上文所说的文件映射页的大小。</p>
<p><strong>我想应该主要考虑这样几个问题:</strong></p>
<p>1.如果回收内存可以有两种途径（匿名页交换和file缓存清空），那么我应该考虑在本次回收的时候，什么情况下多进行file写回，什么情况下应该多进行swap交换。说白了就是平衡两种回收手段的使用，以达到最优。</p>
<p>2.如果符合交换条件的内存较长，是不是可以不用全部交换出去？比如可以交换的内存有100M，但是目前只需要50M内存，实际只要交换50M就可以了，不用把能交换的都交换出去。</p>
<p>分析代码会发现，Linux内核对这部分逻辑的实现代码在<strong>get_scan_count()</strong>这个方法中，这个方法被<strong>shrink_lruvec()</strong>调用。</p>
<p>get_sacn_count()就是处理上述逻辑的，swappiness是它所需要的一个参数，这个参数实际上是指导内核在清空内存的时候，是更倾向于清空file-backed内存还是更倾向于进行匿名页的交换的。</p>
<p>当然，这只是个倾向性，是指在两个都够用的情况下，更愿意用哪个，如果不够用了，那么该交换还是要交换。</p>
<p><strong>简单看一下get_sacn_count()函数的处理部分代码，其中关于swappiness的第一个处理是：</strong><br><img src="/img/swap解读/swappiness.PNG" alt="Alt text"><br>这里注释的很清楚：</p>
<p>1.如果swappiness设置为100，那么匿名页和文件将用同样的优先级进行回收。</p>
<p>很明显，使用清空文件的方式将有利于减轻内存回收时可能造成的IO压力。</p>
<p>因为如果file-backed中的数据不是脏数据的话，那么可以不用写回，这样就没有IO发生，而一旦进行交换，就一定会造成IO。</p>
<p>2.所以系统默认将swappiness的值设置为60，这样回收内存时，对file-backed的文件cache内存的清空比例会更大，内核将会更倾向于进行缓存清空而不是交换。</p>
<p>这里的swappiness值如果是60，那么是不是说内核回收的时候，会按照60:140的比例去做相应的swap和清空file-backed的空间呢？并不是。</p>
<p>在做这个比例计算的时候，内核还要参考当前内存使用的其他信息。对这里具体是怎么处理感兴趣的人，可以自己详细看get_sacn_count()的实现，本文就不多解释了。</p>
<p>我们在此要明确的概念是：swappiness的值是用来控制内存回收时，回收的匿名页更多一些还是回收的file cache更多一些。</p>
<p>3.swappiness设置为0的话，是不是内核就根本不会进行swap了呢？这个答案也是否定的。</p>
<p>首先是内存真的不够用的时候，该swap的话还是要swap。</p>
<p>其次在内核中还有一个逻辑会导致直接使用swap，<strong>内核代码</strong>是这样处理的：<br><img src="/img/swap解读/kukel_swappiness.PNG" alt="Alt text"><br>这里的逻辑是说，如果触发的是全局回收，并且zonefile + zonefree &lt;= high_wmark_pages(zone)条件成立时，就将scan_balance这个标记置为SCAN_ANON。</p>
<p>后续处理scan_balance的时候，如果它的值是SCAN_ANON，则一定会进行针对匿名页的swap操作。</p>
<p>要理解这个行为，我们首先要搞清楚什么是高水位标记（high_wmark_pages）。</p>
<h1 id="3、kswapd什么时候会进行swap操作？">3、kswapd什么时候会进行swap操作？</h1><p>我们回到kswapd周期检查和直接内存回收的两种内存回收机制。</p>
<p><strong>直接内存回收</strong>比较好理解，当申请的内存大于剩余内存的时候，就会触发直接回收。</p>
<p>那么kswapd进程在周期检查的时候触发回收的条件是什么呢？<br>还是从设计角度来看，kswapd进程要周期对内存进行检测，达到一定阈值的时候开始进行内存回收。</p>
<p>这个所谓的阈值可以理解为内存目前的使用压力，就是说，虽然我们还有剩余内存，但是当剩余内存比较小的时候，就是内存压力较大的时候，就应该开始试图回收些内存了，这样才能保证系统尽可能的有足够的内存给突发的内存申请所使用。</p>
<h1 id="4、什么是内存水位标记？(watermark)">4、什么是内存水位标记？(watermark)</h1><p><strong>那么如何描述内存使用的压力呢？</strong></p>
<p>Linux内核使用水位标记（watermark）的概念来描述这个压力情况。</p>
<p>Linux为内存的使用设置了三种内存水位标记:high、low、min。他们<strong>所标记的含义</strong>分别为：</p>
<blockquote>
<p>剩余内存在high以上表示内存剩余较多，目前内存使用压力不大；</p>
<p>high-low的范围表示目前剩余内存存在一定压力；</p>
<p>low-min表示内存开始有较大使用压力，剩余内存不多了；</p>
<p>min是最小的水位标记，当剩余内存达到这个状态时，就说明内存面临很大压力。</p>
<p>小于min这部分内存，内核是保留给特定情况下使用的，一般不会分配。</p>
</blockquote>
<p>内存回收行为就是基于剩余内存的水位标记进行决策的：</p>
<p><strong>当系统剩余内存低于watermark[low]的时候，内核的kswapd开始起作用，进行内存回收。直到剩余内存达到watermark[high]的时候停止。</strong></p>
<p><strong>如果内存消耗导致剩余内存达到了或超过了watermark[min]时，就会触发直接回收（direct reclaim）。</strong></p>
<p>明白了水位标记的概念之后，zonefile + zonefree &lt;= high_wmark_pages(zone)这个公式就能理解了。</p>
<p>这里的zonefile相当于内存中文件映射的总量，zonefree相当于剩余内存的总量。</p>
<p>内核一般认为，如果zonefile还有的话，就可以尽量通过清空文件缓存获得部分内存，而不必只使用swap方式对anon的内存进行交换。</p>
<p>整个判断的概念是说，在全局回收的状态下（有global_reclaim(sc)标记），如果当前的文件映射内存总量+剩余内存总量的值评估小于等于watermark[high]标记的时候，就可以进行直接swap了。</p>
<p>这样是为了防止进入cache陷阱，具体描述可以见代码注释。</p>
<p>这个判断对系统的影响是，<strong>swappiness设置为0时，有剩余内存的情况下也可能发生交换。</strong></p>
<p><strong>那么watermark相关值是如何计算的呢？</strong></p>
<p>所有的内存watermark标记都是根据当前内存总大小和一个可调参数进行运算得来的，这个参数是：/proc/sys/vm/min_free_kbytes</p>
<blockquote>
<p>首先这个参数本身决定了系统中每个zone的watermark[min]的值大小。</p>
<p>然后内核根据min的大小并参考每个zone的内存大小分别算出每个zone的low水位和high水位值。</p>
</blockquote>
<p>想了解具体逻辑可以参见源代码目录下的该文件：</p>
<blockquote>
<p>mm/page_alloc.c</p>
</blockquote>
<p>在系统中可以从/proc/zoneinfo文件中查看当前系统的相关的信息和使用情况。</p>
<p>我们会发现以上内存管理的相关逻辑都是以zone为单位的，这里zone的含义是指内存的分区管理。</p>
<p>Linux将内存分成多个区，主要有:</p>
<blockquote>
<p>直接访问区(DMA)<br>一般区(Normal)<br>高端内存区(HighMemory)</p>
</blockquote>
<p>内核对内存不同区域的访问因为硬件结构因素会有寻址和效率上的差别。如果在NUMA架构上，不同CPU所管理的内存也是不同的zone。</p>
<h1 id="相关参数设置">相关参数设置</h1><p><strong>zone_reclaim_mode：</strong></p>
<p>zone_reclaim_mode模式是在2.6版本后期开始加入内核的一种模式，可以用来管理当一个内存区域(zone)内部的内存耗尽时，是从其内部进行内存回收还是可以从其他zone进行回收的选项，我们可以通过<strong>/proc/sys/vm/zone_reclaim_mode</strong>文件对这个参数进行调整。</p>
<p>在申请内存时(内核的get_page_from_freelist()方法中)，内核在当前zone内没有足够内存可用的情况下，会根据zone_reclaim_mode的设置来决策是从下一个zone找空闲内存还是在zone内部进行回收。这个值为0时表示可以从下一个zone找可用内存，非0表示在本地回收。</p>
<p><strong>这个文件可以设置的值及其含义如下：</strong></p>
<blockquote>
<p>echo 0 &gt; /proc/sys/vm/zone_reclaim_mode：意味着关闭zone_reclaim模式，可以从其他zone或NUMA节点回收内存。</p>
<p>echo 1 &gt; /proc/sys/vm/zone_reclaim_mode：表示打开zone_reclaim模式，这样内存回收只会发生在本地节点内。</p>
<p>echo 2 &gt; /proc/sys/vm/zone_reclaim_mode：在本地回收内存时，可以将cache中的脏数据写回硬盘，以回收内存。</p>
<p>echo 4 &gt; /proc/sys/vm/zone_reclaim_mode：可以用swap方式回收内存。</p>
</blockquote>
<p>不同的参数配置会在NUMA环境中对其他内存节点的内存使用产生不同的影响，大家可以根据自己的情况进行设置以优化你的应用。</p>
<p>默认情况下，zone_reclaim模式是关闭的。这在很多应用场景下可以提高效率，比如文件服务器，或者依赖内存中cache比较多的应用场景。</p>
<p>这样的场景对内存cache速度的依赖要高于进程进程本身对内存速度的依赖，所以我们宁可让内存从其他zone申请使用，也不愿意清本地cache。</p>
<p>如果确定应用场景是内存需求大于缓存，而且尽量要避免内存访问跨越NUMA节点造成的性能下降的话，则可以打开zone_reclaim模式。</p>
<p>此时页分配器会优先回收容易回收的可回收内存（主要是当前不用的page cache页），然后再回收其他内存。</p>
<p>打开本地回收模式的写回可能会引发其他内存节点上的大量的脏数据写回处理。如果一个内存zone已经满了，那么脏数据的写回也会导致进程处理速度收到影响，产生处理瓶颈。</p>
<p>这会降低某个内存节点相关的进程的性能，因为进程不再能够使用其他节点上的内存。但是会增加节点之间的隔离性，其他节点的相关进程运行将不会因为另一个节点上的内存回收导致性能下降。</p>
<p>除非针对本地节点的内存限制策略或者cpuset配置有变化，对swap的限制会有效约束交换只发生在本地内存节点所管理的区域上。</p>
<p><strong>min_unmapped_ratio：</strong></p>
<p>这个参数只在NUMA架构的内核上生效。这个值表示NUMA上每个内存区域的pages总数的百分比。</p>
<p>在zone_reclaim_mode模式下，只有当相关区域的内存使用达到这个百分比，才会发生区域内存回收。</p>
<p>在zone_reclaim_mode设置为4的时候，内核会比较所有的file-backed和匿名映射页，包括swapcache占用的页以及tmpfs文件的总内存使用是否超过这个百分比。</p>
<p>其他设置的情况下，只比较基于一般文件的未映射页，不考虑其他相关页。</p>
<p><strong>page-cluster：</strong></p>
<p>page-cluster是用来控制从swap空间换入数据的时候，一次连续读取的页数，这相当于对交换空间的预读。这里的连续是指在swap空间上的连续，而不是在内存地址上的连续。</p>
<p>因为swap空间一般是在硬盘上，对硬盘设备的连续读取将减少磁头的寻址，提高读取效率。</p>
<p>这个文件中设置的值是2的指数。就是说，如果设置为0，预读的swap页数是2的0次方，等于1页。如果设置为3，就是2的3次方，等于8页。</p>
<p>同时，设置为0也意味着关闭预读功能。文件默认值为3。我们可以根据我们的系统负载状态来设置预读的页数大小。</p>
<h1 id="5、swap分区的优先级（priority）有啥用？">5、swap分区的优先级（priority）有啥用？</h1><p>在使用多个swap分区或者文件的时候，还有一个优先级的概念（Priority）。</p>
<p>在swapon的时候，我们可以使用-p参数指定相关swap空间的优先级，<strong>值越大优先级越高</strong>，可以指定的数字范围是－1到32767。</p>
<p>内核在使用swap空间的时候总是先使用优先级高的空间，后使用优先级低的。</p>
<p>当然如果把多个swap空间的优先级设置成一样的，那么两个swap空间将会以轮询方式并行进行使用。</p>
<p>如果两个swap放在两个不同的硬盘上，相同的优先级可以起到类似RAID0的效果，增大swap的读写效率。</p>
<p>另外，编程时使用mlock()也可以将指定的内存标记为不会换出，具体帮助可以参考man 2 mlock。</p>
<h1 id="最后">最后</h1><p>关于swap的使用建议，针对不同负载状态的系统是不一样的。有时我们希望swap大一些，可以在内存不够用的时候不至于触发oom-killer导致某些关键进程被杀掉，比如数据库业务。</p>
<p>也有时候我们希望不要swap，因为当大量进程爆发增长导致内存爆掉之后，会因为swap导致IO跑死，整个系统都卡住，无法登录，无法处理。</p>
<p>这时候我们就希望不要swap，即使出现oom-killer也造成不了太大影响，但是不能允许服务器因为IO卡死像多米诺骨牌一样全部死机，而且无法登陆。跑cpu运算的无状态的apache就是类似这样的进程池架构的程序。</p>
<p>所以：</p>
<blockquote>
<p>swap到底怎么用?<br>要还是不要？<br>设置大还是小？<br>相关参数应该如何配置？</p>
</blockquote>
<p>是要根据我们自己的生产环境的情况而定的。</p>
<p>阅读完本文后希望大家可以明白一些swap的深层次知识。</p>
<h1 id="Q&amp;A：">Q&amp;A：</h1><p><strong>1.一个内存剩余还比较大的系统中，是否有可能使用swap？</strong></p>
<blockquote>
<p>A: 有可能，如果运行中的某个阶段出发了这个条件”zonefile+zonefree&lt;=high_wmark_pages(zone)“，就可能会swap。</p>
</blockquote>
<p><strong>2.swappiness设置为0就相当于关闭swap么？</strong></p>
<blockquote>
<p>A: 不是的，关闭swap要使用swapoff命令。swappiness只是在内存发生回收操作的时候用来平衡cache回收和swap交换的一个参数，调整为0意味着，尽量通过清缓存来回收内存。</p>
</blockquote>
<p><strong>3.A: swappiness设置为100代表系统会尽量少用剩余内存而多使用swap么？</strong></p>
<blockquote>
<p>不是的，这个值设置为100表示内存发生回收时，从cache回收内存和swap交换的优先级一样。就是说，如果目前需求100M内存，那么较大机率会从cache中清除50M内存，再将匿名页换出50M，把回收到的内存给应用程序使用。但是这还要看cache中是否能有空间，以及swap是否可以交换50m。内核只是试图对它们平衡一些而已。</p>
</blockquote>
<p><strong>4.kswapd进程什么时候开始内存回收？</strong></p>
<blockquote>
<p>A: kswapd根据内存水位标记决定是否开始回收内存，如果标记达到low就开始回收，回收到剩余内存达到high标记为止。</p>
</blockquote>
<p><strong>5.如何查看当前系统的内存水位标记？</strong></p>
<blockquote>
<p>A: cat /proc/zoneinfo。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前遇到过线上swap导致io频繁的问题，当时运维人员调整的swappiness参数，解决了问题。<br>一直对swap一知半解，今天看到公众号推送一篇关于swap的好文章，<br>主要内容：<strong>swap、swappiness及kswapd原理，swap分区优先级</strong><br>在此转载一下。<br>【转自】<a href="http://mp.weixin.qq.com/s?__biz=MzA4Nzg5Nzc5OA==&amp;mid=2651660097&amp;idx=1&amp;sn=a3d38e3af2c9d8d431c46fe7680b428d&amp;scene=0#wechat_redirect">Linux SWAP 深度解读</a><br>]]>
    
    </summary>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ssh 免登陆]]></title>
    <link href="http://tonylit.me/2016/05/18/ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"/>
    <id>http://tonylit.me/2016/05/18/ssh免密码登录/</id>
    <published>2016-05-18T03:37:27.000Z</published>
    <updated>2016-05-18T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>配置A服务器ssh无密码登陆到B服务器<br><a id="more"></a></p>
<h1 id="A服务器生成公钥和私钥">A服务器生成公钥和私钥</h1><blockquote>
<p>ssh-keygen -t rsa -P ‘ ‘</p>
</blockquote>
<p><img src="/img/ssh-keygen.PNG" alt="Alt text"></p>
<h1 id="copy公钥和私钥到B服务器">copy公钥和私钥到B服务器</h1><p>将生成好的两个秘钥拷贝到B服务器上，一样 的目录(/root/.ssh/)<br>id_rsa<br>id_rsa.pub</p>
<h1 id="在B上新建authorized_keys文件">在B上新建authorized_keys文件</h1><p>在b服务器的/root/.ssh/文件夹中新建authorized_keys，把id_rsa.pub<br>里面的内容拷贝进去，并付600权限</p>
<blockquote>
<p>cat id_rsa.pub &gt;&gt; authorized_keys<br>chmod 600 .ssh/authorized_keys</p>
</blockquote>
<p>以上完成后，可以免密码登录了。</p>
<p>tips:<br>ssh登录如果慢，可以修改 vim /etc/ssh/sshd_config，把  GSSAPIAuthentication  yes 改成no 试一试~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>配置A服务器ssh无密码登陆到B服务器<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[rsync和scp传输时间比较]]></title>
    <link href="http://tonylit.me/2016/05/18/scp%E5%92%8Crsync%E4%BC%A0%E8%BE%93%E9%80%9F%E5%BA%A6%E6%AF%94%E8%BE%83/"/>
    <id>http://tonylit.me/2016/05/18/scp和rsync传输速度比较/</id>
    <published>2016-05-18T03:37:27.000Z</published>
    <updated>2016-05-18T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>测试一下rsync和scp在跨服务器之间传输速度比较。因为rsync可以增量同步，但是scp不能，所以rsync测试两次。<br><a id="more"></a><br>传输一个3.2G的文件，里面杂七杂八的图片、小文件、大文件、视频….</p>
<h1 id="rsync传输">rsync传输</h1><p>脚本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">start=$(date +%s)  </span><br><span class="line"></span><br><span class="line">rsync -avr --progress --delete /app/src root@<span class="number">192.168</span>.<span class="number">47.11</span>:/app/</span><br><span class="line"></span><br><span class="line">end=$(date +%s)  </span><br><span class="line">time=$(( <span class="variable">$end</span> - <span class="variable">$start</span> ))  </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$time</span> `enter code here`</span><br></pre></td></tr></table></figure></p>
<h2 id="第一次传输：">第一次传输：</h2><p><strong>时间：58s</strong></p>
<h2 id="第二次传输：">第二次传输：</h2><p><strong>时间：1s</strong></p>
<p>#scp传输<br>脚本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">start=$(date +%s)  </span><br><span class="line"></span><br><span class="line">scp -r /app/src root@<span class="number">192.168</span>.<span class="number">47.11</span>:/app/</span><br><span class="line"></span><br><span class="line">end=$(date +%s)  </span><br><span class="line">time=$(( <span class="variable">$end</span> - <span class="variable">$start</span> ))  </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$time</span> `enter code here`</span><br></pre></td></tr></table></figure></p>
<p><strong>时间：511s</strong></p>
<h1 id="结论：">结论：</h1><p>rsync的传输速度比scp快很多</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>测试一下rsync和scp在跨服务器之间传输速度比较。因为rsync可以增量同步，但是scp不能，所以rsync测试两次。<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[centos7 NFS搭建]]></title>
    <link href="http://tonylit.me/2016/05/06/centos7NFS%E5%AE%89%E8%A3%85/"/>
    <id>http://tonylit.me/2016/05/06/centos7NFS安装/</id>
    <published>2016-05-06T03:37:27.000Z</published>
    <updated>2016-05-06T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>使用独立的物理机做应用代码的svn(git)和编译操作，将打包后的文件通过NFS共享到docker宿主机。<br>来看看centos7上怎么搭建NFS。<br><a id="more"></a></p>
<h1 id="nfs安装">nfs安装</h1><blockquote>
<p>yum -y install nfs-utils rpcbind</p>
</blockquote>
<h1 id="配置nfs">配置nfs</h1><p>nfs的配置文件:/opt/exports<br>默认是空的，比如我需要共享/master/build文件下的文件</p>
<blockquote>
<p>/master/build *(rw,no_root_squash)</p>
</blockquote>
<p>配置信息如下：</p>
<blockquote>
<p>/master/build 可以为一个网段，一个IP，也可以是域名，域名支持通配符 如: *.qq.com<br>rw：read-write，可读写； ro：read-only，只读； sync：文件同时写入硬盘和内存；<br>async：文件暂存于内存，而不是直接写入内存；<br>no_root_squash：NFS客户端连接服务端时如果使用的是root的话，那么对服务端分享的目录来说，也拥有root权限。显然开启这项是不安全的。<br>root_squash：NFS客户端连接服务端时如果使用的是root的话，那么对服务端分享的目录来说，拥有匿名用户权限，通常他将使用nobody或nfsnobody身份；<br>all_squash：不论NFS客户端连接服务端时使用什么用户，对服务端分享的目录来说都是拥有匿名用户权限；<br>anonuid：匿名用户的UID值，可以在此处自行设定。 anongid：匿名用户的GID值。</p>
</blockquote>
<h1 id="启动NFS">启动NFS</h1><blockquote>
<p>service rpcbind start<br>service nfs start</p>
</blockquote>
<h1 id="检查挂载情况">检查挂载情况</h1><blockquote>
<p>showmount -e 192.168.47.10  #查看可挂载</p>
</blockquote>
<p><img src="/img/nfs-mount.PNG" alt="Alt text"></p>
<h2 id="客户端挂载">客户端挂载</h2><p>mount -t nfs 192.168.43.10:/app/test</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>使用独立的物理机做应用代码的svn(git)和编译操作，将打包后的文件通过NFS共享到docker宿主机。<br>来看看centos7上怎么搭建NFS。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何不输出docker日志到控制台]]></title>
    <link href="http://tonylit.me/2016/04/22/%E5%A6%82%E4%BD%95%E4%B8%8D%E8%BE%93%E5%87%BAdocker%E6%97%A5%E5%BF%97%E5%88%B0%E6%8E%A7%E5%88%B6%E5%8F%B0/"/>
    <id>http://tonylit.me/2016/04/22/如何不输出docker日志到控制台/</id>
    <published>2016-04-22T03:37:27.000Z</published>
    <updated>2016-04-22T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>docker run 后一些日志会打印到控制台，怎样不让信息打印到控制台呢？<br><a id="more"></a></p>
<p>解决方法：docker -d &gt; docker.log</p>
<p>docker run -d &gt; docker.log –name test -v /app/webroot/:/app/webroot/ -P docker.vemic.com:5000/focustest-centos5:5.4  /opt/ActivePython-2.7/bin/supervisord -c /opt/supervisor/supervisord.conf &amp;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>docker run 后一些日志会打印到控制台，怎样不让信息打印到控制台呢？<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[supervisor管理容器进程]]></title>
    <link href="http://tonylit.me/2016/04/22/supervisor%E7%AE%A1%E7%90%86docker%E8%BF%9B%E7%A8%8B/"/>
    <id>http://tonylit.me/2016/04/22/supervisor管理docker进程/</id>
    <published>2016-04-22T03:37:27.000Z</published>
    <updated>2016-04-22T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>启动容器的时候，为了保证容器退出时保持UP状态，可以使用 /usr/sbin/sshd -D<br>我们经常会在后面加上若干启动命令：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -ti --name test docker<span class="class">.vemic</span><span class="class">.com</span>:<span class="number">5000</span>/focustest-centos5 -P <span class="number">22</span> -P <span class="number">80</span> /usr/sbin/sshd -D &amp;&amp; nginx &amp;&amp; /opt/resin<span class="class">.sh</span> restart</span><br></pre></td></tr></table></figure></p>
<p>命令多的时候看起来会很乱<br>but，可以使用supervisor来进行优化（管理进程）<br>可以写成这样：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[supervisord]</span></span><br><span class="line"><span class="setting">nodaemon=<span class="value"><span class="keyword">true</span></span></span></span><br><span class="line"><span class="title">[program:sshd]</span></span><br><span class="line"><span class="setting">command=<span class="value">/usr/sbin/sshd -D</span></span></span><br><span class="line"><span class="title">[program:nginx]</span></span><br><span class="line"><span class="setting">command=<span class="value">nginx</span></span></span><br><span class="line"><span class="title">[program:resin]</span></span><br><span class="line"><span class="setting">command=<span class="value">/opt/resin.sh restart</span></span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="supervisor_安装">supervisor 安装</h1><p>具体可以参考：<br><a href="https://rayed.com/wordpress/?p=1496" target="_blank" rel="external">https://rayed.com/wordpress/?p=1496</a></p>
<blockquote>
<p> yum install python-setuptools<br> easy_install pip<br> pip install supervisorr</p>
</blockquote>
<h1 id="编写supervisor-conf">编写supervisor.conf</h1><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[supervisord]</span></span><br><span class="line"><span class="setting">nodaemon=<span class="value"><span class="keyword">true</span></span></span></span><br><span class="line"><span class="title">[program:sshd]</span></span><br><span class="line"><span class="setting">command=<span class="value">/usr/sbin/sshd -D</span></span></span><br><span class="line"><span class="title">[program:dns]</span></span><br><span class="line"><span class="setting">command=<span class="value">/bin/bash -c <span class="string">" echo nameserver 192.168.42.200 &gt; /etc/resolv.conf "</span></span></span></span><br><span class="line"><span class="title">[program:resin]</span></span><br><span class="line"><span class="setting">command=<span class="value">bash /app/build/resin.sh restart</span></span></span><br></pre></td></tr></table></figure>
<h1 id="启动docker-supervisor">启动docker-supervisor</h1><blockquote>
<p>docker run -d  &gt; /home/docker.log –name test -v /app/webroot/:/app/webroot/ -P docker.vemic.com:5000/focustest-centos5:5.4<br>/opt/ActivePython-2.7/bin/supervisord -c /opt/supervisor/supervisord.conf &amp;</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>启动容器的时候，为了保证容器退出时保持UP状态，可以使用 /usr/sbin/sshd -D<br>我们经常会在后面加上若干启动命令：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -ti --name test docker<span class="class">.vemic</span><span class="class">.com</span>:<span class="number">5000</span>/focustest-centos5 -P <span class="number">22</span> -P <span class="number">80</span> /usr/sbin/sshd -D &amp;&amp; nginx &amp;&amp; /opt/resin<span class="class">.sh</span> restart</span><br></pre></td></tr></table></figure></p>
<p>命令多的时候看起来会很乱<br>but，可以使用supervisor来进行优化（管理进程）<br>可以写成这样：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[supervisord]</span></span><br><span class="line"><span class="setting">nodaemon=<span class="value"><span class="keyword">true</span></span></span></span><br><span class="line"><span class="title">[program:sshd]</span></span><br><span class="line"><span class="setting">command=<span class="value">/usr/sbin/sshd -D</span></span></span><br><span class="line"><span class="title">[program:nginx]</span></span><br><span class="line"><span class="setting">command=<span class="value">nginx</span></span></span><br><span class="line"><span class="title">[program:resin]</span></span><br><span class="line"><span class="setting">command=<span class="value">/opt/resin.sh restart</span></span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[中国南京软件开发者大会-参会收获]]></title>
    <link href="http://tonylit.me/2016/04/18/%E5%8D%97%E4%BA%AC%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E8%80%85%E5%A4%A7%E4%BC%9A/"/>
    <id>http://tonylit.me/2016/04/18/南京软件开发者大会/</id>
    <published>2016-04-18T03:37:27.000Z</published>
    <updated>2016-04-18T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>4月16，17两天去参加<a href="http://www.njsd-china.org/" target="_blank" rel="external">中国南京软件开发者大会</a>，比较感兴趣的方向是性能和容器技术这块，很遗憾这两块的分享比较少。其他技术方面（微服务架构、云平台、移动端、VR等）不能全都听明白，不过也有不少收获，开阔了视野。<br>今年是第二届南京开发者大会，参会的人数比去年多了3倍，大概700人。组委会和媒体人数比较多，挺有氛围。<br><a id="more"></a><br><img src="/img/中国南京软件开发者大会/njsd.PNG" alt="Alt text"></p>
<h2 id="16号上午">16号上午</h2><p>上午是4个大牛的分享，<img src="/img/中国南京软件开发者大会/4-16讲师.PNG" alt="Alt text"><br><img src="/img/中国南京软件开发者大会/4-16课程.PNG" alt="Alt text"></p>
<h3 id="李云鹏-打造尊重个性的工程师文化分享">李云鹏-打造尊重个性的工程师文化分享</h3><p>我南大的学哥，赴美留学，在oracle工作10来年，然后回国创业。分享了oracle公司的工程师们怎样工作，然后谈了硅谷其他的fb，google等公司程序员的生活、工作环境，每个公司的工程师文化都不一样，不过都会加班，这个跟国内一样。</p>
<h3 id="王丰明-互联网时代的产品增长">王丰明-互联网时代的产品增长</h3><p>用数据分析来帮助企业定位产品方向。<br>这个我不感兴趣，没仔细听。</p>
<h3 id="许世伟-共建创新生态环境">许世伟-共建创新生态环境</h3><p>七牛的CEO，本来觉得他会讲讲技术，来点干货。然而他说：中国不缺技术，缺的是创新。<br>他从自己的工作经历和七牛的创业经历分享了一些自己的心得，如何创新。<br>我理解的是这样的：其实我们身边有很多痛点，抓住并解决这些痛点就有机会赚钱。</p>
<h2 id="曾凯-微软拥抱Spark的开源之路">曾凯-微软拥抱Spark的开源之路</h2><p>分享了微软基于Spark做了自己的mobius，大数据处理系统。</p>
<h1 id="16号下午">16号下午</h1><p>分了5个会场，我选择跟我工作相关的听听。</p>
<h2 id="无线测试技术会场-沪江无线持续集成的解决方案">无线测试技术会场-沪江无线持续集成的解决方案</h2><p>分享了沪江无线怎么去做app测试持续集成，思想都一样：hook住git仓库，代码有更新的时候jenkins去做后续的打包发布，自动化测试，出报告。</p>
<h3 id="整体流程：">整体流程：</h3><p>自动构建-&gt;APK扫描-&gt;自动化测试-&gt;专项扫描-&gt;聚合报告和产品交付。<br><img src="/img/中国南京软件开发者大会/沪江无线-持续集成.PNG" alt="Alt text"></p>
<h3 id="打包：">打包：</h3><p>android的打包方式：Gradle<br>包的依赖管理：maven<br>产出：debug-apk，release-apk<br>ios的打包方式：xctools<br>包依赖管理：cocoapods<br>产出：debug-ipa、release-ipa debug-app</p>
<h3 id="自动化框架">自动化框架</h3><p><img src="/img/中国南京软件开发者大会/沪江无线流程.PNG" alt="Alt text"></p>
<h3 id="成果">成果</h3><p><img src="/img/中国南京软件开发者大会/沪江无线-成果1.PNG" alt="Alt text"><br><img src="/img/中国南京软件开发者大会/沪江无线-成果2.PNG" alt="Alt text"></p>
<p>我对移动测试这块没太涉及。讲了一些专业知识听不懂！！</p>
<h2 id="架构实践与微服务会场-Akka与微服务实践">架构实践与微服务会场-Akka与微服务实践</h2><p>分享一号店怎样使用akka来做分布式服务，与dubbo做了比较。<br>我们公司分布式服务框架candy也不逊色。</p>
<h2 id="架构实践与微服务会场-数据库应用的Docker化实践">架构实践与微服务会场-数据库应用的Docker化实践</h2><p>分享了七牛怎样使用docker进行数据库应用的承载。<br>为什么七牛要做docker化服务<br>痛点一：部署繁琐<br>               -准备物理机<br>               -配置软件<br>               -难以自动化<br> 痛点二：运维麻烦<br>              -配置监控<br>              -备份策略<br>              -手动运维，难以自动化<br>  痛点三：资源浪费<br>                -不同节点资源消耗不同<br>                -混合部署增大运维的复杂度<br>                -资源利用率低<br>   痛点四：很难支持多租户<br>                -共享db集群，业务互相影响<br>                -自己实现db中间件，实现复杂；开发周期长；投入大，产出小！<br> 这个docker确实可以很好的解决问题，因为docker就这干这个事情的。</p>
<h3 id="存储管理">存储管理</h3><p>七牛目前支持本地LVM，未来可以拓展到网络存储。</p>
<h3 id="网络管理">网络管理</h3><p>-SDN<br>-openvswitch，vxlan，这个之前也研究过，配置比较复杂。我用的是<a href="http://tonylit.me/2016/04/08/pipework%E9%85%8D%E7%BD%AEdocker%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C/">pipework</a></p>
<h3 id="一些坑">一些坑</h3><h4 id="避免docker镜像缓存">避免docker镜像缓存</h4><p>错误：</p>
<blockquote>
<p>run mkdir -p opt &amp;&amp; tar -xvf jdk.tar.gz &amp;&amp; rm -rf jdk,tar,gz</p>
</blockquote>
<p>正确：</p>
<blockquote>
<p>run mkdir -p opt \<br> &amp;&amp; tar -xvf jdk.tar.gz  \<br> &amp;&amp; rm -rf jdk,tar,gz</p>
</blockquote>
<h4 id="容器重启策略">容器重启策略</h4><p>设置恰当的重启策略：<br>no<br>on-failure 【DB类】<br>always（无状态类，缓存类）</p>
<h2 id="无线测试技术会场-云化环境中可靠性测试的自动化技术分享">无线测试技术会场-云化环境中可靠性测试的自动化技术分享</h2><p> 分享了华为怎样将可靠性测试自动化。<br> 整体的实现方案跟ftm发布流程差不多，环境准备完成后，需要自动注入不同的测试点（比如内存泄露，网络波动，断电等）收集系统的处理情况。整个系统还是很牛X的。</p>
<h2 id="17号上午">17号上午</h2><h3 id="软件前沿技术会场-全球最大的OpenStack私有云平台部署和二次开发">软件前沿技术会场-全球最大的OpenStack私有云平台部署和二次开发</h3><p>分享了paypal怎样使用openstack。</p>
<h3 id="DEVOPS-快速迭代中的精益应用性能管理">DEVOPS-快速迭代中的精益应用性能管理</h3><p>听云的APM介绍，没有用开源的框架，自己基于cglib写的一套框架，进行分布式服务应用的监控和节点间的跟踪。<br>我想到了公司用的pinpoint，主要的功能差不多，方法执行时间、堆栈信息、线程信息。<br>后面有时间会对此研究一下，可以跟性能测试很好的结合起来。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>4月16，17两天去参加<a href="http://www.njsd-china.org/">中国南京软件开发者大会</a>，比较感兴趣的方向是性能和容器技术这块，很遗憾这两块的分享比较少。其他技术方面（微服务架构、云平台、移动端、VR等）不能全都听明白，不过也有不少收获，开阔了视野。<br>今年是第二届南京开发者大会，参会的人数比去年多了3倍，大概700人。组委会和媒体人数比较多，挺有氛围。<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker与VMware性能对比]]></title>
    <link href="http://tonylit.me/2016/04/11/docker-vm%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83/"/>
    <id>http://tonylit.me/2016/04/11/docker-vm性能比较/</id>
    <published>2016-04-11T03:37:27.000Z</published>
    <updated>2016-04-11T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>公司的测试环境一直用的vmware，由于docker的优势，现准备将环境部署在docker中。<br>对比虚拟机，docker在磁盘空间上的节省不用说了，MB 与 GB的对比。<br> 性能上的比较一直想做，由于资源和测试方案上面的不足，迟迟没做起来。好在VMware公司自己做了一份性能报告，在此整理一下。<br><a id="more"></a><br>一切源于2014年8月份召开的VMWorld会议，VM宣布与docker合作建立一个项目来研究如何在VM虚拟技术上使用docker。<br>然而IBM出来打了VM的脸（<a href="http://tonylit.me/2015/11/24/docker/">参考之前一篇文章，最下面IBM发表的论文</a>），意思是我做了个实验，结论是docker对物理机几乎没有损耗，但是虚拟机对物理机的损耗很大。<br>VMWare当然不干了，事实是，VMware公司进行了与之前报道类似的实验。实验结果说明，虚拟机环境下运行Docker容器，其性能损失是完全可以接受的，有力的反驳了之前的言论。<br>根据VMware公司所公布的在vSphere虚拟机和直接在服务器中运行Docker容器的结果，可以看出：对于绝大部分的微测试集和Redis测试，vSphere表现出近乎和真实机器同样的性能，而且平均额外开销小于5%；最重要的是，在vSphere虚拟机的Docker容器中运行应用程序的额外开销和在真实服务器上的操作系统上运行容器的额外开销基本相等。<br>VMware公司的实验中，所采用的实验平台、测试集信息以及最终实验结果的详细信息如下。<br>实验平台包括了真实机器（直接运行Ubuntu和CentOS的Linux操作系统）、vSphere虚拟机（在与真实机器同样条件的操作系统中运行即将发布的vSphere）以及运行Docker的真实机器和虚拟机等4中情况。实验中采用包括LINPACK等4个微测试集以及Redis等真实负载。</p>
<p>针对各个测试集的性能结果如下：</p>
<blockquote>
<p>LINPACK。对于45K的问题大小，虚拟化的额外开销基本可以忽略。对于更大的问题，由于内置页表的问题，硬件虚拟化会不可避免的引入相应的额外开销。但是，在虚拟机的Docker容器中运行应用程序和直接在虚拟机中运行并不会引入额外的开销。<br>STREAM。针对所有的操作，虚拟机会引入大约2-3%的额外开销。在真实机器上运行的Docker容器所带来的1-2%的额外开销可能处于噪声边缘，基本可以忽略。<br>FIO。对于随机读操作，虚拟机中的最大可接收IOPS相比于真实机器要小2%左右。但是，二者的随机写操作性能基本相同。总的来讲，Docker容器不会对随机读和随机写造成明显的性能损失。<br>Netperf。对于所有的实验平台，网络的吞吐量是相同的。在延迟测试方面，使用桥接NAT功能时，Docker容器会引入9-10微秒的额外延迟；如果直接使用宿主机网络，Docker容器基本上不会引入额外的延迟时间。<br>Redis。在虚拟机上运行Redis会比真实操作系统中运行性能稍有下降。但是，使用宿主机网络运行Docker容器时，无论Docker运行在真实机器还是虚拟机中，实验性能都跟直接运行在真实机器中基本相同。<br>基于以上的实验结果，VMware公司指出虚拟化会只会引入大约2%到4%的性能损失。在Docker容器中运行像Redis这样的应用程序，其性能是完全可以接受的，而其在安全、管理等方面的优势使得Docker容器成为虚拟化方面的推荐选择。</p>
</blockquote>
<p>具体测试如下：</p>
<h1 id="测试场景：">测试场景：</h1><blockquote>
<p><strong>Native</strong>: Linux OS running directly on hardware (Ubuntu, CentOS)<br><strong>vSphere VM</strong>: Upcoming release of vSphere with the same guest OS as native<br><strong>Native-Docker</strong>: Docker version 1.2 running on a native OS<br><strong>VM-Docker</strong>: Docker version 1.2 running in guest VM on a vSphere host</p>
</blockquote>
<p><img src="/img/docker-vm性能比较/dock_in_vmware_scnerios.png" alt="Alt text"></p>
<h1 id="测试工具">测试工具</h1><blockquote>
<p>LINPACK: This benchmark solves a dense system of linear equations. For large problem sizes it has a large working set and does mostly floating point operations.<br>STREAM: This benchmark measures memory bandwidth across various configurations.<br>FIO: This benchmark is used for I/O benchmarking for block devices and file systems.<br>Netperf: This benchmark is used to measure network performance.<br>Redis: In this experiment, many clients perform continuous requests to the Redis server (key-value datastore).</p>
</blockquote>
<h1 id="测试数据">测试数据</h1><h2 id="LINPACK">LINPACK</h2><p><img src="/img/docker-vm性能比较/dock_in_vmware_linpack.png" alt="Alt text"></p>
<h2 id="STREAM">STREAM</h2><p><img src="/img/docker-vm性能比较/docker_in_vmware_stream.png" alt="Alt text"></p>
<h2 id="FIO">FIO</h2><p><img src="/img/docker-vm性能比较/docker_in_vmware_fio.png" alt="Alt text"></p>
<h2 id="Netperf">Netperf</h2><p><img src="/img/docker-vm性能比较/docker_in_vmware_netperf-latency.png" alt="Alt text"></p>
<p><img src="/img/docker-vm性能比较/docker_in_vmware_netperf-latency-passthrough.png" alt="Alt text"></p>
<p><img src="/img/docker-vm性能比较/docker_in_vmware_netperf-recieve.png" alt="Alt text"></p>
<p><img src="/img/docker-vm性能比较/docker_in_vmware_netperf-transmit.png" alt="Alt text"></p>
<h2 id="Redis">Redis</h2><p><img src="/img/docker-vm性能比较/docker_in_vmware_redis.png" alt="Alt text"></p>
<h1 id="测试结论">测试结论</h1><p><strong>Docker的性能几乎和原生主机性能一致；<br>Docker在VMware虚拟机中的性能损耗很小，仅仅在10GE时延上有大概20%左右的损耗;</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>公司的测试环境一直用的vmware，由于docker的优势，现准备将环境部署在docker中。<br>对比虚拟机，docker在磁盘空间上的节省不用说了，MB 与 GB的对比。<br> 性能上的比较一直想做，由于资源和测试方案上面的不足，迟迟没做起来。好在VMware公司自己做了一份性能报告，在此整理一下。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[pipework配置docker容器网络]]></title>
    <link href="http://tonylit.me/2016/04/08/pipework%E9%85%8D%E7%BD%AEdocker%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C/"/>
    <id>http://tonylit.me/2016/04/08/pipework配置docker容器网络/</id>
    <published>2016-04-08T03:37:27.000Z</published>
    <updated>2016-04-08T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>我希望docker容器有以下几个特点：<br>1.独立的ip，可以和宿主机一个网段<br>2.多宿主机之间的容器相互连通<br>3.容器可以访问外部网络<br><a id="more"></a><br>docker容器默认是可以访问宿主机和外网，但是容器分配的ip不能满足一些业务需求。<br>比如同一台宿主机上面启动两个相同的apache，相同的域名；默认情况只能通过宿主机ip+映射端口的方式访问，不能通过域名的方式访问，这样测试人员用起来很不方便。</p>
<hr>
<p>为了满足以上几点要求，可以通过如下方式实现：<br>1.在宿主机上新建网桥，网桥接口为宿主机网卡<br>2.pipework修改容器的ip<br>OK，下面来看看具体怎样配置：</p>
<hr>
<h1 id="准备"><strong>准备</strong></h1><p>操作系统：centos7<br>docker版本：1.7<br>两台宿主机：<br>A：192.168.43.17<br>B：192.168.43.240</p>
<p><strong>最终实现：</strong><br>A上面启动两个容器，<br>IP分别为192.168.43.245，<br>               192.168.43.246<br> B上面启动两个容器，<br> IP分别为192.168.43.247<br>                192.168.43.248<br> 4个容器相互连通，可以访问宿主机和外部网络。</p>
<h1 id="首先确认一下宿主机上的网卡模式为混杂模式，确认网络可以相互访问">首先确认一下宿主机上的网卡模式为混杂模式，确认网络可以相互访问</h1><p>在实验时，发现docker容器不能访问外网，查了好几天的原因，最终发现我的物理网卡设置的混杂模式为拒绝，哎！！<br><img src="/img/pipework/混杂模式.PNG" alt="Alt text"></p>
<hr>
<h1 id="新建网桥"><strong>新建网桥</strong></h1><p>之间介绍过<a href="http://tonylit.me/2016/04/06/centos7%E7%BD%91%E6%A1%A5%E9%85%8D%E7%BD%AE/">centos7网桥的配置</a>，这里再配置一次：</p>
<h2 id="192-168-43-17宿主机上配置：">192.168.43.17宿主机上配置：</h2><h3 id="新建br0网桥">新建br0网桥</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="preprocessor"># cat /etc/sysconfig/network-scripts/ifcfg-br0 </span></span><br><span class="line">DEVICE=br0</span><br><span class="line">TYPE=Bridge</span><br><span class="line">IPADDR=<span class="number">192.168</span><span class="number">.43</span><span class="number">.17</span></span><br><span class="line">NETMASK=<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line">GATEWAY=<span class="number">192.168</span><span class="number">.43</span><span class="number">.3</span></span><br><span class="line">ONBOOT=yes</span><br><span class="line">BOOTPROTO=none</span><br></pre></td></tr></table></figure>
<h3 id="修改网卡配置">修改网卡配置</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[root@localhost ~]</span><span class="comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens32 </span></span><br><span class="line"><span class="setting">TYPE=<span class="value">Ethernet</span></span></span><br><span class="line"><span class="setting">BOOTPROTO=<span class="value">none</span></span></span><br><span class="line"><span class="setting">DEFROUTE=<span class="value"><span class="keyword">yes</span></span></span></span><br><span class="line"><span class="setting">IPV4_FAILURE_FATAL=<span class="value"><span class="keyword">yes</span></span></span></span><br><span class="line"><span class="setting">IPV6INIT=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_AUTOCONF=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_DEFROUTE=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_PEERDNS=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_PEERROUTES=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_FAILURE_FATAL=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">NAME=<span class="value">ens32</span></span></span><br><span class="line"><span class="setting">UUID=<span class="value"><span class="number">8</span>af1da2e-d878-<span class="number">4325</span>-b28a-f12d7ffbb85c</span></span></span><br><span class="line"><span class="setting">DEVICE=<span class="value">ens32</span></span></span><br><span class="line"><span class="setting">ONBOOT=<span class="value"><span class="keyword">yes</span></span></span></span><br><span class="line"><span class="setting">BRIDGE=<span class="value">br0</span></span></span><br><span class="line"><span class="comment">#IPADDR=192.168.43.17</span></span><br><span class="line"><span class="comment">#PREFIX=24</span></span><br><span class="line"><span class="comment">#GATEWAY=192.168.43.3</span></span><br></pre></td></tr></table></figure>
<h3 id="重启网卡">重启网卡</h3><blockquote>
<p>service network restart</p>
</blockquote>
<p>检查一下成功没：<br><img src="/img/pipework/43-17.PNG" alt="Alt text"></p>
<h2 id="192-168-43-240宿主机配置:">192.168.43.240宿主机配置:</h2><h3 id="新建br0网桥-1">新建br0网桥</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="preprocessor"># cat /etc/sysconfig/network-scripts/ifcfg-br0 </span></span><br><span class="line">DEVICE=br0</span><br><span class="line">TYPE=Bridge</span><br><span class="line">IPADDR=<span class="number">192.168</span><span class="number">.43</span><span class="number">.240</span></span><br><span class="line">NETMASK=<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line">GATEWAY=<span class="number">192.168</span><span class="number">.43</span><span class="number">.3</span></span><br><span class="line">ONBOOT=yes</span><br><span class="line">BOOTPROTO=none</span><br></pre></td></tr></table></figure>
<h3 id="修改网卡配置-1">修改网卡配置</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[root@localhost ~]</span><span class="comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens32 </span></span><br><span class="line"><span class="setting">TYPE=<span class="value">Ethernet</span></span></span><br><span class="line"><span class="setting">BOOTPROTO=<span class="value">none</span></span></span><br><span class="line"><span class="setting">DEFROUTE=<span class="value"><span class="keyword">yes</span></span></span></span><br><span class="line"><span class="setting">IPV4_FAILURE_FATAL=<span class="value"><span class="keyword">yes</span></span></span></span><br><span class="line"><span class="setting">IPV6INIT=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_AUTOCONF=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_DEFROUTE=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_PEERDNS=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_PEERROUTES=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_FAILURE_FATAL=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">NAME=<span class="value">ens32</span></span></span><br><span class="line"><span class="setting">UUID=<span class="value"><span class="number">8</span>af1da2e-d878-<span class="number">4325</span>-b28a-f12d7ffbb85c</span></span></span><br><span class="line"><span class="setting">DEVICE=<span class="value">ens32</span></span></span><br><span class="line"><span class="setting">ONBOOT=<span class="value"><span class="keyword">yes</span></span></span></span><br><span class="line"><span class="setting">BRIDGE=<span class="value">br0</span></span></span><br><span class="line"><span class="comment">#IPADDR=192.168.43.17</span></span><br><span class="line"><span class="comment">#PREFIX=24</span></span><br><span class="line"><span class="comment">#GATEWAY=192.168.43.3</span></span><br></pre></td></tr></table></figure>
<h3 id="重启网卡-1">重启网卡</h3><blockquote>
<p>service network restart</p>
</blockquote>
<p>检查一下成功没：<img src="/img/pipework/43-240.PNG" alt="Alt text"></p>
<hr>
<h1 id="安装pipework"><strong>安装pipework</strong></h1><p>二进制文件，可以从git上下载<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># git clone https://github.com/jpetazzo/pipework   </span></span><br><span class="line"><span class="preprocessor"># cd pipework/</span></span><br><span class="line"><span class="preprocessor"># cp pipework  /usr/bin</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/pipework/pipework.PNG" alt="Alt text"></p>
<hr>
<h1 id="pipework配置容器网络"><strong>pipework配置容器网络</strong></h1><p>1.先启动一个容器，网络模式为none</p>
<blockquote>
<p>docker run -ti –net=none –name=test1    docker.vemic.com:5000/centos5.11 /bin/bash</p>
</blockquote>
<p>2.设置容器网络为192.168.43.245，网关为192.168.43.3</p>
<blockquote>
<p>pipework br0 test1 192.168.43.245/24@192.168.43.3</p>
</blockquote>
<p>进入容器看一下ip：<br><img src="/img/pipework/test.PNG" alt="Alt text"></p>
<p>按照以上方式配置其他容器<br>192.168.43.246<br>另外一台宿主机上配置：<br>192.168.43.247<br>192.168.43.248</p>
<hr>
<h1 id="配置完成，结果测试"><strong>配置完成，结果测试</strong></h1><p>登录到一个容器中，ping其他容器、宿主机、外部网络</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="number">4</span>b6561695c71 /]<span class="preprocessor"># ping <span class="number">192.168</span><span class="number">.43</span><span class="number">.245</span></span></span><br><span class="line">PING <span class="number">192.168</span><span class="number">.43</span><span class="number">.245</span> (<span class="number">192.168</span><span class="number">.43</span><span class="number">.245</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span><span class="number">.43</span><span class="number">.245</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">0.059</span> ms</span><br><span class="line">^C</span><br><span class="line">--- <span class="number">192.168</span><span class="number">.43</span><span class="number">.245</span> ping statistics ---</span><br><span class="line"><span class="number">1</span> packets transmitted, <span class="number">1</span> received, <span class="number">0</span>% packet loss, time <span class="number">0</span>ms</span><br><span class="line">rtt min/avg/max/mdev = <span class="number">0.059</span>/<span class="number">0.059</span>/<span class="number">0.059</span>/<span class="number">0.000</span> ms</span><br><span class="line">[root@<span class="number">4</span>b6561695c71 /]<span class="preprocessor"># ping <span class="number">192.168</span><span class="number">.43</span><span class="number">.246</span></span></span><br><span class="line">PING <span class="number">192.168</span><span class="number">.43</span><span class="number">.246</span> (<span class="number">192.168</span><span class="number">.43</span><span class="number">.246</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span><span class="number">.43</span><span class="number">.246</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">0.209</span> ms</span><br><span class="line">^C</span><br><span class="line">--- <span class="number">192.168</span><span class="number">.43</span><span class="number">.246</span> ping statistics ---</span><br><span class="line"><span class="number">1</span> packets transmitted, <span class="number">1</span> received, <span class="number">0</span>% packet loss, time <span class="number">0</span>ms</span><br><span class="line">rtt min/avg/max/mdev = <span class="number">0.209</span>/<span class="number">0.209</span>/<span class="number">0.209</span>/<span class="number">0.000</span> ms</span><br><span class="line">[root@<span class="number">4</span>b6561695c71 /]<span class="preprocessor"># ping <span class="number">192.168</span><span class="number">.43</span><span class="number">.247</span></span></span><br><span class="line">PING <span class="number">192.168</span><span class="number">.43</span><span class="number">.247</span> (<span class="number">192.168</span><span class="number">.43</span><span class="number">.247</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span><span class="number">.43</span><span class="number">.247</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">1.50</span> ms</span><br><span class="line">^C</span><br><span class="line">--- <span class="number">192.168</span><span class="number">.43</span><span class="number">.247</span> ping statistics ---</span><br><span class="line"><span class="number">1</span> packets transmitted, <span class="number">1</span> received, <span class="number">0</span>% packet loss, time <span class="number">0</span>ms</span><br><span class="line">rtt min/avg/max/mdev = <span class="number">1.505</span>/<span class="number">1.505</span>/<span class="number">1.505</span>/<span class="number">0.000</span> ms</span><br><span class="line">[root@<span class="number">4</span>b6561695c71 /]<span class="preprocessor"># ping <span class="number">192.168</span><span class="number">.43</span><span class="number">.248</span></span></span><br><span class="line">PING <span class="number">192.168</span><span class="number">.43</span><span class="number">.248</span> (<span class="number">192.168</span><span class="number">.43</span><span class="number">.248</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span><span class="number">.43</span><span class="number">.248</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">1.61</span> ms</span><br><span class="line">^C</span><br><span class="line">--- <span class="number">192.168</span><span class="number">.43</span><span class="number">.248</span> ping statistics ---</span><br><span class="line"><span class="number">1</span> packets transmitted, <span class="number">1</span> received, <span class="number">0</span>% packet loss, time <span class="number">0</span>ms</span><br><span class="line">rtt min/avg/max/mdev = <span class="number">1.619</span>/<span class="number">1.619</span>/<span class="number">1.619</span>/<span class="number">0.000</span> ms</span><br><span class="line">[root@<span class="number">4</span>b6561695c71 /]<span class="preprocessor"># ping <span class="number">192.168</span><span class="number">.43</span><span class="number">.17</span></span></span><br><span class="line">PING <span class="number">192.168</span><span class="number">.43</span><span class="number">.17</span> (<span class="number">192.168</span><span class="number">.43</span><span class="number">.17</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span><span class="number">.43</span><span class="number">.17</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">0.303</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span><span class="number">.43</span><span class="number">.17</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">64</span> time=<span class="number">0.086</span> ms</span><br><span class="line">^C</span><br><span class="line">--- <span class="number">192.168</span><span class="number">.43</span><span class="number">.17</span> ping statistics ---</span><br><span class="line"><span class="number">2</span> packets transmitted, <span class="number">2</span> received, <span class="number">0</span>% packet loss, time <span class="number">1000</span>ms</span><br><span class="line">rtt min/avg/max/mdev = <span class="number">0.086</span>/<span class="number">0.194</span>/<span class="number">0.303</span>/<span class="number">0.109</span> ms</span><br><span class="line">[root@<span class="number">4</span>b6561695c71 /]<span class="preprocessor"># ping <span class="number">192.168</span><span class="number">.43</span><span class="number">.240</span></span></span><br><span class="line">PING <span class="number">192.168</span><span class="number">.43</span><span class="number">.240</span> (<span class="number">192.168</span><span class="number">.43</span><span class="number">.240</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span><span class="number">.43</span><span class="number">.240</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">0.787</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span><span class="number">.43</span><span class="number">.240</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">64</span> time=<span class="number">0.617</span> ms</span><br><span class="line">^C</span><br><span class="line">--- <span class="number">192.168</span><span class="number">.43</span><span class="number">.240</span> ping statistics ---</span><br><span class="line"><span class="number">2</span> packets transmitted, <span class="number">2</span> received, <span class="number">0</span>% packet loss, time <span class="number">1000</span>ms</span><br><span class="line">rtt min/avg/max/mdev = <span class="number">0.617</span>/<span class="number">0.702</span>/<span class="number">0.787</span>/<span class="number">0.085</span> ms</span><br><span class="line">[root@<span class="number">4</span>b6561695c71 /]<span class="preprocessor"># ping <span class="number">192.168</span><span class="number">.43</span><span class="number">.10</span></span></span><br><span class="line">PING <span class="number">192.168</span><span class="number">.43</span><span class="number">.10</span> (<span class="number">192.168</span><span class="number">.43</span><span class="number">.10</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span><span class="number">.43</span><span class="number">.10</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">2.11</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span><span class="number">.43</span><span class="number">.10</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">64</span> time=<span class="number">0.415</span> ms</span><br><span class="line">^C</span><br><span class="line">--- <span class="number">192.168</span><span class="number">.43</span><span class="number">.10</span> ping statistics ---</span><br><span class="line"><span class="number">2</span> packets transmitted, <span class="number">2</span> received, <span class="number">0</span>% packet loss, time <span class="number">1001</span>ms</span><br><span class="line">rtt min/avg/max/mdev = <span class="number">0.415</span>/<span class="number">1.263</span>/<span class="number">2.111</span>/<span class="number">0.848</span> ms</span><br></pre></td></tr></table></figure>
<p>都可以ping通</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我希望docker容器有以下几个特点：<br>1.独立的ip，可以和宿主机一个网段<br>2.多宿主机之间的容器相互连通<br>3.容器可以访问外部网络<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[centos7 网桥的配置]]></title>
    <link href="http://tonylit.me/2016/04/06/centos7%E7%BD%91%E6%A1%A5%E9%85%8D%E7%BD%AE/"/>
    <id>http://tonylit.me/2016/04/06/centos7网桥配置/</id>
    <published>2016-04-06T03:37:27.000Z</published>
    <updated>2016-04-06T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>centos7下配置网桥，两个步骤:<br>1.新建网桥配置<br>2.修改网卡配置<br><a id="more"></a></p>
<h1 id="新建br0_网桥配置">新建br0 网桥配置</h1><p>在/etc/sysconfig/network-scripts/目录下新建ifcfg-br0,添加如下配置信息：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=br0</span><br><span class="line">TYPE=Bridge</span><br><span class="line">IPADDR=<span class="number">192.168</span><span class="number">.43</span><span class="number">.17</span></span><br><span class="line">NETMASK=<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line">GATEWAY=<span class="number">192.168</span><span class="number">.43</span><span class="number">.3</span></span><br><span class="line">ONBOOT=yes</span><br><span class="line">BOOTPROTO=none</span><br></pre></td></tr></table></figure>
<h1 id="修改网卡配置">修改网卡配置</h1><p>我这里的网卡叫ens32，修改ifcfg-ens32<br>，并增加BRIDGE=br0</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">TYPE=<span class="value">Ethernet</span></span></span><br><span class="line"><span class="setting">BOOTPROTO=<span class="value">none</span></span></span><br><span class="line"><span class="setting">DEFROUTE=<span class="value"><span class="keyword">yes</span></span></span></span><br><span class="line"><span class="setting">IPV4_FAILURE_FATAL=<span class="value"><span class="keyword">yes</span></span></span></span><br><span class="line"><span class="setting">IPV6INIT=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_AUTOCONF=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_DEFROUTE=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_PEERDNS=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_PEERROUTES=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_FAILURE_FATAL=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">NAME=<span class="value">ens32</span></span></span><br><span class="line"><span class="setting">UUID=<span class="value"><span class="number">8</span>af1da2e-d878-<span class="number">4325</span>-b28a-f12d7ffbb85c</span></span></span><br><span class="line"><span class="setting">DEVICE=<span class="value">ens32</span></span></span><br><span class="line"><span class="setting">ONBOOT=<span class="value"><span class="keyword">yes</span></span></span></span><br><span class="line"><span class="setting">BRIDGE=<span class="value">br0</span></span></span><br><span class="line"><span class="comment">#IPADDR=192.168.43.17</span></span><br><span class="line"><span class="comment">#PREFIX=24</span></span><br><span class="line"><span class="comment">#GATEWAY=192.168.43.3</span></span><br></pre></td></tr></table></figure>
<h1 id="重启网卡">重启网卡</h1><blockquote>
<p>service network restart</p>
</blockquote>
<p>看看生效没：<br><img src="/img/docker/centos7网桥.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>centos7下配置网桥，两个步骤:<br>1.新建网桥配置<br>2.修改网卡配置<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[centos7 自定义docker网桥]]></title>
    <link href="http://tonylit.me/2016/04/05/centos7%E8%87%AA%E5%AE%9A%E4%B9%89docker%E7%BD%91%E6%A1%A5/"/>
    <id>http://tonylit.me/2016/04/05/centos7自定义docker网桥/</id>
    <published>2016-04-05T03:37:27.000Z</published>
    <updated>2016-04-05T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>如果你不想使用docker0，docker可以指定使用的网桥</p>
<blockquote>
<p>-b BRIDGE or –bridge=BRIDGE</p>
</blockquote>
<a id="more"></a>
<h1 id="新建网桥_编辑bridge的配置文件">新建网桥 编辑bridge的配置文件</h1><p>我这里使用的centos7，在/etc/sysconfig/network-scripts下新建一个网桥配置：ifcfg-br0 并编辑：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=<span class="string">"br0"</span></span><br><span class="line">ONBOOT=<span class="string">"yes"</span></span><br><span class="line">TYPE=Bridge</span><br><span class="line">BOOTPROTO=<span class="keyword">static</span></span><br><span class="line">IPADDR=<span class="number">192.168</span><span class="number">.43</span><span class="number">.244</span></span><br><span class="line">NETMASK=<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>
<p>我们看到，这里指定一个名叫br0的网桥，ip为192.168.43.244</p>
<h2 id="重启网络">重启网络</h2><blockquote>
<p> service network restart</p>
</blockquote>
<p>查看一下网桥有木有生效<br><img src="/img/docker网桥/br0网桥.PNG" alt="Alt text"><br>好的，已经生效！</p>
<h1 id="修改docker启动参数，增加-b=br0">修改docker启动参数，增加-b=br0</h1><blockquote>
<p>vim /lib/systemd/system/docker.service</p>
</blockquote>
<p><img src="/img/docker网桥/网桥参数.PNG" alt="Alt text"></p>
<h2 id="重启docker服务">重启docker服务</h2><blockquote>
<p>service docker restart</p>
</blockquote>
<p>创建一个容器，看一下是不是连接到br0网桥上了<br><img src="/img/docker网桥/brctl-show.PNG" alt="Alt text"></p>
<p>我们看到新建的容器连接到了br0网桥上面</p>
<h1 id="删除网桥">删除网桥</h1><p>当然，如果想删除网桥，可以用以下命令：</p>
<blockquote>
<p> ip link set dev br0 down<br> ip link del br0</p>
</blockquote>
<h1 id="拓扑图">拓扑图</h1><p><img src="/img/docker网桥/dockertuopu-1.jpg" alt="Alt text"><br><img src="/img/docker网桥/dockertuopu-2.jpg" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>如果你不想使用docker0，docker可以指定使用的网桥</p>
<blockquote>
<p>-b BRIDGE or –bridge=BRIDGE</p>
</blockquote>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker 远程访问]]></title>
    <link href="http://tonylit.me/2016/04/02/docker%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    <id>http://tonylit.me/2016/04/02/docker远程连接/</id>
    <published>2016-04-02T03:37:27.000Z</published>
    <updated>2016-04-02T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>docker的client与server有两种连接方式，一种是socket连接，另外一种就是remote api。<br>这里整理一下怎样进行remote api访问docker的server。<br><a id="more"></a><br>docker守护进程启动时-H 有三个选项：配置服务端的3种连接方式<br><img src="/img/docker/docker连接方式.PNG" alt="Alt text"></p>
<h1 id="修改成tcp的连接方式">修改成tcp的连接方式</h1><p>我这里是centos7，修改/lib/systemd/system/docker.service<br><img src="/img/docker/docker-tcp连接方式.PNG" alt="Alt text"></p>
<p>修改完成后重启docker service</p>
<blockquote>
<p>service docker restart</p>
</blockquote>
<p>看一下是不是tcp的方式<br><img src="/img/docker/docker-tcp进程.PNG" alt="Alt text"></p>
<h1 id="测试一下remote_api">测试一下remote api</h1><blockquote>
<p>curl localhost:2375/info<br><img src="/img/docker/remote-info.PNG" alt="Alt text"></p>
</blockquote>
<h1 id="也可以通过修改DOCKER_HOST的方式">也可以通过修改DOCKER_HOST的方式</h1><blockquote>
<p>export DOCKER_HOST=”tcp://localhost:2375”</p>
</blockquote>
<p>添加此环境变量后，不用修改docker守护进程的启动方式也可以进行docker remote连接。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>docker的client与server有两种连接方式，一种是socket连接，另外一种就是remote api。<br>这里整理一下怎样进行remote api访问docker的server。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用weave实现docker多宿主机互联]]></title>
    <link href="http://tonylit.me/2016/03/29/docker-weave%E7%BD%91%E7%BB%9C%E4%BA%92%E8%BF%9E/"/>
    <id>http://tonylit.me/2016/03/29/docker-weave网络互连/</id>
    <published>2016-03-29T03:37:27.000Z</published>
    <updated>2016-03-29T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>使用weave实现docker多宿主机互联<br><a id="more"></a><br>weave是编织的意思，这里指的是建立一个虚拟的网络，将不同主机上的docker容器连接起来<br><img src="/img/docker-weave/weave图.PNG" alt="Alt text"><br>weave的实现原理如下图：</p>
<h1 id="环境准备">环境准备</h1><p>两台装有docker的物理机<br>192.168.1.111<br>192.168.1.113</p>
<h1 id="安装weave">安装weave</h1><p>从github上下载二进制文件安装</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># sudo wget -O <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>weave https:<span class="comment">//raw.githubusercontent.com/zettio/weave/master/weave</span></span><br><span class="line"># sudo chmod a+x <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>weave</span><br></pre></td></tr></table></figure>
<h1 id="启动weave">启动weave</h1><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># weave launch</span></span><br><span class="line">Unable <span class="keyword">to</span> find image <span class="string">'zettio/weave'</span> locally</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p><img src="/img/docker-weave/weave launch.PNG" alt="Alt text"></p>
<p>其实下载了三个镜像文件，并且启动了3个容器<br><img src="/img/docker-weave/weave镜像文件.PNG" alt="Alt text"><br><img src="/img/docker-weave/weave容器.PNG" alt="Alt text"></p>
<p>此时会发现有两个网桥，一个是Docker默认生成的，另一个是Weave生成的<br><img src="/img/docker-weave/weave网桥.PNG" alt="Alt text"></p>
<h1 id="连接不同主机">连接不同主机</h1><p>主机B要连接到主机A，则需要在weave launch 后面加上A的ip<br>在B的主机上</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># weave launch <span class="number">192.168</span><span class="number">.1</span><span class="number">.111</span></span></span><br></pre></td></tr></table></figure>
<h1 id="通过weave启动容器">通过weave启动容器</h1><p>可以使用如下方式启动</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weave run <span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span>/<span class="number">24</span> -ti centos /bin/bash</span><br></pre></td></tr></table></figure>
<p>网上有一个比较好的做法：将启动后容器的id赋给c2变量</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># c2=$(weave run <span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span>/<span class="number">24</span> -ti centos /bin/bash)</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># docker-enter c2</span></span><br></pre></td></tr></table></figure>
<p>OK，两个主机上的容器可以互联了</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>使用weave实现docker多宿主机互联<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker pull关于https的报错处理]]></title>
    <link href="http://tonylit.me/2016/03/29/docker_pull_https_error/"/>
    <id>http://tonylit.me/2016/03/29/docker_pull_https_error/</id>
    <published>2016-03-29T03:37:27.000Z</published>
    <updated>2016-03-29T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>从docker1.3.2版本以后，docker registry使用的是https，用docker pull 非https的docker regsitry的时候会报下面错误：<br><img src="/img/docker异常/docker_pull_https_error.PNG" alt="Alt text"></p>
<a id="more"></a>
<p>网上很多解决方法都是Ubuntu系统的，centos7 docker的配置文件真是难找。</p>
<h1 id="修改docker配置文件">修改docker配置文件</h1><p>刚开始修改/etc/sysconfig/docker文件，加入–insecure-registry docker.vemic.com:5000，没启作用。<br>起作用的配置如下修改：<br>vi /usr/lib/systemd/system/docker.service</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[Unit]</span></span><br><span class="line"><span class="setting">Description=<span class="value">Docker Application Container Engine</span></span></span><br><span class="line"><span class="comment">##这里讲https-&gt;http</span></span><br><span class="line"><span class="setting">Documentation=<span class="value">http://docs.docker.com</span></span></span><br><span class="line"><span class="setting">After=<span class="value">network.target docker.socket</span></span></span><br><span class="line"><span class="setting">Requires=<span class="value">docker.socket</span></span></span><br><span class="line"><span class="title"></span><br><span class="line">[Service]</span></span><br><span class="line"><span class="comment">##这里加入-d  --insecure-registry docker.vemic.com:5000</span></span><br><span class="line"><span class="setting">ExecStart=<span class="value">/usr/bin/docker -d  --insecure-registry docker.vemic.com:<span class="number">5000</span> -H fd:// <span class="variable">$OPTIONS</span> <span class="variable">$DOCKER_STORAGE_OPTIONS</span>  </span></span></span><br><span class="line"><span class="setting">MountFlags=<span class="value">slave</span></span></span><br><span class="line"><span class="setting">LimitNOFILE=<span class="value"><span class="number">1048576</span></span></span></span><br><span class="line"><span class="setting">LimitNPROC=<span class="value"><span class="number">1048576</span></span></span></span><br><span class="line"><span class="setting">LimitCORE=<span class="value">infinity</span></span></span><br><span class="line"><span class="title"></span><br><span class="line">[Install]</span></span><br><span class="line"><span class="setting">WantedBy=<span class="value">multi-user.target</span></span></span><br></pre></td></tr></table></figure>
<p>以上修改后重启docker</p>
<blockquote>
<p>service docker restart<br>systemctl daemon-reload</p>
</blockquote>
<p>OK了</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>从docker1.3.2版本以后，docker registry使用的是https，用docker pull 非https的docker regsitry的时候会报下面错误：<br><img src="/img/docker异常/docker_pull_https_error.PNG" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker网络学习]]></title>
    <link href="http://tonylit.me/2016/03/22/docker%E5%9B%9B%E7%A7%8D%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F/"/>
    <id>http://tonylit.me/2016/03/22/docker四种网络模式/</id>
    <published>2016-03-22T03:37:27.000Z</published>
    <updated>2016-03-22T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>docker发展到现在，依然后很多不完善的地方，其中网络方面就是比较薄弱的部分。最近在学习docker网络方面的知识，在此整理一下。<br><a id="more"></a></p>
<h1 id="Docker的4种网络模式">Docker的4种网络模式</h1><p>我们在使用docker run创建Docker容器时，可以用–net选项指定容器的网络模式，Docker有以下4种网络模式：</p>
<blockquote>
<p><strong>host模式</strong>，使用–net=host指定。<br><strong>container模式</strong>，使用–net=container:NAME_or_ID指定。<br><strong>none模式</strong>，使用–net=none指定。<br><strong>bridge模式</strong>，使用–net=bridge指定，默认设置。</p>
</blockquote>
<p>研究docker网络之前先看一下docker宿主机的网络情况：<br>输入ifconfig<br><img src="/img/docker-network/宿主机网络情况.PNG" alt="Alt text"><br>可以看到，安装了docker后，docker会虚拟出一个名字叫docker0的网桥（其上有一个 docker0 内部接口），它在内核层连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到同一个物理网络。</p>
<hr>
<p>基于centos:5.11版本我自己做了一个镜像focustech/centos:5.11，就用这个镜像来实验。</p>
<h1 id="bridge模式-默认模式">bridge模式-默认模式</h1><p>bridge模式是Docker默认的网络设置，此模式会为每一个容器分配Network Namespace、设置IP等，并将一个主机上的Docker容器连接到一个虚拟网桥上。<br>启动一个容器看一下：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="command">run</span> -ti <span class="comment">--rm focustech/centos:5.11 /bin/bash</span></span><br></pre></td></tr></table></figure>
<p><img src="/img/docker-network/docker-bridge-network.PNG" alt="Alt text"></p>
<h2 id="bridge模式拓扑">bridge模式拓扑</h2><p>上面也提到了，docker server启动的时候，会创建名叫docker0的虚拟网桥，在此宿主机上启动的docker容器都会连接到这个网桥上来进行通信，有点类似于交换机。<br>容器的ip分配会从<a href="http://tools.ietf.org/html/rfc1918" target="_blank" rel="external">RFC1918</a>所定义的私有ip网段中取，一般会使用172.17.0.0/16这个网段</p>
<p><img src="/img/docker-network/docker0拓扑.png" alt="Alt text"><br>Docker完成以上网络配置的过程大致是这样的：</p>
<blockquote>
<p>在主机上创建一对虚拟网卡veth<br>pair设备。veth设备总是成对出现的，它们组成了一个数据的通道，数据从一个设备进入，就会从另一个设备出来。因此，veth设备常用来连接两个网络设备。</p>
<p>Docker将veth pair设备的一端放在新创建的容器中，并命名为eth0。另一端放在主机中，以veth65f9这样类似的名字命名，并将这个网络设备加入到docker0网桥中，可以通过brctl show命令查看。</p>
<p>从docker0子网中分配一个IP给容器使用，并设置docker0的IP地址为容器的默认网关。</p>
</blockquote>
<h1 id="host模式">host模式</h1><p>Docker使用了Linux的Namespaces技术来进行资源隔离，如PID Namespace隔离进程，Mount Namespace隔离文件系统，Network Namespace隔离网络等。一个Network Namespace提供了一份独立的网络环境，包括网卡、路由、Iptable规则等都与其他的Network Namespace隔离。一个Docker容器一般会分配一个独立的Network Namespace。但如果启动容器的时候使用host模式，那么这个容器将不会获得一个独立的Network Namespace，而是和宿主机共用一个Network Namespace。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。</p>
<p>使用–net=host来启动容器看一下：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span> -ti --<span class="keyword">net</span>=host --<span class="keyword">rm</span> focustech/centos:5.11 /bin/bash</span><br></pre></td></tr></table></figure></p>
<p>输入ifconfig，会看到它的网络情况和宿主机器的一模一样。</p>
<h1 id="container模式">container模式</h1><p>这个模式指定新创建的容器和已经存在的容器共享一个network namespace。新创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过lo网卡设备通信。</p>
<h1 id="none模式">none模式</h1><p>在这种模式下，Docker容器拥有自己的Network Namespace，但是，并不为Docker容器进行任何网络配置。也就是说，这个Docker容器没有网卡、IP、路由等信息。需要我们自己为Docker容器添加网卡、配置IP等。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span> -ti --<span class="keyword">net</span>=none --<span class="keyword">rm</span> focustech/centos:5.11 /bin/bash</span><br></pre></td></tr></table></figure>
<p><img src="/img/docker-network/none.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>docker发展到现在，依然后很多不完善的地方，其中网络方面就是比较薄弱的部分。最近在学习docker网络方面的知识，在此整理一下。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[spring quartz执行定时任务]]></title>
    <link href="http://tonylit.me/2016/03/15/spring%20quartz%E9%85%8D%E7%BD%AE/"/>
    <id>http://tonylit.me/2016/03/15/spring quartz配置/</id>
    <published>2016-03-15T03:37:27.000Z</published>
    <updated>2016-03-15T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>最近定时任务总是执行延后，定时任务执行比较频繁，而且时间比较长<br>查了许久，发现自己没有配置定时任务线程数量<br>在此回顾一下quartz配置。<br><a id="more"></a></p>
<h1 id="需要执行任务的业务类">需要执行任务的业务类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">syncAppTrigger</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SyncApp syncApp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        syncApp.delete();</span><br><span class="line">        syncApp.sync();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="quzrtz-xml_配置">quzrtz.xml 配置</h1><p>线程池配置,默认是10个，在此修改为50个<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 线程执行器配置，用于任务注册 --&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"executor"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"corePoolSize"</span> <span class="attribute">value</span>=<span class="value">"50"</span> /&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxPoolSize"</span> <span class="attribute">value</span>=<span class="value">"50"</span> /&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"queueCapacity"</span> <span class="attribute">value</span>=<span class="value">"500"</span> /&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>任务启动<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- schedule的配置信息 --&gt;</span><br><span class="line">&lt;bean class=<span class="string">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span></span><br><span class="line">      lazy-init=<span class="string">"false"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"triggers"</span>&gt;</span><br><span class="line">        &lt;list&gt;</span><br><span class="line">            &lt;<span class="keyword">ref</span> bean=<span class="string">"syncAppTrigger"</span> /&gt;</span><br><span class="line">        &lt;/list&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">     &lt;property name=<span class="string">"taskExecutor"</span> <span class="keyword">ref</span>=<span class="string">"executor"</span> /&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p>
<p>配置触发器<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- trigger的配置信息 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 应用定时任务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"syncApp"</span> <span class="attribute">class</span>=<span class="value">"com.focustech.fds.quartz.trigger.sync.syncAppTrigger"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"syncAppTask"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"targetObject"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">ref</span> <span class="attribute">bean</span>=<span class="value">"syncApp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"targetMethod"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">value</span>&gt;</span>excute<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"syncAppTrigger"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.scheduling.quartz.CronTriggerBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"jobDetail"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">ref</span> <span class="attribute">bean</span>=<span class="value">"syncAppTask"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"cronExpression"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">value</span>&gt;</span>0 0/1 * * * ?<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="Cron常用的表达式">Cron常用的表达式</h1><blockquote>
<p>“0 0 12 <em> </em> ?” 每天中午12点触发<br>“0 15 10 ? <em> </em>“ 每天上午10:15触发<br>“0 15 10 <em> </em> ?” 每天上午10:15触发<br>“0 15 10 <em> </em> ? <em>“ 每天上午10:15触发<br>“0 15 10 </em> <em> ? 2005”  2005年的每天上午10:15触发<br>“0 </em> 14 <em> </em> ?” 在每天下午2点到下午2:59期间的每1分钟触发<br>“0 0/5 14 <em> </em> ?” 在每天下午2点到下午2:55期间的每5分钟触发<br>“0 0/5 14,18 <em> </em> ?”  在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发<br>“0 0-5 14 <em> </em> ?”  在每天下午2点到下午2:05期间的每1分钟触发<br>“0 10,44 14 ? 3 WED” 每年三月的星期三的下午2:10和2:44触发<br>“0 15 10 ? <em> MON-FRI” 周一至周五的上午10:15触发<br>“0 15 10 15 </em> ?” 每月15日上午10:15触发 “0<br>15 10 L <em> ?” 每月最后一日的上午10:15触发<br>“0 15 10 ? </em> 6L” 每月的最后一个星期五上午10:15触发<br>“0 15 10 ? <em> 6L 2002-2005” 2002年至2005年的每月的最后一个星期五上午10:15触发<br>“0 15 10 ? </em>6#3” 每月的第三个星期五上午10:15触发</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近定时任务总是执行延后，定时任务执行比较频繁，而且时间比较长<br>查了许久，发现自己没有配置定时任务线程数量<br>在此回顾一下quartz配置。<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[40个Java多线程问题总结]]></title>
    <link href="http://tonylit.me/2016/03/12/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%8440%E4%B8%AA%E9%97%AE%E9%A2%98/"/>
    <id>http://tonylit.me/2016/03/12/java多线程的40个问题/</id>
    <published>2016-03-12T03:37:27.000Z</published>
    <updated>2016-03-12T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>朋友圈分享的好文章，关于java多线程的，在此转载。我很喜欢作者对技术的态度，引用他的一段话：</p>
<blockquote>
<p>我不能保证写的每个地方都是对的，但是至少能保证不复制、不黏贴，保证每一句话、每一行代码都经过了认真的推敲、仔细的斟酌。每一篇文章的背后，希望都能看到自己对于技术、对于生活的态度。<br>我相信乔布斯说的，只有那些疯狂到认为自己可以改变世界的人才能真正地改变世界。面对压力，我可以挑灯夜战、不眠不休；面对困难，我愿意迎难而上、永不退缩</p>
</blockquote>
<p><a href="http://www.cnblogs.com/xrq730/p/5060921.html" target="_blank" rel="external">原创地址</a><br><a id="more"></a></p>
<h1 id="40个问题汇总">40个问题汇总</h1><h2 id="1、多线程有什么用？">1、多线程有什么用？</h2><p>一个可能在很多人看来很扯淡的一个问题：我会用多线程就好了，还管它有什么用？在我看来，这个回答更扯淡。所谓”知其然知其所以然”，”会用”只是”知其然”，”为什么用”才是”知其所以然”，只有达到”知其然知其所以然”的程度才可以说是把一个知识点运用自如。OK，下面说说我对这个问题的看法：</p>
<p>（1）发挥多核CPU的优势</p>
<p>随着工业的进步，现在的笔记本、台式机乃至商用的应用服务器至少也都是双核的，4核、8核甚至16核的也都不少见，如果是单线程的程序，那么在双核CPU上就浪费了50%，在4核CPU上就浪费了75%。单核CPU上所谓的”多线程”那是假的多线程，同一时间处理器只会处理一段逻辑，只不过线程之间切换得比较快，看着像多个线程”同时”运行罢了。多核CPU上的多线程才是真正的多线程，它能让你的多段逻辑同时工作，多线程，可以真正发挥出多核CPU的优势来，达到充分利用CPU的目的。</p>
<p>（2）防止阻塞</p>
<p>从程序运行效率的角度来看，单核CPU不但不会发挥出多线程的优势，反而会因为在单核CPU上运行多线程导致线程上下文的切换，而降低程序整体的效率。但是单核CPU我们还是要应用多线程，就是为了防止阻塞。试想，如果单核CPU使用单线程，那么只要这个线程阻塞了，比方说远程读取某个数据吧，对端迟迟未返回又没有设置超时时间，那么你的整个程序在数据返回回来之前就停止运行了。多线程可以防止这个问题，多条线程同时运行，哪怕一条线程的代码执行读取数据阻塞，也不会影响其它任务的执行。</p>
<p>（3）便于建模</p>
<p>这是另外一个没有这么明显的优点了。假设有一个大的任务A，单线程编程，那么就要考虑很多，建立整个程序模型比较麻烦。但是如果把这个大的任务A分解成几个小任务，任务B、任务C、任务D，分别建立程序模型，并通过多线程分别运行这几个任务，那就简单很多了。</p>
<h2 id="2、创建线程的方式">2、创建线程的方式</h2><p>比较常见的一个问题了，一般就是两种：</p>
<p>（1）继承Thread类</p>
<p>（2）实现Runnable接口</p>
<p>至于哪个好，不用说肯定是后者好，因为实现接口的方式比继承类的方式更灵活，也能减少程序之间的耦合度，面向接口编程也是设计模式6大原则的核心。</p>
<h2 id="3、start()方法和run()方法的区别">3、start()方法和run()方法的区别</h2><p>只有调用了start()方法，才会表现出多线程的特性，不同线程的run()方法里面的代码交替执行。如果只是调用run()方法，那么代码还是同步执行的，必须等待一个线程的run()方法里面的代码全部执行完毕之后，另外一个线程才可以执行其run()方法里面的代码。</p>
<h2 id="4、Runnable接口和Callable接口的区别">4、Runnable接口和Callable接口的区别</h2><p>有点深的问题了，也看出一个Java程序员学习知识的广度。</p>
<p>Runnable接口中的run()方法的返回值是void，它做的事情只是纯粹地去执行run()方法中的代码而已；Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。</p>
<p>这其实是很有用的一个特性，因为多线程相比单线程更难、更复杂的一个重要原因就是因为多线程充满着未知性，某条线程是否执行了？某条线程执行了多久？某条线程执行的时候我们期望的数据是否已经赋值完毕？无法得知，我们能做的只是等待这条多线程的任务执行完毕而已。而Callable+Future/FutureTask却可以获取多线程运行的结果，可以在等待时间太长没获取到需要的数据的情况下取消该线程的任务，真的是非常有用。</p>
<h2 id="5、CyclicBarrier和CountDownLatch的区别">5、CyclicBarrier和CountDownLatch的区别</h2><p>两个看上去有点像的类，都在java.util.concurrent下，都可以用来表示代码运行到某个点上，二者的区别在于：</p>
<p>（1）CyclicBarrier的某个线程运行到某个点上之后，该线程即停止运行，直到所有的线程都到达了这个点，所有线程才重新运行；CountDownLatch则不是，某线程运行到某个点上之后，只是给某个数值-1而已，该线程继续运行</p>
<p>（2）CyclicBarrier只能唤起一个任务，CountDownLatch可以唤起多个任务</p>
<p>（3）CyclicBarrier可重用，CountDownLatch不可重用，计数值为0该CountDownLatch就不可再用了</p>
<h2 id="6、volatile关键字的作用">6、volatile关键字的作用</h2><p>一个非常重要的问题，是每个学习、应用多线程的Java程序员都必须掌握的。理解volatile关键字的作用的前提是要理解Java内存模型，这里就不讲Java内存模型了，可以参见第31点，volatile关键字的作用主要有两个：</p>
<p>（1）多线程主要围绕可见性和原子性两个特性而展开，使用volatile关键字修饰的变量，保证了其在多线程之间的可见性，即每次读取到volatile变量，一定是最新的数据</p>
<p>（2）代码底层执行不像我们看到的高级语言—-Java程序这么简单，它的执行是Java代码–&gt;字节码–&gt;根据字节码执行对应的C/C++代码–&gt;C/C++代码被编译成汇编语言–&gt;和硬件电路交互，现实中，为了获取更好的性能JVM可能会对指令进行重排序，多线程下可能会出现一些意想不到的问题。使用volatile则会对禁止语义重排序，当然这也一定程度上降低了代码执行效率</p>
<p>从实践角度而言，volatile的一个重要作用就是和CAS结合，保证了原子性，详细的可以参见java.util.concurrent.atomic包下的类，比如AtomicInteger。</p>
<h2 id="7、什么是线程安全">7、什么是线程安全</h2><p>又是一个理论的问题，各式各样的答案有很多，我给出一个个人认为解释地最好的：如果你的代码在多线程下执行和在单线程下执行永远都能获得一样的结果，那么你的代码就是线程安全的。</p>
<p>这个问题有值得一提的地方，就是线程安全也是有几个级别的：</p>
<p>（1）不可变</p>
<p>像String、Integer、Long这些，都是final类型的类，任何一个线程都改变不了它们的值，要改变除非新创建一个，因此这些不可变对象不需要任何同步手段就可以直接在多线程环境下使用</p>
<p>（2）绝对线程安全</p>
<p>不管运行时环境如何，调用者都不需要额外的同步措施。要做到这一点通常需要付出许多额外的代价，Java中标注自己是线程安全的类，实际上绝大多数都不是线程安全的，不过绝对线程安全的类，Java中也有，比方说CopyOnWriteArrayList、CopyOnWriteArraySet</p>
<p>（3）相对线程安全</p>
<p>相对线程安全也就是我们通常意义上所说的线程安全，像Vector这种，add、remove方法都是原子操作，不会被打断，但也仅限于此，如果有个线程在遍历某个Vector、有个线程同时在add这个Vector，99%的情况下都会出现ConcurrentModificationException，也就是fail-fast机制。</p>
<p>（4）线程非安全</p>
<p>这个就没什么好说的了，ArrayList、LinkedList、HashMap等都是线程非安全的类</p>
<h2 id="8、Java中如何获取到线程dump文件">8、Java中如何获取到线程dump文件</h2><p>死循环、死锁、阻塞、页面打开慢等问题，打线程dump是最好的解决问题的途径。所谓线程dump也就是线程堆栈，获取到线程堆栈有两步：</p>
<p>（1）获取到线程的pid，可以通过使用jps命令，在Linux环境下还可以使用ps -ef | grep java</p>
<p>（2）打印线程堆栈，可以通过使用jstack pid命令，在Linux环境下还可以使用kill -3 pid</p>
<p>另外提一点，Thread类提供了一个getStackTrace()方法也可以用于获取线程堆栈。这是一个实例方法，因此此方法是和具体线程实例绑定的，每次获取获取到的是具体某个线程当前运行的堆栈，</p>
<h2 id="9、一个线程如果出现了运行时异常会怎么样">9、一个线程如果出现了运行时异常会怎么样</h2><p>如果这个异常没有被捕获的话，这个线程就停止执行了。另外重要的一点是：如果这个线程持有某个某个对象的监视器，那么这个对象监视器会被立即释放</p>
<h2 id="10、如何在两个线程之间共享数据">10、如何在两个线程之间共享数据</h2><p>通过在线程之间共享对象就可以了，然后通过wait/notify/notifyAll、await/signal/signalAll进行唤起和等待，比方说阻塞队列BlockingQueue就是为线程之间共享数据而设计的</p>
<h2 id="11、sleep方法和wait方法有什么区别">11、sleep方法和wait方法有什么区别</h2><p>这个问题常问，sleep方法和wait方法都可以用来放弃CPU一定的时间，不同点在于如果线程持有某个对象的监视器，sleep方法不会放弃这个对象的监视器，wait方法会放弃这个对象的监视器</p>
<h2 id="12、生产者消费者模型的作用是什么">12、生产者消费者模型的作用是什么</h2><p>这个问题很理论，但是很重要：</p>
<p>（1）通过平衡生产者的生产能力和消费者的消费能力来提升整个系统的运行效率，这是生产者消费者模型最重要的作用</p>
<p>（2）解耦，这是生产者消费者模型附带的作用，解耦意味着生产者和消费者之间的联系少，联系越少越可以独自发展而不需要收到相互的制约</p>
<h2 id="13、ThreadLocal有什么用">13、ThreadLocal有什么用</h2><p>简单说ThreadLocal就是一种以空间换时间的做法，在每个Thread里面维护了一个以开地址法实现的ThreadLocal.ThreadLocalMap，把数据进行隔离，数据不共享，自然就没有线程安全方面的问题了</p>
<h2 id="14、为什么wait()方法和notify()/notifyAll()方法要在同步块中被调用">14、为什么wait()方法和notify()/notifyAll()方法要在同步块中被调用</h2><p>这是JDK强制的，wait()方法和notify()/notifyAll()方法在调用前都必须先获得对象的锁</p>
<h2 id="15、wait()方法和notify()/notifyAll()方法在放弃对象监视器时有什么区别">15、wait()方法和notify()/notifyAll()方法在放弃对象监视器时有什么区别</h2><p>wait()方法和notify()/notifyAll()方法在放弃对象监视器的时候的区别在于：wait()方法立即释放对象监视器，notify()/notifyAll()方法则会等待线程剩余代码执行完毕才会放弃对象监视器。</p>
<h2 id="16、为什么要使用线程池">16、为什么要使用线程池</h2><p>避免频繁地创建和销毁线程，达到线程对象的重用。另外，使用线程池还可以根据项目灵活地控制并发的数目。</p>
<h2 id="17、怎么检测一个线程是否持有对象监视器">17、怎么检测一个线程是否持有对象监视器</h2><p>我也是在网上看到一道多线程面试题才知道有方法可以判断某个线程是否持有对象监视器：Thread类提供了一个holdsLock(Object obj)方法，当且仅当对象obj的监视器被某条线程持有的时候才会返回true，注意这是一个static方法，这意味着“某条线程”指的是当前线程。</p>
<h2 id="18、synchronized和ReentrantLock的区别">18、synchronized和ReentrantLock的区别</h2><p>synchronized是和if、else、for、while一样的关键字，ReentrantLock是类，这是二者的本质区别。既然ReentrantLock是类，那么它就提供了比synchronized更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量，ReentrantLock比synchronized的扩展性体现在几点上：</p>
<p>（1）ReentrantLock可以对获取锁的等待时间进行设置，这样就避免了死锁</p>
<p>（2）ReentrantLock可以获取各种锁的信息</p>
<p>（3）ReentrantLock可以灵活地实现多路通知</p>
<p>另外，二者的锁机制其实也是不一样的。ReentrantLock底层调用的是Unsafe的park方法加锁，synchronized操作的应该是对象头中mark word，这点我不能确定。</p>
<h2 id="19、ConcurrentHashMap的并发度是什么">19、ConcurrentHashMap的并发度是什么</h2><p>ConcurrentHashMap的并发度就是segment的大小，默认为16，这意味着最多同时可以有16条线程操作ConcurrentHashMap，这也是ConcurrentHashMap对Hashtable的最大优势，任何情况下，Hashtable能同时有两条线程获取Hashtable中的数据吗？</p>
<h2 id="20、ReadWriteLock是什么">20、ReadWriteLock是什么</h2><p>首先明确一下，不是说ReentrantLock不好，只是ReentrantLock某些时候有局限。如果使用ReentrantLock，可能本身是为了防止线程A在写数据、线程B在读数据造成的数据不一致，但这样，如果线程C在读数据、线程D也在读数据，读数据是不会改变数据的，没有必要加锁，但是还是加锁了，降低了程序的性能。</p>
<p>因为这个，才诞生了读写锁ReadWriteLock。ReadWriteLock是一个读写锁接口，ReentrantReadWriteLock是ReadWriteLock接口的一个具体实现，实现了读写的分离，读锁是共享的，写锁是独占的，读和读之间不会互斥，读和写、写和读、写和写之间才会互斥，提升了读写的性能。</p>
<h2 id="21、FutureTask是什么">21、FutureTask是什么</h2><p>这个其实前面有提到过，FutureTask表示一个异步运算的任务。FutureTask里面可以传入一个Callable的具体实现类，可以对这个异步运算的任务的结果进行等待获取、判断是否已经完成、取消任务等操作。当然，由于FutureTask也是Runnable接口的实现类，所以FutureTask也可以放入线程池中。</p>
<h2 id="22、Linux环境下如何查找哪个线程使用CPU最长">22、Linux环境下如何查找哪个线程使用CPU最长</h2><p>这是一个比较偏实践的问题，这种问题我觉得挺有意义的。可以这么做：</p>
<p>（1）获取项目的pid，jps或者ps -ef | grep java，这个前面有讲过</p>
<p>（2）top -H -p pid，顺序不能改变</p>
<p>这样就可以打印出当前的项目，每条线程占用CPU时间的百分比。注意这里打出的是LWP，也就是操作系统原生线程的线程号，我笔记本山没有部署Linux环境下的Java工程，因此没有办法截图演示，网友朋友们如果公司是使用Linux环境部署项目的话，可以尝试一下。</p>
<p>使用”top -H -p pid”+”jps pid”可以很容易地找到某条占用CPU高的线程的线程堆栈，从而定位占用CPU高的原因，一般是因为不当的代码操作导致了死循环。</p>
<p>最后提一点，”top -H -p pid”打出来的LWP是十进制的，”jps pid”打出来的本地线程号是十六进制的，转换一下，就能定位到占用CPU高的线程的当前线程堆栈了。</p>
<h2 id="23、Java编程写一个会导致死锁的程序">23、Java编程写一个会导致死锁的程序</h2><p>第一次看到这个题目，觉得这是一个非常好的问题。很多人都知道死锁是怎么一回事儿：线程A和线程B相互等待对方持有的锁导致程序无限死循环下去。当然也仅限于此了，问一下怎么写一个死锁的程序就不知道了，这种情况说白了就是不懂什么是死锁，懂一个理论就完事儿了，实践中碰到死锁的问题基本上是看不出来的。</p>
<p>真正理解什么是死锁，这个问题其实不难，几个步骤：</p>
<p>（1）两个线程里面分别持有两个Object对象：lock1和lock2。这两个lock作为同步代码块的锁；</p>
<p>（2）线程1的run()方法中同步代码块先获取lock1的对象锁，Thread.sleep(xxx)，时间不需要太多，50毫秒差不多了，然后接着获取lock2的对象锁。这么做主要是为了防止线程1启动一下子就连续获得了lock1和lock2两个对象的对象锁</p>
<p>（3）线程2的run)(方法中同步代码块先获取lock2的对象锁，接着获取lock1的对象锁，当然这时lock1的对象锁已经被线程1锁持有，线程2肯定是要等待线程1释放lock1的对象锁的</p>
<p>这样，线程1″睡觉”睡完，线程2已经获取了lock2的对象锁了，线程1此时尝试获取lock2的对象锁，便被阻塞，此时一个死锁就形成了。代码就不写了，占的篇幅有点多，Java多线程7：死锁这篇文章里面有，就是上面步骤的代码实现。</p>
<h2 id="24、怎么唤醒一个阻塞的线程">24、怎么唤醒一个阻塞的线程</h2><p>如果线程是因为调用了wait()、sleep()或者join()方法而导致的阻塞，可以中断线程，并且通过抛出InterruptedException来唤醒它；如果线程遇到了IO阻塞，无能为力，因为IO是操作系统实现的，Java代码并没有办法直接接触到操作系统。</p>
<h2 id="25、不可变对象对多线程有什么帮助">25、不可变对象对多线程有什么帮助</h2><p>前面有提到过的一个问题，不可变对象保证了对象的内存可见性，对不可变对象的读取不需要进行额外的同步手段，提升了代码执行效率。</p>
<h2 id="26、什么是多线程的上下文切换">26、什么是多线程的上下文切换</h2><p>多线程的上下文切换是指CPU控制权由一个已经正在运行的线程切换到另外一个就绪并等待获取CPU执行权的线程的过程。</p>
<h2 id="27、如果你提交任务时，线程池队列已满，这时会发生什么">27、如果你提交任务时，线程池队列已满，这时会发生什么</h2><p>如果你使用的LinkedBlockingQueue，也就是无界队列的话，没关系，继续添加任务到阻塞队列中等待执行，因为LinkedBlockingQueue可以近乎认为是一个无穷大的队列，可以无限存放任务；如果你使用的是有界队列比方说ArrayBlockingQueue的话，任务首先会被添加到ArrayBlockingQueue中，ArrayBlockingQueue满了，则会使用拒绝策略RejectedExecutionHandler处理满了的任务，默认是AbortPolicy。</p>
<h2 id="28、Java中用到的线程调度算法是什么">28、Java中用到的线程调度算法是什么</h2><p>抢占式。一个线程用完CPU之后，操作系统会根据线程优先级、线程饥饿情况等数据算出一个总的优先级并分配下一个时间片给某个线程执行。</p>
<h2 id="29、Thread-sleep(0)的作用是什么">29、Thread.sleep(0)的作用是什么</h2><p>这个问题和上面那个问题是相关的，我就连在一起了。由于Java采用抢占式的线程调度算法，因此可能会出现某条线程常常获取到CPU控制权的情况，为了让某些优先级比较低的线程也能获取到CPU控制权，可以使用Thread.sleep(0)手动触发一次操作系统分配时间片的操作，这也是平衡CPU控制权的一种操作。</p>
<h2 id="30、什么是自旋">30、什么是自旋</h2><p>很多synchronized里面的代码只是一些很简单的代码，执行时间非常快，此时等待的线程都加锁可能是一种不太值得的操作，因为线程阻塞涉及到用户态和内核态切换的问题。既然synchronized里面的代码执行得非常快，不妨让等待锁的线程不要被阻塞，而是在synchronized的边界做忙循环，这就是自旋。如果做了多次忙循环发现还没有获得锁，再阻塞，这样可能是一种更好的策略。</p>
<h2 id="31、什么是Java内存模型">31、什么是Java内存模型</h2><p>Java内存模型定义了一种多线程访问Java内存的规范。Java内存模型要完整讲不是这里几句话能说清楚的，我简单总结一下Java内存模型的几部分内容：</p>
<p>（1）Java内存模型将内存分为了主内存和工作内存。类的状态，也就是类之间共享的变量，是存储在主内存中的，每次Java线程用到这些主内存中的变量的时候，会读一次主内存中的变量，并让这些内存在自己的工作内存中有一份拷贝，运行自己线程代码的时候，用到这些变量，操作的都是自己工作内存中的那一份。在线程代码执行完毕之后，会将最新的值更新到主内存中去</p>
<p>（2）定义了几个原子操作，用于操作主内存和工作内存中的变量</p>
<p>（3）定义了volatile变量的使用规则</p>
<p>（4）happens-before，即先行发生原则，定义了操作A必然先行发生于操作B的一些规则，比如在同一个线程内控制流前面的代码一定先行发生于控制流后面的代码、一个释放锁unlock的动作一定先行发生于后面对于同一个锁进行锁定lock的动作等等，只要符合这些规则，则不需要额外做同步措施，如果某段代码不符合所有的happens-before规则，则这段代码一定是线程非安全的</p>
<h2 id="32、什么是CAS">32、什么是CAS</h2><p>CAS，全称为Compare and Swap，即比较-替换。假设有三个操作数：内存值V、旧的预期值A、要修改的值B，当且仅当预期值A和内存值V相同时，才会将内存值修改为B并返回true，否则什么都不做并返回false。当然CAS一定要volatile变量配合，这样才能保证每次拿到的变量是主内存中最新的那个值，否则旧的预期值A对某条线程来说，永远是一个不会变的值A，只要某次CAS操作失败，永远都不可能成功。</p>
<h2 id="33、什么是乐观锁和悲观锁">33、什么是乐观锁和悲观锁</h2><p>（1）乐观锁：就像它的名字一样，对于并发间操作产生的线程安全问题持乐观状态，乐观锁认为竞争不总是会发生，因此它不需要持有锁，将比较-替换这两个动作作为一个原子操作尝试去修改内存中的变量，如果失败则表示发生冲突，那么就应该有相应的重试逻辑。</p>
<p>（2）悲观锁：还是像它的名字一样，对于并发间操作产生的线程安全问题持悲观状态，悲观锁认为竞争总是会发生，因此每次对某资源进行操作时，都会持有一个独占的锁，就像synchronized，不管三七二十一，直接上了锁就操作资源了。</p>
<h2 id="34、什么是AQS">34、什么是AQS</h2><p>简单说一下AQS，AQS全称为AbstractQueuedSychronizer，翻译过来应该是抽象队列同步器。</p>
<p>如果说java.util.concurrent的基础是CAS的话，那么AQS就是整个Java并发包的核心了，ReentrantLock、CountDownLatch、Semaphore等等都用到了它。AQS实际上以双向队列的形式连接所有的Entry，比方说ReentrantLock，所有等待的线程都被放在一个Entry中并连成双向队列，前面一个线程使用ReentrantLock好了，则双向队列实际上的第一个Entry开始运行。</p>
<p>AQS定义了对双向队列所有的操作，而只开放了tryLock和tryRelease方法给开发者使用，开发者可以根据自己的实现重写tryLock和tryRelease方法，以实现自己的并发功能。</p>
<h2 id="35、单例模式的线程安全性">35、单例模式的线程安全性</h2><p>老生常谈的问题了，首先要说的是单例模式的线程安全意味着：某个类的实例在多线程环境下只会被创建一次出来。单例模式有很多种的写法，我总结一下：</p>
<p>（1）饿汉式单例模式的写法：线程安全</p>
<p>（2）懒汉式单例模式的写法：非线程安全</p>
<p>（3）双检锁单例模式的写法：线程安全</p>
<h2 id="36、Semaphore有什么作用">36、Semaphore有什么作用</h2><p>Semaphore就是一个信号量，它的作用是限制某段代码块的并发数。Semaphore有一个构造函数，可以传入一个int型整数n，表示某段代码最多只有n个线程可以访问，如果超出了n，那么请等待，等到某个线程执行完毕这段代码块，下一个线程再进入。由此可以看出如果Semaphore构造函数中传入的int型整数n=1，相当于变成了一个synchronized了。</p>
<h2 id="37、Hashtable的size()方法中明明只有一条语句”return_count”，为什么还要做同步？">37、Hashtable的size()方法中明明只有一条语句”return count”，为什么还要做同步？</h2><p>这是我之前的一个困惑，不知道大家有没有想过这个问题。某个方法中如果有多条语句，并且都在操作同一个类变量，那么在多线程环境下不加锁，势必会引发线程安全问题，这很好理解，但是size()方法明明只有一条语句，为什么还要加锁？</p>
<p>关于这个问题，在慢慢地工作、学习中，有了理解，主要原因有两点：</p>
<p>（1）同一时间只能有一条线程执行固定类的同步方法，但是对于类的非同步方法，可以多条线程同时访问。所以，这样就有问题了，可能线程A在执行Hashtable的put方法添加数据，线程B则可以正常调用size()方法读取Hashtable中当前元素的个数，那读取到的值可能不是最新的，可能线程A添加了完了数据，但是没有对size++，线程B就已经读取size了，那么对于线程B来说读取到的size一定是不准确的。而给size()方法加了同步之后，意味着线程B调用size()方法只有在线程A调用put方法完毕之后才可以调用，这样就保证了线程安全性</p>
<p>（2）CPU执行代码，执行的不是Java代码，这点很关键，一定得记住。Java代码最终是被翻译成汇编代码执行的，汇编代码才是真正可以和硬件电路交互的代码。即使你看到Java代码只有一行，甚至你看到Java代码编译之后生成的字节码也只有一行，也不意味着对于底层来说这句语句的操作只有一个。一句”return count”假设被翻译成了三句汇编语句执行，完全可能执行完第一句，线程就切换了。</p>
<h2 id="38、线程类的构造方法、静态块是被哪个线程调用的">38、线程类的构造方法、静态块是被哪个线程调用的</h2><p>这是一个非常刁钻和狡猾的问题。请记住：线程类的构造方法、静态块是被new这个线程类所在的线程所调用的，而run方法里面的代码才是被线程自身所调用的。</p>
<p>如果说上面的说法让你感到困惑，那么我举个例子，假设Thread2中new了Thread1，main函数中new了Thread2，那么：</p>
<p>（1）Thread2的构造方法、静态块是main线程调用的，Thread2的run()方法是Thread2自己调用的</p>
<p>（2）Thread1的构造方法、静态块是Thread2调用的，Thread1的run()方法是Thread1自己调用的</p>
<h2 id="39、同步方法和同步块，哪个是更好的选择">39、同步方法和同步块，哪个是更好的选择</h2><p>同步块，这意味着同步块之外的代码是异步执行的，这比同步整个方法更提升代码的效率。请知道一条原则：同步的范围越小越好。</p>
<p>借着这一条，我额外提一点，虽说同步的范围越少越好，但是在Java虚拟机中还是存在着一种叫做锁粗化的优化方法，这种方法就是把同步范围变大。这是有用的，比方说StringBuffer，它是一个线程安全的类，自然最常用的append()方法是一个同步方法，我们写代码的时候会反复append字符串，这意味着要进行反复的加锁-&gt;解锁，这对性能不利，因为这意味着Java虚拟机在这条线程上要反复地在内核态和用户态之间进行切换，因此Java虚拟机会将多次append方法调用的代码进行一个锁粗化的操作，将多次的append的操作扩展到append方法的头尾，变成一个大的同步块，这样就减少了加锁–&gt;解锁的次数，有效地提升了代码执行的效率。</p>
<h2 id="40、高并发、任务执行时间短的业务怎样使用线程池？并发不高、任务执行时间长的业务怎样使用线程池？并发高、业务执行时间长的业务怎样使用线程池？">40、高并发、任务执行时间短的业务怎样使用线程池？并发不高、任务执行时间长的业务怎样使用线程池？并发高、业务执行时间长的业务怎样使用线程池？</h2><p>这是我在并发编程网上看到的一个问题，把这个问题放在最后一个，希望每个人都能看到并且思考一下，因为这个问题非常好、非常实际、非常专业。关于这个问题，个人看法是：</p>
<p>（1）高并发、任务执行时间短的业务，线程池线程数可以设置为CPU核数+1，减少线程上下文的切换</p>
<p>（2）并发不高、任务执行时间长的业务要区分开看：</p>
<p>a）假如是业务时间长集中在IO操作上，也就是IO密集型的任务，因为IO操作并不占用CPU，所以不要让所有的CPU闲下来，可以加大线程池中的线程数目，让CPU处理更多的业务</p>
<p>b）假如是业务时间长集中在计算操作上，也就是计算密集型任务，这个就没办法了，和（1）一样吧，线程池中的线程数设置得少一些，减少线程上下文的切换</p>
<p>（3）并发高、业务执行时间长，解决这种类型任务的关键不在于线程池而在于整体架构的设计，看看这些业务里面某些数据是否能做缓存是第一步，增加服务器是第二步，至于线程池的设置，设置参考（2）。最后，业务执行时间长的问题，也可能需要分析一下，看看能不能使用中间件对任务进行拆分和解耦。</p>
<p><strong>我不能保证写的每个地方都是对的，但是至少能保证不复制、不黏贴，保证每一句话、每一行代码都经过了认真的推敲、仔细的斟酌。每一篇文章的背后，希望都能看到自己对于技术、对于生活的态度。<br>我相信乔布斯说的，只有那些疯狂到认为自己可以改变世界的人才能真正地改变世界。面对压力，我可以挑灯夜战、不眠不休；面对困难，我愿意迎难而上、永不退缩。<br>其实我想说的是，我只是一个程序员，这就是我现在纯粹人生的全部。</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>朋友圈分享的好文章，关于java多线程的，在此转载。我很喜欢作者对技术的态度，引用他的一段话：</p>
<blockquote>
<p>我不能保证写的每个地方都是对的，但是至少能保证不复制、不黏贴，保证每一句话、每一行代码都经过了认真的推敲、仔细的斟酌。每一篇文章的背后，希望都能看到自己对于技术、对于生活的态度。<br>我相信乔布斯说的，只有那些疯狂到认为自己可以改变世界的人才能真正地改变世界。面对压力，我可以挑灯夜战、不眠不休；面对困难，我愿意迎难而上、永不退缩</p>
</blockquote>
<p><a href="http://www.cnblogs.com/xrq730/p/5060921.html">原创地址</a><br>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker-compose]]></title>
    <link href="http://tonylit.me/2016/03/09/docker-compose/"/>
    <id>http://tonylit.me/2016/03/09/docker-compose/</id>
    <published>2016-03-09T03:37:27.000Z</published>
    <updated>2016-03-09T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>Compose是用于定义和运行复杂Docker应用的工具。<br>你可以在一个文件中定义一个多容器的应用，然后使用一条命令来启动你的应用，然后所有相关的操作都会被自动完成<br><a id="more"></a></p>
<p><strong>安装docker-compose-方式一</strong><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -<span class="constant">L</span> <span class="symbol">https:</span>/<span class="regexp">/github.com/docker</span><span class="regexp">/compose/releases</span><span class="regexp">/download/</span><span class="number">1.1</span>.<span class="number">0</span>/docker-compose-<span class="string">`uname -s`</span>-<span class="string">`uname -m`</span> &gt; <span class="regexp">/usr/local</span><span class="regexp">/bin/docker</span>-compose</span><br><span class="line"></span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></p>
<p><strong>安装docker-compose-方式二</strong><br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> -U docker-compose</span><br></pre></td></tr></table></figure></p>
<p>之后，可以添加 bash 补全命令。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>curl -<span class="constant">L </span><span class="symbol">https:</span>/<span class="regexp">/raw.githubusercontent.com/docker</span><span class="regexp">/compose/</span><span class="number">1.2</span>.<span class="number">0</span>/contrib/completion/bash/docker-compose &gt; <span class="regexp">/etc/bash</span>_completion.d/docker-compose</span><br></pre></td></tr></table></figure></p>
<hr>
<p><strong>用一个compose.yaml来定义你的应用服务，他们可以把不同的服务生成不同的容器中组成你的应用</strong></p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">web</span>:</span><br><span class="line">  <span class="attribute">build</span>:.</span><br><span class="line">  <span class="attribute">command</span>: python app.py</span><br><span class="line">  <span class="attribute">ports</span>:-<span class="string">"5000:5000"</span></span><br><span class="line">  <span class="attribute">volumes</span>:-.:/code</span><br><span class="line">  <span class="attribute">links</span>:- redis</span><br><span class="line"><span class="attribute">redis</span>:</span><br><span class="line">  <span class="attribute">image</span>: redis</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>执行docker-compose up来启动你的应用，它会根据compose.yaml的设置来pull/run这俩个容器，然后再启动</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up <span class="operator">-d</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>Compose是用于定义和运行复杂Docker应用的工具。<br>你可以在一个文件中定义一个多容器的应用，然后使用一条命令来启动你的应用，然后所有相关的操作都会被自动完成<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker run]]></title>
    <link href="http://tonylit.me/2016/03/08/docker-run/"/>
    <id>http://tonylit.me/2016/03/08/docker-run/</id>
    <published>2016-03-08T03:37:27.000Z</published>
    <updated>2016-03-08T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/docker-run.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/docker-run.PNG" alt="Alt text"></p>
]]>
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用docker-enter进入docker容器]]></title>
    <link href="http://tonylit.me/2016/03/01/docker-enter/"/>
    <id>http://tonylit.me/2016/03/01/docker-enter/</id>
    <published>2016-03-01T03:37:27.000Z</published>
    <updated>2016-03-01T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>之前进入docker容器的时候，会用docker exec命令，今天发现一个更好用的docker-enter命令！<br><a id="more"></a><br>1.首先确认安装了nsenter<br>nsenter一般linux操作系统默认自带了，没有的话，安装下。<br>2.在$PATH下面新建docker-enter文件<br>将下面的脚本copy进去，赋执行权限，使用方式： docker-enter <container-id></container-id></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="operator">-e</span> $(dirname <span class="string">"<span class="variable">$0</span>"</span>)/nsenter ]; <span class="keyword">then</span></span><br><span class="line">  <span class="comment"># with boot2docker, nsenter is not in the PATH but it is in the same folder</span></span><br><span class="line">  NSENTER=$(dirname <span class="string">"<span class="variable">$0</span>"</span>)/nsenter</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  NSENTER=nsenter</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Usage: `basename "</span><span class="variable">$0</span><span class="string">"` CONTAINER [COMMAND [ARG]...]"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Enters the Docker CONTAINER and executes the specified COMMAND."</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"If COMMAND is not specified, runs an interactive shell in CONTAINER."</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  PID=$(docker inspect --format <span class="string">"&#123;&#123;.State.Pid&#125;&#125;"</span> <span class="string">"<span class="variable">$1</span>"</span>)</span><br><span class="line">  <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$PID</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exit</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">shift</span></span><br><span class="line">  OPTS=<span class="string">"--target <span class="variable">$PID</span> --mount --uts --ipc --net --pid --"</span></span><br><span class="line">  <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># No command given.</span></span><br><span class="line">    <span class="comment"># Use su to clear all host environment variables except for TERM,</span></span><br><span class="line">    <span class="comment"># initialize the environment variables HOME, SHELL, USER, LOGNAME, PATH,</span></span><br><span class="line">    <span class="comment"># and start a login shell.</span></span><br><span class="line">    <span class="string">"<span class="variable">$NSENTER</span>"</span> <span class="variable">$OPTS</span> su - root</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="comment"># Use env to clear all host environment variables.</span></span><br><span class="line">    <span class="string">"<span class="variable">$NSENTER</span>"</span> <span class="variable">$OPTS</span> env --ignore-environment -- <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前进入docker容器的时候，会用docker exec命令，今天发现一个更好用的docker-enter命令！<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[apache http跳转https]]></title>
    <link href="http://tonylit.me/2016/02/29/apache_http%E8%B7%B3%E8%BD%AC/"/>
    <id>http://tonylit.me/2016/02/29/apache_http跳转/</id>
    <published>2016-02-29T03:37:27.000Z</published>
    <updated>2016-02-29T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>apache中开启转发配置，将http跳转到https<br><a id="more"></a></p>
<p>#开启apache的rewrite模块<br><img src="/img/mod_rewrite.PNG" alt="Alt text"></p>
<h1 id="全部http请求跳转https">全部http请求跳转https</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword"><span class="common">Listen</span></span> 443</span><br><span class="line"><span class="keyword">NameVirtualHost</span> *:443</span><br><span class="line"><span class="tag">&lt;VirtualHost *:443&gt;</span></span><br><span class="line">	<span class="keyword">SSLEngine</span> <span class="literal">on</span></span><br><span class="line">        <span class="keyword">SSLProtocol</span> <span class="literal">all</span> -SSLv2</span><br><span class="line">        <span class="keyword">SSLCipherSuite</span> <span class="literal">ALL</span>:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL</span><br><span class="line">        <span class="keyword">SSLCertificateFile</span> <span class="string">"/opt/xyz/apache2.2.9_resin3.0.25/etc/apache2/server.crt"</span></span><br><span class="line">        <span class="keyword">SSLCertificateKeyFile</span> <span class="string">"/opt/xyz/apache2.2.9_resin3.0.25/etc/apache2/server.key"</span></span><br><span class="line">        <span class="keyword">SSLCertificateChainFile</span>  <span class="string">"/opt/xyz/apache2.2.9_resin3.0.25/etc/apache2//intermediate.crt"</span></span><br><span class="line"><span class="tag">&lt;/VirtualHost&gt;</span></span><br><span class="line"><span class="tag">&lt;VirtualHost  *:80&gt;</span></span><br><span class="line">        <span class="keyword"><span class="common">RewriteEngine</span></span> <span class="literal">on</span></span><br><span class="line">        <span class="keyword"><span class="common">RewriteCond</span></span> <span class="cbracket">%&#123;SERVER_PORT&#125;</span> !^443$</span><br><span class="line">        <span class="keyword"><span class="common">RewriteRule</span></span> ^/?(.*)$ https://<span class="cbracket">%&#123;SERVER_NAME&#125;</span><span class="cbracket">%&#123;REQUEST_URI&#125;</span><span class="sqbracket"> [L,R]</span></span><br><span class="line"><span class="tag">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="单url跳转">单url跳转</h1><p>比如<a href="http://sales.vemic.com/logon.do" target="_blank" rel="external">http://sales.vemic.com/logon.do</a> 跳转到<a href="https://sales.vemic.com/logon.do" target="_blank" rel="external">https://sales.vemic.com/logon.do</a></p>
<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword"><span class="common">RewriteEngine</span></span> <span class="literal">on</span></span><br><span class="line"><span class="keyword"><span class="common">RewriteCond</span></span> <span class="cbracket">%&#123;SERVER_PORT&#125;</span> !^443$</span><br><span class="line"><span class="keyword"><span class="common">RewriteRule</span></span> ^/logon.do$ https://<span class="cbracket">%&#123;SERVER_NAME&#125;</span><span class="cbracket">%&#123;REQUEST_URI&#125;</span><span class="sqbracket"> [L,R]</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>apache中开启转发配置，将http跳转到https<br>]]>
    
    </summary>
    
      <category term="apache" scheme="http://tonylit.me/tags/apache/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[dockerfile中的RUN、CMD和ENTRY]]></title>
    <link href="http://tonylit.me/2016/01/27/dockerCMD%E5%92%8CRUN/"/>
    <id>http://tonylit.me/2016/01/27/dockerCMD和RUN/</id>
    <published>2016-01-27T03:37:27.000Z</published>
    <updated>2016-01-27T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>最近在学习dockerfile，有几条指令着实比较混淆，RUN，CMD，ENTRYPOINT。<br>在此记录一下用法，回头好多看看！<br><a id="more"></a></p>
<h1 id="用法">用法</h1><blockquote>
<p><strong>RUN</strong>在构建image时运行的指令, 在Dockerfile中可以写多条RUN指令.<br><strong>CMD</strong>和<strong>ENTRYPOINT</strong>则是在运行container 时会运行的指令, 都只能写一条, 如果写了多条, 则最后一条生效.<br><strong>CMD</strong>和<strong>ENTRYPOINT</strong>的<strong>区别</strong>是:  CMD在运行时会被command覆盖, ENTRYPOINT不会被运行时的command覆盖</p>
</blockquote>
<p>CMD和ENTRYPOINT比较让人费解，举个例子就明白了：</p>
<blockquote>
<p>docker run [OPTIONS] IMAGE [COMMAND] [ARG…]   –entrypoint=””<br>docker run -ti tony/web1 /opt/resin.sh start</p>
</blockquote>
<p> 这里的/opt/resin.sh start就是command，将覆盖Dockerfile的CMD, 但是不会覆盖ENTRYPOINT.<br>如果要覆盖ENTRYPOINT, 那么可以在docker run运行时输入 –entrypoint=”….”.</p>
<p>CMD和ENTRYPOINT一般用于制作具备后台服务的image, 例如apache, database等. 在使用这种image启动container时, 自动启动服务</p>
<hr>
<h1 id="需要注意">需要注意</h1><p>在Docker　daemon模式下，无论你是使用ENTRYPOINT，还是CMD，最后的命令，一定要是当前进程需要一直运行的，才能够防容器退出。</p>
<h2 id="以下无效方式：">以下无效方式：</h2><blockquote>
<p> ENTRYPOINT service tomcat7 start #运行几秒钟之后，容器就会退出  CMD service tomcat7<br>start #运行几秒钟之后，容器就会退出</p>
</blockquote>
<h2 id="这样有效：">这样有效：</h2><blockquote>
<p>ENTRYPOINT service tomcat7 start &amp;&amp; tail -f<br>/var/lib/tomcat7/logs/catalina.out</p>
</blockquote>
<p> 或者</p>
<blockquote>
<p>CMD service tomcat7 start &amp;&amp; tail -f<br>/var/lib/tomcat7/logs/catalina.out</p>
</blockquote>
<p>这样也有效：</p>
<blockquote>
<p>ENTRYPOINT [“/usr/sbin/sshd”]  CMD [“-D”]</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在学习dockerfile，有几条指令着实比较混淆，RUN，CMD，ENTRYPOINT。<br>在此记录一下用法，回头好多看看！<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[resin性能监控]]></title>
    <link href="http://tonylit.me/2016/01/25/resin%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/"/>
    <id>http://tonylit.me/2016/01/25/resin性能监控/</id>
    <published>2016-01-25T03:37:27.000Z</published>
    <updated>2016-01-25T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<h1 id="性能分析过程">性能分析过程</h1><p>公司很多项目用的resin，resin3.0和3.1居多，如果需要监控resin，可以配置一下resin.conf就行了，监控起来也比较方便。<br><a id="more"></a></p>
<h1 id="简易版监控">简易版监控</h1><h2 id="resin3-0版本">resin3.0版本</h2><p>在resin.conf中加入以下配置信息，重启即可！</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">servlet-mapping</span> <span class="attribute">servlet-class</span>=<span class="value">'com.caucho.servlets.ResinStatusServlet'</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/resin-status<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">init</span> <span class="attribute">enable</span>=<span class="value">"read"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>重启完，访问<a href="http://域名/resin-status。" target="_blank" rel="external">http://域名/resin-status。</a><br><img src="/img/resin_monitor/resin3.0_1.PNG" alt="Alt text"></p>
<h1 id="全能版监控">全能版监控</h1><h2 id="resin3-0版本-1">resin3.0版本</h2><p>在resin.conf最下面加入以下配置信息，重启resin</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;web-app id=<span class="string">"/resin-admin"</span> root-directory=<span class="string">"$&#123;resin.home&#125;/php/admin"</span>&gt;</span><br><span class="line">        &lt;prologue&gt;</span><br><span class="line">          &lt;resin:<span class="keyword">set</span> <span class="keyword">var</span>=<span class="string">"resin_admin_user"</span> <span class="keyword">value</span>=<span class="string">"admin"</span>/&gt;</span><br><span class="line">          &lt;resin:<span class="keyword">set</span> <span class="keyword">var</span>=<span class="string">"resin_admin_password"</span> <span class="keyword">value</span>=<span class="string">"123456"</span>/&gt;</span><br><span class="line">          &lt;resin:<span class="keyword">set</span> <span class="keyword">var</span>=<span class="string">"resin_admin_external"</span> <span class="keyword">value</span>=<span class="string">"true"</span>/&gt;</span><br><span class="line"> &lt;resin:<span class="keyword">set</span> <span class="keyword">var</span>=<span class="string">"resin_admin_insecure"</span> <span class="keyword">value</span>=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;/prologue&gt;</span><br><span class="line">      &lt;/web-app&gt;</span><br></pre></td></tr></table></figure>
<p>重启后，进入<a href="http://域名/resin-admin后得到一个密码" target="_blank" rel="external">http://域名/resin-admin后得到一个密码</a><br><img src="/img/resin_monitor/resin3.0_2.PNG" alt="Alt text"></p>
<p>将resin.conf中management标签下替换上面的值</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;user <span class="property">name</span>=<span class="string">"ADMIN"</span> password=<span class="string">"3I9OqhqXNqcGeNZMu8BHlw=="</span>/&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/img/resin_monitor/resin_3.0_4.PNG" alt="Alt text"><br>重启即可！<br><img src="/img/resin_monitor/resin_3.0_3.PNG" alt="Alt text"></p>
<h2 id="resin3-1版本">resin3.1版本</h2><p>在resin.conf的<web-app-default>下面增加: </web-app-default></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">servlet-mapping</span> <span class="attribute">servlet-class</span>=<span class="value">'com.caucho.servlets.ResinStatusServlet'</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/resin-status<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="title">init</span> <span class="attribute">enable</span>=<span class="value">"read"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">security-constraint</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="title">web-resource-collection</span> <span class="attribute">url-pattern</span>=<span class="value">"/resin-status/*"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">security-constraint</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>进入<a href="http://域名/resin-status" target="_blank" rel="external">http://域名/resin-status</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="性能分析过程">性能分析过程</h1><p>公司很多项目用的resin，resin3.0和3.1居多，如果需要监控resin，可以配置一下resin.conf就行了，监控起来也比较方便。<br>]]>
    
    </summary>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[loadrunner11 负载机报错处理]]></title>
    <link href="http://tonylit.me/2016/01/22/loadrunner%E8%B4%9F%E8%BD%BD%E6%9C%BA%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86/"/>
    <id>http://tonylit.me/2016/01/22/loadrunner负载机报错处理/</id>
    <published>2016-01-22T03:37:27.000Z</published>
    <updated>2016-01-22T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>吐槽一下，坑！！！！<br>LR11可以连接负载机，但在跑场景的时候跪了，就连报错也搜不到解决办法，尝试各种设置终于解决！<br><img src="/img/agent_error2.PNG" alt="Alt text"><br><a id="more"></a></p>
<h1 id="负载机设置">负载机设置</h1><p>添加负载机的时候设置一下log的位置就行了<br><img src="/img/agent_error1.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>吐槽一下，坑！！！！<br>LR11可以连接负载机，但在跑场景的时候跪了，就连报错也搜不到解决办法，尝试各种设置终于解决！<br><img src="/img/agent_error2.PNG" alt="Alt text"><br>]]>
    
    </summary>
    
      <category term="loadrunner" scheme="http://tonylit.me/tags/loadrunner/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[服务器上连接数查看]]></title>
    <link href="http://tonylit.me/2016/01/20/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%9F%A5%E7%9C%8B/"/>
    <id>http://tonylit.me/2016/01/20/服务器上连接数查看/</id>
    <published>2016-01-20T03:37:27.000Z</published>
    <updated>2016-01-20T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>平时查看服务器连接数，很多命令记不住<br>在此整理一下！</p>
<a id="more"></a>
<h1 id="查看Web服务器（Nginx_Apache）的并发请求数及其TCP连接状态：">查看Web服务器（Nginx Apache）的并发请求数及其TCP连接状态：</h1><p>netstat -n | awk ‘/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}’</p>
<p>或者：<br>netstat -n|grep  ^tcp|awk ‘{print $NF}’|sort -nr|uniq -c</p>
<p>或者：<br>netstat -n | awk ‘/^tcp/ {++state[$NF]} END {for(key in state) print key,state[key]}’</p>
<p>返回结果一般如下：</p>
<blockquote>
<p>LAST_ACK 5 （正在等待处理的请求数）<br>SYN_RECV 30<br>ESTABLISHED 1597 （正常数据传输状态）<br>FIN_WAIT1 51<br>FIN_WAIT2 504<br>TIME_WAIT 1057 （处理完毕，等待超时结束的请求数）</p>
</blockquote>
<p>其他参数说明：</p>
<blockquote>
<p>CLOSED：无连接是活动的或正在进行<br>LISTEN：服务器在等待进入呼叫<br>SYN_RECV：一个连接请求已经到达，等待确认<br>SYN_SENT：应用已经开始，打开一个连接<br>ESTABLISHED：正常数据传输状态<br>FIN_WAIT1：应用说它已经完成<br>FIN_WAIT2：另一边已同意释放<br>ITMED_WAIT：等待所有分组死掉<br>CLOSING：两边同时尝试关闭<br>TIME_WAIT：另一边已初始化一个释放<br>LAST_ACK：等待所有分组死掉</p>
</blockquote>
<h1 id="查看Nginx运行进程数">查看Nginx运行进程数</h1><blockquote>
<p>ps -ef | grep nginx | wc -l<br>返回的数字就是nginx的运行进程数，如果是apache则执行<br>ps -ef | grep httpd | wc -l</p>
</blockquote>
<h1 id="查看Web服务器进程连接数：">查看Web服务器进程连接数：</h1><blockquote>
<p>netstat -antp | grep 80 | grep ESTABLISHED -c</p>
</blockquote>
<h1 id="查看MySQL进程连接数：">查看MySQL进程连接数：</h1><blockquote>
<p>ps -axef | grep mysqld -c</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>平时查看服务器连接数，很多命令记不住<br>在此整理一下！</p>]]>
    
    </summary>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Loadrunner11录制APP]]></title>
    <link href="http://tonylit.me/2016/01/13/loadrunner11%E5%BD%95%E5%88%B6app/"/>
    <id>http://tonylit.me/2016/01/13/loadrunner11录制app/</id>
    <published>2016-01-13T03:37:27.000Z</published>
    <updated>2016-01-13T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>app的性能测试，loadrunner12已经支持该协议，无奈12的破解….<br>而且我要吐槽一下，12的bug好多啊，而且界面风格非驴非马，看着着实难受！<br>so，怎么使用我们的11来录制app脚本呢？<br><a id="more"></a></p>
<h1 id="原理">原理</h1><p>手机终端和电脑在同一无线网络内，手机终端可以使用代理将请求通过电脑进行转发。</p>
<h1 id="步骤">步骤</h1><h2 id="手机和电脑连接同一wifi">手机和电脑连接同一wifi</h2><p>看一下电脑的ip，记录下来<br><img src="/img/LR_APP/77.png" alt="Alt text"></p>
<h2 id="loadrunner设置">loadrunner设置</h2><p>1.选择web（HTTP/HTML协议）<br><img src="/img/LR_APP/4.png" alt="Alt text"><br>2.选择Win32 Application<br>   Porgram to record:选择C:\Program Files(x86)\HP\LoadRunner\bin\wplus_init_wsock.exe<br>   <img src="/img/LR_APP/3.png" alt="Alt text"></p>
<p>3.录制选项的设置：<br>a. Capture Level Socket level data<br><img src="/img/LR_APP/5.png" alt="Alt text"><br>b. New Entry 配置<br><img src="/img/LR_APP/66.png" alt="Alt text"><br>192.168.51.27:8094是我们进行测试的网址<br>说明：Taregt Server为需要录制的地址，Port设置为80<br>Traffic Forwarding 为代理转发的IP，需要与手机端设置一致，设置为本机不冲突的端口即可，如2008</p>
<ol>
<li>配置完成后保存即可</li>
</ol>
<p>##手机设置<br><img src="/img/LR_APP/88.png" alt="Alt text"><br>其中IP为笔记本IP，代理端口为Loadrunner设置的代理转发端口号</p>
<h1 id="开始录制">开始录制</h1><p>点击开始录制，然后就可以操作手机app了。<br><img src="/img/LR_APP/1.png" alt="Alt text"><br><img src="/img/LR_APP/2.png" alt="Alt text"></p>
<p>如果手机不能走电脑代理，可以参考：<br><a href="http://bbs.zol.com.cn/sjbbs/d297_391410.html" target="_blank" rel="external">http://bbs.zol.com.cn/sjbbs/d297_391410.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>app的性能测试，loadrunner12已经支持该协议，无奈12的破解….<br>而且我要吐槽一下，12的bug好多啊，而且界面风格非驴非马，看着着实难受！<br>so，怎么使用我们的11来录制app脚本呢？<br>]]>
    
    </summary>
    
      <category term="loadrunner" scheme="http://tonylit.me/tags/loadrunner/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[export、import导出导入docker容器]]></title>
    <link href="http://tonylit.me/2015/12/22/docker%20import%E5%92%8Cexport/"/>
    <id>http://tonylit.me/2015/12/22/docker import和export/</id>
    <published>2015-12-22T03:37:27.000Z</published>
    <updated>2015-12-22T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<h1 id="导入容器快照">导入容器快照</h1><p>可以使用docker import导入docker的镜像，已centos系统为例，我们导入<a href="http://download.openvz.org/template/precreated/" target="_blank" rel="external">centos-6-x86_64.tar.gz</a></p>
<blockquote>
<p>Usage: docker import [OPTIONS] URL|- [REPOSITORY[:TAG]]</p>
<p>Create an empty filesystem image and import the contents of the<br>tarball (.tar, .tar.gz, .tgz, .bzip, .tar.xz, .txz) into it, then<br>optionally tag it.<br><a id="more"></a></p>
</blockquote>
<h2 id="实例">实例</h2><blockquote>
<p>cat centos-6-x86_64.tar.gz|docker import - test/centos-6:v1.0<br><img src="/img/docker/docker_import.PNG" alt="Alt text"></p>
</blockquote>
<p>此外，也可以通过指定 URL 或者某个目录来导入，例如</p>
<blockquote>
<p> docker import <a href="http://example.com/exampleimage.tgz" target="_blank" rel="external">http://example.com/exampleimage.tgz</a> example/imagerepo</p>
</blockquote>
<p>*注：用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。</p>
<h1 id="导出容器">导出容器</h1><p>先启动一下容器：</p>
<blockquote>
<p>docker run -t -i 5de0ac2f6f7e /bin/bash</p>
</blockquote>
<p>两个参数，-t表示给容器tty终端，-i表示可以interactive，可以交互。</p>
<p><img src="/img/docker/docker_ps.PNG" alt="Alt text"></p>
<blockquote>
<p>docker export 5d73efeb9a38 &gt; tonylit_centos6.tar</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="导入容器快照">导入容器快照</h1><p>可以使用docker import导入docker的镜像，已centos系统为例，我们导入<a href="http://download.openvz.org/template/precreated/">centos-6-x86_64.tar.gz</a></p>
<blockquote>
<p>Usage: docker import [OPTIONS] URL|- [REPOSITORY[:TAG]]</p>
<p>Create an empty filesystem image and import the contents of the<br>tarball (.tar, .tar.gz, .tgz, .bzip, .tar.xz, .txz) into it, then<br>optionally tag it.<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[staf使用]]></title>
    <link href="http://tonylit.me/2015/12/22/staf%E4%BD%BF%E7%94%A8/"/>
    <id>http://tonylit.me/2015/12/22/staf使用/</id>
    <published>2015-12-22T03:37:27.000Z</published>
    <updated>2015-12-22T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<h1 id="STAF概念：">STAF概念：</h1><p>全称：Software Testing AntoMation Framework,软件测试自动化框架，为测试人员提供了一个端到端的自动化测试解决方案。<br>每台装有STAF环境的机器都是对等的，一个端可以直接调用另一个端提供服务。采用P2P架构，没有服务端、客户端之分，任何一台机器都可以向其他的机器发送请求。可以利用STAF的这种特性来实现分布式执行的功能。</p>
<hr>
<a id="more"></a>
<h1 id="STAF在linunx下的安装：">STAF在linunx下的安装：</h1><p>1.下载STAF的安装包STAF3412-linux.tar.gz</p>
<p>2.解压：tar -xzvf  STAF3412-linux.tar.gz</p>
<p>3.解压缩完进入staf文件夹，执行./STAFIns，一直回车，安装OK</p>
<p>4.在环境变量中加入STAF配置<br>编辑 /etc/profile，加入以下配置信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PATH=<span class="string">"/usr/local/staf/bin:<span class="variable">$&#123;PATH&#125;</span>"</span> <span class="built_in">export</span> STAFCONVDIR=/usr/<span class="built_in">local</span>/staf/codepage <span class="built_in">export</span></span><br><span class="line">LD_LIBRARY_PATH=<span class="string">"/usr/local/staf/lib:<span class="variable">$&#123;LD_LIBRARY_PATH&#125;</span>"</span> <span class="built_in">export</span></span><br><span class="line">CLASSPATH=<span class="string">"/usr/local/staf/lib/JSTAF.jar:/usr/local/staf/samples/demo/STAFDemo.jar:<span class="variable">$&#123;CLASSPATH&#125;</span>"</span></span><br></pre></td></tr></table></figure></p>
<p>5.输入source /etc/profile,让配置文件生效</p>
<p>6.修改staf配置文件，在staf安装目录下（默认会安装在/usr/local/staf/）的bin文件夹中-STAF.cfg<br><strong>参数格式</strong></p>
<blockquote>
<p>#当错误条件发生的时候形成trace信息 trace enable tracepoints “error deprecated”  </p>
<p>#Enable TCP/IP connections</p>
<p>#在网络上发送和接受STAF请求，默认端口为6500。如果需要定义自己的端口可以使用interface tcp library STAFTCP option Secure=No  option Port=6600</p>
<p>#interface ssl library STAFTCP option Secure=Yes option Port=6550 interface tcp library STAFTCP option Secure=No  option Port=55500  </p>
<p>#Set default local trust</p>
<p>#设置本地机器为full access 信任级别 trust machine local://local level 5 trust machine <em>.</em>.<em>.</em> level 5</p>
<p>#Add default service loader</p>
<p>#注册默认的Service Loader。可以动态加载Log,Monitor等服务 serviceloader library STAFDSLS</p>
</blockquote>
<p>TRUST LEVEL 5 MACHINE，利用命令staf local trust list. 可以查看本机的信任机器<br>每种请求都有安全级别的限制，只有你达到这种安全级别才能发送这种请求。<br>分为六级，级别0-5,0最低，5最高</p>
<blockquote>
<p> Level 0 - No access<br>    Level 1 - Restricted access. Only PING and helps available.<br>    Level 2 - Limited access. Only query/view facilities available.<br>    Level 3 - Standard access. Non-destructive updates allowed, e.g., logging.<br>    Level 4 - Advanced access. Update abilities, e.g., copying files, deleting log files.<br>    Level 5 - All access, e.g., SHUTDOWN, Process invocation, Trust definition manipulation</p>
</blockquote>
<p>默认是trust machine local://local level 5     //表示本地local的操作是5级权限<br>如果需要外部的pc能够 操作本地的staf，发送各种请求的话，需要执行ip地址或是网段<br>trust machine ssl://192.100.<em> level 5   //表示 对于192.100 网段开放 5级权限  针对ssl<br>trust machine tcp://192.100.</em> level 5    //表示 对于192.100 网段开放 5级权限  针对tcp</p>
<p>7.启动STAF服务<br>cd /usr/local/staf/bin<br>./STAFProc &amp;<br>查看是否启动</p>
<p>8.确认已经安装完成<br>staf local service list<br><img src="/img/staf/staf_1.PNG" alt="Alt text"></p>
<p>说明安装成功了</p>
<h1 id="STAF请求格式">STAF请求格式</h1><p>STAF  <endpoint>  &lt; Service&gt;  <request></request></endpoint></p>
<p><endpoint> 远程机器的IP或者localhost。表示向哪台机器发送请求</endpoint></p>
<p><server> Endpoint端机器上STAF环境中的服务名称。表示向哪个服务发送请求</server></p>
<p><request>请求的内容。<br> 例子：<br>staf 192.168.10.18 ping ping<br><img src="/img/staf/staf_2.PNG" alt="Alt text"></request></p>
<h1 id="STAF服务">STAF服务</h1><p>STAF所有功能都是通过服务实现的<br>主要有两种类型的服务：内部服务（Internal Service），外部服务(External Service)。每种服务都可以处理多种请求，每种请求都有安全级别限制<br>内部服务：开启staf这些服务就可以工作了。一般被集成到STAFProc,一般都是一些比较基本常用的服务。<br>外部服务：不是staf基本服务，必须将服务注册到staf才可以使用。需要动态载入，可执行代码不在STAFProc中，一般都在jar中或者外部dll库中。<br><img src="/img/staf/staf_3.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="STAF概念：">STAF概念：</h1><p>全称：Software Testing AntoMation Framework,软件测试自动化框架，为测试人员提供了一个端到端的自动化测试解决方案。<br>每台装有STAF环境的机器都是对等的，一个端可以直接调用另一个端提供服务。采用P2P架构，没有服务端、客户端之分，任何一台机器都可以向其他的机器发送请求。可以利用STAF的这种特性来实现分布式执行的功能。</p>
<hr>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[loadrunner常用函数]]></title>
    <link href="http://tonylit.me/2015/12/21/loadrunner%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>http://tonylit.me/2015/12/21/loadrunner常用函数/</id>
    <published>2015-12-21T03:37:27.000Z</published>
    <updated>2015-12-21T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>整理loadrunner 脚本中的一些常用函数。</p>
<a id="more"></a>
<h1 id="字符串相关">字符串相关</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strlen</span>(<span class="keyword">const</span> <span class="keyword">char</span> *<span class="built_in">string</span>); <span class="comment">//返回一个字符串的长度</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(destination_string,source_string);<span class="comment">//拷贝一个字符串到另一个字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">strcat</span>(<span class="keyword">char</span> *to, <span class="keyword">const</span> <span class="keyword">char</span> *from ); <span class="comment">//合并两个字符串</span></span><br><span class="line"></span><br><span class="line">atoi(<span class="keyword">const</span> <span class="keyword">char</span> *<span class="built_in">string</span>);<span class="comment">//字符串转换成整形</span></span><br><span class="line"></span><br><span class="line">itoa(<span class="keyword">int</span> value, <span class="keyword">char</span> *str, <span class="keyword">int</span> radix )<span class="comment">//整形转换成字符串，radix为转换进制，radix为10（10进制）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">strcmp</span>(<span class="keyword">const</span> <span class="keyword">char</span> *string1, <span class="keyword">const</span> <span class="keyword">char</span> *string2 );<span class="comment">//比较两个字符串的大小</span></span><br><span class="line"></span><br><span class="line">stricmp( <span class="keyword">const</span> <span class="keyword">char</span> *string1, <span class="keyword">const</span> <span class="keyword">char</span> *string2 ); <span class="comment">//区分大小写比较字符串</span></span><br><span class="line"></span><br><span class="line">strlwr( <span class="keyword">char</span> *<span class="built_in">string</span> ); <span class="comment">//将字符串转换为小写</span></span><br><span class="line"></span><br><span class="line">strupr(<span class="keyword">char</span> *<span class="built_in">string</span> );<span class="comment">//将字符串转换成大写</span></span><br></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"></span><br><span class="line">* 字符串编码转换</span><br><span class="line"></span><br><span class="line">*/</span></span><br><span class="line"></span><br><span class="line">lr_convert_string_encoding( <span class="keyword">const</span> <span class="keyword">char</span> *sourceString, <span class="keyword">const</span> <span class="keyword">char</span> *fromEncoding, <span class="keyword">const</span> <span class="keyword">char</span> *toEncoding, <span class="keyword">const</span> <span class="keyword">char</span> *paramName);</span><br><span class="line"></span><br><span class="line"><span class="comment">//sourceString：被转换的源字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//fromEncoding：转换前的字符编码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//toEncoding：转换后的字符编码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//paramName：转换后的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 很多时候需要将中文字符进行转码为UTF-8格式</span></span><br><span class="line"></span><br><span class="line">lr_convert_string_encoding(<span class="string">"订单"</span>,LR_ENC_SYSTEM_LO<span class="built_in">CALE</span>,LR_ENC_UTF8,<span class="string">"str"</span>);</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="日期时间相关函数">日期时间相关函数</h1><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="perl">lr_save_datetime(const char *<span class="keyword">format</span>, <span class="keyword">int</span> offset, const char *name);</span><br><span class="line"><span class="regexp">//</span>将当前的日期和时间或者指定偏移的时间保存在参数里</span><br><span class="line">// <span class="keyword">format</span>：格式化信息，如:<span class="string">"<span class="variable">%Y</span>-<span class="variable">%m</span>-<span class="variable">%d</span>"</span>代表日期格式，<span class="string">"<span class="variable">%H</span>:<span class="variable">%M</span>:<span class="variable">%S</span>"</span>代表时间格式</span><br><span class="line">// offset：时间的偏移量 DATE_NOW(现在的日期)，TIME_NOW(现在的时间)，ONE_DAY（一天的时间），ONE_HOUR（一小时的时 间），ONE_MIN（一分钟的时间），DATE_NOW-ONE_DAY(昨天)，DATE_NOW+ONE_DAY(明天)</span><br><span class="line">// name：参数保存的参数名</span><br><span class="line"></span><br><span class="line">//取当前时间</span><br><span class="line">lr_save_datetime(<span class="string">"<span class="variable">%Y</span>-<span class="variable">%m</span>-<span class="variable">%d</span> <span class="variable">%H</span>:<span class="variable">%M</span>:<span class="variable">%S</span>"</span>, DATE_NOW ,<span class="string">"time"</span>);</span><br><span class="line">lr_output_message(<span class="string">"now=<span class="variable">%s</span>"</span>,lr_eval_string(<span class="string">"&#123;time&#125;"</span>));</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>取两个小时后的时间</span><br><span class="line">lr_save_datetime(<span class="string">"<span class="variable">%Y</span>-<span class="variable">%m</span>-<span class="variable">%d</span> <span class="variable">%H</span>:<span class="variable">%M</span>:<span class="variable">%S</span>"</span>, DATE_NOW+<span class="number">2</span>*(ONE_HOUR) ,<span class="string">"time"</span>);</span><br><span class="line">lr_output_message(<span class="string">"2小时后=<span class="variable">%s</span>"</span>,lr_eval_string(<span class="string">"&#123;time&#125;"</span>));</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="事物相关">事物相关</h1><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** 事物相关</span><br><span class="line"></span><br><span class="line">*/</span></span><br><span class="line"></span><br><span class="line">lr<span class="number">_</span>end<span class="number">_</span>sub<span class="number">_</span>transaction<span class="comment">// 标记子事务的结束以便进行性能分析</span></span><br><span class="line"></span><br><span class="line">lr<span class="number">_</span>end<span class="number">_</span>transaction<span class="comment">//标记LoadRunner事务的结束</span></span><br><span class="line"></span><br><span class="line">lr<span class="number">_</span>end<span class="number">_</span>transaction<span class="number">_</span>instance<span class="comment">//标记事务实例的结束以便进行性能分析</span></span><br><span class="line"></span><br><span class="line">lr<span class="number">_f</span>ail<span class="number">_</span>trans<span class="number">_</span>with<span class="number">_</span>error<span class="comment">//将打开事务的状态设置为LR_FAIL并发送错误消息</span></span><br><span class="line"></span><br><span class="line">lr<span class="number">_</span>get<span class="number">_</span>trans<span class="number">_</span>instance<span class="number">_</span>duration<span class="comment">//获取事务实例的持续时间（由它的句柄指定）</span></span><br><span class="line"></span><br><span class="line">lr<span class="number">_</span>get<span class="number">_</span>trans<span class="number">_</span>instance<span class="number">_</span>wasted<span class="number">_</span>time<span class="comment">//获取事务实例浪费的时间（由它的句柄指定）</span></span><br><span class="line"></span><br><span class="line">lr<span class="number">_</span>get<span class="number">_</span>transaction<span class="number">_</span>duration<span class="comment">//获取事务的持续时间（按事务的名称）</span></span><br><span class="line"></span><br><span class="line">lr<span class="number">_</span>get<span class="number">_</span>transaction<span class="number">_</span>think<span class="number">_</span>time<span class="comment">//获取事务的思考时间（按事务的名称）</span></span><br><span class="line"></span><br><span class="line">lr<span class="number">_</span>get<span class="number">_</span>transaction<span class="number">_</span>wasted<span class="number">_</span>time<span class="comment">//获取事务浪费的时间（按事务的名称）</span></span><br><span class="line"></span><br><span class="line">lr<span class="number">_</span>resume<span class="number">_</span>transaction<span class="comment">//继续收集事务数据以便进行性能分析</span></span><br><span class="line"></span><br><span class="line">lr<span class="number">_</span>resume<span class="number">_</span>transaction<span class="number">_</span>instance<span class="comment">//继续收集事务实例数据以便进行性能分析</span></span><br><span class="line"></span><br><span class="line">lr<span class="number">_</span>set<span class="number">_</span>transaction<span class="number">_</span>instance<span class="number">_</span>status<span class="comment">//设置事务实例的状态</span></span><br><span class="line"></span><br><span class="line">lr<span class="number">_</span>set<span class="number">_</span>transaction<span class="number">_</span>status<span class="comment">//设置打开事务的状态</span></span><br><span class="line"></span><br><span class="line">lr<span class="number">_</span>set<span class="number">_</span>transaction<span class="number">_</span>status<span class="number">_</span><span class="annotation">by</span><span class="number">_n</span>ame<span class="comment">//设置事务的状态</span></span><br><span class="line"></span><br><span class="line">lr<span class="number">_</span>start<span class="number">_</span>sub<span class="number">_</span>transaction<span class="comment">//标记子事务的开始</span></span><br><span class="line"></span><br><span class="line">lr<span class="number">_</span>start<span class="number">_</span>transaction<span class="comment">//标记事务的开始</span></span><br><span class="line"></span><br><span class="line">lr<span class="number">_</span>start<span class="number">_</span>transaction<span class="number">_</span>instance<span class="comment">//启动嵌套事务（由它的父事务的句柄指定）</span></span><br><span class="line"></span><br><span class="line">lr<span class="number">_</span>stop<span class="number">_</span>transaction<span class="comment">//停止事务数据的收集</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="文件操作">文件操作</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** 文件操作</span><br><span class="line"></span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"> fopen(<span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">const</span> <span class="keyword">char</span> *access_mode );<span class="comment">//打开一个文件</span></span><br><span class="line"></span><br><span class="line"> fclose(FILE *file_pointer);<span class="comment">//关闭一个文件</span></span><br><span class="line"></span><br><span class="line"> feof(FILE *file_pointer );<span class="comment">//文件是否结束</span></span><br><span class="line"></span><br><span class="line"> fread(<span class="keyword">void</span> *buffer, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> count, FILE *file_pointer);<span class="comment">//从文件缓冲区读文件</span></span><br><span class="line"></span><br><span class="line"> fgets(<span class="keyword">char</span> *<span class="built_in">string</span>, <span class="keyword">int</span> maxchar, FILE *file_pointer );<span class="comment">//从文件中读取字符串</span></span><br><span class="line"></span><br><span class="line"> fwrite(<span class="keyword">const</span> <span class="keyword">void</span> *buffer, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> count, FILE *file_pointer );<span class="comment">//写文件内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span><br><span class="line"></span><br><span class="line"> * 读文件的内容,每次读取8各字符，直到读完</span><br><span class="line"></span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">char</span> *FileName=<span class="string">"c:\\test.txt"</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">char</span> readbuffer[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"> <span class="keyword">long</span> file_stream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>(file_stream=fopen(FileName,<span class="string">"r"</span>)==<span class="literal">NULL</span>)&#123;</span><br><span class="line"></span><br><span class="line"> lr_error_message(<span class="string">"Can't open file,%s"</span>,FileName);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">while</span>(!feof(FileName))&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> count = fread(readbuffer,<span class="keyword">sizeof</span>(<span class="keyword">char</span>),<span class="number">8</span>,file_stream);</span><br><span class="line"></span><br><span class="line"> lr_output_message(<span class="string">"read date=%s"</span>,lr_eval_string(readbuffer));</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> fclose(file_stream);</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>整理loadrunner 脚本中的一些常用函数。</p>]]>
    
    </summary>
    
      <category term="loadrunner" scheme="http://tonylit.me/tags/loadrunner/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[loadrunner测试webservice]]></title>
    <link href="http://tonylit.me/2015/12/20/loadrunner%E6%B5%8B%E8%AF%95webservice/"/>
    <id>http://tonylit.me/2015/12/20/loadrunner测试webservice/</id>
    <published>2015-12-20T03:37:27.000Z</published>
    <updated>2015-12-20T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>现在很多应用都提供webservice服务，在做性能测试的时候免不了去测试webservice，我们来看看怎样使用LR进行测试。<br><a id="more"></a></p>
<h1 id="什么是webservice">什么是webservice</h1><p>测试之前先了解下什么是webservice<br>WebService是一个SOA（面向服务的编程）的结构，它不依赖语言、不依赖平台，可以实现不同语言间的相互调用，通过网络进行基于Http协议的网络应用间的交互。<br>一句话概括：WebService是一种跨编程语言和跨操作系统平台的远程调用技术。<br>WebService=WSDL+SOAP+UDDI（webservice的注册）<br><img src="/img/webservice/webservice_1.PNG" alt="Alt text"></p>
<h1 id="loadruner怎样测试webservice">loadruner怎样测试webservice</h1><p>1.打开vugen，选择webservice协议<br><img src="/img/webservice/webservice_2.PNG" alt="Alt text"></p>
<p>2.导入WSDL<br><img src="/img/webservice/webservice_3.PNG" alt="Alt text"></p>
<p>3.点击import后，输入url，这里的url是开发提供的wsdl接口url（如：<a href="http://localhost:9001/Service/ServiceHello?wsdl）" target="_blank" rel="external">http://localhost:9001/Service/ServiceHello?wsdl）</a></p>
<p><img src="/img/webservice/webservice_4.PNG" alt="Alt text"></p>
<p>4.点击OK<br>5.选择目标测试函数<br><img src="/img/webservice/webservice_5.PNG" alt="Alt text"></p>
<p>6.填写参数值，将返回值放入变量中<br><img src="/img/webservice/webservice_6.PNG" alt="Alt text"><br><img src="/img/webservice/webservice_7.PNG" alt="Alt text"></p>
<p>7.点击OK后，自动生成脚本<br><img src="/img/webservice/webservice_8.PNG" alt="Alt text"></p>
<p>8.我们可以进行参数化<br><img src="/img/webservice/webservice_9.PNG" alt="Alt text"></p>
<p>9.运行脚本<br><img src="/img/webservice/webservice_10.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>现在很多应用都提供webservice服务，在做性能测试的时候免不了去测试webservice，我们来看看怎样使用LR进行测试。<br>]]>
    
    </summary>
    
      <category term="loadrunner" scheme="http://tonylit.me/tags/loadrunner/"/>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java调用shell脚本]]></title>
    <link href="http://tonylit.me/2015/12/19/java%E8%B0%83%E7%94%A8shell%E8%84%9A%E6%9C%AC/"/>
    <id>http://tonylit.me/2015/12/19/java调用shell脚本/</id>
    <published>2015-12-19T03:37:27.000Z</published>
    <updated>2015-12-19T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>测试环境发布系统，通过java调用远程机器上的shell脚本，实现自动化发布工作。<br>在此记录一下java调用shell脚本的实现。<br><a id="more"></a><br>需要的jar包：ganymed-ssh2-build210-sources.jar 和apache的commons-io包commons-io-1.3.2.jar<br>pom.xml依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">     </span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>ch.ethz.ganymed<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>ganymed-ssh2<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>build210<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最终实现的情况：<br>远程机器：192.168.xx.xx<br>用户名：xxxx<br>密码：xxxx<br>登陆后执行服务器上的脚本 /master/bin/a.sh<br> 代码比较简单，如下 a.sh脚本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"aaa"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"bbb"</span></span><br><span class="line"><span class="built_in">exit</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>java实现：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.focustech.fds.common.utils;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> ch.ethz.ssh2.ChannelCondition;</span><br><span class="line"><span class="keyword">import</span> ch.ethz.ssh2.Connection;</span><br><span class="line"><span class="keyword">import</span> ch.ethz.ssh2.Session;</span><br><span class="line"><span class="keyword">import</span> ch.ethz.ssh2.StreamGobbler;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * RmtShellExecutor.java</span><br><span class="line"> * </span><br><span class="line"> * @author lit</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> class RmtShellExecutor &#123;</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="comment">/**  */</span></span><br><span class="line">    <span class="keyword">private</span> Connection conn;</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="comment">/** 远程机器IP */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> ip;</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="comment">/** 用户名 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> usr;</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="comment">/** 密码 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> psword;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> charset = Charset.defaultCharset().toString();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> TIME_OUT = <span class="number">1000</span> * <span class="number">5</span> * <span class="number">60</span>;</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 构造函数</span><br><span class="line">     * </span><br><span class="line">     * @param ip</span><br><span class="line">     * @param usr</span><br><span class="line">     * @param ps</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> RmtShellExecutor() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> RmtShellExecutor(<span class="keyword">String</span> ip, <span class="keyword">String</span> usr, <span class="keyword">String</span> ps) &#123;</span><br><span class="line">        <span class="keyword">this</span>.ip = ip;</span><br><span class="line">        <span class="keyword">this</span>.usr = usr;</span><br><span class="line">        psword = ps;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 登录</span><br><span class="line">     * </span><br><span class="line">     * @return</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">boolean</span> login() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        conn = <span class="keyword">new</span> Connection(ip);</span><br><span class="line">        conn.connect();</span><br><span class="line">        <span class="keyword">return</span> conn.authenticateWithPassword(usr, psword);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 执行脚本</span><br><span class="line">     * </span><br><span class="line">     * @param cmds</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> exec(<span class="keyword">String</span> cmds) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        InputStream stdOut = <span class="keyword">null</span>;</span><br><span class="line">        InputStream stdErr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">String</span> outStr = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">String</span> outErr = <span class="string">""</span>;</span><br><span class="line">        <span class="built_in">int</span> ret = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (login()) &#123;</span><br><span class="line">                <span class="comment">// 创建session</span></span><br><span class="line">                Session session = conn.openSession();</span><br><span class="line">                <span class="comment">// 执行远程脚本.</span></span><br><span class="line">                session.execCommand(cmds);</span><br><span class="line">                stdOut = <span class="keyword">new</span> StreamGobbler(session.getStdout());</span><br><span class="line">                outStr = processStream(stdOut, charset);</span><br><span class="line">                stdErr = <span class="keyword">new</span> StreamGobbler(session.getStderr());</span><br><span class="line">                outErr = processStream(stdErr, charset);</span><br><span class="line">                session.waitForCondition(ChannelCondition.EXIT_STATUS, TIME_OUT);</span><br><span class="line">                ret = session.getExitStatus();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"登录远程机器失败"</span> + ip); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;</span><br><span class="line">            IOUtils.closeQuietly(stdOut);</span><br><span class="line">            IOUtils.closeQuietly(stdErr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * @param in</span><br><span class="line">     * @param charset</span><br><span class="line">     * @return</span><br><span class="line">     * @throws IOException</span><br><span class="line">     * @throws UnsupportedEncodingException</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> processStream(InputStream in, <span class="keyword">String</span> charset) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] buf = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span> (in.read(buf) != -<span class="number">1</span>) &#123;</span><br><span class="line">            sb.<span class="built_in">append</span>(<span class="keyword">new</span> <span class="keyword">String</span>(buf, charset));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// bash参数：bash /master/bin/a.sh</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> execute(<span class="keyword">String</span> bash) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        RmtShellExecutor exe = <span class="keyword">new</span> RmtShellExecutor(<span class="string">"192.168.10.199"</span>, <span class="string">"admin"</span>, <span class="string">"focus1234"</span>);</span><br><span class="line">        System.out.<span class="built_in">println</span>(exe.exec(bash));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~</span><br></pre></td></tr></table></figure></p>
<p>结果如下：<br>aaa<br>bbb<br>1</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>测试环境发布系统，通过java调用远程机器上的shell脚本，实现自动化发布工作。<br>在此记录一下java调用shell脚本的实现。<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java线程状态学习]]></title>
    <link href="http://tonylit.me/2015/12/18/java%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%AD%A6%E4%B9%A0/"/>
    <id>http://tonylit.me/2015/12/18/java线程状态学习/</id>
    <published>2015-12-18T03:37:27.000Z</published>
    <updated>2015-12-18T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>一直对java线程的几种状态认识的模模糊糊，平时在对java进行监控的时候，用jstack打出一堆线程状态，看的不是很懂，另外网上一堆乌七八糟的东西，看着着实难受，自己学习一下，整理整理。<br><a id="more"></a></p>
<h1 id="可以直接看java-lang-Thread-State类，里面对几种状态有详细解释。">可以直接看java.lang.Thread.State类，里面对几种状态有详细解释。</h1><blockquote>
<p><strong>NEW</strong> 状态是指线程刚创建, 尚未启动</p>
<p><strong>RUNNABLE</strong> 状态是线程正在正常运行中, 当然可能会有某种耗时计算/IO等待的操作/CPU时间片切换等, 这个状态下发生的等待一般是其他系统资源, 而不是锁, Sleep等</p>
<p><strong>BLOCKED </strong> 这个状态下, 是在多个线程有同步操作的场景, 比如正在等待另一个线程的synchronized 块的执行释放, 或者可重入的 synchronized块里别人调用wait() 方法, 也就是这里是线程在等待进入临界区  </p>
<p><strong>WAITING</strong>  这个状态下是指线程拥有了某个锁之后, 调用了他的wait方法, 等待其他线程/锁拥有者调用 notify / notifyAll 一遍该线程可以继续下一步操作, 这里要区分 BLOCKED 和 WATING 的区别, 一个是在临界点外面等待进入. 一个是在理解点里面wait等待别人notify, 线程调用了join方法 join了另外的线程的时候, 也会进入WAITING状态,<br>等待被他join的线程执行结束</p>
<p><strong>TIMED_WAITING</strong>  这个状态就是有限的(时间限制)的WAITING, 一般出现在调用wait(long), join(long)等情况下, 另外一个线程sleep后, 也会进入TIMED_WAITING状态</p>
<p><strong>TERMINATED</strong> 这个状态下表示 该线程的run方法已经执行完毕了, 基本上就等于死亡了(当时如果线程被持久持有, 可能不会被回收)</p>
</blockquote>
<hr>
<p> 上面的几段话仔细读一读，想一想</p>
<h1 id="下面我们来写写代码，让这些线程进入以上几种状态：">下面我们来写写代码，让这些线程进入以上几种状态：</h1><h2 id="NEW，这个比较easy：">NEW，这个比较easy：</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Thread</span> <span class="keyword">thread</span> = <span class="literal">new</span> <span class="keyword">Thread</span>();</span><br><span class="line"> System<span class="built_in">.</span>out<span class="built_in">.</span>println(<span class="keyword">thread</span><span class="built_in">.</span>getState());</span><br></pre></td></tr></table></figure>
<p>输出NEW</p>
<h2 id="RUNABLE，也easy，将线程start，同时代码里面不要wait或者sleep">RUNABLE，也easy，将线程start，同时代码里面不要wait或者sleep</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Thread thread = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">     @<span class="function">Override</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">             System.out.println(currentThread().getState());</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;;</span><br><span class="line"> thread.start();</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br><img src="/img/thread/runnable.png" alt="Alt text"></p>
</blockquote>
<h2 id="BLOCKED，这个需要至少两个线程，然后互相等待synchronized">BLOCKED，这个需要至少两个线程，然后互相等待synchronized</h2><pre><code><span class="comment"><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">final Object lock = new Object<span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"> Thread run = new Thread<span class="params">()</span> &#123;</span><br><span class="line">     @Override</span><br><span class="line">     public void run<span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">for</span> <span class="params">(int i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++)</span> &#123;</span><br><span class="line">             synchronized <span class="params">(lock)</span> &#123;</span><br><span class="line">                 System.out.println<span class="params">(currentThread<span class="params">()</span>.getState<span class="params">()</span>)</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> Thread t1 = new Thread<span class="params">(run)</span>;</span><br><span class="line"> t1.setName<span class="params">( “t1”)</span>;</span><br><span class="line"> Thread t2 = new Thread<span class="params">(run)</span>;</span><br><span class="line"> t2.setName<span class="params">( “t2”)</span>;</span><br><span class="line"> t1.start<span class="params">()</span>;</span><br><span class="line"> t2.start<span class="params">()</span>;</span><br></pre></td></tr></table></figure></span>
</code></pre><p><img src="/img/thread/BLOCKED.png" alt="Alt text"><br>这时候, 一个在RUNNABLE, 另一个就会在BLOCKED (等待另一个线程的 System.out.println.. 这是个IO操作, 属于系统资源, 不会造成WAITING</p>
<h2 id="WAITING,这个需要用到生产者消费者模型,_当生产者生产过慢的时候,_消费者就会等待生产者的下一次notify">WAITING,这个需要用到生产者消费者模型, 当生产者生产过慢的时候, 消费者就会等待生产者的下一次notify</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">final Object <span class="keyword">lock</span> = <span class="keyword">new</span> Object();</span><br><span class="line">         Thread t1 = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">              @<span class="function">Override</span><br><span class="line">              <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                 </span><br><span class="line">                  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                 </span><br><span class="line">                  <span class="keyword">while</span>(<span class="keyword">true</span> )&#123;</span><br><span class="line">                       synchronized (<span class="keyword">lock</span>) &#123;</span><br><span class="line">                           <span class="keyword">try</span> &#123;</span><br><span class="line">                               <span class="keyword">lock</span>.wait();</span><br><span class="line">                          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                          &#125;</span><br><span class="line">                          System. <span class="keyword">out</span>.println(i++);</span><br><span class="line">                      &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;;</span><br><span class="line">         </span><br><span class="line">         Thread t2 = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">              @<span class="function">Override</span><br><span class="line">              <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                 </span><br><span class="line">                  <span class="keyword">while</span>(<span class="keyword">true</span> )&#123;</span><br><span class="line">                       synchronized (<span class="keyword">lock</span>) &#123;</span><br><span class="line">                           <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; <span class="number">10000000</span>; i++)&#123;</span><br><span class="line">                              System. <span class="keyword">out</span>.println(i);</span><br><span class="line">                          &#125;</span><br><span class="line">                          <span class="keyword">lock</span>.notifyAll();</span><br><span class="line">                      &#125;</span><br><span class="line">                      </span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;;</span><br><span class="line">         </span><br><span class="line">         t1.setName( “^^t1^^”);</span><br><span class="line">         t2.setName( “^^t2^^”);</span><br><span class="line">         </span><br><span class="line">         t1.start();</span><br><span class="line">         t2.start();</span><br></pre></td></tr></table></figure>
<p><img src="/img/thread/WAITTING.png" alt="Alt text"></p>
<h1 id="TIMED_WAITING,_这个仅需要在4的基础上,_在wait方法加上一个时间参数进行限制就OK了">TIMED_WAITING, 这个仅需要在4的基础上, 在wait方法加上一个时间参数进行限制就OK了</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">synchronized (<span class="keyword">lock</span>) &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">lock</span>.wait(<span class="number">60</span> * <span class="number">1000</span>L);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">   &#125;</span><br><span class="line">   System. <span class="keyword">out</span> .println(i++);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p> <img src="/img/thread/TIMED_WAITING.png" alt="Alt text"></p>
<p>另外看stack的输出,  他叫 TIMED_WAITING(on  object monitor) , 说明括号后面还有其他的情况, 比如sleep, 我们直接把t2的for循环改成sleep试试:<br> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">synchronized (lock) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">          sleep(<span class="number">30</span>*<span class="number">1000L</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    lock.notifyAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/thread/TIMED_WAITING_2.png" alt="Alt text"><br>t2的state是 TIMED_WAITING( sleeping),  而t1依然是on object monitor , 因为t1还是wait在等待t2 notify, 而t2是自己sleep</p>
<h2 id="TERMINATED,_这个状态只要线程结束了run方法,_就会进入了">TERMINATED, 这个状态只要线程结束了run方法, 就会进入了</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>一直对java线程的几种状态认识的模模糊糊，平时在对java进行监控的时候，用jstack打出一堆线程状态，看的不是很懂，另外网上一堆乌七八糟的东西，看着着实难受，自己学习一下，整理整理。<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[系统监控-nmon使用]]></title>
    <link href="http://tonylit.me/2015/12/17/%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7-nmon%E4%BD%BF%E7%94%A8/"/>
    <id>http://tonylit.me/2015/12/17/系统监控-nmon使用/</id>
    <published>2015-12-17T03:37:27.000Z</published>
    <updated>2015-12-17T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>压力测试的时候，可以使用nmon收集服务器资源使用情况。工具很不错，收集的结果展示起来也比较直观，是性能测试监控工具的一把好刷子。<br><img src="/img/nmon/nmon_2.PNG" alt="Alt text"></p>
<a id="more"></a>
<h1 id="Nmon简介">Nmon简介</h1><p>Nmon是由IBM提供的，免费监控AIX系统和 linux系统资源的工具，使用比较广泛。相对于其他的监控工具来说，nmon所记录的信息比较全面，它能在系统运行中实时地捕捉系统资源的使用情况，并 能输出结果到文件中，然后通过nmon_analyzer工具产生数据文件和图形化的结果。<br>另外，它不会消耗大量的CPU周期，通常低于百分之一。<br>nmon所记录的数据包含以下几个方面：</p>
<blockquote>
<p>● cpu占用率<br>● 内存使用情况<br>● 磁盘I/O速度、传输和读写比<br>● 文件系统的使用率<br>● 网络I/O速度、传输和读写比率、错误统计率与传输包的大小<br>● 消耗资源最多的进程<br>● 计算机详细信息和资源<br>● 页面空间和页面I/O速度<br>●用户自定义的磁盘组<br>● 网络文件系统</p>
</blockquote>
<h1 id="Nmon安装使用">Nmon安装使用</h1><p>1.首先检查自己的操作系统，我这里为centos5.8 64位<br>下载nmon监控工具和nmon analyser分析工具<br><a href="http://pan.baidu.com/s/1nuicjHJ" target="_blank" rel="external">http://pan.baidu.com/s/1nuicjHJ</a><br>2.将nmon监控工具放在监控服务器上，解压；该文件无执行权限，给它加上chmod +x mon_x86_64_centos5<br><img src="/img/nmon/nmon_1.PNG" alt="Alt text"><br>3.运行./nmon_x86_64_centos5，便可进入nmon监控界面<br><img src="/img/nmon/nmon_2.PNG" alt="Alt text"></p>
<p>按h键，查看选项<br><img src="/img/nmon/nmon_3.PNG" alt="Alt text"><br>4.我们键入c，m，d，看下cpu，内存，磁盘I/O<br><img src="/img/nmon/nmon_4.PNG" alt="Alt text"></p>
<h1 id="nmon数据采集与分析">nmon数据采集与分析</h1><blockquote>
<p>./nmon_x86_64_centos5 -f -t -s 30 -c 180<br>-f:按标准格式输出文件：<hostname>_YYYYMMDD_HHMM.nmon<br>-t:输出中包括占用率较高的进程<br>-s 30：每30秒收集一次数据<br>-c 180：一共收集180次</hostname></p>
</blockquote>
<p>生成的文件如下：<br><img src="/img/nmon/nmon_5.PNG" alt="Alt text"><br>为了分析nmon监控获得的结果，我们用nmon_analyser工具图形化监控结果<br>打开nmon_analyser<br><img src="/img/nmon/nmon_6.PNG" alt="Alt text"></p>
<p>将我们监控的结果添加进来，自动生成图形：<br><img src="/img/nmon/nmon_7.PNG" alt="Alt text"></p>
<h1 id="性能参数介绍：">性能参数介绍：</h1><p>nmon analyser生成的execl中包括很多工作表<br><img src="/img/nmon/nmon_8.PNG" alt="Alt text"></p>
<blockquote>
<p>?    系统汇总（对应SYS_SUMM标签），其中蓝线为cpu占用的变化情况，粉线代表磁盘IO的变化情况<br>?    磁盘读写情况汇总（对应DIS_SUMM标签），其中蓝色为磁盘读的速率KB/S，紫色为磁盘写的速率KB/S<br>?    内存情况汇总（对应MEM标签），曲线表示内存剩余量（MB）</p>
</blockquote>
<h2 id="SYS_SUMM标签页：系统汇总页面">SYS_SUMM标签页：系统汇总页面</h2><blockquote>
<p> User%  ：用户进程占CPU时间百分比  Sys%    ：线程和中断占用CPU时间百分比<br>Wait%    ：所有进程线程被阻塞等待完成一次IO所占CPU时间百分比 Idle%    ：CPU空闲时间百分比 CPU%    ：CPU利用率的百分比</p>
</blockquote>
<p>如果一个CPU被充分利用，比例应该是：65%~70% user time，30%~35% system time，0%~5% idle time</p>
<h2 id="AAA标签页：系统信息">AAA标签页：系统信息</h2><p>页面信息包括：执行的命令、主机cpu数、操作系统版本信息、主机名等信息<br><img src="/img/nmon/nmon_9.PNG" alt="Alt text"></p>
<h2 id="CPU使用情况：标签页（CPU_ALL,CPU_SUMM,CPU001，CPU002）">CPU使用情况：标签页（CPU_ALL,CPU_SUMM,CPU001，CPU002）</h2><p>主机CPU使用情况以及单颗CPU的使用情况<br><img src="/img/nmon/nmon_10.PNG" alt="Alt text"></p>
<h2 id="磁盘读写情况：标签页（DISK_SUMM/DISKBUSY/DISKREAD/DISKWRITE/DISKXFER）">磁盘读写情况：标签页（DISK_SUMM/DISKBUSY/DISKREAD/DISKWRITE/DISKXFER）</h2><p>磁盘的读写、及I/O的统计信息，系统各磁盘分区的情况。<br><img src="/img/nmon/nmon_11.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>压力测试的时候，可以使用nmon收集服务器资源使用情况。工具很不错，收集的结果展示起来也比较直观，是性能测试监控工具的一把好刷子。<br><img src="/img/nmon/nmon_2.PNG" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jenkins+maven+jmeter 性能自动化实践]]></title>
    <link href="http://tonylit.me/2015/12/16/jenkins+maven+jmeter%E6%80%A7%E8%83%BD%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%9E%E8%B7%B5/"/>
    <id>http://tonylit.me/2015/12/16/jenkins+maven+jmeter性能自动化实践/</id>
    <published>2015-12-16T03:37:27.000Z</published>
    <updated>2015-12-16T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>先简单介绍这几个工具，其实都不陌生了，平时工作中都会接触到<br>jenkins：前身hudson，开源的CI服务器<br>maven：这里主要是要用到maven与jmeter集成的插件（jmeter-maven-plugin）<br>jmeter：java编写的apache下开源的性能测试工具</p>
<h1 id="整个环境搭建过程：">整个环境搭建过程：</h1><blockquote>
<ol>
<li>新建maven工程，在pom中加入jmeter的插件，将jmeter脚本放入项目中，测试</li>
<li>搭建jenkins（这里使用的linux环境 centos5.8）</li>
<li>将maven项目配置在jenkins中</li>
<li>在jenkins中集成jmeter结果展示的插件（Performance），进行jenkins构建，测试</li>
</ol>
</blockquote>
<a id="more"></a>
<h1 id="第一步：新建maven项目">第一步：新建maven项目</h1><p>1.新建maven项目，在pom中加入jmeter-maven-plugin插件（由于jmeter-maven插件运行时会自动引入jmeter所需要的类库，所以机器上可以不单独安装jmeter）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>com.lazerycode.jmeter<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>jmeter-maven-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.10.1<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">id</span>&gt;</span>jmeter-tests<span class="tag">&lt;/<span class="title">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="title">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">goal</span>&gt;</span>jmeter<span class="tag">&lt;/<span class="title">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.在项目中新建source Folder：src/test/jmeter，因为插件中指定在此目录下面查找jmeter脚本来执行，如果想更改路径的话，在pom中自己配置<br><img src="/img/jenkins/jenkins_1.PNG" alt="Alt text"></p>
<p>3.在Command Line Shell中执行：mvn verify或者mvn jmeter:jmeter，这样jmeter的脚本运行了。<br><img src="/img/jenkins/jenkins_2.PNG" alt="Alt text"></p>
<p>这里的jmeter脚本比较简单，就是打开一个页面，10个并发，我们可以看下执行结果，确实是按照我们的设置运行了。</p>
<p><img src="/img/jenkins/jenkins_3.PNG" alt="Alt text"></p>
<p>以上，我们集成Jmeter插件的maven项目就OK了。</p>
<hr>
<h1 id="第二步，搭建jenkins">第二步，搭建jenkins</h1><p>我是linux环境下安装的（下载地址：  <a href="http://pan.baidu.com/s/1bnYTisn" target="_blank" rel="external">jenkins.war</a> 和它常用的插件<a href="http://updates.jenkins-ci.org/download/plugins/" target="_blank" rel="external">jenkins_plugin</a>）（先下载performance，后面会用），jenkins启动直接采用java -jar，用nginx进行访问代理<br>1.将jenkins.war放入服务器上</p>
<ol>
<li>直接命令（java的版本需要jdk1.7+）：java -jar jenkins.war，jenkins就启动了，默认端口8080，也可以指定端口启动:加入启动参数 –httpPort=$HTTP_PORT(设置端口)，–httpsPort=$HTTP_PORT(便是使用https协议)；当然完全可以搭建在 tomcat或者resin服务器中。<br><img src="/img/jenkins/jenkins_4.PNG" alt="Alt text"></li>
</ol>
<p>3.启动完，我们可以访问jenkins了，输入ip:端口<br><img src="/img/jenkins/jenkins_5.PNG" alt="Alt text"><br>4.使用nginx代理访问jenkins，这一步可以不要，主要是我想用域名方式访问。我们在nginx中简单配置下就可以了：<br><img src="/img/jenkins/jenkins_6.PNG" alt="Alt text"><br><img src="/img/jenkins/jenkins_7.PNG" alt="Alt text"><br>以上，jenkins搭建完成了，比较简单。</p>
<hr>
<h1 id="第三步：将项目放在jenkins中构建">第三步：将项目放在jenkins中构建</h1><p>我这里实现的很简单，直接调用的服务器上的脚本运行的；而且本人对jenkins的配置刚开始了解，不太懂，关于项目配置大家可以具体学习下，网上资料比较多。<br>1.开始之前，需要在jenkins中加入上面下载的插件，在jenkins的插件管理中上传就可以了。<br>2.新建一个项目（我这里新建的构建一个自由风格的软件项目），直接运行服务器上的脚本<br><img src="/img/jenkins/jenkins_8.PNG" alt="Alt text"><br>脚本中实现如下：<br><img src="/img/jenkins/jenkins_9.PNG" alt="Alt text"></p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export LANG=en_US</span><br><span class="line">export LC_ALL=en_US</span><br><span class="line">export JAVA_HOME=/opt/jdk1.<span class="number">7.0_40</span>/</span><br><span class="line">export CLASSPATH=<span class="variable">$JAVA</span>_HOME/lib:<span class="variable">$JAVA</span>_HOME/jre/lib:<span class="variable">$CLASSPATH</span></span><br><span class="line">export MAVEN_HOME=/opt/apache-maven-<span class="number">3.0</span>.<span class="number">4</span>/</span><br><span class="line">export PATH=<span class="variable">$JAVA</span>_HOME/bin:$&#123;MAVEN_HOME&#125;/bin:<span class="variable">$PATH</span></span><br><span class="line">export MAVEN_OPTS=<span class="string">"-Xmx1024m -XX:MaxPermSize=512m"</span></span><br><span class="line"> </span><br><span class="line">cd  /app/maven_jmeter/</span><br><span class="line">/opt/apache-maven-<span class="number">3.0</span>.<span class="number">4</span>/bin/mvn -s /opt/apache-maven-<span class="number">3.0</span>.<span class="number">4</span>/conf/voen_setting.xml jmeter:jmeter</span><br></pre></td></tr></table></figure>
<p>以上，jenkins的项目构建结束。</p>
<hr>
<h1 id="第四步：测试结果展示">第四步：测试结果展示</h1><p>测试的结果怎样在jenkins中显示呢？这里需要performance插件（上面svn中有）<br>1.我们先来看下结果放在哪<br><img src="/img/jenkins/jenkins_10.PNG" alt="Alt text"><br>2.在jenkins中加入publish perfoemance test result resport<br><img src="/img/jenkins/jenkins_11.PNG" alt="Alt text"><br>3.我们进行构建，看下结果<br><img src="/img/jenkins/jenkins_12.PNG" alt="Alt text"><br>这里展现的结果可以做优化，并且可以集成邮件功能<br>以上，整个实践结束，整体还是比较简单的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>先简单介绍这几个工具，其实都不陌生了，平时工作中都会接触到<br>jenkins：前身hudson，开源的CI服务器<br>maven：这里主要是要用到maven与jmeter集成的插件（jmeter-maven-plugin）<br>jmeter：java编写的apache下开源的性能测试工具</p>
<h1 id="整个环境搭建过程：">整个环境搭建过程：</h1><blockquote>
<ol>
<li>新建maven工程，在pom中加入jmeter的插件，将jmeter脚本放入项目中，测试</li>
<li>搭建jenkins（这里使用的linux环境 centos5.8）</li>
<li>将maven项目配置在jenkins中</li>
<li>在jenkins中集成jmeter结果展示的插件（Performance），进行jenkins构建，测试</li>
</ol>
</blockquote>]]>
    
    </summary>
    
      <category term="Jmeter" scheme="http://tonylit.me/tags/Jmeter/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SoupUI接口性能测试]]></title>
    <link href="http://tonylit.me/2015/12/16/soupui%E6%8E%A5%E5%8F%A3%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <id>http://tonylit.me/2015/12/16/soupui接口性能测试/</id>
    <published>2015-12-16T03:37:27.000Z</published>
    <updated>2015-12-16T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>SoapUI做接口测试时，可能会忽略它有压力测试的套件LoadTest，在做WebServices接口压力测试时，比loadrunner更胜一筹。<br><a id="more"></a><br><img src="/img/soupui/soupui_1.PNG" alt="Alt text"><br>Threads：线程数量，相对于LR中的虚拟用户数<br>Strategy：我们选择Simple就可以了<br>Test Delay：用例之间的等待时间，相对于LR中的思考时间<br>Random：思考时间取值区间，相对于LR中思考时间设置里面的Use Random Percent…<br>Limit：运行时间，相对于LR中的持续时间<br>这里的设置项比较少，但一般情况是够用了；另外结果的展现部分和LR是没法比较的。最主要的它的免费的。<br>在WebServices接口测试方面，准确性比LR高。至于原因（网上说的）：<br>soapui 是专门针对webservices接口的测试工具，在发送请求的时候，直接以组装好的soapui报文进行发送，而LR是使用 web_services_call方法，从方法传入相应的参数，由LR组装成soap报文后再发送接口调用。所以相应时间上LR更长。<br>对于非webservices接口，我也测试了一下（REST POST请求），看下图对比：<br><img src="/img/soupui/soupui_2.PNG" alt="Alt text"><br><img src="/img/soupui/soupui_3.PNG" alt="Alt text"><br>可以看到响应时间上面，soapui更小</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>SoapUI做接口测试时，可能会忽略它有压力测试的套件LoadTest，在做WebServices接口压力测试时，比loadrunner更胜一筹。<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaMelody监控java应用]]></title>
    <link href="http://tonylit.me/2015/12/16/javamelody%E7%9B%91%E6%8E%A7java%E5%BA%94%E7%94%A8/"/>
    <id>http://tonylit.me/2015/12/16/javamelody监控java应用/</id>
    <published>2015-12-16T03:37:27.000Z</published>
    <updated>2015-12-16T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>公司里大多都是java项目，之前监控一直用jprofiler，最近在论坛上发现JavaMelody这个监控神器，真是眼前一亮！<br><img src="/img/javamelody/javamelody_1.jpg" alt="Alt text"></p>
<a id="more"></a>
<h1 id="JavaMelody介绍">JavaMelody介绍</h1><p>JavaMelody 能够监测Java或Java EE应用程序服务器，并以图表的方式显示：Java内存和Java  CPU使用情况，用户Session数量，JDBC连接数，和http请求、sql请求、jsp页面与业务接口方法（EJB3、Spring、 Guice）的执行数量，平均执行时间，错误百分比等。图表可以按天，周，月，年或自定义时间段查看。</p>
<h1 id="监控配置">监控配置</h1><p>今天先介绍怎样简单的做项目监控，与spring或者Struts集成先不谈。<br>你需要做的只是拷贝两个jar包，添加10行xml的代码就OK了。</p>
<h2 id="下载一个javamelody-1-58-0-zip_解压开来">下载一个javamelody-1.58.0.zip 解压开来</h2><p>下载地址在github上，<a href="https://github.com/javamelody/javamelody/releases，现在的最新版本是1.58，下载javamelody-1.58.0.zip" target="_blank" rel="external">https://github.com/javamelody/javamelody/releases，现在的最新版本是1.58，下载javamelody-1.58.0.zip</a><br>解压开，将里面的javamelody.jar和jrobin-1.5.9.1.jar拷贝到项目WEB-INF下的lib中。</p>
<h1 id="配置web-xml">配置web.xml</h1><p>在web.xml中添加配置：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;filter&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="variable">&lt;filter-name&gt;</span>monitoring<span class="variable">&lt;/filter-name&gt;</span></span><br><span class="line">      <span class="variable">&lt;filter-class&gt;</span>net.bull.javamelody.MonitoringFilter<span class="variable">&lt;/filter-class&gt;</span></span><br><span class="line"><span class="variable">&lt;/filter&gt;</span></span><br><span class="line"><span class="variable">&lt;filter-mapping&gt;</span></span><br><span class="line">       <span class="variable">&lt;filter-name&gt;</span>monitoring<span class="variable">&lt;/filter-name&gt;</span></span><br><span class="line">       <span class="variable">&lt;url-pattern&gt;</span>/<span class="keyword">*</span><span class="variable">&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="variable">&lt;/filter-mapping&gt;</span></span><br><span class="line"><span class="variable">&lt;listener&gt;</span></span><br><span class="line">       <span class="variable">&lt;listener-class&gt;</span>net.bull.javamelody.SessionListener<span class="variable">&lt;/listener-class&gt;</span></span><br><span class="line"><span class="variable">&lt;/listener&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="重启应用，完成配置">重启应用，完成配置</h1><p>现在就可以启动应用服务器打开网址查看监控效果了。网址：http://<host>/monitoring<br>如：<a href="http://192.168.43.103:82/monitoring" target="_blank" rel="external">http://192.168.43.103:82/monitoring</a><br><img src="/img/javamelody/javamelody.PNG" alt="Alt text"></host></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>公司里大多都是java项目，之前监控一直用jprofiler，最近在论坛上发现JavaMelody这个监控神器，真是眼前一亮！<br><img src="/img/javamelody/javamelody_1.jpg" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Druid连接池监控]]></title>
    <link href="http://tonylit.me/2015/12/15/druid%E8%BF%9E%E6%8E%A5%E6%B1%A0%E7%9B%91%E6%8E%A7/"/>
    <id>http://tonylit.me/2015/12/15/druid连接池监控/</id>
    <published>2015-12-15T03:37:27.000Z</published>
    <updated>2015-12-15T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>Druid是一个JDBC组件， 首先是一个数据库连接池，属于阿里巴巴众多开源项目的一个。如果想看具体的介绍请看这里：<br>官网介绍：<a href="http://code.alibabatech.com/wiki/display/Druid/Home" target="_blank" rel="external">http://code.alibabatech.com/wiki/display/Druid/Home</a><br>我这里主要介绍怎么监控druid<br><a id="more"></a></p>
<h1 id="在web-xml中添加如下：">在web.xml中添加如下：</h1><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;servlet&gt;</span>  </span><br><span class="line"></span><br><span class="line">        <span class="variable">&lt;servlet-name&gt;</span>DruidStatView<span class="variable">&lt;/servlet-name&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;servlet-class&gt;</span>com.alibaba.druid.support.http.StatViewServlet<span class="variable">&lt;/servlet-class&gt;</span>  </span><br><span class="line">    <span class="variable">&lt;/servlet&gt;</span>  </span><br><span class="line">    <span class="variable">&lt;servlet-mapping&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;servlet-name&gt;</span>DruidStatView<span class="variable">&lt;/servlet-name&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;url-pattern&gt;</span>/druid/<span class="keyword">*</span><span class="variable">&lt;/url-pattern&gt;</span>  </span><br><span class="line">    <span class="variable">&lt;/servlet-mapping&gt;</span> </span><br><span class="line"><span class="variable">&lt;filter&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;filter-name&gt;</span>DruidWebStatFilter<span class="variable">&lt;/filter-name&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;filter-class&gt;</span>com.alibaba.druid.support.http.WebStatFilter<span class="variable">&lt;/filter-class&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;init-param&gt;</span>  </span><br><span class="line">            <span class="variable">&lt;param-name&gt;</span>exclusions<span class="variable">&lt;/param-name&gt;</span>  </span><br><span class="line">            <span class="variable">&lt;param-value&gt;</span><span class="keyword">*</span>.js,<span class="keyword">*</span>.gif,<span class="keyword">*</span>.jpg,<span class="keyword">*</span>.png,<span class="keyword">*</span>.css,<span class="keyword">*</span>.ico,/druid/<span class="keyword">*</span><span class="variable">&lt;/param-value&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;/init-param&gt;</span>  </span><br><span class="line">      <span class="variable">&lt;/filter&gt;</span>  </span><br><span class="line">      <span class="variable">&lt;filter-mapping&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;filter-name&gt;</span>DruidWebStatFilter<span class="variable">&lt;/filter-name&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;url-pattern&gt;</span>/<span class="keyword">*</span><span class="variable">&lt;/url-pattern&gt;</span>  </span><br><span class="line">      <span class="variable">&lt;/filter-mapping&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="配置完成，重启应用，访问http://ip地址+端口/druid/index-html">配置完成，重启应用，访问<a href="http://ip地址+端口/druid/index.html" target="_blank" rel="external">http://ip地址+端口/druid/index.html</a></h1><p><img src="/img/druid.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Druid是一个JDBC组件， 首先是一个数据库连接池，属于阿里巴巴众多开源项目的一个。如果想看具体的介绍请看这里：<br>官网介绍：<a href="http://code.alibabatech.com/wiki/display/Druid/Home">http://code.alibabatech.com/wiki/display/Druid/Home</a><br>我这里主要介绍怎么监控druid<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[性能测试葵花宝典]]></title>
    <link href="http://tonylit.me/2015/12/10/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E8%91%B5%E8%8A%B1%E5%AE%9D%E5%85%B8/"/>
    <id>http://tonylit.me/2015/12/10/性能测试葵花宝典/</id>
    <published>2015-12-10T03:37:27.000Z</published>
    <updated>2015-12-10T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>在此整理性能测试过程中的一些精华内容，并持续进行<br>为此命名为性能测试葵花宝典，我先练上！<br><img src="/img/葵花宝典.jpg" alt="Alt text"></p>
<a id="more"></a>
<h1 id="压力机的资源利用率">压力机的资源利用率</h1><blockquote>
<p>cpu%&lt;50%<br>内存&lt;80%<br>network&lt;30%,高了容易丢包<br>disk的忙闲&lt;50%<br>disk的空间&lt;90%，高了会碎片整理</p>
</blockquote>
<h1 id="OS常用阀值">OS常用阀值</h1><blockquote>
<p>TotalCPU%&lt;75%<br> sysCPU%&lt;30%<br>  load average&lt;5<br> wio%&lt;40%<br>  network%&lt;30%<br>mem%&lt;80%~90%<br> disk%busy&lt;60%<br> disk queueing &lt;5<br> disk usage&lt;90%</p>
</blockquote>
<h1 id="OSI7层模型">OSI7层模型</h1><p><img src="/img/OSI_7.gif" alt="Alt text"></p>
<h1 id="线程状态">线程状态</h1><p><img src="/img/线程状态.jpg" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在此整理性能测试过程中的一些精华内容，并持续进行<br>为此命名为性能测试葵花宝典，我先练上！<br><img src="/img/葵花宝典.jpg" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Jmeter测试java程序]]></title>
    <link href="http://tonylit.me/2015/12/10/jmeter%E6%B5%8B%E8%AF%95java/"/>
    <id>http://tonylit.me/2015/12/10/jmeter测试java/</id>
    <published>2015-12-10T03:37:27.000Z</published>
    <updated>2015-12-10T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>之前写过用loadrunner测试java程序。其实Jmeter同样可以，它本身是开源、java实现的，对java的支持比较优秀。<br>那么问题来了，怎么使用Jmeter进行工作呢？<br><img src="/img/jmeter/jmeter.jpg" alt="Alt text"></p>
<a id="more"></a>
<h1 id="第一步：">第一步：</h1><p>创建java工程，并把Jmeter文件夹中lib目录下的jar包添加进入工程。<br><img src="/img/jmeter/jmeter_jar.PNG" alt="Alt text"></p>
<h1 id="第二步">第二步</h1><p>创建一个类继承AbstractJavaSamplerClient，并重写；</p>
<blockquote>
<p>public Arguments getDefaultParameters();设置可用参数及默认值；<br>public void setupTest(JavaSamplerContext arg0)：每个线程测试前执行一次，做一些初始化工作；<br>public SampleResult runTest(JavaSamplerContext arg0)：开始测试，从arg0参数可以获得参数值；<br>public void teardownTest(JavaSamplerContext arg0)：测试结束时调用；</p>
</blockquote>
<p>执行的先后顺序为：<br>getDefaultParameters() –&gt; setupTest(JavaSamplerContext context) –&gt; runTest(JavaSamplerContext context) –&gt; teardownTest(JavaSamplerContext context)</p>
<blockquote>
<p>常用的方法： </p>
<ul>
<li>addArgument(“name”, “value”)    定义参数</li>
<li>sampleStart()   定义事务的开始，类似于LR的lr_start_transaction，和LR一样事务间不要放无关代码 </li>
<li>sampleEnd()    定义事务的结束，类似于LR的lr_end_transaction </li>
<li>setSuccessful(true、false)   设置运行结果的成功或失败，Jmeter统计成功失败的次数，在聚合报告中能够体现。</li>
</ul>
</blockquote>
<h1 id="第三步">第三步</h1><p>将java工程导出为jar包，将此jar包放入JMETER_HOME\lib\ext目录</p>
<h1 id="第四步">第四步</h1><p>打开JMeter，创建线程组、Java Request、查看结果树，进行测试；</p>
<h1 id="实例">实例</h1><h2 id="先写一个被测试的类">先写一个被测试的类</h2><p>简单一点：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">     <span class="keyword">*</span> Copyright 2015 Focus Technology, Co., Ltd. All rights reserved.</span><br><span class="line">package jmeter.test;</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> HelloWorld.java</span><br><span class="line"> <span class="keyword">*</span> </span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@author lit</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">public class HelloWorld &#123;</span><br><span class="line"></span><br><span class="line">  public String sayHello(String world1, String world2) &#123;</span><br><span class="line">        return world1 + world2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="创建一个JmeterTest类，并继承AbstractJavaSamplerClient：">创建一个JmeterTest类，并继承AbstractJavaSamplerClient：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"> * Copyright <span class="number">2015</span> Focus Technology, Co., Ltd. All rights reserved.</span><br><span class="line"><span class="keyword">package</span> jmeter.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.jmeter.config.Arguments;</span><br><span class="line"><span class="keyword">import</span> org.apache.jmeter.protocol.java.sampler.AbstractJavaSamplerClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.jmeter.samplers.SampleResult;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * JmeterTest.java</span><br><span class="line"> * </span><br><span class="line"> * <span class="doctag">@author</span> lit</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmeterTest</span> <span class="keyword">extends</span> <span class="title">AbstractJavaSamplerClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String world1;</span><br><span class="line">    <span class="keyword">private</span> String world2;</span><br><span class="line">    <span class="keyword">private</span> String world_final;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 这个方法是用来自定义java方法入参的。 params.addArgument("name","guodegang");表示入参名字叫name,值为guodegang。 设置可用参数及的默认值；</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Arguments <span class="title">getDefaultParameters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Arguments arguments = <span class="keyword">new</span> Arguments();</span><br><span class="line">        arguments.addArgument(<span class="string">"name"</span>, <span class="string">"guodegang"</span>);</span><br><span class="line">        arguments.addArgument(<span class="string">"age"</span>, <span class="string">"48"</span>);</span><br><span class="line">        <span class="keyword">return</span> arguments;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每个线程测试前执行一次，做一些初始化工作；</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setupTest</span><span class="params">(JavaSamplerContext arg0)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 开始测试，从arg0参数可以获得参数值；</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SampleResult <span class="title">runTest</span><span class="params">(JavaSamplerContext arg0)</span> </span>&#123;</span><br><span class="line">        world1 = arg0.getParameter(<span class="string">"name"</span>);</span><br><span class="line">        world2 = arg0.getParameter(<span class="string">"age"</span>);</span><br><span class="line">        <span class="comment">// 增加jmter的sample</span></span><br><span class="line">        SampleResult sr = <span class="keyword">new</span> SampleResult();</span><br><span class="line">        sr.setSampleLabel(<span class="string">"java request"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// jmeter 开始统计响应时间标记</span></span><br><span class="line">            sr.sampleStart();</span><br><span class="line">            HelloWorld helloWorld = <span class="keyword">new</span> HelloWorld();</span><br><span class="line">            world_final = helloWorld.sayHello(world1, world2);</span><br><span class="line">            <span class="keyword">if</span> (world_final != <span class="keyword">null</span> &amp;&amp; world_final.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                sr.setResponseData(<span class="string">"结果是："</span> + world_final, <span class="keyword">null</span>);</span><br><span class="line">                sr.setDataType(SampleResult.TEXT);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sr.setSuccessful(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            sr.setSuccessful(<span class="keyword">false</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// jmeter 结束统计响应时间标记</span></span><br><span class="line">            sr.sampleEnd();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试结束时调用；</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teardownTest</span><span class="params">(JavaSamplerContext arg0)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 本地测试用</span><br><span class="line">     * </span><br><span class="line">     * <span class="doctag">@param</span> args</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        Arguments params = <span class="keyword">new</span> Arguments();</span><br><span class="line">        params.addArgument(<span class="string">"name"</span>, <span class="string">"guodegang"</span>);</span><br><span class="line">        params.addArgument(<span class="string">"age"</span>, <span class="string">"48"</span>);</span><br><span class="line">        JavaSamplerContext arg0 = <span class="keyword">new</span> JavaSamplerContext(params);</span><br><span class="line">        JmeterTest test = <span class="keyword">new</span> JmeterTest();</span><br><span class="line">        test.setupTest(arg0);</span><br><span class="line">        test.runTest(arg0);</span><br><span class="line">        test.teardownTest(arg0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Export为Runnable_Jar_File：hello-jar">Export为Runnable Jar File：hello.jar</h2><h2 id="将此hello-jar包放入JMETER_HOME\lib\ext目录；">将此hello.jar包放入JMETER_HOME\lib\ext目录；</h2><h2 id="打开JMeter,添加线程组，添加Java请求，查看结果树。">打开JMeter,添加线程组，添加Java请求，查看结果树。</h2><p><img src="/img/jmeter/jmeter_java.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前写过用loadrunner测试java程序。其实Jmeter同样可以，它本身是开源、java实现的，对java的支持比较优秀。<br>那么问题来了，怎么使用Jmeter进行工作呢？<br><img src="/img/jmeter/jmeter.jpg" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="Jmeter" scheme="http://tonylit.me/tags/Jmeter/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[loadrunner调用java程序]]></title>
    <link href="http://tonylit.me/2015/12/07/loadrunner%E8%B0%83%E7%94%A8java/"/>
    <id>http://tonylit.me/2015/12/07/loadrunner调用java/</id>
    <published>2015-12-07T03:37:27.000Z</published>
    <updated>2015-12-07T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>有些时候，需要使用LR来调用我们写好的java程序（接口），做一些压力测试。<br>那么问题来了，怎么使用LR进行工作呢？<br><a id="more"></a></p>
<p>步骤如下：<br>1.将java项目中使用的jar包找出来<br>2.将java工程文件打成jar包<br>3.打开loadrunner，新建一个Java Vuser的脚本<br><img src="/img/java_vuser.PNG" alt="Alt text"><br>4.设置Run—time Settings中的ClassPath，加入java工程中调用的jar包<br><img src="/img/java_jar.PNG" alt="Alt text"><br>5.接下来我们编写Vuser脚本，和java一样，导入需要的包名，调用项目中的接口或者函数<br><img src="/img/java_java.PNG" alt="Alt text"><br>6.写完以后，编译运行一下，没问题，就可以设置测试场景加压了<br>当然还有其他方式调用java程序，以上是比较简单的一种。<br>对于业务场景，完全可以在Vuser中编写，不过在Vuser中编写有些不方便，看个人喜好吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有些时候，需要使用LR来调用我们写好的java程序（接口），做一些压力测试。<br>那么问题来了，怎么使用LR进行工作呢？<br>]]>
    
    </summary>
    
      <category term="loadrunner" scheme="http://tonylit.me/tags/loadrunner/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[lrs_set_recv_timeout 解决长连接等待]]></title>
    <link href="http://tonylit.me/2015/12/04/tcp/"/>
    <id>http://tonylit.me/2015/12/04/tcp/</id>
    <published>2015-12-04T03:37:27.000Z</published>
    <updated>2015-12-04T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>最近又碰到坑爹的通讯项目，web端登录与客户端登录消息用的一套长连接机制。<br>脚本写的真是蛋疼、累死，不仅要用socket协议，还要模拟长连接接收消息，最后要看一堆无语的data.ws文件。<br>而且，两个部门协作起来真是无力吐槽了！<br>还好有<strong>lrs_set_recv_timeout</strong><br><a id="more"></a><br>lrs_set_recv_timeout有两个函数<br>lrs_set_recv_timeout和lrs_set_recv_timeout2</p>
<blockquote>
<p> lrs_set_recv_timeout(long sec, long u_sec);  // 设置接收数据的等待时间（超时时间）<br>lrs_set_recv_timeout2(long sec, long u_sec);  // 设置建立连接成功之后，接收数据的等待时间。</p>
</blockquote>
<p>Example:</p>
<blockquote>
<p>lrs_create_socket(“socket2”, “TCP”,<br>“RemoteHost=tears.mercury.co.il:23”, LrsLastArg); lrs_send(“socket2”,<br>“buf2”, LrsLastArg); lrs_set_recv_timeout(120,0);<br>lrs_set_recv_timeout2(10,0); lrs_receive(“socket2”, “buf3”,<br>LrsLastArg);</p>
</blockquote>
<p>我的脚本：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">/*********************************************************************</span><br><span class="line"> * Created by Mercury Interactive Windows Sockets Recorder</span><br><span class="line"> *</span><br><span class="line"> * Created on: Tue Oct 27 17:48:09</span><br><span class="line"> *********************************************************************/</span><br><span class="line"></span><br><span class="line">#include "lrs.h"</span><br><span class="line">...</span><br><span class="line">char *position;</span><br><span class="line">char *position2;</span><br><span class="line">Action()</span><br><span class="line"></span><span class="expression">&#123;</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket0"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line">	/<span class="end-block">/GET mictouch</span>_<span class="variable">logout</span> <span class="variable">HTTP</span>1<span class="variable">.</span>1 <span class="variable">Host</span>: <span class="variable">m.made-in-china.com</span></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket0"</span>, <span class="string">"buf0"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket0"</span>, <span class="string">"buf1"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">    /<span class="end-block">/location</span>: <span class="end-block">/login</span></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket0"</span>, <span class="string">"buf2"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket0"</span>, <span class="string">"buf3"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket1"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket2"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line">   /<span class="end-block">/GET </span><span class="end-block">/mt</span><span class="end-block">/img</span><span class="end-block">/phone.svg</span>?_<span class="variable">v</span>=1445919622415 <span class="variable">HTTP</span>/1<span class="variable">.</span>1\<span class="variable">r</span>\<span class="variable">n</span></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket1"</span>, <span class="string">"buf4"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket3"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket1"</span>, <span class="string">"buf5"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket4"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket5"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket6"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket7"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket8"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=203.208.40.135:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket0"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket9"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=203.208.40.135:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket4"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket2"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket3"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket6"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket5"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket7"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket9"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket8"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket10"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line">    /<span class="end-block">/GET </span><span class="end-block">/favicon.ico HTTP</span>/1<span class="variable">.</span>1\<span class="variable">r</span>\<span class="variable">n</span><span class="string">"</span><br><span class="line"></span><br><span class="line">    lrs_send("</span><span class="variable">socket</span>10<span class="string">", "</span><span class="variable">buf</span>7<span class="string">", LrsLastArg);</span><br><span class="line"></span><br><span class="line">    lrs_create_socket("</span><span class="variable">socket</span>11<span class="string">", "</span><span class="variable">TCP</span><span class="string">", "</span><span class="variable">RemoteHost</span>=<span class="variable">webserver.trademessenger.com</span>:80<span class="string">",  LrsLastArg);</span><br><span class="line"></span><br><span class="line">    lrs_receive("</span><span class="variable">socket</span>10<span class="string">", "</span><span class="variable">buf</span>8<span class="string">", LrsLastArg);</span><br><span class="line">    //POST /mictouch_login HTTP/1.1\r\n"</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket10"</span>, <span class="string">"buf9"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket10"</span>, <span class="string">"buf10"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket11"</span>, <span class="string">"buf11"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket11"</span>, <span class="string">"buf12"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket12"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket13"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=203.208.40.135:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket14"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">//<span class="end-block">/tm</span><span class="end-block">/leaveword</span><span class="end-block">/count.jsonp</span>?<span class="variable">domainUserId</span>=<span class="variable">CdekVYuGXQJi</span>_00&amp;<span class="variable">domain</span>=<span class="variable">micen</span>&amp;<span class="variable">ca</span></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket14"</span>, <span class="string">"buf16"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket15"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket14"</span>, <span class="string">"buf17"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket10"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket12"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket11"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket14"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket15"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket13"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"login----------------------"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket16"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket17"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line">/<span class="end-block">/GET </span><span class="end-block">/favicon.ico</span></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket16"</span>, <span class="string">"buf18"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">/<span class="end-block">/GET </span><span class="end-block">/webtm</span><span class="end-block">/contacts</span></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket17"</span>, <span class="string">"buf19"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">     <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(15,0);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">receive</span>_<span class="variable">option</span>(<span class="variable">EndMarker</span>, <span class="variable">StringTerminator</span> , <span class="string">"HTTP/1.1"</span>);</span><br><span class="line">	 <span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket16"</span>, <span class="string">"buf20"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">     </span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"1"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(15,0);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"2"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket17"</span>, <span class="string">"buf21"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"2"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line">/<span class="end-block">/GET </span><span class="end-block">/mt</span><span class="end-block">/webim</span><span class="end-block">/dist</span><span class="end-block">/css</span><span class="end-block">/webim.css</span>?<span class="variable">v</span>=1444877296783 <span class="variable">HTTP</span>/1<span class="variable">.</span>1\<span class="variable">r</span>\<span class="variable">n</span></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket1"</span>, <span class="string">"buf22"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(15,0);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"3"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket1"</span>, <span class="string">"buf23"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"3"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line">/<span class="end-block">/GET </span><span class="end-block">/mt</span><span class="end-block">/webim</span><span class="end-block">/dist</span><span class="end-block">/js</span><span class="end-block">/webim.js</span>?<span class="variable">v</span>=1444877296783</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket1"</span>, <span class="string">"buf24"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(15,0);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"4"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket1"</span>, <span class="string">"buf25"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"4"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket18"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=203.208.40.135:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket19"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket20"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=203.208.40.135:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket21"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket22"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line">/<span class="end-block">/GET </span><span class="end-block">/connect</span>?<span class="variable">callback</span>=<span class="variable">jQuery</span>21406809277604824309_1445939283967&amp;_=144593928</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket21"</span>, <span class="string">"buf27"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(15,0);</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">receive</span>_<span class="variable">option</span>(<span class="variable">EndMarker</span>, <span class="variable">StringTerminator</span> , <span class="string">":15"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"5"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket21"</span>, <span class="string">"buf28"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">    </span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"5"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line">/<span class="end-block">/GET </span><span class="end-block">/webtm</span><span class="end-block">/getauth</span>/?<span class="variable">callback</span>=<span class="variable">jQuery</span>21406809277604824309_1445939283967&amp;_=14</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket23"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket23"</span>, <span class="string">"buf29"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">/<span class="end-block">/GET </span><span class="end-block">/connect</span>?<span class="variable">callback</span>=<span class="variable">jQuery</span>21406809277604824309_1445939283970&amp;<span class="variable">s</span>=<span class="variable">fc</span>90<span class="variable">b</span>31<span class="variable">b</span>1</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket21"</span>, <span class="string">"buf30"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(60,0);</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">receive</span>_<span class="variable">option</span>(<span class="variable">EndMarker</span>, <span class="variable">StringTerminator</span> , <span class="string">"username"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"6"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">receive</span>_<span class="variable">option</span>(<span class="variable">EndMarker</span>, <span class="variable">StringTerminator</span> , <span class="string">"HTTP/1.1"</span>);</span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket23"</span>, <span class="string">"buf31"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"6"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket22"</span>, <span class="string">"buf32"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(15,0);</span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">receive</span>_<span class="variable">option</span>(<span class="variable">EndMarker</span>, <span class="variable">StringTerminator</span> , <span class="string">"jQuery"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"7"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket22"</span>, <span class="string">"buf33"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"7"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">receive</span>_<span class="variable">option</span>(<span class="variable">EndMarker</span>, <span class="variable">StringTerminator</span> , <span class="string">"LoginReq"</span>);</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(15,0);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"8"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket21"</span>, <span class="string">"buf34"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"8"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket21"</span>, <span class="string">"buf35"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">//	<span class="variable">lrs</span>_<span class="variable">save</span>_<span class="variable">param</span>_<span class="variable">ex</span>(<span class="string">"socket21"</span>,<span class="string">"received"</span>,<span class="variable">NULL</span>,200,400,<span class="variable">NULL</span>,<span class="string">"Param_Received"</span>);</span><br><span class="line">//	<span class="variable">lr</span>_<span class="variable">output</span>_<span class="variable">message</span>(<span class="variable">lr</span>_<span class="variable">eval</span>_<span class="variable">string</span>(<span class="string">"&lt;Param_Received&gt;"</span>));</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(15,0);</span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">receive</span>_<span class="variable">option</span>(<span class="variable">EndMarker</span>, <span class="variable">StringTerminator</span> , <span class="string">"plantData"</span>);</span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket21"</span>, <span class="string">"buf36"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/<span class="end-block">/   position </span>=(<span class="variable">char</span>*) <span class="variable">strstr</span>(<span class="variable">lr</span>_<span class="variable">eval</span>_<span class="variable">string</span>(<span class="string">"&lt;Param_Received&gt;"</span>),<span class="variable">lr</span>_<span class="variable">eval</span>_<span class="variable">string</span>(<span class="string">"LoginReq"</span>)); </span><br><span class="line">/<span class="end-block">/  position</span>2 =(<span class="variable">char</span>*) <span class="variable">strstr</span>(<span class="variable">lr</span>_<span class="variable">eval</span>_<span class="variable">string</span>(<span class="string">"&lt;Param_Received&gt;"</span>),<span class="variable">lr</span>_<span class="variable">eval</span>_<span class="variable">string</span>(<span class="string">"plantData"</span>)); </span><br><span class="line">/<span class="end-block">/  <span class="keyword">if</span></span>(<span class="variable">position</span>==<span class="variable">NULL</span>&amp;&amp;<span class="variable">position</span>2==<span class="variable">NULL</span>)</span><br><span class="line">/<span class="end-block">/lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"login----------------------"</span>, <span class="variable">LR</span>_<span class="variable">FAIL</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"login----------------------"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket16"</span>);</span><br><span class="line"><span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket17"</span>);</span><br><span class="line"><span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket18"</span>);</span><br><span class="line"><span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket19"</span>);</span><br><span class="line"><span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket20"</span>);</span><br><span class="line"><span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket21"</span>);</span><br><span class="line"><span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket22"</span>);</span><br><span class="line"><span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket23"</span>);</span><br><span class="line">    <span class="variable">return</span> 0;</span><br><span class="line">&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近又碰到坑爹的通讯项目，web端登录与客户端登录消息用的一套长连接机制。<br>脚本写的真是蛋疼、累死，不仅要用socket协议，还要模拟长连接接收消息，最后要看一堆无语的data.ws文件。<br>而且，两个部门协作起来真是无力吐槽了！<br>还好有<strong>lrs_set_recv_timeout</strong><br>]]>
    
    </summary>
    
      <category term="loadrunner" scheme="http://tonylit.me/tags/loadrunner/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux系统抓包-tcpdump与tcpflow]]></title>
    <link href="http://tonylit.me/2015/12/04/tcpdump/"/>
    <id>http://tonylit.me/2015/12/04/tcpdump/</id>
    <published>2015-12-04T03:37:27.000Z</published>
    <updated>2015-12-04T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>平时抓包用的最多的是wireshark和httpwatch，<br>如果想在linux服务器上抓包，比较常用tcpdump，tcpflow命令，tcpdump对http包的抓取支持不好，tcpflow的http的抓取表现不错<br><a id="more"></a></p>
<h1 id="tcpdump">tcpdump</h1><h2 id="tcpdump的命令格式">tcpdump的命令格式</h2><blockquote>
<p>tcpdump [-i 网卡] -nnAX ‘表达式’ 各参数说明如下：<br>-i：interface 监听的网卡。<br>-nn：表示以ip和port的方式显示来源主机和目的主机，而不是用主机名和服务。<br>-A：以ascii的方式显示数据包，抓取web数据时很有用。<br>-X：数据包将会以16进制和ascii的方式显示。  表达式：表达式有很多种，常见的有：host 主机；port 端口；src host 发包主机；dst host 收包主机。</p>
</blockquote>
<h2 id="监听网卡eth0">监听网卡eth0</h2><blockquote>
<p>tcpdump -i eth0</p>
</blockquote>
<h2 id="监听指定协议的数据">监听指定协议的数据</h2><blockquote>
<p>tcpdump -i eth0 -nn ‘icmp’</p>
</blockquote>
<p>这个是用来监听icmp协议的数据，就是ping命令使用的协议。<br>类似的，如果要监听tcp或者是udp协议，只需要修改上例的icmp就可以了</p>
<h2 id="监听指定的主机">监听指定的主机</h2><blockquote>
<p> tcpdump -i eth0 -nn ‘host 192.168.43.59’</p>
</blockquote>
<p>这样的话，192.168.1.231这台主机接收到的包和发送的包都会被抓取。</p>
<blockquote>
<p>  tcpdump -i eth0 -nn ‘src host 192.168.43.59’ </p>
</blockquote>
<p>这样只有192.168.43.59这台主机发送的包才会被抓取。</p>
<blockquote>
<p> tcpdump -i eth0 -nn ‘dst host 192.168.43.59’ </p>
</blockquote>
<p>  这样只有192.168.43.59这台主机接收到的包才会被抓取。</p>
<p>监听指定端口</p>
<blockquote>
<p> tcpdump -i eth0 -nnA ‘port 80’</p>
</blockquote>
<p>用来监听主机的80端口收到和发送的所有数据包。</p>
<p>监听指定主机和端口<br> tcpdump -i eth0 -nnA ‘port 80 and src host 192.168.43.59’<br>多个条件可以用and，or连接。<br>上例表示监听192.168.43.59主机通过80端口发送的数据包。</p>
<h1 id="tcpflow">tcpflow</h1><p>一般情况操作系统不会自带tcpflow，下载一个<br><a href="http://download.chinaunix.net/download/0011000/10190.shtml" target="_blank" rel="external">tcpflow下载</a></p>
<p>安装啥的就不说了，主要看一下抓取包的内容</p>
<blockquote>
<p>tcpflow -i eth0 host ‘192.168.17.39’</p>
</blockquote>
<p>他会生成很多文件：<br><img src="/img/tcoflow1.PNG" alt="Alt text"></p>
<p>打开看看：<br><img src="/img/tcvpflow2.PNG" alt="Alt text"></p>
<p>是不是和浏览器查看的差不多！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>平时抓包用的最多的是wireshark和httpwatch，<br>如果想在linux服务器上抓包，比较常用tcpdump，tcpflow命令，tcpdump对http包的抓取支持不好，tcpflow的http的抓取表现不错<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[centos7.1下docker安装]]></title>
    <link href="http://tonylit.me/2015/12/02/centos7.1%E4%B8%8B%E5%AE%89%E8%A3%85docker/"/>
    <id>http://tonylit.me/2015/12/02/centos7.1下安装docker/</id>
    <published>2015-12-02T03:37:27.000Z</published>
    <updated>2015-12-02T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>之前已经<a href="http://tonylit.me/2015/11/24/docker/">介绍了docker</a>，今天来安装一下。<br>首先，准备一个 CentOS 的操作系统<br>Ubuntu 或其它 Linux 操作系统也能玩 Docker，这里就不介绍了。<br><a id="more"></a><br><strong>CentOS 具体要求如下：</strong><br>必须是 64 位操作系统<br>建议内核在 3.8 以上<br>低版本的请升级系统~</p>
<p>安装起来很简单：</p>
<h1 id="安装docker">安装docker</h1><p>1.由于条件限制，只能把rpm包下载下来：<a href="http://pan.baidu.com/s/1c0C0X0G，" target="_blank" rel="external">http://pan.baidu.com/s/1c0C0X0G，</a> 也可以直接：</p>
<blockquote>
<p>rpm -Uvh<br><a href="https://get.docker.com/rpm/1.7.1/centos-7/RPMS/x86_64/docker-engine-1.7.1-1.el7.centos.x86_64.rpm" target="_blank" rel="external">https://get.docker.com/rpm/1.7.1/centos-7/RPMS/x86_64/docker-engine-1.7.1-1.el7.centos.x86_64.rpm</a></p>
</blockquote>
<p>2.然后rpm安装一下就可以了：</p>
<blockquote>
<p>rpm -Uvh docker-engine-1.7.1-1.el7.centos.x86_64.rpm</p>
</blockquote>
<p>或者(最新1.10版本，革命性的版本)</p>
<h2 id="&gt;_yum_install_docker-engine">&gt; yum install docker-engine</h2><p><img src="/img/docker/docker-anzhuang2.PNG" alt="Alt text"></p>
<p>如果有如下报错：</p>
<blockquote>
<p>error: Failed dependencies:     libcgroup is needed by<br>docker-engine-1.7.1-1.el7.centos.x86_64<br>请安装libcgroup<br><img src="/img/docker/docker-anzhuang1.png" alt="Alt text"></p>
</blockquote>
<h1 id="验证安装：">验证安装：</h1><p>安装完成看一看有木有安装好：</p>
<blockquote>
<p>docker version</p>
</blockquote>
<h1 id="启动docker">启动docker</h1><blockquote>
<p>service docker start<br><img src="/img/docker/docker-begin.PNG" alt="Alt text"></p>
</blockquote>
<h1 id="加入开机启动">加入开机启动</h1><blockquote>
<p>chkconfig docker on</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前已经<a href="http://tonylit.me/2015/11/24/docker/">介绍了docker</a>，今天来安装一下。<br>首先，准备一个 CentOS 的操作系统<br>Ubuntu 或其它 Linux 操作系统也能玩 Docker，这里就不介绍了。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[atom编辑器爆爆爆]]></title>
    <link href="http://tonylit.me/2015/12/01/atom%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>http://tonylit.me/2015/12/01/atom编辑器/</id>
    <published>2015-12-01T03:37:27.000Z</published>
    <updated>2015-12-01T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>狂拽炫酷屌炸天的编辑器插件，<br>来点音乐、再配上机械键盘，啪啪啪！爆爆爆爆！!<br><img src="/img/atom/atom1.gif" alt="Alt text"><br><img src="/img/atom/atom2.gif" alt="Alt text"><br><a id="more"></a></p>
<h1 id="网页效果">网页效果</h1><p>demo：<a href="http://kushagragour.in/code-blast-codemirror/demo/index.html" target="_blank" rel="external">http://kushagragour.in/code-blast-codemirror/demo/index.html</a></p>
<p>安装起来很简单</p>
<h1 id="下载atom编辑器并安装">下载atom编辑器并安装</h1><p>网上很多，自行下载并安装</p>
<h1 id="下载插件">下载插件</h1><p>1.github上面<a href="https://github.com/tonylit/activate-power-mode，" target="_blank" rel="external">https://github.com/tonylit/activate-power-mode，</a><br>  先fork一下，下载下来<br><img src="/img/atom/gitatom.PNG" alt="Alt text"></p>
<h1 id="安装插件">安装插件</h1><p>2.把下载的插件放入C:\Users\pc.atom\packages 文件夹中<br>  打开cmd调到activate-power-mode-master这个文件里面apm install就可以了<br> 如果有如下报错：<br> <img src="/img/atom/error.PNG" alt="Alt text"><br> 请多执行几次apm install（我是执行了几十次，网络实在是不稳定）</p>
<h1 id="开启插件">开启插件</h1><p> 重新打开atom，按快捷键ctrl+alt+o，如果快捷键冲突，请按 ctrl + alt + r reload window 之后就可以按 ctrl + alt + o </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>狂拽炫酷屌炸天的编辑器插件，<br>来点音乐、再配上机械键盘，啪啪啪！爆爆爆爆！!<br><img src="/img/atom/atom1.gif" alt="Alt text"><br><img src="/img/atom/atom2.gif" alt="Alt text"><br>]]>
    
    </summary>
    
      <category term="atom" scheme="http://tonylit.me/tags/atom/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[抽奖性能测试]]></title>
    <link href="http://tonylit.me/2015/11/30/%E6%8A%BD%E5%A5%96%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <id>http://tonylit.me/2015/11/30/抽奖性能测试/</id>
    <published>2015-11-30T03:37:27.000Z</published>
    <updated>2015-11-13T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>公司成立20周年在网站上搞了个<strong>抽奖活动</strong>，应邀给项目组做一次压力测试。<br>之前也没有过类似业务的测试，无指标参考，在此记录下，下次类似测试可以参考参考。<br><a id="more"></a></p>
<h1 id="业务说明">业务说明</h1><ul>
<li>第一步：填写祝福语</li>
<li>第二步：抽奖</li>
</ul>
<h1 id="技术架构：">技术架构：</h1><p>所有的记录先提交至redis中，<br>数据由定时程序1分钟从redis同步至数据库。</p>
<h1 id="测试环境：">测试环境：</h1><p><img src="/img/redis.png" alt="Alt text"></p>
<h1 id="被测系统硬件">被测系统硬件</h1><p>应用服务器    Intel(R) Xeon(R) CPU E5-2650<br>Processor :  1×2<br>Memory：1.5G</p>
<h1 id="结果：">结果：</h1><p>发送祝福语TPS:222<br>抽奖TPS：192</p>
<h1 id="其他：">其他：</h1><p>抽奖需要考虑的点：</p>
<ul>
<li>cache和db端持久化问题<br>redis这边数据不能每次入库就清空，保证要在redis中有持久化。</li>
<li>数据量保证一致<br>有多少奖就抽多少，不能发现多抽的情况</li>
<li>单个奖项数量一致<br>一等奖只有一个，不会被几个人同时抽中</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>公司成立20周年在网站上搞了个<strong>抽奖活动</strong>，应邀给项目组做一次压力测试。<br>之前也没有过类似业务的测试，无指标参考，在此记录下，下次类似测试可以参考参考。<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Jprofiler安装]]></title>
    <link href="http://tonylit.me/2015/11/25/Jprofiler%E5%AE%89%E8%A3%85/"/>
    <id>http://tonylit.me/2015/11/25/Jprofiler安装/</id>
    <published>2015-11-25T03:37:27.000Z</published>
    <updated>2015-11-25T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>Jprofiler是一个全面的JAVA剖析工具，它有很好的GUI帮助我们定位性能瓶颈、抓住内容泄露等问题。<br>之前一直没机会用，最近在某新项目组压性能的时候用了一下。<br>灰常牛X，直接定位到sql层面的问题（耗时长），在问题定位上省了很多时间。<br>项目组用的mysql数据库，慢查询真的挺shi的，如果用的oracle，AWR,ADDM,SLA一下，啪啪啪完事~</p>
<a id="more"></a>
<p>Jprofiler监控这块其实挺简单的，主要是安装，尤其是要监控远程resin或者tomcat，装起来还是挺麻烦的，搞了我一个多小时…</p>
<h1 id="Jprofiler下载">Jprofiler下载</h1><p><a href="http://www.ej-technologies.com/download/jprofiler/files" target="_blank" rel="external">下载最新版本的Jprofiler</a>，<a href="http://pan.baidu.com/s/1hqe2rv2" target="_blank" rel="external">我的网盘下载</a>，我用的9.0，windows和linux版本都需要下载。</p>
<h1 id="Jprofiler安装">Jprofiler安装</h1><p>windows下的安装不用说了，.exe文件一直next<br>这里说下linux下的，我用的centos5.8</p>
<h2 id="步骤一、服务器端安装Jprofiler">步骤一、服务器端安装Jprofiler</h2><p>将下载的Jprofiler放入服务器上，解压缩，比如我的目录：</p>
<blockquote>
<p>/home/admin/jprofiler9</p>
</blockquote>
<h2 id="步骤二、增加全部变量">步骤二、增加全部变量</h2><p>在/etc/profile中增加：</p>
<blockquote>
<p>export JPROFILE_HOME=/home/admin/jprofiler9 export<br>LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/admin/jprofiler9/bin/linux-x86</p>
</blockquote>
<p>添加完记得source一下：</p>
<blockquote>
<p>source /etc/profile</p>
</blockquote>
<h2 id="步骤三、在中间件中导入Jprofiler的jar包">步骤三、在中间件中导入Jprofiler的jar包</h2><p>我用的是resin，以此为例：<br>在resin.conf的<class-loader>标签中增加：</class-loader></p>
<blockquote>
<pre><code><span class="tag">&lt;<span class="title">tree-loader</span> <span class="attribute">path</span>=<span class="value">"/home/admin/jprofiler9/lib"</span>/&gt;</span>
 <span class="tag">&lt;<span class="title">tree-loader</span> <span class="attribute">path</span>=<span class="value">"/home/admin/jprofiler9/bin"</span>/&gt;</span>
</code></pre></blockquote>
<h2 id="步骤四、在启动脚本中增加jprofiler的启动参数">步骤四、在启动脚本中增加jprofiler的启动参数</h2><p>以resin为例，在resin的启动脚本中加入启动参数：</p>
<blockquote>
<p>-agentpath:/home/admin/jprofiler9/bin/linux-x64/libjprofilerti.so=port=8849,nowait<br>resin3.1的在配置文件中加入<br> <jvm-arg>-agentpath:/home/admin/jprofiler9/bin/linux-x64/libjprofilerti.so=port=8849,nowait</jvm-arg></p>
</blockquote>
<p>端口可以自己制定，注意后面连接的时候需要用到此端口</p>
<p>##步骤五、启动本地jprofiler客户端，配置信息</p>
<ul>
<li><p>启动客户端<br><img src="/img/jprofiler/jprofiler_1.PNG" alt="Alt text"></p>
</li>
<li><p>选择中间件<br><img src="/img/jprofiler/jprofiler_2.PNG" alt="Alt text"></p>
</li>
<li><p>选择远程监控的系统<br><img src="/img/jprofiler/jprofiler_3.PNG" alt="Alt text"></p>
</li>
<li><p>选择JDK版本，主要看下服务器上的jdk版本，是不是64位的<br><img src="/img/jprofiler/jprofiler_4.PNG" alt="Alt text"></p>
</li>
<li><p>选择启动方式，默认就行了<br><img src="/img/jprofiler/jprofiler_5.PNG" alt="Alt text"></p>
</li>
<li><p>填写服务器ip<br><img src="/img/jprofiler/jprofier_6.PNG" alt="Alt text"></p>
</li>
<li><p>填写服务器的哪个目录安装了jprofiler<br><img src="/img/jprofiler/jprofiler_7.PNG" alt="Alt text"></p>
</li>
<li><p>选择resin的启动脚本，我是将服务器上resin的启动脚本拿到本地<br><img src="/img/jprofiler/jprofiler_8.PNG" alt="Alt text"></p>
</li>
<li><p>端口号和上面设置的保持一样<br><img src="/img/jprofiler/jprofiler_9.PNG" alt="Alt text"></p>
</li>
</ul>
<p>后面一直next，就可以了</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Jprofiler是一个全面的JAVA剖析工具，它有很好的GUI帮助我们定位性能瓶颈、抓住内容泄露等问题。<br>之前一直没机会用，最近在某新项目组压性能的时候用了一下。<br>灰常牛X，直接定位到sql层面的问题（耗时长），在问题定位上省了很多时间。<br>项目组用的mysql数据库，慢查询真的挺shi的，如果用的oracle，AWR,ADDM,SLA一下，啪啪啪完事~</p>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[kafka与countdownlatch]]></title>
    <link href="http://tonylit.me/2015/11/24/kafka%E4%B8%8Ecountdownlatch/"/>
    <id>http://tonylit.me/2015/11/24/kafka与countdownlatch/</id>
    <published>2015-11-24T03:37:27.000Z</published>
    <updated>2015-11-24T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>之前测试kafka消息发送的QPS，刚开始用loadrunner写java的，模拟kafka produce的send，发现loadrunner对这种高精确的请求有很大误差（kafka 的消息精确到毫秒，最小的测试40ms），可能loadrunner模拟请求自身需要耗费时间，遂改为直接通过编写代码多线程方式发送请求。<br><a id="more"></a><br>哎，很惭愧，对java不是很精通~<br>开始直接无脑new Thread，for循环依次启动10个线程执行，如下：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class KafkaProduce &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ProducerConfig config;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">// 设置配置属性</span></span><br><span class="line">    Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">    props.put(<span class="string">"metadata.broker.list"</span>, <span class="string">"192.168.28.191:9092,192.168.28.192:9092"</span>);</span><br><span class="line">    props.put(<span class="string">"serializer.class"</span>, <span class="string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line">    <span class="comment">// key.serializer.class默认为serializer.class</span></span><br><span class="line">    props.put(<span class="string">"key.serializer.class"</span>, <span class="string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line">    <span class="comment">// 值为0,1,-1,可以参考</span></span><br><span class="line">    <span class="comment">// http://kafka.apache.org/08/configuration.html</span></span><br><span class="line">    props.put(<span class="string">"request.required.acks"</span>, <span class="string">"0"</span>);</span><br><span class="line">    config = <span class="keyword">new</span> ProducerConfig(props);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">String</span> topic = <span class="string">"kafka_test_1"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] data = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                <span class="comment">// 创建producer</span></span><br><span class="line">                Producer&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; producer = <span class="keyword">new</span> Producer&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;(config);</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line">                    <span class="keyword">long</span> all = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">long</span> begin = System.nanoTime();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                        producer.send(<span class="keyword">new</span> KeyedMessage&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;(topic, <span class="keyword">new</span> <span class="keyword">String</span>(data)));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">                    all += end - begin;</span><br><span class="line">                    System.out.<span class="built_in">println</span>(TimeUnit.NANOSECONDS.toMillis(all));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;.start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"kafka failed"</span>);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1106</span></span><br><span class="line"><span class="number">1637</span></span><br><span class="line"><span class="number">1676</span></span><br><span class="line"><span class="number">1682</span></span><br><span class="line"><span class="number">1701</span></span><br><span class="line"><span class="number">1751</span></span><br><span class="line"><span class="number">1760</span></span><br><span class="line"><span class="number">1777</span></span><br><span class="line"><span class="number">1859</span></span><br><span class="line"><span class="number">1913</span></span><br><span class="line"><span class="number">1938</span></span><br></pre></td></tr></table></figure>
<p>今天无聊逛了逛贴吧，发现竟然有countdownlatch这么个东东，可以让10个线程一块跑，并发执行的话，这个应该更合理吧，遂改了一下代码：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> class KafaProduce2 &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ProducerConfig config;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">// 设置配置属性</span></span><br><span class="line">    Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">    props.put(<span class="string">"metadata.broker.list"</span>, <span class="string">"192.168.28.191:9092,192.168.28.192:9092"</span>);</span><br><span class="line">    props.put(<span class="string">"serializer.class"</span>, <span class="string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line">    <span class="comment">// key.serializer.class默认为serializer.class</span></span><br><span class="line">    props.put(<span class="string">"key.serializer.class"</span>, <span class="string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line">    <span class="comment">// 值为0,1,-1,可以参考</span></span><br><span class="line">    <span class="comment">// http://kafka.apache.org/08/configuration.html</span></span><br><span class="line">    props.put(<span class="string">"request.required.acks"</span>, <span class="string">"0"</span>);</span><br><span class="line">    config = <span class="keyword">new</span> ProducerConfig(props);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">String</span> topic = <span class="string">"kafka_test_1"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] data = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 倒数计数器</span></span><br><span class="line">    <span class="keyword">final</span> CountDownLatch begin = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 倒数计数器</span></span><br><span class="line">    <span class="keyword">final</span> CountDownLatch end = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建producer</span></span><br><span class="line">            Producer&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; producer = <span class="keyword">new</span> Producer&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;(config);</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    begin.await();</span><br><span class="line">                    <span class="keyword">long</span> all = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">long</span> begin = System.nanoTime();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                        producer.send(<span class="keyword">new</span> KeyedMessage&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;(topic, <span class="keyword">new</span> <span class="keyword">String</span>(data)));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">                    all = end - begin;</span><br><span class="line">                    System.out.<span class="built_in">println</span>(TimeUnit.NANOSECONDS.toMillis(all));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">finally</span> &#123;</span><br><span class="line">                    end.countDown();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    begin.countDown();</span><br><span class="line"></span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"开始。。。。"</span>);</span><br><span class="line"></span><br><span class="line">    end.await();</span><br><span class="line"></span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"结束。。。。"</span>);</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">开始。。。。</span><br><span class="line"><span class="number">1406</span></span><br><span class="line"><span class="number">1618</span></span><br><span class="line"><span class="number">1643</span></span><br><span class="line"><span class="number">1708</span></span><br><span class="line"><span class="number">1714</span></span><br><span class="line"><span class="number">1768</span></span><br><span class="line"><span class="number">1783</span></span><br><span class="line"><span class="number">1837</span></span><br><span class="line"><span class="number">1840</span></span><br><span class="line"><span class="number">1858</span></span><br><span class="line">结束。。。。</span><br></pre></td></tr></table></figure>
<p>然后，加了个线程池，如下：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class KafkaProduce3 &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ProducerConfig config;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">// 设置配置属性</span></span><br><span class="line">    Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">    props.put(<span class="string">"metadata.broker.list"</span>, <span class="string">"192.168.28.191:9092,192.168.28.192:9092"</span>);</span><br><span class="line">    props.put(<span class="string">"serializer.class"</span>, <span class="string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line">    <span class="comment">// key.serializer.class默认为serializer.class</span></span><br><span class="line">    props.put(<span class="string">"key.serializer.class"</span>, <span class="string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line">    <span class="comment">// 值为0,1,-1,可以参考</span></span><br><span class="line">    <span class="comment">// http://kafka.apache.org/08/configuration.html</span></span><br><span class="line">    props.put(<span class="string">"request.required.acks"</span>, <span class="string">"0"</span>);</span><br><span class="line">    config = <span class="keyword">new</span> ProducerConfig(props);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">String</span> topic = <span class="string">"kafka_test_1"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] data = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 倒数计数器</span></span><br><span class="line">    <span class="keyword">final</span> CountDownLatch begin = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 倒数计数器</span></span><br><span class="line">    <span class="keyword">final</span> CountDownLatch end = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    ExecutorService execu = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建producer</span></span><br><span class="line">            Producer&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; producer = <span class="keyword">new</span> Producer&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;(config);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    begin.await();</span><br><span class="line">                    <span class="keyword">long</span> all = <span class="number">0</span>;</span><br><span class="line">                    KeyedMessage k = <span class="keyword">new</span> KeyedMessage&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;(topic, <span class="keyword">new</span> <span class="keyword">String</span>(data));</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                        <span class="keyword">long</span> begin = System.nanoTime();</span><br><span class="line">                        producer.send(k);</span><br><span class="line">                        <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">                        all += end - begin;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.<span class="built_in">println</span>(TimeUnit.NANOSECONDS.toMillis(all));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">finally</span> &#123;</span><br><span class="line">                    end.countDown();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        execu.submit(r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    begin.countDown();</span><br><span class="line"></span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"开始。。。。"</span>);</span><br><span class="line"></span><br><span class="line">    end.await();</span><br><span class="line"></span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"结束。。。。"</span>);</span><br><span class="line">    execu.shutdown();</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">开始。。。。</span><br><span class="line"><span class="number">1296</span></span><br><span class="line"><span class="number">1463</span></span><br><span class="line"><span class="number">1464</span></span><br><span class="line"><span class="number">1578</span></span><br><span class="line"><span class="number">1603</span></span><br><span class="line"><span class="number">1630</span></span><br><span class="line"><span class="number">1755</span></span><br><span class="line"><span class="number">1771</span></span><br><span class="line"><span class="number">1826</span></span><br><span class="line"><span class="number">1854</span></span><br><span class="line">结束。。。。</span><br></pre></td></tr></table></figure>
<p>后面2个结果好一些，做并发测试的时候也更合理！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前测试kafka消息发送的QPS，刚开始用loadrunner写java的，模拟kafka produce的send，发现loadrunner对这种高精确的请求有很大误差（kafka 的消息精确到毫秒，最小的测试40ms），可能loadrunner模拟请求自身需要耗费时间，遂改为直接通过编写代码多线程方式发送请求。<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
      <category term="kafka" scheme="http://tonylit.me/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker]]></title>
    <link href="http://tonylit.me/2015/11/24/docker/"/>
    <id>http://tonylit.me/2015/11/24/docker/</id>
    <published>2015-11-24T03:37:27.000Z</published>
    <updated>2015-11-24T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>如果你现在不知道<strong>docker</strong>，那你在这个圈子里就low了。<br>docker作为一个轻量级的虚拟化解决方案，完爆其他的虚拟化技术（kvm、vmware…），各大互联网公司，阿里、百度、qiniu等等，只要是做云的，都开始转向docker，包括VMware也宣布与docker合作。<br>不得不说民间大神还是吊啊，脑子和技术杠杠的！<br><img src="/img/docker/docker-ico.png" alt="Alt text"><br><a id="more"></a></p>
<h1 id="史上最全的docker资料集">史上最全的docker资料集</h1><p>不错的整理，<a href="http://special.csdncms.csdn.net/BeDocker/" target="_blank" rel="external">docker的很多资料都在这</a></p>
<h1 id="docker安装请移步：">docker安装请移步：</h1><p>  <a href="http://tonylit.me/2015/12/02/centos7.1%E4%B8%8B%E5%AE%89%E8%A3%85docker/">centos7.1下docker安装</a></p>
<h1 id="什么是docker？">什么是docker？</h1><p>Docker 是一个开源项目，诞生于 2013 年初，最初是 dotCloud 公司内部的一个业余项目。它基于 Google 公司推出的 Go 语言实现。<br> Docker 的基础是 Linux 容器（<a href="http://baike.baidu.com/link?url=1MqaZ9yQUbI7hbcp3v4oZlKyKVVfn01E1aDJ4SmXnTCmybuaWyMzpr4sr6wPNIBYKj5NqMq3Y3MhC7Anptdnwa" target="_blank" rel="external">LXC</a>）等技术，在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。</p>
<h1 id="为啥都在使用docker？">为啥都在使用docker？</h1><p><strong>Dock可以用来：</strong></p>
<ul>
<li>自动化打包和部署任何应用</li>
<li>创建一个轻量级私有PaaS云</li>
<li>搭建开发测试环境</li>
<li>部署可扩展的Web应用</li>
</ul>
<table>
<thead>
<tr>
<th>特性</th>
<th style="text-align:center">docker</th>
<th style="text-align:right">虚拟机</th>
</tr>
</thead>
<tbody>
<tr>
<td>启动</td>
<td style="text-align:center">秒级</td>
<td style="text-align:right">分钟级</td>
</tr>
<tr>
<td>硬盘使用</td>
<td style="text-align:center">一般为 MB</td>
<td style="text-align:right">一般为 GB</td>
</tr>
<tr>
<td>性能</td>
<td style="text-align:center">接近原生</td>
<td style="text-align:right">弱于</td>
</tr>
<tr>
<td>系统支持量</td>
<td style="text-align:center">单机支持上千个容器</td>
<td style="text-align:right">一般几十个</td>
</tr>
</tbody>
</table>
<h1 id="docker与传统虚拟机的比较">docker与传统虚拟机的比较</h1><p><strong>传统vm</strong><br><img src="/img/docker/docker-jiagou.png" alt="Alt text">  </p>
<p><strong>docker</strong><br><img src="/img/docker/vm-jiagou.png" alt="Alt text"></p>
<p>比较两图的差异，虚拟机的Guest OS层和Hypervisor层在docker中被Docker Engine层所替代。虚拟机的Guest OS就是虚拟机安装的操作系统，它是一个完整操作系统内核；虚拟机的Hypervisor层可以简单理解为一个硬件虚拟化平台，它在Host OS是以内核态的驱动存在的。<br>虚拟机实现资源隔离的方法是利用独立的OS，并利用Hypervisor虚拟化CPU、内存、IO设备等实现的。例如，为了虚拟CPU，Hypervisor会为每个虚拟的CPU创建一个数据结构，模拟CPU的全部寄存器的值，在适当的时候跟踪并修改这些值。需要指出的是在大多数情况下，虚拟机软件代码是直接跑在硬件上的，而不需要Hypervisor介入。只有在一些权限高的请求下，Guest OS需要运行内核态修改CPU的寄存器数据，Hypervisor会介入，修改并维护虚拟的CPU状态。<br>docker直接利用宿主机的内核，而不需要Guest OS。因此，当新建一个容器时，docker不需要和虚拟机一样重新加载一个操作系统内核。引导、加载操作系统内核是一个比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载Guest OS，这个新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统，则省略了这个过程，因此新建一个docker容器只需要几秒钟，因此，docker对比虚拟机在资源消耗上也占有比较大的优势。事实上，在一台物理机上我们可以很容易建立成百上千的容器，而只能建立几个虚拟机。</p>
<h2 id="计算能力上的比较（IBM发表的论文）">计算能力上的比较（IBM发表的论文）</h2><p>根据IBM发表的论文给出的数据进行分析。以下的数据均是在IBM x3650 M4服务器测得，其主要的硬件参数是：<br>（1）2颗英特尔xeon E5-2655 处理器，主频2.4-3.0 GHz。每颗处理器有8个核，因此总共有16个核。<br>（2）256 GB RAM.<br>在测试中是通过运算Linpack程序来获得计算能力数据的。结果如下图所示：<br><img src="/img/docker/yunsuan.png" alt="Alt text"><br>从左往右分别是物理机、docker和虚拟机的计算能力数据。<br>差距还是很明显的，docker相对于物理机其计算能力几乎没有损耗，而虚拟机对比物理机则有着非常明显的损耗。虚拟机的计算能力损耗在50%左右。<br>为什么会有这么大的性能损耗呢？一方面是因为虚拟机增加了一层虚拟硬件层，运行在虚拟机上的应用程序在进行数值计算时是运行在Hypervisor虚拟的CPU上的；另外一方面是由于计算程序本身的特性导致的差异。虚拟机虚拟的cpu架构不同于实际cpu架构，数值计算程序一般针对特定的cpu架构有一定的优化措施，虚拟化使这些措施作废，甚至起到反效果。</p>
<h1 id="docker的劣势">docker的劣势</h1><p>docker的劣势</p>
<p>docker也不是完美的系统。相对于虚拟机，docker还存在着以下几个缺点：<br>1.资源隔离方面不如虚拟机，docker是利用cgroup实现资源限制的，只能限制资源消耗的最大值，而不能隔绝其他程序占用自己的资源。<br>2.安全性问题。docker目前并不能分辨具体执行指令的用户，只要一个用户拥有执行docker的权限，那么他就可以对docker的容器进行所有操作，不管该容器是否是由该用户创建。比如A和B都拥有执行docker的权限，由于docker的server端并不会具体判断docker cline是由哪个用户发起的，A可以删除B创建的容器，存在一定的安全风险。<br>3.docker目前还在版本的快速更新中，细节功能调整比较大。一些核心模块依赖于高版本内核，存在版本兼容问题</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>如果你现在不知道<strong>docker</strong>，那你在这个圈子里就low了。<br>docker作为一个轻量级的虚拟化解决方案，完爆其他的虚拟化技术（kvm、vmware…），各大互联网公司，阿里、百度、qiniu等等，只要是做云的，都开始转向docker，包括VMware也宣布与docker合作。<br>不得不说民间大神还是吊啊，脑子和技术杠杠的！<br><img src="/img/docker/docker-ico.png" alt="Alt text"><br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[kafka入门]]></title>
    <link href="http://tonylit.me/2015/11/19/kafka%E5%85%A5%E9%97%A8/"/>
    <id>http://tonylit.me/2015/11/19/kafka入门/</id>
    <published>2015-11-19T03:37:27.000Z</published>
    <updated>2015-11-19T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>公司的一些项目用的<a href="http://www.cnblogs.com/kgdxpr/p/3381974.html" target="_blank" rel="external">ActivemMQ</a>，最近有个项目开始尝试使用Kafka，有幸帮忙测试了kafka-Producer和Consumer消息吞吐相关的性能，包括broker切换消息的丢失率。在此之前，我对kafka完全不了解。<br>kafka 作为分布式的消息系统，性能大大超过传统的ActiveMQ，市场前景很广，虽然目前还有一些不足的地方，但以后很可能会是分布式消息系统的主流，有必要学习一下！<br><a id="more"></a></p>
<h1 id="介绍">介绍</h1><p>kafka是Linkedin于2010年12月份开源的消息系统，它主要用于处理活跃的流式数据。活跃的流式数据在web网站应用中非常常见，这些数据包括网站的pv、用户访问了什么内容，搜索了什么内容等。 这些数据通常以日志的形式记录下来，然后每隔一段时间进行一次统计处理。<br>传统的日志分析系统提供了一种离线处理日志信息的可扩展方案，但若要进行实时处理，通常会有较大延迟。而现有的消息（队列）系统能够很好的处理实时或者近似实时的应用，但未处理的数据通常不会写到磁盘上，这对于Hadoop之类（一小时或者一天只处理一部分数据）的离线应用而言，可能存在问题。Kafka正是为了解决以上问题而设计的，它能够很好地离线和在线应用。</p>
<h1 id="与其他常用Message_Queue对比">与其他常用Message Queue对比</h1><ul>
<li><strong>RabbitMQ</strong><br>RabbitMQ是使用Erlang编写的一个开源的消息队列，本身支持很多的协议：AMQP，XMPP, SMTP, STOMP，也正因如此，它非常重量级，更适合于企业级的开发。同时实现了Broker构架，这意味着消息在发送给客户端时先在中心队列排队。对路由，负载均衡或者数据持久化都有很好的支持。</li>
<li><strong>Redis</strong><br>Redis是一个基于Key-Value对的NoSQL数据库，开发维护很活跃。虽然它是一个Key-Value数据库存储系统，但它本身支持MQ功能，所以完全可以当做一个轻量级的队列服务来使用。对于RabbitMQ和Redis的入队和出队操作，各执行100万次，每10万次记录一次执行时间。测试数据分为128Bytes、512Bytes、1K和10K四个不同大小的数据。实验表明：入队时，当数据比较小时Redis的性能要高于RabbitMQ，而如果数据大小超过了10K，Redis则慢的无法忍受；出队时，无论数据大小，Redis都表现出非常好的性能，而RabbitMQ的出队性能则远低于Redis。</li>
<li><strong>ZeroMQ</strong><br>ZeroMQ号称最快的消息队列系统，尤其针对大吞吐量的需求场景。ZMQ能够实现RabbitMQ不擅长的高级/复杂的队列，但是开发人员需要自己组合多种技术框架，技术上的复杂度是对这MQ能够应用成功的挑战。ZeroMQ具有一个独特的非中间件的模式，你不需要安装和运行一个消息服务器或中间件，因为你的应用程序将扮演了这个服务角色。你只需要简单的引用ZeroMQ程序库，可以使用NuGet安装，然后你就可以愉快的在应用程序之间发送消息了。但是ZeroMQ仅提供非持久性的队列，也就是说如果宕机，数据将会丢失。其中，Twitter的Storm 0.9.0以前的版本中默认使用ZeroMQ作为数据流的传输（Storm从0.9版本开始同时支持ZeroMQ和Netty作为传输模块）。</li>
<li><strong>ActiveMQ</strong><br>ActiveMQ是Apache下的一个子项目。 类似于ZeroMQ，它能够以代理人和点对点的技术实现队列。同时类似于RabbitMQ，它少量代码就可以高效地实现高级应用场景。<br>-<strong>Kafka/Jafka</strong><br>Kafka是Apache下的一个子项目，是一个高性能跨语言分布式发布/订阅消息队列系统，而Jafka是在Kafka之上孵化而来的，即Kafka的一个升级版。具有以下特性：快速持久化，可以在O(1)的系统开销下进行消息持久化；高吞吐，在一台普通的服务器上既可以达到10W/s的吞吐速率；完全的分布式系统，Broker、Producer、Consumer都原生自动支持分布式，自动实现复杂均衡；支持Hadoop数据并行加载，对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka通过Hadoop的并行加载机制来统一了在线和离线的消息处理。Apache Kafka相对于ActiveMQ是一个非常轻量级的消息系统，除了性能非常好之外，还是一个工作良好的分布式系统。<h2 id="术语">术语</h2>首先让我们看几个基本的消息系统术语：</li>
<li><strong>Broker</strong><br>Kafka集群包含一个或多个服务器，这种服务器被称为broker</li>
<li><strong>Topic</strong><br>每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic。（物理上不同Topic的消息分开存储，逻辑上一个Topic的消息虽然保存于一个或多个broker上但用户只需指定消息的Topic即可生产或消费数据而不必关心数据存于何处）</li>
<li><strong>Partition</strong><br>Parition是物理上的概念，每个Topic包含一个或多个Partition.</li>
<li><strong>Producer</strong><br>负责发布消息到Kafka broker</li>
<li><strong>Consumer</strong><br>消息消费者，向Kafka broker读取消息的客户端。</li>
<li><strong>Consumer Group</strong><br>每个Consumer属于一个特定的Consumer Group（可为每个Consumer指定group name，若不指定group name则属于默认的group）。<h2 id="拓扑结构">拓扑结构</h2><img src="/img/kafkatuopu.jpg" alt="Alt text"><br>如上图所示，一个典型的Kafka集群中包含若干Producer（可以是web前端产生的Page View，或者是服务器日志，系统CPU、Memory等），若干broker（Kafka支持水平扩展，一般broker数量越多，集群吞吐率越高），若干Consumer Group，以及一个Zookeeper集群。Kafka通过Zookeeper管理集群配置，选举leader，以及在Consumer Group发生变化时进行rebalance。Producer使用push模式将消息发布到broker，Consumer使用pull模式从broker订阅并消费消息。<br>需要提到的一点：<strong>客户端和服务端通过TCP协议通信</strong>。Kafka提供了Java客户端，并且对多种语言都提供了支持。<h2 id="Topics_和Logs">Topics 和Logs</h2>先来看一下Kafka提供的一个抽象概念:topic.<br>一个topic是对一组消息的归纳。Topic在逻辑上可以被认为是一个queue，每条消费都必须指定它的topic，可以简单理解为必须指明把这条消息放进哪个queue里。对每个topic，Kafka 对它的日志进行了分区，如下图所示：<br><img src="/img/topic.png" alt="Alt text"><br>每个分区都由一系列有序的、不可变的消息组成，这些消息被连续的追加到分区中。分区中的每个消息都有一个连续的序列号叫做offset,用来在分区中唯一的标识这个消息。<br>在一个可配置的时间段内，Kafka集群保留所有发布的消息，不管这些消息有没有被消费。比如，如果消息的保存策略被设置为2天，那么在一个消息被发布的两天时间内，它都是可以被消费的。之后它将被丢弃以释放空间。Kafka的性能是和数据量无关的常量级的，所以保留太多的数据并不是问题。</li>
</ul>
<p>实际上每个consumer唯一需要维护的数据是消息在日志中的位置，也就是offset.这个offset有consumer来维护：一般情况下随着consumer不断的读取消息，这offset的值不断增加，但其实consumer可以以任意的顺序读取消息，比如它可以将offset设置成为一个旧的值来重读之前的消息。</p>
<p>以上特点的结合，使Kafka consumers非常的轻量级：它们可以在不对集群和其他consumer造成影响的情况下读取消息。你可以使用命令行来”tail”消息而不会对其他正在消费消息的consumer造成影响。</p>
<p>将日志分区可以达到以下目的：首先这使得每个日志的数量不会太大，可以在单个服务上保存。另外每个分区可以单独发布和消费，为并发操作topic提供了一种可能。</p>
<h2 id="分布式">分布式</h2><p>每个分区在Kafka集群的若干服务中都有副本，这样这些持有副本的服务可以共同处理数据和请求，副本数量是可以配置的。副本使Kafka具备了容错能力。<br>每个分区都由一个服务器作为“leader”，零或若干服务器作为“followers”,leader负责处理消息的读和写，followers则去复制leader.如果leader down了，followers中的一台则会自动成为leader。集群中的每个服务都会同时扮演两个角色：作为它所持有的一部分分区的leader，同时作为其他分区的followers，这样集群就会据有较好的负载均衡。</p>
<h2 id="Producers">Producers</h2><p>Producer将消息发布到它指定的topic中,并负责决定发布到哪个分区。通常简单的由负载均衡机制随机选择分区，但也可以通过特定的分区函数选择分区。使用的更多的是第二种,我们也是使用的这个。</p>
<h2 id="Consumers">Consumers</h2><p>发布消息通常有两种模式：队列模式（queuing）和发布-订阅模式(publish-subscribe)。队列模式中，consumers可以同时从服务端读取消息，每个消息只被其中一个consumer读到；发布-订阅模式中消息被广播到所有的consumer中。Consumers可以加入一个consumer 组，共同竞争一个topic，topic中的消息将被分发到组中的一个成员中。同一组中的consumer可以在不同的程序中，也可以在不同的机器上。如果所有的consumer都在一个组中，这就成为了传统的队列模式，在各consumer中实现负载均衡。如果所有的consumer都不在不同的组中，这就成为了发布-订阅模式，所有的消息都被分发到所有的consumer中。更常见的是，每个topic都有若干数量的consumer组，每个组都是一个逻辑上的“订阅者”，为了容错和更好的稳定性，每个组由若干consumer组成。这其实就是一个发布-订阅模式，只不过订阅者是个组而不是单个consumer。<br><img src="/img/consumers.png" alt="Alt text"><br>由两个机器组成的集群拥有4个分区 (P0-P3) 2个consumer组. A组有两个consumerB组有4个</p>
<h2 id="消息的有序性">消息的有序性</h2><p><strong>相比传统的消息系统，Kafka可以很好的保证有序性。</strong><br>传统的队列在服务器上保存有序的消息，如果多个consumers同时从这个服务器消费消息，服务器就会以消息存储的顺序向consumer分发消息。虽然服务器按顺序发布消息，但是消息是被异步的分发到各consumer上，所以当消息到达时可能已经失去了原来的顺序，这意味着并发消费将导致顺序错乱。为了避免故障，这样的消息系统通常使用“专用consumer”的概念，其实就是只允许一个消费者消费消息，当然这就意味着失去了并发性。</p>
<p>在这方面Kafka做的更好，通过分区的概念，Kafka可以在多个consumer组并发的情况下提供较好的有序性和负载均衡。将每个分区分只分发给一个consumer组，这样一个分区就只被这个组的一个consumer消费，就可以顺序的消费这个分区的消息。因为有多个分区，依然可以在多个consumer组之间进行负载均衡。注意consumer组的数量不能多于分区的数量，也就是有多少分区就允许多少并发消费。</p>
<p>Kafka只能保证一个分区之内消息的有序性，在不同的分区之间是不可以的，这已经可以满足大部分应用的需求。如果需要topic中所有消息的有序性，那就只能让这个topic只有一个分区，当然也就只有一个consumer组消费它。</p>
<hr>
<h1 id="环境搭建">环境搭建</h1><h2 id="下载kafka">下载kafka</h2><p><a href="http://kafka.apache.org/downloads.html" target="_blank" rel="external">下载最新版本的kafka</a>，我用的kafka_2.9.2-0.8.1.1</p>
<blockquote>
<p>我是放在/opt 目录下的<br>tar -xvf kafka_2.9.2-0.8.1.1.tgz</p>
</blockquote>
<h2 id="启动服务">启动服务</h2><h3 id="先启动zookeeper">先启动zookeeper</h3><p>Kafka用到了Zookeeper，所有首先启动Zookper，下面简单的启用一个单实例的Zookkeeper服务。可以在命令的结尾加个&amp;符号，这样就可以启动后离开控制台。</p>
<blockquote>
<p>cd kafka_2.9.2-0.8.1.1/bin/<br>bash zookeeper-server-start.sh /opt/kafka_2.9.2-0.8.1.1/config/zookeeper.properties &amp;</p>
</blockquote>
<p>这里可能会报错：<br>Unrecognized VM option ‘+UseCompressedOops’<br>Could not create the Java virtual machine.</p>
<blockquote>
<p>解决方法：<br>查看 bin/kafka-run-class.sh<br>找到<br>if [ -z “$KAFKA_JVM_PERFORMANCE_OPTS” ]; then<br>  KAFKA_JVM_PERFORMANCE_OPTS=”-server  -XX:+UseCompressedOops -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+CMSScavengeBeforeRemark -XX:+DisableExplicitGC -Djava.awt.headless=true”<br>fi<br>去掉-XX:+UseCompressedOops<br>再启用就可以了</p>
</blockquote>
<h3 id="再启动kafka">再启动kafka</h3><blockquote>
<p>bash kafka-server-start.sh /opt/kafka_2.9.2-0.8.1.1/config/server.properties &amp;</p>
</blockquote>
<p>如果报错，启动不了，可以多开几个终端试一试。</p>
<h2 id="创建_topic">创建 topic</h2><p>创建一个叫做“test”的topic，它只有一个分区，一个副本。</p>
<blockquote>
<p>bash kafka-topics.sh –create –zookeeper localhost:2181 –replication-factor 1 –partitions 1 –topic test</p>
</blockquote>
<p>可以通过list命令查看创建的topic:</p>
<blockquote>
<p>bash kafka-topics.sh –list –zookeeper localhost:2181</p>
</blockquote>
<p>除了手动创建topic，还可以配置broker让它自动创建topic.</p>
<h2 id="发送消息">发送消息</h2><p>Kafka 使用一个简单的命令行producer，从文件中或者从标准输入中读取消息并发送到服务端。默认的每条命令将发送一条消息。<br>运行producer并在控制台中输一些消息，这些消息将被发送到服务端：</p>
<blockquote>
<p>bash kafka-console-producer.sh –broker-list localhost:9092 –topic<br>test</p>
</blockquote>
<p>ctrl+c可以退出发送。</p>
<h2 id="启动consumer">启动consumer</h2><p>Kafka也有一个命令行consumer可以读取消息并输出到标准输出</p>
<blockquote>
<p>bash kafka-console-consumer.sh –zookeeper localhost:2181 –topic test –from-beginning</p>
</blockquote>
<h2 id="搭建一个多个broker的集群">搭建一个多个broker的集群</h2><p>刚才只是启动了单个broker，现在启动有3个broker组成的集群，这些broker节点也都是在本机上的：<br>首先为每个节点编写配置文件：</p>
<blockquote>
<p>cp config/server.properties config/server-1.properties<br>cp config/server.properties config/server-2.properties</p>
</blockquote>
<p>在拷贝出的新文件中添加以下参数：<br>config/server-1.properties:<br>    broker.id=1<br>    port=9093<br>    log.dir=/tmp/kafka-logs-1</p>
<p>config/server-2.properties:<br>    broker.id=2<br>    port=9094<br>    log.dir=/tmp/kafka-logs-2</p>
<p>broker.id在集群中唯一的标注一个节点，因为在同一个机器上，所以必须制定不同的端口和日志文件，避免数据被覆盖。<br>刚才已经启动可Zookeeper和一个节点，现在启动另外两个节点：</p>
<blockquote>
<p>bin/kafka-server-start.sh config/server-1.properties &amp;<br>bin/kafka-server-start.sh config/server-2.properties &amp;</p>
</blockquote>
<p>创建一个拥有3个副本的topic:</p>
<blockquote>
<p>bin/kafka-topics.sh –create –zookeeper localhost:2181 –replication-factor 3 –partitions 1 –topic my-replicated-topic</p>
</blockquote>
<p>现在我们搭建了一个集群，怎么知道每个节点的信息呢？运行“”describe topics”命令就可以了：</p>
<blockquote>
<p>bin/kafka-topics.sh –describe –zookeeper localhost:2181 –topic my-replicated-topic<br>Topic:my-replicated-topic       PartitionCount:1        ReplicationFactor:3     Configs:<br>        Topic: my-replicated-topic      Partition: 0    Leader: 1       Replicas: 1,2,0 Isr: 1,2,0</p>
</blockquote>
<p>下面解释一下这些输出。第一行是对所有分区的一个描述，然后每个分区都会对应一行，因为我们只有一个分区所以下面就只加了一行。<br><strong>leader</strong>：负责处理消息的读和写，leader是从所有节点中随机选择的.<br><strong>replicas</strong>：列出了所有的副本节点，不管节点是否在服务中.<br><strong>isr</strong>：是正在服务中的节点.<br>在我们的例子中，节点1是作为leader运行。<br>向topic发送消息：</p>
<blockquote>
<p>bin/kafka-console-producer.sh –broker-list localhost:9092 –topic my-replicated-topic<br>my test message 1my test message 2</p>
</blockquote>
<p>消费这些消息：</p>
<blockquote>
<p>bin/kafka-console-consumer.sh –zookeeper localhost:2181 –from-beginning –topic my-replicated-topic</p>
<p>my test message 1<br>my test message 2</p>
</blockquote>
<p>测试一下容错能力.Broker 1作为leader运行，现在我们kill掉它：</p>
<blockquote>
<p>ps | grep server-1.properties7564 ttys002    0:15.91 /System/Library/Frameworks/JavaVM.framework/Versions/1.6/Home/bin/java…<br>kill -9 7564</p>
</blockquote>
<p>另外一个节点被选做了leader,node 1 不再出现在 in-sync 副本列表中：</p>
<blockquote>
<p>bin/kafka-topics.sh –describe –zookeeper localhost:218192 –topic my-replicated-topic<br>Topic:my-replicated-topic       PartitionCount:1        ReplicationFactor:3     Configs:<br>        Topic: my-replicated-topic      Partition: 0    Leader: 2       Replicas: 1,2,0 Isr: 2,0</p>
</blockquote>
<p>虽然最初负责续写消息的leader down掉了，但之前的消息还是可以消费的：</p>
<blockquote>
<p>bin/kafka-console-consumer.sh –zookeeper localhost:2181 –from-beginning –topic my-replicated-topic<br>…<br>my test message 1<br>my test message 2</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>公司的一些项目用的<a href="http://www.cnblogs.com/kgdxpr/p/3381974.html">ActivemMQ</a>，最近有个项目开始尝试使用Kafka，有幸帮忙测试了kafka-Producer和Consumer消息吞吐相关的性能，包括broker切换消息的丢失率。在此之前，我对kafka完全不了解。<br>kafka 作为分布式的消息系统，性能大大超过传统的ActiveMQ，市场前景很广，虽然目前还有一些不足的地方，但以后很可能会是分布式消息系统的主流，有必要学习一下！<br>]]>
    
    </summary>
    
      <category term="kafka" scheme="http://tonylit.me/tags/kafka/"/>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[性能分析过程]]></title>
    <link href="http://tonylit.me/2015/11/14/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/"/>
    <id>http://tonylit.me/2015/11/14/性能分析过程/</id>
    <published>2015-11-14T03:37:27.000Z</published>
    <updated>2015-11-14T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<h1 id="性能分析过程">性能分析过程</h1><p>一般情况，该怎样定位性能问题：<br><img src="/img/xingnengfenxiguocheng.PNG" alt="Alt text"></p>
<blockquote>
<p>资源利用率：top、vmstat、iostat、netstat<br>进程：top，top -Hp  &lt; pid &gt;<br>系统调用：strace<br>应用监控：jstack、jprofile、jvisualvm<br><a id="more"></a></p>
<h2 id="资源利用率">资源利用率</h2><p>top、vmstat、iostat、netstat、还有很多（sar、nmon），我比较喜欢用vmstat。</p>
</blockquote>
<p><img src="/img/vmstat.PNG" alt="Alt text"></p>
<blockquote>
<p>r： 表示运行队列,简单理解为有多少线程在排队，一般不要超过cpu个数的5倍。<br>b： 表示阻塞的进程,这个不多说，进程阻塞，大家懂的。<br>swpd ：虚拟内存已使用的大小。<br>free ：  空闲的物理内存的大小。<br>buff ：  物理内存用来缓存读写操作的buffer大小<br>cache： 物理内存用来缓存进程地址空间的 cache 大小<br>si ： 每秒从磁盘读入虚拟内存的大小，如果这个值大于0，表示物理内存不够用。<br>so：  每秒虚拟内存写入磁盘的大小，如果这个值大于0，同上。<br>bi ： 块设备每秒接收的块数量，一般指磁盘读入。<br>bo： 块设备每秒发送的块数量，一般指磁盘读出。<br>in： 每秒CPU的中断次数，包括时间中断<br>cs ：每秒上下文切换次数。<br>us： 用户CPU时间。<br>sy ：系统CPU时间，小于30%。<br>id ： 空闲 CPU时间。<br>wt：等待IO CPU时间，小于40%。</p>
</blockquote>
<p>我们先看一看哪一块的利用率超标了，下面附上OS常用阀值：</p>
<pre><code>-<span class="ruby"><span class="constant">TotalCPU</span>% &lt; <span class="number">75</span>%
</span>-<span class="ruby"><span class="constant">SysCPU</span>% &lt; <span class="number">30</span>%
</span>-<span class="ruby"><span class="constant">Load</span> <span class="constant">Average</span> &lt; <span class="number">5</span>
</span>-<span class="ruby"><span class="constant">Wio</span>% &lt; <span class="number">40</span>%
</span>-<span class="ruby">network% &lt; <span class="number">30</span>% -高了会大量丢包
</span>-<span class="ruby">mem% &lt; <span class="number">80</span>%~<span class="number">90</span>%
</span>-<span class="ruby"><span class="constant">Disk</span> busy% &lt; <span class="number">60</span>%
</span>-<span class="ruby"><span class="constant">Disk</span> usage &lt; <span class="number">90</span>% -高了会进行碎片整理</span>
</code></pre><p>如果发现比阀值高，肿么办？<br>不要着急，我们需要精确定位到具体的进程，看看到底哪个进程在捣鬼！<br>top 一下，看下cpu利用率占用或者内存占用高的进程。<br>将它的pid记住，开始动手分尸（分析）</p>
<pre><code><span class="number">1</span><span class="class">.strace</span> -f -c -<span class="tag">p</span> &lt;pid&gt;
<span class="number">2</span><span class="class">.jstack</span> -l &lt;pid&gt;
<span class="number">3</span>.jprofile或者jvisualvm
.....
</code></pre><p>strace：可以将应用对系统的所有调用都打出来，我们可以看到应用程序到底对内核干了多少坏坏的事儿~~~</p>
<blockquote>
<p>strace -f -c -p <pid><br><img src="/img/strace.PNG" alt="Alt text"></pid></p>
</blockquote>
<p>啥？？看不懂syscall，我也看不懂，老老实实百度~~<br>因为我接触大多都是java程序，所以我还是比较钟情于jstack和jprofiler的，嘿嘿！</p>
<blockquote>
<p>jstack -l <pid><br><img src="/img/jstack.PNG" alt="Alt text"><br>JVM的所有线程都打出来，建议输出到文件中，多打几次。</pid></p>
</blockquote>
<p>至于jprofiler，灰常牛X的jvm监控工具，线程数量，方法调用次数，sql执行时间，方法占用cpu的比例，内存大小，gc频率……所有的jvm相关的东东都有，具体怎么用在这里先不多说，上个图看看先~<br><img src="/img/jprofiler.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="性能分析过程">性能分析过程</h1><p>一般情况，该怎样定位性能问题：<br><img src="/img/xingnengfenxiguocheng.PNG" alt="Alt text"></p>
<blockquote>
<p>资源利用率：top、vmstat、iostat、netstat<br>进程：top，top -Hp  &lt; pid &gt;<br>系统调用：strace<br>应用监控：jstack、jprofile、jvisualvm<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
</feed>
