<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[淘淘的博客]]></title>
  <subtitle><![CDATA[今年lebron绝逼夺冠，bie跟我急!]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://tonylit.me/"/>
  <updated>2015-11-22T05:37:27.000Z</updated>
  <id>http://tonylit.me/</id>
  
  <author>
    <name><![CDATA[tonyli]]></name>
    <email><![CDATA[489631402@qq.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[天选之子-lebron james]]></title>
    <link href="http://tonylit.me/2015/11/22/%E5%A4%A9%E9%80%89%E4%B9%8B%E5%AD%90-%E8%A9%B9%E5%A7%86%E6%96%AF/"/>
    <id>http://tonylit.me/2015/11/22/天选之子-詹姆斯/</id>
    <published>2015-11-22T03:37:27.000Z</published>
    <updated>2015-11-22T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>什么时候开始喜欢詹姆斯，<br>应该是09年东决G2绝杀魔术，<br>1s绝杀的时候，真的是把我看哭了，一个人带队实在是太不容易！<br>现在，23号又回到了家乡，<br>剑指总冠军，我们拭目以待！！</p>
<p><img src="/img/levron-james.jpg" alt="Alt text"></p>
<a id="more"></a>
<hr>
<h1 id="激情夺冠之路">激情夺冠之路</h1><div class="owl"><br><div class="owl-media owl-video owl-youku"><iframe src="http://player.youku.com/embed/XNTAzODA2ODYw" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen></iframe></div><br></div>]]></content>
    <summary type="html">
    <![CDATA[<p>什么时候开始喜欢詹姆斯，<br>应该是09年东决G2绝杀魔术，<br>1s绝杀的时候，真的是把我看哭了，一个人带队实在是太不容易！<br>现在，23号又回到了家乡，<br>剑指总冠军，我们拭目以待！！</p>
<p><img src="/img/levron-james.jpg" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="lebron james" scheme="http://tonylit.me/tags/lebron-james/"/>
    
      <category term="life" scheme="http://tonylit.me/tags/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[kafka入门]]></title>
    <link href="http://tonylit.me/2015/11/19/kafka%E5%85%A5%E9%97%A8/"/>
    <id>http://tonylit.me/2015/11/19/kafka入门/</id>
    <published>2015-11-19T03:37:27.000Z</published>
    <updated>2015-11-19T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>公司的一些项目用的<a href="http://www.cnblogs.com/kgdxpr/p/3381974.html" target="_blank" rel="external">ActivemMQ</a>，最近有个项目开始尝试使用Kafka，有幸帮忙测试了kafka-Producer和Consumer消息吞吐相关的性能，包括broker切换消息的丢失率。在此之前，我对kafka完全不了解。<br>kafka 作为分布式的消息系统，性能大大超过传统的ActiveMQ，市场前景很广，虽然目前还有一些不足的地方，但以后很可能会是分布式消息系统的主流，有必要学习一下！<br><a id="more"></a></p>
<h1 id="介绍">介绍</h1><p>kafka是Linkedin于2010年12月份开源的消息系统，它主要用于处理活跃的流式数据。活跃的流式数据在web网站应用中非常常见，这些数据包括网站的pv、用户访问了什么内容，搜索了什么内容等。 这些数据通常以日志的形式记录下来，然后每隔一段时间进行一次统计处理。<br>传统的日志分析系统提供了一种离线处理日志信息的可扩展方案，但若要进行实时处理，通常会有较大延迟。而现有的消息（队列）系统能够很好的处理实时或者近似实时的应用，但未处理的数据通常不会写到磁盘上，这对于Hadoop之类（一小时或者一天只处理一部分数据）的离线应用而言，可能存在问题。Kafka正是为了解决以上问题而设计的，它能够很好地离线和在线应用。</p>
<h1 id="与其他常用Message_Queue对比">与其他常用Message Queue对比</h1><ul>
<li><strong>RabbitMQ</strong><br>RabbitMQ是使用Erlang编写的一个开源的消息队列，本身支持很多的协议：AMQP，XMPP, SMTP, STOMP，也正因如此，它非常重量级，更适合于企业级的开发。同时实现了Broker构架，这意味着消息在发送给客户端时先在中心队列排队。对路由，负载均衡或者数据持久化都有很好的支持。</li>
<li><strong>Redis</strong><br>Redis是一个基于Key-Value对的NoSQL数据库，开发维护很活跃。虽然它是一个Key-Value数据库存储系统，但它本身支持MQ功能，所以完全可以当做一个轻量级的队列服务来使用。对于RabbitMQ和Redis的入队和出队操作，各执行100万次，每10万次记录一次执行时间。测试数据分为128Bytes、512Bytes、1K和10K四个不同大小的数据。实验表明：入队时，当数据比较小时Redis的性能要高于RabbitMQ，而如果数据大小超过了10K，Redis则慢的无法忍受；出队时，无论数据大小，Redis都表现出非常好的性能，而RabbitMQ的出队性能则远低于Redis。</li>
<li><strong>ZeroMQ</strong><br>ZeroMQ号称最快的消息队列系统，尤其针对大吞吐量的需求场景。ZMQ能够实现RabbitMQ不擅长的高级/复杂的队列，但是开发人员需要自己组合多种技术框架，技术上的复杂度是对这MQ能够应用成功的挑战。ZeroMQ具有一个独特的非中间件的模式，你不需要安装和运行一个消息服务器或中间件，因为你的应用程序将扮演了这个服务角色。你只需要简单的引用ZeroMQ程序库，可以使用NuGet安装，然后你就可以愉快的在应用程序之间发送消息了。但是ZeroMQ仅提供非持久性的队列，也就是说如果宕机，数据将会丢失。其中，Twitter的Storm 0.9.0以前的版本中默认使用ZeroMQ作为数据流的传输（Storm从0.9版本开始同时支持ZeroMQ和Netty作为传输模块）。</li>
<li><strong>ActiveMQ</strong><br>ActiveMQ是Apache下的一个子项目。 类似于ZeroMQ，它能够以代理人和点对点的技术实现队列。同时类似于RabbitMQ，它少量代码就可以高效地实现高级应用场景。<br>-<strong>Kafka/Jafka</strong><br>Kafka是Apache下的一个子项目，是一个高性能跨语言分布式发布/订阅消息队列系统，而Jafka是在Kafka之上孵化而来的，即Kafka的一个升级版。具有以下特性：快速持久化，可以在O(1)的系统开销下进行消息持久化；高吞吐，在一台普通的服务器上既可以达到10W/s的吞吐速率；完全的分布式系统，Broker、Producer、Consumer都原生自动支持分布式，自动实现复杂均衡；支持Hadoop数据并行加载，对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka通过Hadoop的并行加载机制来统一了在线和离线的消息处理。Apache Kafka相对于ActiveMQ是一个非常轻量级的消息系统，除了性能非常好之外，还是一个工作良好的分布式系统。<h2 id="术语">术语</h2>首先让我们看几个基本的消息系统术语：</li>
<li><strong>Broker</strong><br>Kafka集群包含一个或多个服务器，这种服务器被称为broker</li>
<li><strong>Topic</strong><br>每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic。（物理上不同Topic的消息分开存储，逻辑上一个Topic的消息虽然保存于一个或多个broker上但用户只需指定消息的Topic即可生产或消费数据而不必关心数据存于何处）</li>
<li><strong>Partition</strong><br>Parition是物理上的概念，每个Topic包含一个或多个Partition.</li>
<li><strong>Producer</strong><br>负责发布消息到Kafka broker</li>
<li><strong>Consumer</strong><br>消息消费者，向Kafka broker读取消息的客户端。</li>
<li><strong>Consumer Group</strong><br>每个Consumer属于一个特定的Consumer Group（可为每个Consumer指定group name，若不指定group name则属于默认的group）。<h2 id="拓扑结构">拓扑结构</h2><img src="/img/kafkatuopu.jpg" alt="Alt text"><br>如上图所示，一个典型的Kafka集群中包含若干Producer（可以是web前端产生的Page View，或者是服务器日志，系统CPU、Memory等），若干broker（Kafka支持水平扩展，一般broker数量越多，集群吞吐率越高），若干Consumer Group，以及一个Zookeeper集群。Kafka通过Zookeeper管理集群配置，选举leader，以及在Consumer Group发生变化时进行rebalance。Producer使用push模式将消息发布到broker，Consumer使用pull模式从broker订阅并消费消息。<br>需要提到的一点：<strong>客户端和服务端通过TCP协议通信</strong>。Kafka提供了Java客户端，并且对多种语言都提供了支持。<h2 id="Topics_和Logs">Topics 和Logs</h2>先来看一下Kafka提供的一个抽象概念:topic.<br>一个topic是对一组消息的归纳。Topic在逻辑上可以被认为是一个queue，每条消费都必须指定它的topic，可以简单理解为必须指明把这条消息放进哪个queue里。对每个topic，Kafka 对它的日志进行了分区，如下图所示：<br><img src="/img/topic.png" alt="Alt text"><br>每个分区都由一系列有序的、不可变的消息组成，这些消息被连续的追加到分区中。分区中的每个消息都有一个连续的序列号叫做offset,用来在分区中唯一的标识这个消息。<br>在一个可配置的时间段内，Kafka集群保留所有发布的消息，不管这些消息有没有被消费。比如，如果消息的保存策略被设置为2天，那么在一个消息被发布的两天时间内，它都是可以被消费的。之后它将被丢弃以释放空间。Kafka的性能是和数据量无关的常量级的，所以保留太多的数据并不是问题。</li>
</ul>
<p>实际上每个consumer唯一需要维护的数据是消息在日志中的位置，也就是offset.这个offset有consumer来维护：一般情况下随着consumer不断的读取消息，这offset的值不断增加，但其实consumer可以以任意的顺序读取消息，比如它可以将offset设置成为一个旧的值来重读之前的消息。</p>
<p>以上特点的结合，使Kafka consumers非常的轻量级：它们可以在不对集群和其他consumer造成影响的情况下读取消息。你可以使用命令行来”tail”消息而不会对其他正在消费消息的consumer造成影响。</p>
<p>将日志分区可以达到以下目的：首先这使得每个日志的数量不会太大，可以在单个服务上保存。另外每个分区可以单独发布和消费，为并发操作topic提供了一种可能。</p>
<h2 id="分布式">分布式</h2><p>每个分区在Kafka集群的若干服务中都有副本，这样这些持有副本的服务可以共同处理数据和请求，副本数量是可以配置的。副本使Kafka具备了容错能力。<br>每个分区都由一个服务器作为“leader”，零或若干服务器作为“followers”,leader负责处理消息的读和写，followers则去复制leader.如果leader down了，followers中的一台则会自动成为leader。集群中的每个服务都会同时扮演两个角色：作为它所持有的一部分分区的leader，同时作为其他分区的followers，这样集群就会据有较好的负载均衡。</p>
<h2 id="Producers">Producers</h2><p>Producer将消息发布到它指定的topic中,并负责决定发布到哪个分区。通常简单的由负载均衡机制随机选择分区，但也可以通过特定的分区函数选择分区。使用的更多的是第二种,我们也是使用的这个。</p>
<h2 id="Consumers">Consumers</h2><p>发布消息通常有两种模式：队列模式（queuing）和发布-订阅模式(publish-subscribe)。队列模式中，consumers可以同时从服务端读取消息，每个消息只被其中一个consumer读到；发布-订阅模式中消息被广播到所有的consumer中。Consumers可以加入一个consumer 组，共同竞争一个topic，topic中的消息将被分发到组中的一个成员中。同一组中的consumer可以在不同的程序中，也可以在不同的机器上。如果所有的consumer都在一个组中，这就成为了传统的队列模式，在各consumer中实现负载均衡。如果所有的consumer都不在不同的组中，这就成为了发布-订阅模式，所有的消息都被分发到所有的consumer中。更常见的是，每个topic都有若干数量的consumer组，每个组都是一个逻辑上的“订阅者”，为了容错和更好的稳定性，每个组由若干consumer组成。这其实就是一个发布-订阅模式，只不过订阅者是个组而不是单个consumer。<br><img src="/img/consumers.png" alt="Alt text"><br>由两个机器组成的集群拥有4个分区 (P0-P3) 2个consumer组. A组有两个consumerB组有4个</p>
<h2 id="消息的有序性">消息的有序性</h2><p><strong>相比传统的消息系统，Kafka可以很好的保证有序性。</strong><br>传统的队列在服务器上保存有序的消息，如果多个consumers同时从这个服务器消费消息，服务器就会以消息存储的顺序向consumer分发消息。虽然服务器按顺序发布消息，但是消息是被异步的分发到各consumer上，所以当消息到达时可能已经失去了原来的顺序，这意味着并发消费将导致顺序错乱。为了避免故障，这样的消息系统通常使用“专用consumer”的概念，其实就是只允许一个消费者消费消息，当然这就意味着失去了并发性。</p>
<p>在这方面Kafka做的更好，通过分区的概念，Kafka可以在多个consumer组并发的情况下提供较好的有序性和负载均衡。将每个分区分只分发给一个consumer组，这样一个分区就只被这个组的一个consumer消费，就可以顺序的消费这个分区的消息。因为有多个分区，依然可以在多个consumer组之间进行负载均衡。注意consumer组的数量不能多于分区的数量，也就是有多少分区就允许多少并发消费。</p>
<p>Kafka只能保证一个分区之内消息的有序性，在不同的分区之间是不可以的，这已经可以满足大部分应用的需求。如果需要topic中所有消息的有序性，那就只能让这个topic只有一个分区，当然也就只有一个consumer组消费它。</p>
<hr>
<h1 id="环境搭建">环境搭建</h1><h2 id="下载kafka">下载kafka</h2><p><a href="http://kafka.apache.org/downloads.html" target="_blank" rel="external">下载最新版本的kafka</a>，我用的kafka_2.9.2-0.8.1.1</p>
<blockquote>
<p>我是放在/opt 目录下的<br>tar -xvf kafka_2.9.2-0.8.1.1.tgz</p>
</blockquote>
<h2 id="启动服务">启动服务</h2><h3 id="先启动zookeeper">先启动zookeeper</h3><p>Kafka用到了Zookeeper，所有首先启动Zookper，下面简单的启用一个单实例的Zookkeeper服务。可以在命令的结尾加个&amp;符号，这样就可以启动后离开控制台。</p>
<blockquote>
<p>cd kafka_2.9.2-0.8.1.1/bin/<br>bash zookeeper-server-start.sh /opt/kafka_2.9.2-0.8.1.1/config/zookeeper.properties &amp;</p>
</blockquote>
<p>这里可能会报错：<br>Unrecognized VM option ‘+UseCompressedOops’<br>Could not create the Java virtual machine.</p>
<blockquote>
<p>解决方法：<br>查看 bin/kafka-run-class.sh<br>找到<br>if [ -z “$KAFKA_JVM_PERFORMANCE_OPTS” ]; then<br>  KAFKA_JVM_PERFORMANCE_OPTS=”-server  -XX:+UseCompressedOops -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+CMSScavengeBeforeRemark -XX:+DisableExplicitGC -Djava.awt.headless=true”<br>fi<br>去掉-XX:+UseCompressedOops<br>再启用就可以了</p>
</blockquote>
<h3 id="再启动kafka">再启动kafka</h3><blockquote>
<p>bash kafka-server-start.sh /opt/kafka_2.9.2-0.8.1.1/config/server.properties &amp;</p>
</blockquote>
<p>如果报错，启动不了，可以多开几个终端试一试。</p>
<h2 id="创建_topic">创建 topic</h2><p>创建一个叫做“test”的topic，它只有一个分区，一个副本。</p>
<blockquote>
<p>bash kafka-topics.sh –create –zookeeper localhost:2181 –replication-factor 1 –partitions 1 –topic test</p>
</blockquote>
<p>可以通过list命令查看创建的topic:</p>
<blockquote>
<p>bash kafka-topics.sh –list –zookeeper localhost:2181</p>
</blockquote>
<p>除了手动创建topic，还可以配置broker让它自动创建topic.</p>
<h2 id="发送消息">发送消息</h2><p>Kafka 使用一个简单的命令行producer，从文件中或者从标准输入中读取消息并发送到服务端。默认的每条命令将发送一条消息。<br>运行producer并在控制台中输一些消息，这些消息将被发送到服务端：</p>
<blockquote>
<p>bash kafka-console-producer.sh –broker-list localhost:9092 –topic<br>test</p>
</blockquote>
<p>ctrl+c可以退出发送。</p>
<h2 id="启动consumer">启动consumer</h2><p>Kafka也有一个命令行consumer可以读取消息并输出到标准输出</p>
<blockquote>
<p>bash kafka-console-consumer.sh –zookeeper localhost:2181 –topic test –from-beginning</p>
</blockquote>
<h2 id="搭建一个多个broker的集群">搭建一个多个broker的集群</h2><p>刚才只是启动了单个broker，现在启动有3个broker组成的集群，这些broker节点也都是在本机上的：<br>首先为每个节点编写配置文件：</p>
<blockquote>
<p>cp config/server.properties config/server-1.properties<br>cp config/server.properties config/server-2.properties</p>
</blockquote>
<p>在拷贝出的新文件中添加以下参数：<br>config/server-1.properties:<br>    broker.id=1<br>    port=9093<br>    log.dir=/tmp/kafka-logs-1</p>
<p>config/server-2.properties:<br>    broker.id=2<br>    port=9094<br>    log.dir=/tmp/kafka-logs-2</p>
<p>broker.id在集群中唯一的标注一个节点，因为在同一个机器上，所以必须制定不同的端口和日志文件，避免数据被覆盖。<br>刚才已经启动可Zookeeper和一个节点，现在启动另外两个节点：</p>
<blockquote>
<p>bin/kafka-server-start.sh config/server-1.properties &amp;<br>bin/kafka-server-start.sh config/server-2.properties &amp;</p>
</blockquote>
<p>创建一个拥有3个副本的topic:</p>
<blockquote>
<p>bin/kafka-topics.sh –create –zookeeper localhost:2181 –replication-factor 3 –partitions 1 –topic my-replicated-topic</p>
</blockquote>
<p>现在我们搭建了一个集群，怎么知道每个节点的信息呢？运行“”describe topics”命令就可以了：</p>
<blockquote>
<p>bin/kafka-topics.sh –describe –zookeeper localhost:2181 –topic my-replicated-topic<br>Topic:my-replicated-topic       PartitionCount:1        ReplicationFactor:3     Configs:<br>        Topic: my-replicated-topic      Partition: 0    Leader: 1       Replicas: 1,2,0 Isr: 1,2,0</p>
</blockquote>
<p>下面解释一下这些输出。第一行是对所有分区的一个描述，然后每个分区都会对应一行，因为我们只有一个分区所以下面就只加了一行。<br><strong>leader</strong>：负责处理消息的读和写，leader是从所有节点中随机选择的.<br><strong>replicas</strong>：列出了所有的副本节点，不管节点是否在服务中.<br><strong>isr</strong>：是正在服务中的节点.<br>在我们的例子中，节点1是作为leader运行。<br>向topic发送消息：</p>
<blockquote>
<p>bin/kafka-console-producer.sh –broker-list localhost:9092 –topic my-replicated-topic<br>my test message 1my test message 2</p>
</blockquote>
<p>消费这些消息：</p>
<blockquote>
<p>bin/kafka-console-consumer.sh –zookeeper localhost:2181 –from-beginning –topic my-replicated-topic</p>
<p>my test message 1<br>my test message 2</p>
</blockquote>
<p>测试一下容错能力.Broker 1作为leader运行，现在我们kill掉它：</p>
<blockquote>
<p>ps | grep server-1.properties7564 ttys002    0:15.91 /System/Library/Frameworks/JavaVM.framework/Versions/1.6/Home/bin/java…<br>kill -9 7564</p>
</blockquote>
<p>另外一个节点被选做了leader,node 1 不再出现在 in-sync 副本列表中：</p>
<blockquote>
<p>bin/kafka-topics.sh –describe –zookeeper localhost:218192 –topic my-replicated-topic<br>Topic:my-replicated-topic       PartitionCount:1        ReplicationFactor:3     Configs:<br>        Topic: my-replicated-topic      Partition: 0    Leader: 2       Replicas: 1,2,0 Isr: 2,0</p>
</blockquote>
<p>虽然最初负责续写消息的leader down掉了，但之前的消息还是可以消费的：</p>
<blockquote>
<p>bin/kafka-console-consumer.sh –zookeeper localhost:2181 –from-beginning –topic my-replicated-topic<br>…<br>my test message 1<br>my test message 2</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>公司的一些项目用的<a href="http://www.cnblogs.com/kgdxpr/p/3381974.html">ActivemMQ</a>，最近有个项目开始尝试使用Kafka，有幸帮忙测试了kafka-Producer和Consumer消息吞吐相关的性能，包括broker切换消息的丢失率。在此之前，我对kafka完全不了解。<br>kafka 作为分布式的消息系统，性能大大超过传统的ActiveMQ，市场前景很广，虽然目前还有一些不足的地方，但以后很可能会是分布式消息系统的主流，有必要学习一下！<br>]]>
    
    </summary>
    
      <category term="kafka" scheme="http://tonylit.me/tags/kafka/"/>
    
      <category term="工作" scheme="http://tonylit.me/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[全球黑客撕逼，蓝翔又在毕业考试吗？]]></title>
    <link href="http://tonylit.me/2015/11/18/%E5%85%A8%E7%90%83%E9%BB%91%E5%AE%A2%E6%92%95%E9%80%BC%EF%BC%8C%E8%93%9D%E7%BF%94%E5%8F%88%E5%9C%A8%E6%AF%95%E4%B8%9A%E8%80%83%E8%AF%95%E5%90%97%EF%BC%9F/"/>
    <id>http://tonylit.me/2015/11/18/全球黑客撕逼，蓝翔又在毕业考试吗？/</id>
    <published>2015-11-18T03:37:27.000Z</published>
    <updated>2015-11-18T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>前段时间全球黑客大战，在norse上看了一下世界地图，中国真是亮了，当然外行只能看看热闹~<br>世界地图上不时闪烁亮点，发射光波，攻击其他地域。每一次这样的闪烁表明某个地区施行了一次攻击<br><img src="/img/norse.gif" alt="Alt text"><br>附上两个网络攻击的监控网站，有兴趣的mark下~<br><a href="http://map.norsecorp.com/" target="_blank" rel="external">norse</a>  和 <a href="https://cybermap.kaspersky.com/" target="_blank" rel="external">cybermap</a></p>
<a id="more"></a>
<p><img src="/img/norse-attrack.jpg" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前段时间全球黑客大战，在norse上看了一下世界地图，中国真是亮了，当然外行只能看看热闹~<br>世界地图上不时闪烁亮点，发射光波，攻击其他地域。每一次这样的闪烁表明某个地区施行了一次攻击<br><img src="/img/norse.gif" alt="Alt text"><br>附上两个网络攻击的监控网站，有兴趣的mark下~<br><a href="http://map.norsecorp.com/">norse</a>  和 <a href="https://cybermap.kaspersky.com/">cybermap</a></p>]]>
    
    </summary>
    
      <category term="网络攻击" scheme="http://tonylit.me/tags/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB/"/>
    
      <category term="随笔" scheme="http://tonylit.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[性能分析过程]]></title>
    <link href="http://tonylit.me/2015/11/14/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/"/>
    <id>http://tonylit.me/2015/11/14/性能分析过程/</id>
    <published>2015-11-14T03:37:27.000Z</published>
    <updated>2015-11-14T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<h1 id="性能分析过程">性能分析过程</h1><p>一般情况，该怎样定位性能问题：<br><img src="/img/xingnengfenxiguocheng.PNG" alt="Alt text"></p>
<blockquote>
<p>资源利用率：top、vmstat、iostat、netstat<br>进程：top，top -Hp  &lt; pid &gt;<br>系统调用：strace<br>应用监控：jstack、jprofile、jvisualvm<br><a id="more"></a></p>
<h2 id="资源利用率">资源利用率</h2><p>top、vmstat、iostat、netstat、还有很多（sar、nmon），我比较喜欢用vmstat。</p>
</blockquote>
<p><img src="/img/vmstat.PNG" alt="Alt text"></p>
<blockquote>
<p>r： 表示运行队列,简单理解为有多少线程在排队，一般不要超过cpu个数的5倍。<br>b： 表示阻塞的进程,这个不多说，进程阻塞，大家懂的。<br>swpd ：虚拟内存已使用的大小。<br>free ：  空闲的物理内存的大小。<br>buff ：  物理内存用来缓存读写操作的buffer大小<br>cache： 物理内存用来缓存进程地址空间的 cache 大小<br>si ： 每秒从磁盘读入虚拟内存的大小，如果这个值大于0，表示物理内存不够用。<br>so：  每秒虚拟内存写入磁盘的大小，如果这个值大于0，同上。<br>bi ： 块设备每秒接收的块数量，一般指磁盘读入。<br>bo： 块设备每秒发送的块数量，一般指磁盘读出。<br>in： 每秒CPU的中断次数，包括时间中断<br>cs ：每秒上下文切换次数。<br>us： 用户CPU时间。<br>sy ：系统CPU时间，小于30%。<br>id ： 空闲 CPU时间。<br>wt：等待IO CPU时间，小于40%。</p>
</blockquote>
<p>我们先看一看哪一块的利用率超标了，下面附上OS常用阀值：</p>
<pre><code>-<span class="ruby"><span class="constant">TotalCPU</span>% &lt; <span class="number">75</span>%
</span>-<span class="ruby"><span class="constant">SysCPU</span>% &lt; <span class="number">30</span>%
</span>-<span class="ruby"><span class="constant">Load</span> <span class="constant">Average</span> &lt; <span class="number">5</span>
</span>-<span class="ruby"><span class="constant">Wio</span>% &lt; <span class="number">40</span>%
</span>-<span class="ruby">network% &lt; <span class="number">30</span>% -高了会大量丢包
</span>-<span class="ruby">mem% &lt; <span class="number">80</span>%~<span class="number">90</span>%
</span>-<span class="ruby"><span class="constant">Disk</span> busy% &lt; <span class="number">60</span>%
</span>-<span class="ruby"><span class="constant">Disk</span> usage &lt; <span class="number">90</span>% -高了会进行碎片整理</span>
</code></pre><p>如果发现比阀值高，肿么办？<br>不要着急，我们需要精确定位到具体的进程，看看到底哪个进程在捣鬼！<br>top 一下，看下cpu利用率占用或者内存占用高的进程。<br>将它的pid记住，开始动手分尸（分析）</p>
<pre><code><span class="number">1</span><span class="class">.strace</span> -f -c -<span class="tag">p</span> &lt;pid&gt;
<span class="number">2</span><span class="class">.jstack</span> -l &lt;pid&gt;
<span class="number">3</span>.jprofile或者jvisualvm
.....
</code></pre><p>strace：可以将应用对系统的所有调用都打出来，我们可以看到应用程序到底对内核干了多少坏坏的事儿~~~</p>
<blockquote>
<p>strace -f -c -p <pid><br><img src="/img/strace.PNG" alt="Alt text"></pid></p>
</blockquote>
<p>啥？？看不懂syscall，我也看不懂，老老实实百度~~<br>因为我接触大多都是java程序，所以我还是比较钟情于jstack和jprofiler的，嘿嘿！</p>
<blockquote>
<p>jstack -l <pid><br><img src="/img/jstack.PNG" alt="Alt text"><br>JVM的所有线程都打出来，建议输出到文件中，多打几次。</pid></p>
</blockquote>
<p>至于jprofiler，灰常牛X的jvm监控工具，线程数量，方法调用次数，sql执行时间，方法占用cpu的比例，内存大小，gc频率……所有的jvm相关的东东都有，具体怎么用在这里先不多说，上个图看看先~<br><img src="/img/jprofiler.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="性能分析过程">性能分析过程</h1><p>一般情况，该怎样定位性能问题：<br><img src="/img/xingnengfenxiguocheng.PNG" alt="Alt text"></p>
<blockquote>
<p>资源利用率：top、vmstat、iostat、netstat<br>进程：top，top -Hp  &lt; pid &gt;<br>系统调用：strace<br>应用监控：jstack、jprofile、jvisualvm<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[性能监控与分析-数据库]]></title>
    <link href="http://tonylit.me/2015/11/13/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%88%86%E6%9E%90-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://tonylit.me/2015/11/13/性能监控与分析-数据库/</id>
    <published>2015-11-13T03:37:27.000Z</published>
    <updated>2015-11-13T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>  一个网站的性能分为很多方面，从网络、OS、中间件、code、sql、数据库，还有前端的很多方面，比如：page size、请求数、开启压缩等，实在是太多太多，估计一辈子搞完所有的是不可能了。<br>    大型网站在访问高峰的时候，实际上<strong>最大的瓶颈在数据库</strong>。很多互联网公司为了解决数据库瓶颈，会在DB端应用很多缓存机制，memcache、redis、包括减轻流复制的压力会应用MQ，kafka等消息队列。据统计，某宝和某度数据库的压力仅占期请求的10%~20%,大多数都是被redis等处理掉了。<br>    那么问题来了，我们在性能测试的时候遇到DB端的性能问题该怎么定位与分析呢？</p>
<a id="more"></a>
<p>数据库的性能无非就两个方面-<strong>sql和配置</strong></p>
<h1 id="常见的数据库问题有哪些？">常见的数据库问题有哪些？</h1><blockquote>
<p>SQL语句低效或高负载<br>应用程序使用ORCLE数据库效果不佳<br>数据库内存结构大小不足<br>并发问题<br>I/O问题<br>数据库配置问题<br>数据库性能随着时间下降</p>
</blockquote>
<h1 id="ORCLE性能监控-AWR报告和ADDM">ORCLE性能监控-AWR报告和ADDM</h1><h2 id="awr和addm介绍">awr和addm介绍</h2><blockquote>
<p><strong>AWR</strong>:Automatic Workload Repository 是 10g 引入的一个重要组件，存贮着近期一段时间内数据库活动状态的详细信息、信息保留默认是7天。<br><img src="/img/ORACLE-AWR.png" alt="Alt text"></p>
<p><strong>ADDM</strong>：Oracle10g中推出了新的优化诊断工具：就是通过诊断和分析awr得到的数据来推断数据库可能存在的问题，addm给出的建议是依照减少db_time为依据。每次收集完awr报告后，都会产生一个addm分析，分析结果在shared_pool里，mmon进程定期将其写入磁盘，AWR每产生一次快照，MMON进程就通知ADDM把AWR最近两次快照之间的差值进行分析。因此，在默认情况下，每当有AWR的快照产生，ADDM将自动运行。通过em可以查看。所以说白了，addm应该是帮助我们发现问题的一个很好的工具。<strong>addm可以定位出很多问题，或许你想不到的，它都能帮你想到。</strong></p>
</blockquote>
<h2 id="如何导出awr报告">如何导出awr报告</h2><p>首先进入$ORACLE_HOME/rdbms/admin目录，在sqlplus下运行<strong>@awrrpt</strong>脚本（记得切换oralce用户哦~），按照提示一步一步就可以达成，导出的格式有两种，txt格式和html格式</p>
<p><img src="/img/login_oracle.PNG" alt="Alt text"></p>
<p><img src="/img/awr-create.PNG" alt="Alt text"></p>
<p><img src="/img/shengchengawr.PNG" alt="Alt text"></p>
<p>我们看到最后生成一个awr报告文件，把它拿出来，改成html格式的文件。</p>
<p><img src="/img/AWR-1.PNG" alt="Alt text"></p>
<h2 id="如何快速定位问题">如何快速定位问题</h2><p>刚开始看到AWR报告的时候我就mengbi了，内容实在是太多，从上到下哗啦啦的好多屏。<br>其实大家别害怕，里面99%的内容可以忽略了，我们直接看核心的东东-<strong>Top 5 Timed Events</strong> ，这个是oracle占用时间最长的5个events，直接看这个就行了。<br><img src="/img/Top_5_Timed_Events.PNG" alt="Alt text"></p>
<p>什么？里面写的啥，看不懂？？<br>其实，里面很多东西DBA也不懂，我们百度，谷歌搜起来，很多优化的方案都有，更专业的话，请看一些oracle自己的文章。<br>还有更懒省事、简单有效的方法，使用ADDM报告，上面也介绍了，它就像个私人医生，给你诊断oracle的性能问题并且给你解决方案。<br><strong>我们来看看ADDM能定位哪些问题</strong>：</p>
<blockquote>
<p>•操作系统内存页入页出问题<br>•由于Oracle负载和非Oracle负载导致的CPU瓶颈问题<br>•导致不同资源负载的Top SQL语句和对象——CPU消耗、IO带宽占用、潜在IO问题、RAC内部通讯繁忙<br>•按照PLSQL和JAVA执行时间排的Top SQL语句.<br>•过多地连接 (login/logoff).<br>•过多硬解析问题——由于shared pool过小、书写问题、绑定大小不适应、解析失败原因引起的。<br>•过多软解析问题<br>•索引查询过多导致资源争用.<br>•由于用户锁导致的过多的等待时间 (通过包dbms_lock加的锁)<br>•由于DML锁导致的过多等待时间(例如锁住表了)<br>•由于管道输出导致的过多等待时间(如通过包dbms_pipe.put进行管道输出)<br>•由于并发更新同一个记录导致的过多等待时间(行级锁等待)<br>•由于ITL不够导致的过多等待时间（大量的事务操作同一个数据块）<br>•系统中过多的commit和rollback(logfile sync事件).<br>•由于磁盘带宽太小和其他潜在问题（如由于logfile太小导致过多的checkpoint，MTTR设置问题，过多的undo操作等等）导致的IO性能问题I<br>•对于DBWR进程写数据块，磁盘IO吞吐量不足<br>•由于归档进程无法跟上redo日至产生的速度，导致系统变慢<br>•redo数据文件太小导致的问题<br>•由于扩展磁盘分配导致的争用<br>•由于移动一个对象的高水位导致的争用问题<br>•内存太小问题——SGA Target, PGA, Buffer Cache, Shared Pool<br>•在一个实例或者一个机群环境中存在频繁读写争用的热块<br>•在一个实例或者一个机群环境中存在频繁读写争用的热对象<br>•RAC环境中内部通讯问题<br>•LMS进程无法跟上导致锁请求阻塞<br>•在RAC环境中由于阻塞和争用导致的实例倾斜<br>•RMAN导致的IO和CPU问题<br>•Streams和AQ问题<br>•资源管理等待事件</p>
</blockquote>
<h2 id="如何导出ADDM报告">如何导出ADDM报告</h2><p>和上面导出AWR报告一样，首先进入$ORACLE_HOME/rdbms/admin目录，在sqlplus下运行<strong>@addmrpt</strong>脚本（记得切换oralce用户哦~），按照提示一步一步就可以达成。<br>我们把生成的addm报告拿出来，瞅一瞅~<br><img src="/img/addm-1.PNG" alt="Alt text"></p>
<p>哎，我英语不好，很多看不懂，没办法啊！！！<br>去百度整片翻译一下吧~~<br><img src="/img/addm-2.PNG" alt="Alt text"></p>
<p>好了，后面的事情不用多少了，调参数，优化sql，改bug吧~~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>  一个网站的性能分为很多方面，从网络、OS、中间件、code、sql、数据库，还有前端的很多方面，比如：page size、请求数、开启压缩等，实在是太多太多，估计一辈子搞完所有的是不可能了。<br>    大型网站在访问高峰的时候，实际上<strong>最大的瓶颈在数据库</strong>。很多互联网公司为了解决数据库瓶颈，会在DB端应用很多缓存机制，memcache、redis、包括减轻流复制的压力会应用MQ，kafka等消息队列。据统计，某宝和某度数据库的压力仅占期请求的10%~20%,大多数都是被redis等处理掉了。<br>    那么问题来了，我们在性能测试的时候遇到DB端的性能问题该怎么定位与分析呢？</p>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[登录filter实现]]></title>
    <link href="http://tonylit.me/2015/10/20/%E7%99%BB%E5%BD%95filter%E5%AE%9E%E7%8E%B0/"/>
    <id>http://tonylit.me/2015/10/20/登录filter实现/</id>
    <published>2015-10-20T03:37:27.000Z</published>
    <updated>2015-10-20T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>   最近想实现一个vo登录的功能，左思右想~~<br>   嗯，应该是需要实现权限和登录认证的功能，看来是做写一个登录过滤器或者拦截器了。<br> 项目使用的springmvc框架，查阅了一些资料，决定使用<strong>filter</strong>过滤器，<a href="http://blog.csdn.net/chenleixing/article/details/44573495" target="_blank" rel="external">拦截器与过滤器的区别</a>    </p>
<a id="more"></a>
<p>具体实现比较简单，配置配置，写个filter类就行了，如下：</p>
<ul>
<li><h1 id="在web-xml中增加对filer的配置">在web.xml中增加对filer的配置</h1><p><img src="/img/webxml-filter.PNG" alt="Alt text"></p>
</li>
<li><h1 id="新建一个filter类">新建一个filter类</h1></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.focustech.fds.web.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 登录验证的filter实现</span><br><span class="line"> * </span><br><span class="line"> * <span class="doctag">@author</span> lit</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> FilterConfig config;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] EXCEPT_PAGE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 登录页面</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOGIN_PAGE = <span class="string">"/login"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class="line">        request.setAttribute(<span class="string">"version"</span>, <span class="keyword">new</span> Random().nextInt());</span><br><span class="line">        BodyReaderHttpServletRequestWrapper requestWrapper = <span class="keyword">new</span> BodyReaderHttpServletRequestWrapper(request);</span><br><span class="line">        <span class="keyword">if</span> (requestWrapper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            request = requestWrapper;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排除一些jsp，css等文件</span></span><br><span class="line">        <span class="keyword">for</span> (String exception : EXCEPT_PAGE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (request.getRequestURI().endsWith(exception)) &#123;</span><br><span class="line"></span><br><span class="line">                filterChain.doFilter(request, response);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// String ref = request.getHeader("REFERER");</span></span><br><span class="line">        String ref = <span class="string">"REFERER"</span>;</span><br><span class="line">        HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line">        String type = request.getHeader(<span class="string">"X-Requested-With"</span>);</span><br><span class="line">        <span class="keyword">if</span> (session == <span class="keyword">null</span> || session.getAttribute(<span class="string">"fdsUser"</span>) == <span class="keyword">null</span> || ref == <span class="keyword">null</span> || <span class="string">""</span>.equals(ref)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"XMLHttpRequest"</span>.equalsIgnoreCase(type)) &#123;<span class="comment">// AJAX REQUEST</span></span><br><span class="line">                                                          <span class="comment">// PROCESS</span></span><br><span class="line">                response.setHeader(<span class="string">"sessionstatus"</span>, <span class="string">"timeout"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            response.sendRedirect(request.getContextPath() + LOGIN_PAGE);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        String exception = filterConfig.getInitParameter(<span class="string">"exception"</span>);</span><br><span class="line">        <span class="keyword">if</span> (exception != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(exception)) &#123;</span><br><span class="line">            EXCEPT_PAGE = exception.split(<span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        config = filterConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>搞定~<br>以后凡是URL中带有/vo/的请求都走过滤器滤一滤！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>   最近想实现一个vo登录的功能，左思右想~~<br>   嗯，应该是需要实现权限和登录认证的功能，看来是做写一个登录过滤器或者拦截器了。<br> 项目使用的springmvc框架，查阅了一些资料，决定使用<strong>filter</strong>过滤器，<a href="http://blog.csdn.net/chenleixing/article/details/44573495">拦截器与过滤器的区别</a>    </p>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
      <category term="springmvc" scheme="http://tonylit.me/tags/springmvc/"/>
    
      <category term="工作" scheme="http://tonylit.me/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端性能测试]]></title>
    <link href="http://tonylit.me/2015/10/14/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <id>http://tonylit.me/2015/10/14/前端性能测试/</id>
    <published>2015-10-14T03:37:27.000Z</published>
    <updated>2015-10-14T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>前端时间领导要求统计网站几个核心页面的<strong>性能指标，pagesize、request数量、请求体积</strong>等，本身对前端 的东东不是很了解，看了一些资料，学习了一些前端的知识，包括页面渲染的顺序，各浏览器对请求的处理机制，各大公司对前端性能的一些指标等，结合网友总结 的一些工具的使用，简单的搭建了前端性能监控平台。<br><a id="more"></a><br>当然目前有很多前端性能测试网站，如阿里测、监控宝、webpagetest等，我搭建该平台的原因有三点，第一：网络问题，由于生成环境不能连接外网 第二：开源工具webpagetest搭建没搞定，网上的资料不全，英语不好，看不懂英文网站 第三：学习<br>前端知识的学习推荐：fex.baidu.com<br>性能测试网站推荐：<a href="http://www.alibench.com/" target="_blank" rel="external">http://www.alibench.com/</a><br>webpagetest开源工具：<a href="http://www.webpagetest.org/" target="_blank" rel="external">http://www.webpagetest.org/</a></p>
<h1 id="工具介绍：">工具介绍：</h1><h2 id="dynatrace：">dynatrace：</h2><p><a href="http://www.ibm.com/developerworks/cn/web/1205_xieju_dtraceajax/" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/web/1205_xieju_dtraceajax/</a></p>
<h2 id="showlsow：">showlsow：</h2><p>showslow是yslow的数据收集与展示平台<a href="http://www.showslow.com/，它是一个开源的php项目，可以用来与firefox的yslow插件、page" target="_blank" rel="external">http://www.showslow.com/，它是一个开源的php项目，可以用来与firefox的yslow插件、page</a> speed插件或者dynatrace通信，收集插件或程序所发送过来的信息并集中展示。只需要在dynatrace安装目录下进行一些设置，即可自动实现上传结果到showslow平台作为存档、分析及监控。<br><a href="http://www.showslow.org/Main_Page" target="_blank" rel="external">http://www.showslow.org/Main_Page</a></p>
<h2 id="yslow：">yslow：</h2><p>基于firebug的评测分析工具，yahoo产；和page speed类似工具，会给出页面的评分和优化说规则，同时会提供页面下载资源的统计分析功能，还提供了一些小工具，如js运行检测，图片的优化工具，未符合规则的资源有哪些等等。总的来说是page speed的增强版。<br>yslow前端评分标准：<br><a href="http://developer.yahoo.com/performance/rules.html" target="_blank" rel="external">http://developer.yahoo.com/performance/rules.html</a> </p>
<h2 id="pagespeed：">pagespeed：</h2><p>基于firebug的web页面优化的评测工具，同时还有支持chrome的插件，因为是google产的。<br><a href="https://developers.google.com/speed/docs/best-practices/rules_intro" target="_blank" rel="external">https://developers.google.com/speed/docs/best-practices/rules_intro</a></p>
<h2 id="selenium：">selenium：</h2><p>web自动化测试工具<br><a href="http://baike.baidu.com/subview/478050/6464537.htm?fr=aladdin" target="_blank" rel="external">http://baike.baidu.com/subview/478050/6464537.htm?fr=aladdin</a></p>
<h1 id="测试方案：">测试方案：</h1><p><img src="/img/ceshifangan.PNG" alt="Alt text"></p>
<h1 id="环境以及工具准备：">环境以及工具准备：</h1><p>下载相关工具<br>pagespeed插件：<a href="http://pan.baidu.com/s/1c0vP4VA" target="_blank" rel="external">http://pan.baidu.com/s/1c0vP4VA</a><br>yslow插件：<a href="http://pan.baidu.com/s/1eQkWdKu" target="_blank" rel="external">http://pan.baidu.com/s/1eQkWdKu</a><br>firebug：<a href="http://pan.baidu.com/s/1hq44Q92" target="_blank" rel="external">http://pan.baidu.com/s/1hq44Q92</a><br>dynatrace4.3.0：<a href="http://pan.baidu.com/s/1c01piBu" target="_blank" rel="external">http://pan.baidu.com/s/1c01piBu</a><br>xampp集成软件包：<a href="http://pan.baidu.com/s/1sj8Wkqh" target="_blank" rel="external">http://pan.baidu.com/s/1sj8Wkqh</a><br>MyEclipse8.6：<a href="http://pan.baidu.com/s/1eQEcuSq" target="_blank" rel="external">http://pan.baidu.com/s/1eQEcuSq</a></p>
<h2 id="说明：">说明：</h2><ul>
<li>(1).之所以用firefox19.0，因为坑爹的yslow、pagespeed、dynatrace、firebug、firefox之间的兼容问题，firefox30的兼容性不好，我也没多找资料，就用了19，我觉得完全可以用</li>
<li>(2).showslow为php的小项目，完全可以自己搭建一套php的环境、apache、，mysql，在此推荐xampp（XAMPP（Apache+MySQL+PHP+PERL）是一个功能强大的建 XAMPP 软件站集成软件包）<a href="http://baike.baidu.com/view/864591.htm?fr=aladdin" target="_blank" rel="external">http://baike.baidu.com/view/864591.htm?fr=aladdin</a><h1 id="工具下载好了，我们开始合体：">工具下载好了，我们开始合体：</h1></li>
<li><p>1.安装firefox19.0浏览器，把firebug、yslow、pagespeed插件加入<br><img src="/img/chajianjiaru.PNG" alt="Alt text"></p>
</li>
<li><p>2.安装dynatrace<br><img src="/img/dynatrace.PNG" alt="Alt text"></p>
</li>
</ul>
<ul>
<li><ol>
<li>安装xampp，整合showslow<br><img src="/img/showslow.PNG" alt="Alt text"></li>
</ol>
</li>
</ul>
<p>点击mysql的admin按钮，我们可以添加showslow的数据库，添加用户，设置权限，都比较简单，我添加了一个叫showslow的数据库<br> <img src="/img/showslowdatabase.PNG" alt="Alt text"></p>
<p>数据库方面的ok了，apache方面我们不用进行设置，默认的DocumentRoot在xampp文件夹下的htdocs文件。<br>进入xmapp安装目录的htdocs文件夹，清空所有东西，将下载的showslow减压到该文件夹中，修改showslow解压目录下的config.sample.php文件名为config.php，修改该文件的数据库连接信息，按照上面创建的数据库名，用户名，密码即可<br> <img src="/img/db-setting.PNG" alt="Alt text"></p>
<p>给showslow创建表结构，通过运行showslow解压主目录下的dbupgrade.php和users子目录下dbupgrade.php文件，我们只要在浏览器中输入<a href="http://localhost/dbupgrade.php" target="_blank" rel="external">http://localhost/dbupgrade.php</a> 和<a href="http://localhost/users/dbupgrade.php就可以了" target="_blank" rel="external">http://localhost/users/dbupgrade.php就可以了</a><br>然后，我们输入<a href="http://localhost/，测试一下showslow是否ok" target="_blank" rel="external">http://localhost/，测试一下showslow是否ok</a></p>
<ul>
<li><ol>
<li>环境基本搭建完成，下面我们设置dynatrace，yslow,pagespeed自动上传数据到showslow<h2 id="Dynatrace配置">Dynatrace配置</h2>配置：dynatrace安装文件下的dtajax.ini文件增加如下三行，其中第三行可设置dynatrace自动上传结果至showslow：<br>-Dcom.dynatrace.diagnostics.ajax.beacon.uploadurl=http:// localhost/beacon/dynatrace<br>-Dcom.dynatrace.diagnostics.ajax.beacon.portalurl=http:// localhost/<br>-Dcom.dynatrace.diagnostics.ajax.beacon.autoupload=true<h2 id="Yslow配置：">Yslow配置：</h2>配置YSlow  </li>
</ol>
</li>
<li>1.打开Firefox输入：about:config（我保证会很小心的）  </li>
<li>2.filter中输入：yslow  </li>
<li>3.修改以下三条数据<br>extensions.yslow.beaconUrl = <a href="http://localhost/showslow/beacon/yslow/" target="_blank" rel="external">http://localhost/showslow/beacon/yslow/</a><br>如果测试和服务器不在同一机器上，请将localhost改成实际地址<br>extensions.yslow.beaconInfo = grade<br>extensions.yslow.optinBeacon = true  </li>
<li>4.重启Firefox<br><img src="/img/firefox.PNG" alt="Alt text"></li>
</ul>
<p>Pagespeed配置：<br> <img src="/img/pagespeed.PNG" alt="Alt text"></p>
<p>万恶的pagespeed，不知道怎么的，数据上传不到showslow中，有知道原因的请解惑<br><a href="http://zhidao.baidu.com/question/552903737028719092.html?quesup2&amp;oldq=1" target="_blank" rel="external">http://zhidao.baidu.com/question/552903737028719092.html?quesup2&amp;oldq=1</a></p>
<h1 id="配置方面的可以参考：">配置方面的可以参考：</h1><p><a href="http://blog.csdn.net/five3/article/details/7688298" target="_blank" rel="external">http://blog.csdn.net/five3/article/details/7688298</a><br>结合selenium自动化性能测试：</p>
<h1 id="可以下载项目，自己看吧">可以下载项目，自己看吧</h1><p><a href="http://pan.baidu.com/s/1kTIBPEB" target="_blank" rel="external">http://pan.baidu.com/s/1kTIBPEB</a><br>设置环境变量<br>DT_AE_AGENTACTIVE=true<br>DT_AE_AGENTNAME=”any string name”</p>
<p><img src="/img/selenium-env.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前端时间领导要求统计网站几个核心页面的<strong>性能指标，pagesize、request数量、请求体积</strong>等，本身对前端 的东东不是很了解，看了一些资料，学习了一些前端的知识，包括页面渲染的顺序，各浏览器对请求的处理机制，各大公司对前端性能的一些指标等，结合网友总结 的一些工具的使用，简单的搭建了前端性能监控平台。<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="前端性能" scheme="http://tonylit.me/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[loadrunner监控linux服务器]]></title>
    <link href="http://tonylit.me/2015/10/14/loadrunner%E7%9B%91%E6%8E%A7linux%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://tonylit.me/2015/10/14/loadrunner监控linux服务器/</id>
    <published>2015-10-14T03:37:27.000Z</published>
    <updated>2015-10-14T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p><strong>loadrunner监控linux服务器的cpu、io、内存等</strong><br><img src="/img/linux-server.PNG" alt="Alt text"></p>
<a id="more"></a>
<p>需要在linux服务器上开启rstatd服务，首先看下机器上面有没有装过rstatd<br>rstatd 是一个为网络上其他机器收集和提供系统信息的守候程序</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">whereis</span> <span class="tag">rpc</span><span class="class">.ratatd</span></span><br></pre></td></tr></table></figure>
<p>如果没安装过，安装一下</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf xinetd-<span class="number">2.3</span>.<span class="number">14</span><span class="class">.tar</span><span class="class">.gz</span></span><br><span class="line">/img/configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>安装完成，启动rstatd</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">rpc</span><span class="class">.rstatd</span></span><br></pre></td></tr></table></figure>
<p>检查下是否启动成功</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">rpcinfo</span> -p</span><br></pre></td></tr></table></figure>
<p><img src="/img/rpcinfo.PNG" alt="Alt text"><br>说明rstatd启动成功了</p>
<p>最后在controller中添加UNIX resources监控，然后选择监控指标就行了。<br><img src="/img/unix_resources.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>loadrunner监控linux服务器的cpu、io、内存等</strong><br><img src="/img/linux-server.PNG" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="loadrunner" scheme="http://tonylit.me/tags/loadrunner/"/>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
</feed>
