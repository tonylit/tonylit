<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[淘淘的博客]]></title>
  <subtitle><![CDATA[今年lebron绝逼夺冠，bie跟我急!]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://tonylit.me/"/>
  <updated>2016-08-04T05:37:27.000Z</updated>
  <id>http://tonylit.me/</id>
  
  <author>
    <name><![CDATA[tonyli]]></name>
    <email><![CDATA[489631402@qq.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[性能测试指南]]></title>
    <link href="http://tonylit.me/2016/08/04/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E6%8C%87%E5%8D%97/"/>
    <id>http://tonylit.me/2016/08/04/性能测试指南/</id>
    <published>2016-08-04T03:37:27.000Z</published>
    <updated>2016-08-04T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>平时做性能测试工作，经常拜读其他业务性能著作，taobao的白皮书，京东的性能测试指南等，<br>常常翻阅，有所感悟，在此整理一番，以备后用。</p>
<a id="more"></a>
<hr>
<h1 id="引言">引言</h1><p>性能测试指南的目的在于授人以渔而不是授人以鱼，通过在此指引下，能够独立完成性能测试，<br>掌握性能测试过程中所需要的工具、技能、方法等。积累相关的性能测试经验，并提升测试人员自身的技能。</p>
<hr>
<h1 id="性能测试的概念">性能测试的概念</h1><p>在正常、峰值以及异常负载条件下，测试系统的各项性能指标。<br>通过自动化的测试工具模拟进行。</p>
<hr>
<h1 id="术语">术语</h1><h3 id="并发用户数">并发用户数</h3><p>在同一时刻与服务器进行了交互的在线用户数量</p>
<h3 id="响应时间">响应时间</h3><p>客户发出请求到得到响应的整个过程的时间。一般他可以分为三部分：呈现时间，数据传输时间和系统处理时间</p>
<h3 id="吞吐量">吞吐量</h3><p>一次性能测试过程中网络上传输的数据量的总和</p>
<h3 id="每秒处理事务数(TPS)">每秒处理事务数(TPS)</h3><p>每秒钟系统能够处理事务或交易的数量，它是衡量系统处理能力的重要指标。</p>
<h3 id="点击率">点击率</h3><p>点击率可以看做是TPS的一种特定情况。每秒钟用户向web服务器提交的HTTP请求数。</p>
<h3 id="事务成功率">事务成功率</h3><p>本次测试中出现成功的事务数量/事务的总数</p>
<h3 id="并发">并发</h3><p><strong>并发分为狭义和广义两类。</strong><br>狭义的并发，即<strong>所有的用户在同一时刻做同一件事情或操作</strong>，这种操作一般针对同一类型的业务，或者所有用户进行完全一样的操作，比如双11的秒杀活动，目的是测试数据库和程序对并发操作的处理。<br>广义的并发，即<strong>多个用户对系统发出了请求或者进行了操作，但是这些请求或操作可以是不同的</strong>。对整个系统而言，仍然有很多用户同时进行操作，大多数场景都是广义并发，比较接近用户在系统上的操作行为。<br>做性能测试时，一般先做广义并发，再做狭义并发。</p>
<hr>
<h1 id="性能测试类型">性能测试类型</h1><p>在做性能测试之前，需要明白以下4中测试类型。</p>
<blockquote>
<p>1.性能测试。<br>2.负载测试。<br>3.压力测试。<br>4.稳定性测试。</p>
</blockquote>
<p>我们的系统随着单位时间流量的不断增长，压力不断增大，服务器资源会不断被消耗，TPS值会因为这些因素而发生变化，而且符合一定的规律。（建议看看<a href="http://www.cnblogs.com/jackei/archive/2006/11/20/565527.html" target="_blank" rel="external">理发师模型</a>）<br><img src="/img/性能测试指南/性能测试类型.PNG" alt="Alt text"></p>
<blockquote>
<p>a点：性能期望值<br>b点：高于期望，系统资源处于临界点(eg.cpu 50%,load:cpu*0.7)<br>c点：高于期望，性能处于拐点<br>d点：超过负载，资源不够用，系统处于崩溃</p>
</blockquote>
<h2 id="性能测试">性能测试</h2><p>a点到b点之间的系统性能</p>
<p><strong>简述：</strong><br>性能测试是指通过模拟生产运行的业务压力量和使用场景组合，测试系统的性能是否满足生产性能要求。<br><strong>目的：</strong><br>验证系统是否有其要求达到的能力。<br><strong>特点：</strong><br>对系统性能已经有了解的前提，对需求有明确的目标，并在已经确定的环境下进行的。<br><strong>关注点及产出</strong><br>关注的是系统性能是否和具体的性能需求相一致，而当系统性能超过性能需求的时候，系统的表现并不是测试人员关心的重点。</p>
<h2 id="负载测试">负载测试</h2><p>b点的系统性能</p>
<p><strong>简述：</strong><br>狭义的负载测试，是指对系统不断地增加压力或增加一定压力下的持续时间，直到系统的某项或多项性能指标达到安全临界值，例如某种资源已经达到饱和状态等。<br><strong>目的:</strong><br>找到系统处理能力的极限。了解系统的性能容量，或是配合性能调优来使用。<br><strong>关注点及产出</strong><br>1.得出线下系统最有TPS。<br>2.得出线下系统最有TPS时系统资源利用率。<br>3.得出线下系统极限并发数。</p>
<h2 id="压力测试">压力测试</h2><p>b点到d点之间</p>
<p><strong>简述：</strong><br>是指超过安全负载的情况下，对系统不断施加压力，是通过确定一个系统的瓶颈或不能接收用户请求的性能点，来获得系统能提供的最大服务级别的测试<br><strong>目的：</strong><br>检查系统处于大压力性能下时，应用的表现。<br><strong>特点：</strong><br>一般通过模拟负载等方法，使得系统的资源使用达到较高的水平。<br><strong>关注点及产出</strong><br>发现功能测试不能发现的非功能性缺陷。<br>1.得出线下系统崩溃点的TPS。<br>2.得出线下系统崩溃时资源使用率<br>3.得出线下系统极限并发数</p>
<h2 id="稳定性测试">稳定性测试</h2><p>c点的系统性能</p>
<p><strong>简述：</strong><br>在给系统加载到性能拐点（tps最大值）情况下，使系统运行一段时间（一般为4小时），以此检测系统是否稳定。<br><strong>目的：</strong><br>主要目的是验证是否支持长期稳定的运行。<br><strong>关注点及产出</strong><br>关注系统稳定性。<br>得出系统稳定状态下的资源利用、连接池、TPS、响应时间、DB健康情况等数据。</p>
<hr>
<h1 id="性能测试基本流程">性能测试基本流程</h1><p>性能测试工作开展流程，见图：<br><img src="/img/性能测试指南/性能测试流程.png" alt="Alt text"></p>
<h2 id="性能需求分析">性能需求分析</h2><p>性能需求分析是整个性能测试工作开展的基础，如果连性能的需求都没弄清楚，后面的性能测试工具以及执行就无从谈起了。<br>在这一阶段，性能测试人员需要与项目人员进行沟通，同时收集各种项目资料，对系统进行分析，确认测试的目标。并将其转化为可衡量的具体性能指标。</p>
<h3 id="性能需求评估">性能需求评估</h3><p>项目组人员对性能测试业务点没有很好的概念，判断是否进行性能测试可以从以下几个方面进行思考：</p>
<blockquote>
<ol>
<li>从业务角度来分析。<br>如果一个项目上去后使用的人数比较多，量比较大，就有做性能测试的必要，反之，如果一个项目上线后，没有几个人在用，无论系统多大，设计如何复杂，并发性的性能测试是没有必要做的，前期可以否决。</li>
<li>从系统架构角度来分析。<br>如果一个系统采用的框架是老的系统框架，只是在此框架上增加一些应用，其实是没有必要做性能测试。如果一个系统采用的是一种新的框架，可以考虑做负载测试。</li>
<li>从实时性角度来分析。<br>如果一个项目要求某个功能的响应时间，这个有作并发测试的可能性，在大并发量的场景下，查看这个功能的响应时间。</li>
<li>从数据库角度分析。<br>很多情况下，性能测试是大数据量的并发访问、修改数据库，而瓶颈在于连接数据库池的数量，而非数据库本身的负载、吞吐能力。这时，可以结合DBA的建议，来决定是否来做性能测试。</li>
</ol>
</blockquote>
<p>如果要进行性能测试，接下来我们就需要确定相应的性能点。主要从以下 4 个维度进行确定：</p>
<blockquote>
<ol>
<li>关键业务。<br>首要维度，是确定被测项目是否属于关键业务，有哪些主要的业务逻辑点，特别是跟交易相关的功能点。</li>
<li>日请求量。<br>如果日请求量很高，系统压力很大，而且又是关键业务，该项目需要做性能测试；而且其关键业务点，可以被确定为性能点。</li>
<li>逻辑复杂度。<br>如果一个主要业务的日请求量不高，但是逻辑很复杂，则也需要通过性能测试。原因是，在分布式方式的调用中，当某一个环节响应较慢，就会影响到其它环节，造成雪崩效应。</li>
<li>运营推广计划。<br>未雨绸缪、防患于未然、降低运营风险是性能测试的主要目标。被测系统的性能不仅能满足当前压力，更需要满足未来一定时间段内的压力。因此，事先了解运营推广计划，对性能点的制定有很大的作用。<br>例如，运营计划做活动，要求系统每天能支撑多少 PV、多少 UV，或者一个季度后，需要能支撑多大的访问量等等数据。<br>5.其它<br>例如，当一个功能点不满足以上 4 个维度，但又属于内存高消耗、CPU高消耗时，也可列入性能测试点行列。</li>
</ol>
</blockquote>
<p><strong>最终，需要明确以下几点：</strong><br>1.测试业务点，细化到每一步骤<br>2.测试环境搭建（项目组提供还是性能测试人员搭建），测试环境与正式版按比例配置，配置文件同正式版<br>3.测试指标：TPS、并发用户数、响应时间等<br>4.测试数据，按正式版配比，参数化数据至少为并发数的2倍，由项目组准备数据<br>5.测试类型确定：至少做性能测试和稳定性测试，其他测试类型需要确认。<br>6.测试时间点</p>
<h2 id="性能测试准备">性能测试准备</h2><p>主要包括：设计场景，根据场景编写程序、编写脚本、准备测试环境，构造测试数据，环境预调优等；<br>测试数据的设计也是一个重点且容易出问题的地方。生成测试数据量达到未来预期数量只是最基础的一步，更需要考虑的是数据的分布是否合理，需要仔细的确认程序中使用到的各种查询条件，这些重点列的数值要尽可能的模拟真实的数据分布， 否则测试的结果可能是无效的。<br>预调优指根据系统的特点和团队的经验，提前对系统的各个方面做一些优化调整，避免测试执行过程中的无谓返工。比如一个高并发的系统，10000人在线，连接池和线程池的配置还用默认的，显然是会测出问题的。</p>
<h2 id="执行性能测试">执行性能测试</h2><p>执行阶段工作主要包含两个方面的内容：一是执行测试用例模型，包括执行脚本和场景；其次测试过程监控，包括测试结果、记录性能指标和性能计数器的值</p>
<h2 id="结果分析与性能调优">结果分析与性能调优</h2><p>发现问题或者性能指标达不到预期，及时的分析定位，处理后重复测试过程。性能问题通常是相互关联相互影响的，表面上看到的现象很可能不是根本问题，而是另一处出现问题后引起的反应。这就要求监控收集数据时要全面，从多方面多个角度去判断定位。调优的过程其实也是一种平衡的过程，在系统的多个方面达到一个平衡即可。</p>
<h2 id="性能报告与总结">性能报告与总结</h2><p>编写性能测试报告，阐明性能测试目标、性能结果、测试环境、数据构造规则、遇到的问题和解决办法等。并对此次性能测试经验进行总结与沉淀。</p>
<p>   上面所有内容中，如果排除技术上的问题，性能测试中最难做好的，就是<strong>用户模型的分析</strong>。它直接决定了压力测试场景是否能够有效的模拟真实世界压力，而正是这种对真实压力的模拟，才使性能测试有了更大的意义。可以说，性能测试做到一定程度，差距就体现在了模型建立上。<br>　　至于性能问题的分析、定位或者调优，很大程度是一种技术积累，需要多方面的专业知识。</p>
<hr>
<h1 id="性能测试模型">性能测试模型</h1><p>以下引用taobao和网银在线模型分析方法，基本思路都一样。</p>
<h2 id="taobao性能模型分析">taobao性能模型分析</h2><p><strong>PV计算模型</strong><br>为了让性能测试的PV计算更接近生产线真实情况，利用现有最新的数据得出性能测试PV的计算公式。<br>首先，通过<a href="http://monitor.taobao.com采集现有数据，下图所示的是任意选择一天得到的分布图，" target="_blank" rel="external">http://monitor.taobao.com采集现有数据，下图所示的是任意选择一天得到的分布图，</a> 6:00AM到次日的6:00AM，共24小时。<br><img src="/img/性能测试指南/taobao-分布图.PNG" alt="Alt text"></p>
<p>经过长期监控，发现任何一天的分布图都与上图类似，故将这种分布视为整个淘宝网的浏览量分布。<br>其次，进行数据统计：为了和目前真实情况更接近，选择最近一段时间的数据分布来做样本，<br>记录下系统能够监控到的最短时间间隔的数据，考察其值的走势，并且找出每一天的最大值，抽样出每个时刻的值与当天最大值的比例，以此比例值的趋势，得出数据分布趋势，如下图所示：<br>监控系统最精确可以采集到每3分钟的数据，一天24小时可以采集到480个点<br><img src="/img/性能测试指南/taobao-分布图2.PNG" alt="Alt text"></p>
<p>采用微积分思想，将每个时间点视为一个矩形，可以通过求和的方式求出整个分布图的面积，如下图所示：<br><img src="/img/性能测试指南/淘宝-分布图3.PNG" alt="Alt text"></p>
<p><strong>根据80/20原理</strong>，找出占据总体面积80%所用的时间，再计算出平均PV量。<br>选择尽可能大的点计算出占据总体80%的面积，发现点的个数是240，那么意味着此时间长度为总时间长度的50%，则<strong>80/20原则在此可以转换成80/50原则</strong>，则有<br>每台服务器每秒平均PV量 = (80%<em>总PV)/(24</em>60<em>60</em>(240/480))/服务器数量。<br>整理后得：<strong>每台服务器每秒平均PV量 = (1.6<em>总PV)/ (24</em>60*60) /服务器数量</strong>。进而计算出占总面积80%的PV平均值与整个图中的最高峰值的比，可以得出<strong>最高峰的PV量是1.2倍的平均PV量</strong>。<br>即          每台服务器每秒高峰PV量 = (1.2<em>1.6</em>总PV)/(24<em>60</em>60) /服务器数量。<br>整理后得：          <strong>每台服务器每秒高峰PV量= (1.92<em>总PV)/(24</em>60*60) /服务器数量</strong>。</p>
<h3 id="PV-&gt;TPS转换模型">PV-&gt;TPS转换模型</h3><p>为了使PV在性能测试环境下可量化，根据PV的概念，通过以下方式将其转换成TPS。</p>
<blockquote>
<p>1.性能测试脚本中，只保留与性能点相关的内容，异步处理的，保留多个请求，从而确保压力目标。<br>2.在执行场景中，不模拟浏览器缓存，确保每次请求都到达应用服务器，使得LoadRunner的一个请求等同于一个PV。<br>3.在执行场景中，每次迭代，都模拟一个新用户，而且清除用户缓存信息，确保每个用户每次发送请求都是全新的。</p>
</blockquote>
<p>结论：通过以上三步，将PV转化成性能测试工具可识别的TPS。换言之，1PV=1TPS。</p>
<h3 id="TPS-&gt;并发用户数">TPS-&gt;并发用户数</h3><p>根据公式：并发用户数=TPS/响应时间，项目组给出响应时间，然后计算出并发用户。</p>
<h2 id="网银在线性能模型分析">网银在线性能模型分析</h2><p>根据支付宝订单数来做建模demo：</p>
<p>双11当天，支付宝的订单数是1.8亿笔，意味着每小时订单数达到1.8亿 / 24 = 750万笔，也意味着每秒订单数达到750万 / 3600 = <strong>2083笔</strong>。</p>
<p>首先，让我们先来看看吞吐率指标（TPS），假设支付宝有100台前置服务器，分到每台机器就是每秒处理订单2083笔 / 100 = 20笔。</p>
<p>这是不是意味着只要单台服务器的性能达到<strong>20 tps</strong>，我们的线上服务就足以支撑每天1.8亿的交易量呢？<br>答案<strong>显然不是</strong>。</p>
<p>我们先来看看淘宝网每天交易量分布图：<br><img src="/img/性能测试指南/taobao-分布图.PNG" alt="Alt text"></p>
<p>可以看到，交易量并不是24小时平均分布的，从早上8点开始到晚上12点才是交易量发生的主要时间段，也就是说实际上每天只有2/3的时间（16小时）才是有效时间。我们的性能指标应该调整到20tps * 150% = 30tps。</p>
<p>即使是16个小时中，交易量也不是平均的，在午饭和晚饭时间会出现两个波谷，晚上8点到11点之间是一天的最高峰。最高峰大约是平均值的1.2倍，如果我们不想损失掉高峰时期的交易量的话，我们的吞吐率指标需要再上调到30tps * 1.2 = 36tps。</p>
<p>以上只是一个普通日子的交易量分布情况，如果有某些重大活动事件，比如限时抢购、定时秒杀等活动，那么我们很可能在短时间承受几倍甚至十几倍的压力。如下图是京东某年某活动当天的交易量分布图：<br><img src="/img/性能测试指南/jd-分布图.PNG" alt="Alt text"><br>总体交易量是<strong>平日的几倍到十几倍</strong>，交易量从零点开始就达到一个小高峰，凌晨2点后逐渐降到冰点，早上8点又开始了一天的持续热度，<br>下午7点出现一个小波谷紧接着就迎来了晚上11点左右的最高峰。对于这种特别庞大的活动我们需要提前做好性能预案，以往的数据就是我们最好的参考。</p>
<p>通常来讲，我们对于系统的性能要求在每天高峰时期的1.5倍到4倍，如果按2倍计算，那么我们的吞吐率指标就继续上调到 36tps <em> 2 = <em>*72tps</em></em>。</p>
<p>好了，单台服务器的性能达标了72tps。但是100台服务器加起来就能承载 72tps * 100 = 7200tps吗？ </p>
<p>比较难，这依赖于我们的负载均衡算法。假设我们有一个还不错的算法，但也不能保证长时间绝对的公平，所以单台服务器还需要做好压力波动的缓冲，<br>如果按1.5倍计算，这样我们的指标又要上调到72tps<em>150% = <em>*98tps</em></em>。</p>
<p>这里，我们已经把对单台服务器的性能指标从20tps逐渐上调到近100tps，是原来的5倍。当然这里还远没有结束。这1.8亿笔只是单一的下单操作的PV，<br>假设用户每下单一笔，需要伴随着10次查询，3次提交，那么我们的服务器需要再评估其他或查询或提交的性能。假设这些其他附带请求的压力总和可能还得增大5倍，即达到98tps <em> 5 = <em>*500tps</em></em>。</p>
<h3 id="TPS计算公式">TPS计算公式</h3><p>线下单机基线TPS =线上日均交易量 / 86400 / 机器数 <em> 160% </em> F </p>
<blockquote>
<p>注：86400为一天的秒数。<br>注：假设硬件软件环境条件大致相同。<br>注：F为影响因子，默认为1 。</p>
</blockquote>
<p>关键系数160%的由来，简单点讲就是在每天约50%的时间里完成了80%的工作，80% / 50% = 160%。</p>
<p>该公式还只是最简单场景的抽象，真实的情况可能会很复杂（详见前面的数据示例分析），不过作为线下基线TPS来讲具备很重要的参考意义。</p>
<p>线下基线TPS代表着为了达到线上的交易量，我们线下至少应该满足的性能指标。我们在做性能测试和评估的时候，基线TPS是一定要体现并首先要达到的目标。</p>
<p>影响因子F是一个经验值，也是需要不断调优的，线上与线下的软硬件环境不同都会导致F值的变化，甚至不同的业务线可以有不同的值。当我们的性能沙箱建立、性能闭环成型之后，会更加稳定下来。</p>
<h2 id="我们的性能测试模型">我们的性能测试模型</h2><p>从上面taobai和网银在线的模型分析过程，总结下来：</p>
<p><strong>1.线上pv数据统计</strong><br>数据可以找产品人员或者BI人员，爬虫的数据也包括在内。<br><strong>2.根据pv分布图计算基线TPS</strong><br>先按照8/2原则，20%的时间完成80%的事务，找出80%所用的时间，调整8/2比例（8/3，8/4，8/5…..）。<br>单机基线TPS=线上PV总量 <em>80%/ 86400</em>20% / 机器数 。（20%按照实际数值）<br><strong>3.计算峰值tps</strong><br>计算出占总面积80%的PV平均值与整个图中的最高峰值的比，比如taobao是1.2倍<br>TPS=TPS基线<em>1.2<br>通常来讲，我们对于系统的性能要求在每天高峰时期的2倍，那么我们的TPS=TPS基线</em>1.2<em>2<br>即，**最终TPS=（线上PV总量 </em>80%/ 86400<em>20% / 机器数） </em> 1.2 <em>2*</em></p>
<hr>
<h1 id="环境搭建">环境搭建</h1><p>环境搭建最理想的情况：<br>拓扑图同线上，软硬件资源同线上，数据同线上。<br>但是基本上不可能有这种资源。我们需要按照线上的环境部署情况按比例缩减。</p>
<h2 id="按容量配比机器">按容量配比机器</h2><p>比如线上6台机器，实际没有这么多机器资源，可不可以按照1：1缩减，缩减为2台机器，相应的流量也缩减3倍。<br>需要做容量规划的测试<br><img src="./容量测试.PNG" alt="Alt text"><br>上图是根据xyz的机器配比做的容量规则，可以看到：机器数量跟并发用户数基本是整倍数增加，我们可以看做是1:1的增加，即并发用户增加一倍，机器数量增加一台。<br>结论：一般情况，可以按照1：1缩减。</p>
<h2 id="依据拓扑图准备机器资源">依据拓扑图准备机器资源</h2><p>按照线上机器缩减的配比准备拓扑图和机器，<br><img src="/img/性能测试指南/拓扑图.png" alt="Alt text"></p>
<p>服务器配置：</p>
<blockquote>
<p>Cpu：8核（4*2）  Intel(R) Xeon(R) CPU           E5620  @ 2.40GHz<br>内存：8G<br>磁盘：30G</p>
</blockquote>
<h2 id="搭建应用环境">搭建应用环境</h2><p>web服务器，应用服务器、中间件、数据库跟线上的版本和配置保持一致，可以跟运维要配置文件。</p>
<h2 id="数据准备">数据准备</h2><p>基础数据从线上导入，保证数据量的充分性，参数化的数据（比如账号密码），需要至少准备并发用户数的2倍，用于模拟缓存。</p>
<hr>
<h1 id="压力工具选择">压力工具选择</h1><p>常用的性能测试工具有：loadrunner11 ，jmeter，gatling ，apache ab，按需选择。<br>多数情况下使用的是loadrunner。</p>
<p>自动化性能测试可以采用：<br>Jenkins+ansible+Gatling的方式。</p>
<hr>
<h1 id="性能分析">性能分析</h1><p>##分析思路：<br><a href="http://tonylit.me/2015/11/14/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/">分析过程</a><br>在分布式架构下，性能瓶颈分析也变得相对困难。针对不同的应用系统、不同的测试目标、不同的性能关注点，根据性能指标的表现，采用“拆分问题，隔离分析”的方法进行分析，即逐步定位、从外到内、从表及里、逐层分解、隔离排除。<br>可按以下顺序：</p>
<blockquote>
<p>日志分析—&gt;服务器硬件瓶颈—〉网络瓶颈（对局域网，可以不考虑）—〉服务器操作系统瓶颈（参数配置）—〉中间件瓶颈（参数配置，web服务器等）—〉数据库及应用瓶颈（SQL语句、数据库设计、业务逻辑、算法等）。</p>
</blockquote>
<p>基于上述思想的指导，在具体执行层面，可以参考如下分析过程：</p>
<blockquote>
<ol>
<li>先看CPU利用率，如果CPU利用率不高，但是系统的Throughput和Latency上不去了，这说明我们的程序并没有忙于计算，而是忙于别的一些事，比如IO。（另外，CPU的利用率还要看内核态的和用户态的，内核态的一上去了，整个系统的性能就下来了。而对于多核CPU来说，CPU 0是相当关键的，如果CPU 0的负载高，那么会影响其它核的性能，因为CPU各核间是需要有调度的，这靠CPU0完成）</li>
<li>然后，我们可以看一下IO大不大，IO和CPU一般是反着来的，CPU利用率高则IO不大，IO大则CPU就小。关于IO，我们要看三个事，一个是磁盘文件IO，一个是驱动程序的IO（如：网卡），一个是内存换页率。这三个事都会影响系统性能。</li>
<li>然后，查看一下网络带宽使用情况，在Linux下，你可以使用iftop，iptraf，ntop，tcpdump这些命令来查看。</li>
<li>如果CPU不高，IO不高，内存使用不高，网络带宽使用不高。但是系统的性能上不去。这说明你的程序有问题，比如，你的程序被阻塞了。可能是因为等那个锁，可能是因为等某个资源，或者是在切换上下文。</li>
</ol>
</blockquote>
<p>通过了解操作系统的性能，我们才知道性能的问题，比如：带宽不够，内存不够，TCP缓冲区不够，等等，很多时候，不需要调整程序的，只需要调整一下硬件或操作系统的配置就可以了。</p>
<h2 id="常见性能问题参考">常见性能问题参考</h2><p><strong>操作系统类</strong>    </p>
<blockquote>
<p>Sys的CPU使用率过高<br>User的CPU使用率过高，持续大于80%以上<br>可用物理内存不足导致内存溢出<br> 磁盘空间不足导致交易处理失败，性能下降<br>TCP/IP连接数限制导致用户请求失败<br>磁盘IO使用比较繁忙，持续大于70%</p>
</blockquote>
<p><strong>中间件类</strong>    </p>
<blockquote>
<p>常用主流中间件：Tomcat、apache、nginx、Weblogic、Jboss等<br>线程不回收导致溢出，引发宕机<br>数据库连接池不释放导致溢出<br>JVM内存参数设置不合理，新生代过大或偏小,永久代设置过小，导致栈溢出<br>其它问题</p>
</blockquote>
<p><strong>应用程序类</strong>    </p>
<blockquote>
<p>程序响应时间超长<br>JAVA程序内存溢出，内存中存放大量数据对象<br>JAVA程序循环嵌套过多，过于精细的查询条件，子查询间等待超时<br>程序中存在死循环引起线程死锁，导致CPU使用率达到100%<br>某些返回结果未定义处理方式，导致线程等待，不释放，CPU使用率高</p>
</blockquote>
<p><strong>数据库类</strong>    </p>
<blockquote>
<p>SGA分配不合理，需要具体情况具体分析<br>使用全表扫描<br>对于查询业务比较多的表，未建立索引，或建立的索引不合理，在索引列上使用IS NULL和IS NOT NULL<br>存在数据库死锁导致数据库连接超时或不释放。<br>存在过于复杂的计算，导致CPU、内存和IO使用率较高。<br>数据库读写过于频繁，导致IO使用率比较高</p>
</blockquote>
<p><strong>其他问题</strong>    </p>
<blockquote>
<p>网络问题，被测试环境网络环境小于100M<br>客户端问题等等</p>
</blockquote>
<hr>
<h1 id="性能调优">性能调优</h1><p>调优这块需要大量的知识积累以及多方面的配合。</p>
<h2 id="性能调优目标与策略">性能调优目标与策略</h2><p>性能优化的目标不外乎两个：1.时间性能：减小系统执行的时间；2.空间性能：减小系统占用的空间。</p>
<p><strong>用空间换时间</strong><br>各种cache如CPU L1/L2/RAM到硬盘，都是用空间来换时间的策略。这样策略基本上是把计算的过程一步一步的保存或缓存下来，这样就不用每次用的时候都要再计算一遍，比如数据缓冲，CDN，等。这样的策略还表现为冗余数据，比如数据镜象，负载均衡什么的。</p>
<p><strong>用时间换空间</strong><br>有时候，少量的空间可能性能会更好，比如网络传输，如果有一些压缩数据的算法，这样的算法其实很耗时，但是因为瓶颈在网络传输，所以用时间来换空间反而能省时间。</p>
<p><strong>简化代码</strong><br>最高效的程序就是不执行任何代码的程序，所以，代码越少性能就越高。如：减少循环的层数，减少递归，在循环中少声明变量，少做分配和释放内存的操作，尽量把循环体内的表达式抽到循环外，条件表达的中的多个条件判断的次序，尽量在程序启动时把一些东西准备好，注意函数调用的开销（栈上开销），注意面向对象语言中临时对象的开销，小心使用异常，等等。</p>
<h2 id="调优的基本步骤">调优的基本步骤</h2><p>找出主要的瓶颈，首先解决最容易的，再重复测试。<br>一次修改一个瓶颈，不要对不需要的地方进行调优.</p>
<h2 id="配置项性能调优参考">配置项性能调优参考</h2><p>下面的推荐调优配置都是基于下面的机器配置<br><img src="/img/性能测试指南/虚拟机配置.PNG" alt="Alt text"></p>
<h3 id="Linux系统调优">Linux系统调优</h3><p><strong>Linux limit 配置修改</strong></p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">修改limit 配置文件，提高linux 本身最大限制，都是在文件最后添加，如果有则是修改</span><br><span class="line"> vi /etc/security/limits.<span class="keyword">conf</span>    </span><br><span class="line"><span class="comment">*   soft nproc   102400000</span></span><br><span class="line"><span class="comment">*   hard nproc   102400000</span></span><br><span class="line"><span class="comment">*   soft nofile  1048576</span></span><br><span class="line"><span class="comment">*   hard nofile  1048576</span></span><br><span class="line"></span><br><span class="line">vi  /etc/security/limits.<span class="keyword">d</span>/90-nproc.<span class="keyword">conf</span></span><br><span class="line"><span class="comment">*   soft nproc   102400000</span></span><br><span class="line"><span class="comment">*   hard nproc   102400000</span></span><br><span class="line"><span class="comment">*   soft nofile  1048576</span></span><br><span class="line"><span class="comment">*   hard nofile  1048576</span></span><br><span class="line"></span><br><span class="line">重启生效</span><br><span class="line">service sshd restart</span><br><span class="line"></span><br><span class="line">为每个普通用户修改limit 限制(经过尝试，两台虚拟机最大的)：</span><br><span class="line">vi  /etc/profile</span><br><span class="line">ulimit -<span class="keyword">u</span> 102400000</span><br><span class="line">ulimit -<span class="keyword">n</span> 1048576</span><br><span class="line">ulimit -<span class="keyword">d</span> unlimited</span><br><span class="line">ulimit -<span class="keyword">m</span> unlimited</span><br><span class="line">ulimit -s unlimited</span><br><span class="line">ulimit -t unlimited</span><br><span class="line">ulimit -v unlimited</span><br><span class="line">ulimit -c unlimited</span><br></pre></td></tr></table></figure>
<p><strong>TCP linux 内核参数设置</strong></p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">修改配置文件  /etc/sysctl.<span class="keyword">conf</span></span><br><span class="line"> vi /etc/sysctl.<span class="keyword">conf</span></span><br><span class="line"># Controls the <span class="keyword">use</span> of TCP syncookies</span><br><span class="line"><span class="keyword">net</span>.ipv4.tcp_syncookies = 1</span><br><span class="line"><span class="keyword">net</span>.ipv4.tcp_tw_reuse = 1</span><br><span class="line"><span class="keyword">net</span>.ipv4.tcp_tw_recycle = 1</span><br><span class="line"><span class="keyword">net</span>.ipv4.tcp_fin_timeout = 5</span><br><span class="line"></span><br><span class="line"><span class="keyword">net</span>.ipv4.tcp_keepalive_time = 1200</span><br><span class="line"><span class="keyword">net</span>.ipv4.ip_local_port_range = 10000 65000</span><br><span class="line"><span class="keyword">net</span>.ipv4.tcp_max_syn_backlog = 262144</span><br><span class="line"><span class="keyword">net</span>.core.netdev_max_backlog = 262144 </span><br><span class="line"><span class="keyword">net</span>.ipv4.tcp_max_tw_buckets = 5000</span><br><span class="line"></span><br><span class="line">生效(执行会报错，需要执行中间两个命令)</span><br><span class="line">/sbin/sysctl -p</span><br><span class="line">modprobe bridge</span><br><span class="line">lsmod|grep bridge</span><br><span class="line">/sbin/sysctl –p</span><br></pre></td></tr></table></figure>
<h3 id="JVM_调优">JVM 调优</h3><p>推荐参数：</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAV<span class="built_in">A_ARGS</span>=<span class="string">" -J-Djava.util.logging.manager=com.caucho.log.LogManagerImpl   -J-Dfile.encoding=UTF-8 -J-d64 -J-server -J-Djava.awt.headless=true  -Xms2500m -Xmx2500m -Xmn1100m -XX:PermSize=250m -XX:MaxPermSize=250m -Xss2m  -XX:+UseConcMarkSweepGC -XX:+UseCMSCompactAtFullCollection  -XX:CMSMaxAbortablePrecleanTime=5000 -XX:CMSInitiatingOccupancyFraction=85  -XX:+DisableExplicitGC  -XX:+CMSClassUnloadingEnabled  -J-Xloggc:/var/log/gc_product.log -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution  -Djava.net.preferIPv4Stack=true -XX:+UseCompressedOops -XX:+UseCMSInitiatingOccupancyOnly -XX:MaxTenuringThreshold=8 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp "</span></span><br></pre></td></tr></table></figure>
<p><img src="/img/性能测试指南/堆参数解释.PNG" alt="Alt text"></p>
<h3 id="Nginx_调优">Nginx 调优</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">worker_processes <span class="number">8</span>;</span><br><span class="line">nginx进程数，建议按照cpu数目来指定，一般为它的倍数, <span class="number">2</span>倍左右比较合适。</span><br><span class="line"></span><br><span class="line">worker_cpu_affinity <span class="number">00000001</span> <span class="number">00000010</span> <span class="number">00000100</span> <span class="number">00001000</span> <span class="number">00000001</span> <span class="number">00000010</span> <span class="number">00000100</span> <span class="number">00001000</span>;</span><br><span class="line">为每个进程分配cpu，上例中将<span class="number">8</span>个进程分配到<span class="number">4</span>个cpu，当然可以写多个，或者将一个进程分配到多个cpu。</span><br><span class="line"></span><br><span class="line">worker_rlimit_nofile <span class="number">102400</span>;</span><br><span class="line">这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n的值保持一致。</span><br><span class="line"></span><br><span class="line">use epoll;</span><br><span class="line">使用epoll的I/O模型， epoll 是 linux 内核对AIO的实现。</span><br><span class="line"></span><br><span class="line">worker_connections <span class="number">102400</span>;</span><br><span class="line">每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为worker_processes*worker_connections。</span><br><span class="line"></span><br><span class="line">keepalive_timeout <span class="number">60</span>;</span><br><span class="line">keepalive超时时间。</span><br><span class="line"></span><br><span class="line">client_header_buffer_size <span class="number">4</span>k;</span><br><span class="line">客户端请求头部的缓冲区大小，这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过<span class="number">1</span>k，不过由于一般系统分页都要大于<span class="number">1</span>k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span><br><span class="line"></span><br><span class="line">open_file_cache max=<span class="number">102400</span> inactive=<span class="number">20</span>s;</span><br><span class="line">这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span><br><span class="line"></span><br><span class="line">open_file_cache_valid <span class="number">30</span>s;</span><br><span class="line">这个是指多长时间检查一次缓存的有效信息。</span><br><span class="line"></span><br><span class="line">open_file_cache_min_uses <span class="number">1</span>;</span><br><span class="line">open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span><br></pre></td></tr></table></figure>
<h3 id="MySQLInnoDB调优">MySQLInnoDB调优</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#如果将back_log设定到比你操作系统限制更高的值,将会没有效果, </span></span><br><span class="line"><span class="preprocessor">#对应 Linux tcp 内核参数中的net.core.netdev_max_backlog</span></span><br><span class="line">back_log = <span class="number">30000</span> </span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># MySQL 服务所允许的同时会话数的上限</span></span><br><span class="line">max_connections = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 每个客户端连接最大的错误允许数量</span></span><br><span class="line">max_connect_errors = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 所有线程所打开表的数量</span></span><br><span class="line">table_cache = <span class="number">4096</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 允许外部文件级别的锁. 打开文件锁会对性能造成负面影响</span></span><br><span class="line"><span class="preprocessor">#external-locking</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 服务所能处理的请求包的最大大小以及服务所能处理的最大的请求大小</span></span><br><span class="line">max_allowed_packet = <span class="number">32</span>M</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 在一个事务中binlog为了记录SQL状态所持有的cache大小</span></span><br><span class="line">binlog_cache_size = <span class="number">4</span>M</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 独立的内存表所允许的最大容量.</span></span><br><span class="line">max_heap_table_size = <span class="number">128</span>M</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 排序缓冲被用来处理类似ORDER BY以及GROUP BY队列所引起的排序</span></span><br><span class="line">sort_buffer_size = <span class="number">16</span>M</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 此缓冲被使用来优化全联合(full JOINs 不带索引的联合).</span></span><br><span class="line">join_buffer_size = <span class="number">16</span>M</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 我们在cache中保留多少线程用于重用</span></span><br><span class="line">thread_cache_size = <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 此值只对于支持 thread_concurrency() 函数的系统有意义( 例如Sun Solaris) # 推荐 [CPU数量]*(2~4) 来作为thread_concurrency的值</span></span><br><span class="line">thread_concurrency = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 查询缓冲常被用来缓冲 SELECT 的结果并且在下一次同样查询的时候不再执行直接返回结果</span></span><br><span class="line">query_cache_size = <span class="number">128</span>M</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 此设置用来保护查询缓冲,防止一个极大的结果集将其他所有的查询结果都覆盖.</span></span><br><span class="line">query_cache_limit = <span class="number">4</span>M</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 被全文检索索引的最小的字长.</span></span><br><span class="line">ft_min_word_len = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 线程使用的堆大小. 此容量的内存在每次连接时被预留.</span></span><br><span class="line">thread_stack = <span class="number">512</span>K</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="基础指标">基础指标</h1><h2 id="响应时间-1">响应时间</h2><blockquote>
<p>后端核心服务响应时间不超过100ms<br>后端一般服务响应时间不超过300ms<br>前端用户页面加载时间不超过3s</p>
</blockquote>
<p>这里是指平均响应时间。但性能测试报告必须给出最大、最小、平均、方差等数值。</p>
<h2 id="事务成功率-1">事务成功率</h2><blockquote>
<p>一般为：99.7%~99.9% ，千分之一到千分之三，根据业务类型来。<br>交易型的事务在万分之一。</p>
</blockquote>
<h2 id="负载机的资源利用率">负载机的资源利用率</h2><blockquote>
<p>cpu%&lt;50%<br>内存&lt;80%<br>network&lt;30%,高了容易丢包<br>disk的忙闲&lt;50%<br>disk的空间&lt;90%，高了会碎片整理</p>
</blockquote>
<h2 id="应用服务器硬件性能指标">应用服务器硬件性能指标</h2><blockquote>
<p>TotalCPU%&lt;75%<br>sysCPU%&lt;30%<br>load average&lt;5<br>wio%&lt;40%<br>network%&lt;30%<br>mem%&lt;80%~90%<br>disk%busy&lt;60%<br>disk queueing &lt;5<br>disk usage&lt;90%</p>
</blockquote>
<hr>
<h1 id="性能监控">性能监控</h1><h2 id="JVM监控工具">JVM监控工具</h2><h3 id="jvisualvm">jvisualvm</h3><p>java自带的工具，在jdk的bin目录下，使用方法：<br> 1.到jdk的bin目录下，新建文件jstatd.all.policy<br> 2.编辑文件：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="operator"><span class="keyword">grant</span> codebase <span class="string">"file:$JAVA_HOME/lib/tools.jar"</span> &#123;</span><br><span class="line"> permission <span class="keyword">java</span>.<span class="keyword">security</span>.AllPermission;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>3.启动：jstatd -J-Djava.security.policy=jstatd.all.policy  -J-Djava.rmi.server.hostname=192.168.43.22<br>4.打开jvisualvm，连接remote</p>
<h3 id="jinfo">jinfo</h3><p>观察运行中的java程序的运行环境参数：参数包括Java System属性和JVM命令行参数<br>实例：jinfo 2083<br>其中2083就是java进程id号，可以用jps得到这个id号</p>
<h3 id="jstack">jstack</h3><p>可以观察到jvm中当前所有线程的运行情况和线程当前状态<br>例： jstack 2083</p>
<h3 id="jmap">jmap</h3><p>观察运行中的jvm物理内存的占用情况。<br>参数如下：<br>-heap：打印jvm heap的情况<br>-histo：打印jvm heap的直方图。其输出信息包括类名，对象数量，对象占用大小。<br>-histo：live ：同上，但是只答应存活对象的情况<br>-permstat：打印permanent generation heap情况</p>
<p>命令使用：<br>jmap -heap 2083<br>可以观察到New Generation（Eden Space，From Space，To Space）,<br>tenured generation,Perm Generation的内存使用情况<br>生成 dump 文件：<br>jmap -dump:format=b,file=heap.bin 16113</p>
<h3 id="jprofile">jprofile</h3><p>jprofile使用，<a href="http://tonylit.me/2015/11/25/Jprofiler%E5%AE%89%E8%A3%85/">安装教程</a></p>
<h2 id="linux命令监控">linux命令监控</h2><p>top  ：查看进程活动状态以及一些系统状况<br>vmstat ：  查看系统状态、硬件和系统信息等<br>iostat ：   查看CPU 负载，硬盘状况<br>sar  ：   综合工具，查看系统状况<br>mpstat  ：   查看多处理器状况<br>netstat  ： 查看网络状况<br>iptraf  ：   实时网络状况监测<br>tcpdump  ： 抓取网络数据包，详细分析<br>tcptrace  ：   数据包分析工具<br>netperf ：   网络带宽工具<br>dstat ：   综合工具，综合了 vmstat, iostat, ifstat, netstat ：等多个信息</p>
<h2 id="nmon">nmon</h2><p><a href="http://tonylit.me/2015/12/17/%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7-nmon%E4%BD%BF%E7%94%A8/">nmon使用</a></p>
<p>##　文件句柄数查看及修改<br>ulimit –a：查看所有限制值<br>ulimit –n：单个进程能够打开的最大文件句柄数量<br>lsof -n | awk ‘{print $2}’ | sort | uniq -c | sort –nr：查看进程打开的句柄数，其中第一列是打开的文件句柄数量，第二列是进程号<br>lsof –n | grep process_name：查看某进程打开了哪些句柄<br>lsof +d ./：查看当前目录下各文件被什么进程占用<br>ulimit -SHn 65535：即时修改限制数，重启失效<br>永久修改办法：<br>1、修改文件：/etc/security/limits.conf，添加：</p>
<ul>
<li>soft nofile 32768 #限制单个进程最大文件句柄数（到达此限制时系统报警）</li>
<li>hard nofile 65536 #限制单个进程最大文件句柄数（到达此限制时系统报错）<br>2、修改文件：/etc/sysctl.conf，在文件中添加：<br>fs.file-max=655350 #限制整个系统最大文件句柄数<br>3、修改完成后，执行如下命令：<br>sbin/sysctl -p<br>使配置生效</li>
</ul>
<h1 id="数据库分析与诊断工具">数据库分析与诊断工具</h1><h2 id="oracle">oracle</h2><p>oracle的可以直接<a href="http://tonylit.me/2015/11/13/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%88%86%E6%9E%90-%E6%95%B0%E6%8D%AE%E5%BA%93/">看awr和addm报告</a>就行了</p>
<hr>
<h1 id="前端性能测试">前端性能测试</h1><p>基本上使用yslow或者firebug自带的网络监控工具即可。<br><a href="http://tonylit.me/2015/10/14/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/">自动化前端性能监控</a>可以通过selenium+showslow+yslow来做。</p>
<p>线上的可以使用公司自己的前端监控平台：<br>焦点检测：<a href="http://www.focusmonitor.com/" target="_blank" rel="external">http://www.focusmonitor.com/</a><br>Probe：<a href="http://192.168.28.137:9500/" target="_blank" rel="external">http://192.168.28.137:9500/</a><br>BetterCode：<a href="http://192.168.28.137:9100/" target="_blank" rel="external">http://192.168.28.137:9100/</a><br><img src="/img/性能测试指南/前端检测.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>平时做性能测试工作，经常拜读其他业务性能著作，taobao的白皮书，京东的性能测试指南等，<br>常常翻阅，有所感悟，在此整理一番，以备后用。</p>]]>
    
    </summary>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Gatling 入门]]></title>
    <link href="http://tonylit.me/2016/08/02/Gatling%E5%85%A5%E9%97%A8/"/>
    <id>http://tonylit.me/2016/08/02/Gatling入门/</id>
    <published>2016-08-02T03:37:27.000Z</published>
    <updated>2016-08-02T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>Gatling作为一款开源的性能测试工具，慢慢走入人们视野，很多公司使用Jenkins+gatling做自动化性能测试，<br>它拥有强大的API支持和完善的HTML报表，使用起来比较容易。</p>
<a id="more"></a>
<hr>
<h1 id="Gatling简介">Gatling简介</h1><p>Gatling的Scala基础封装是基于Akka编程的，它是非阻塞异步编程模型，可以高效执行并有极高的容错率。</p>
<blockquote>
<p>   专用web测试。<br>   像LR那样录制脚本，不用从零开始。<br>   脚本使用scala语言，易懂，易修改，控制灵活。<br>   基于JVM，随拷随用。（对比LoadRunner的客户端安装以及JMeter需要XWindow组件，这个方便很多），操作接近apache的ab。<br>   原生支持NIO，并发性能很好，即使性能较差的电脑也能发起很大的负载压力。<br>   基于HTML的报表，简单易读。</p>
</blockquote>
<p><a href="http://www.infoq.com/cn/articles/new-generation-server-testing-tool-gatling/" target="_blank" rel="external">更详细的介绍，与jmeter的比较</a></p>
<hr>
<h1 id="Gatling下载">Gatling下载</h1><p><a href="http://gatling.io/#/resources/download" target="_blank" rel="external">下载地址</a><br>目前最新的是2.2.2版本（jdk1.8），老版本请下载：<br>jdk6对应1.5版本，jdk7以上对应2.0版本。<br>我本地下载的<a href="http://download.csdn.net/download/zrzlj/7080061" target="_blank" rel="external">1.5.4版本</a></p>
<hr>
<h1 id="scala环境准备">scala环境准备</h1><p>gatling脚本使用的scala，需要学习的api不多，如果对java比较了解的话，学习起来很简单。<br><a href="http://tonylit.me/2016/08/01/scala%20eclipse%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">scala环境准备</a></p>
<hr>
<h1 id="Gatling目录结构">Gatling目录结构</h1><p><img src="/img/gatling入门/项目结构.PNG" alt="Alt text"></p>
<h2 id="Recorder-bat_和_gatling-bat">Recorder.bat 和 gatling.bat</h2><p> Recorder.bat和gatling.bat一个用来录脚本，一个用来执行脚本。它们也提供了linux版本.sh。<br>Recorder是个桥接在浏览器和web服务器之间的代理，如果浏览器通过它访问网络时，它能记下浏览器的访问轨迹。<br>Reocrder提供了UI界面，让配置和执行变得简单。 同时，Recoder也是一个scala代码的生成器，它能把访问轨迹记录成scala代码。</p>
<p>Gatling.bat是一个包含了编译，执行scala代码的脚本，它提供了一些参数供使用者指定执行的细节（比如JVM_OPTS）,<br>运行它可以选择需要执行的scala代码，创建非阻塞的线程模型执行压力测试。 </p>
<hr>
<h1 id="录制脚本">录制脚本</h1><p> 使用Recorder.bat录制脚本，过LR或者badboy的不会陌生</p>
<h2 id="启动Recorder">启动Recorder</h2><p><img src="/img/gatling入门/Recorder.png" alt="Alt text"></p>
<p>启动recorder，HTTP和HTTPS默认是8000和8001端口，查看下本地这两个端口有没有被占用，占用的话可以换成别的端口。<br>当点击最下面的start后，8000和8001端口开始监听了，抓取在8000和8001端口交互的包。<br><img src="/img/gatling入门/8000.PNG" alt="Alt text"></p>
<h2 id="浏览器设置">浏览器设置</h2><p> 配置浏览器代理，让它走我们设置的端口 （最好找个专用的浏览器，不用每次改来改去），我这里使用的Firefox<br> <img src="/img/gatling入门/firefox.png" alt="Alt text"></p>
<h2 id="开始录制脚本">开始录制脚本</h2><p>点击start，打开浏览器，开始录制，recorder上面会有各请求的记录<br><img src="/img/gatling入门/开始录制.png" alt="Alt text"></p>
<p>录制完成，保存</p>
<h2 id="编辑脚本">编辑脚本</h2><p>脚本存放位置：<br><img src="/img/gatling入门/脚本保存.PNG" alt="Alt text"></p>
<p>打开脚本，删除不需要的</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.excilys.ebi.gatling.core.<span class="type">Predef</span>._</span><br><span class="line"><span class="keyword">import</span> com.excilys.ebi.gatling.http.<span class="type">Predef</span>._</span><br><span class="line"><span class="keyword">import</span> com.excilys.ebi.gatling.jdbc.<span class="type">Predef</span>._</span><br><span class="line"><span class="keyword">import</span> com.excilys.ebi.gatling.http.<span class="type">Headers</span>.<span class="type">Names</span>._</span><br><span class="line"><span class="keyword">import</span> akka.util.duration._</span><br><span class="line"><span class="keyword">import</span> bootstrap._</span><br><span class="line"><span class="keyword">import</span> assertions._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecordedSimulation</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Simulation</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//httpConf做访问协议</span></span><br><span class="line">	<span class="function"><span class="keyword">val</span> <span class="title">httpConf</span> =</span> httpConfig</span><br><span class="line">			.baseURL(<span class="string">"http://192.168.43.203:99"</span>)</span><br><span class="line">			.acceptHeader(<span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>)</span><br><span class="line">			.acceptEncodingHeader(<span class="string">"gzip, deflate"</span>)</span><br><span class="line">			.acceptLanguageHeader(<span class="string">"zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3"</span>)</span><br><span class="line">			.connection(<span class="string">"keep-alive"</span>)</span><br><span class="line">			.userAgentHeader(<span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//scn描述访问地址和暂停时间</span></span><br><span class="line">	<span class="function"><span class="keyword">val</span> <span class="title">scn</span> =</span> scenario(<span class="string">"Scenario Name"</span>)</span><br><span class="line">		.exec(http(<span class="string">"request_1"</span>)	</span><br><span class="line">		    .get(<span class="string">"/"</span>)</span><br><span class="line">					</span><br><span class="line">			)</span><br><span class="line">  <span class="comment">//scn.users描述并发个数，执行访问</span></span><br><span class="line">	setUp(scn.users(<span class="number">1</span>).protocolConfig(httpConf))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="官网demo">官网demo</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> computerdatabase <span class="comment">// 1 包名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.gatling.core.<span class="type">Predef</span>._ <span class="comment">// 2必须导入的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.gatling.http.<span class="type">Predef</span>._</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.concurrent.duration._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicSimulation</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Simulation</span> &#123;</span> <span class="comment">// 3 类声明，必须继承Simulation</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">val</span> <span class="title">httpConf</span> =</span> http <span class="comment">// 4 所有Http请求普遍配置</span></span><br><span class="line"></span><br><span class="line">.baseURL(<span class="string">"http://computer-database.gatling.io"</span>) <span class="comment">// 5 base URL</span></span><br><span class="line"></span><br><span class="line">.acceptHeader(<span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>) <span class="comment">// 6 请求头</span></span><br><span class="line"></span><br><span class="line">.doNotTrackHeader(<span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line">.acceptLanguageHeader(<span class="string">"en-US,en;q=0.5"</span>)</span><br><span class="line"></span><br><span class="line">.acceptEncodingHeader(<span class="string">"gzip, deflate"</span>)</span><br><span class="line"></span><br><span class="line">.userAgentHeader(<span class="string">"Mozilla/5.0 (Windows NT 5.1; rv:31.0) Gecko/20100101 Firefox/31.0"</span>)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">val</span> <span class="title">scn</span> =</span> scenario(<span class="string">"BasicSimulation"</span>) <span class="comment">// 7 定义场景</span></span><br><span class="line"></span><br><span class="line">.exec(http(<span class="string">"request_1"</span>) <span class="comment">// 8 http请求名称 request_1,这个名称最后会显示在报告中</span></span><br><span class="line"></span><br><span class="line">.get(<span class="string">"/"</span>)) <span class="comment">// 9 get请求方法</span></span><br><span class="line"></span><br><span class="line">.pause(<span class="number">5</span>) <span class="comment">// 10 暂停/思考时间 5s</span></span><br><span class="line"></span><br><span class="line">setUp( <span class="comment">// 11 建立场景</span></span><br><span class="line"></span><br><span class="line">scn.inject(atOnceUsers(<span class="number">1</span>)) <span class="comment">// 12 声明注入一个用户</span></span><br><span class="line"></span><br><span class="line">).protocols(httpConf) <span class="comment">// 13 之前声明的Http请求配置</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="场景执行">场景执行</h1><p>启动gatling.bat<br>看到一个simulation 示例的菜单 ：<br>Choose a simulation number:<br>[0] computerdatabase.BasicSimulation<br>当 simulation 执行完成时，控制台会显示一个HTML报表的链接。<br><img src="/img/gatling入门/result.PNG" alt="Alt text"></p>
<p>到reslut目录下面，查看HTML报错<br><img src="/img/gatling入门/report.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Gatling作为一款开源的性能测试工具，慢慢走入人们视野，很多公司使用Jenkins+gatling做自动化性能测试，<br>它拥有强大的API支持和完善的HTML报表，使用起来比较容易。</p>]]>
    
    </summary>
    
      <category term="Gatling" scheme="http://tonylit.me/tags/Gatling/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[scala eclipse环境搭建]]></title>
    <link href="http://tonylit.me/2016/08/01/scala%20eclipse%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://tonylit.me/2016/08/01/scala eclipse环境搭建/</id>
    <published>2016-08-01T03:37:27.000Z</published>
    <updated>2016-08-01T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>scala的ide有不少，这里选择了eclipse</p>
<a id="more"></a>
<hr>
<h1 id="scala_eclipse_IDE安装">scala eclipse IDE安装</h1><p>有eclipse的，可以直接安装scala的插件就行了，这里安装整套ide环境。</p>
<h2 id="下载scala_eclipse_IDE和scala">下载scala eclipse IDE和scala</h2><p>目前最新版本4.4.1，scala版本2.11.8，我们下载对应的版本（顺便说一句：scala2+以上需要jdk1.7版本支持，如果使用的jdk1.6，可以下载scala1+版本）<br><strong>Download Scala IDE for Eclipse：</strong><br><a href="http://scala-ide.org/download/sdk.html" target="_blank" rel="external">http://scala-ide.org/download/sdk.html</a><br><strong>SCALA 2.11.8</strong><br><a href="http://www.scala-lang.org/download/2.11.8.html" target="_blank" rel="external">http://www.scala-lang.org/download/2.11.8.html</a></p>
<h2 id="安装">安装</h2><ol>
<li>确认安装了对应的jdk版本</li>
<li>Scala IDE for Eclipse，直接解压缩就行了</li>
<li>scala-2.11.8.msi 直接安装，next-&gt;next-&gt;ok<br>安装完成 cmd，输入scala -version验证一下<br><img src="/img/scala eclipse环境搭建/scala-version.PNG" alt="Alt text"></li>
</ol>
<p>以上就安装完了，很简单。</p>
<hr>
<h1 id="写一个hello_world">写一个hello world</h1><p>1.打开eclipse，新建一个scala project<br>2.在项目中新建一个scala object<br><img src="/img/scala eclipse环境搭建/scala project.PNG" alt="Alt text"><br>3.写一个main方法，输出hello world</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package com.test.gatling</span><br><span class="line"></span><br><span class="line">object test &#123;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(args: Array[String])</span>:</span> Unit = &#123;</span><br><span class="line">    println(<span class="string">"hello world"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.右键-&gt;run as-&gt;scala application<br><img src="/img/scala eclipse环境搭建/hello-world.PNG" alt="Alt text"></p>
<hr>
<h1 id="基础语法学习">基础语法学习</h1><p><a href="http://www.yiibai.com/scala/" target="_blank" rel="external">http://www.yiibai.com/scala/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>scala的ide有不少，这里选择了eclipse</p>]]>
    
    </summary>
    
      <category term="scala" scheme="http://tonylit.me/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[spring ibatis多数据源]]></title>
    <link href="http://tonylit.me/2016/07/28/spring%20ibatis%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    <id>http://tonylit.me/2016/07/28/spring ibatis多数据源/</id>
    <published>2016-07-28T03:37:27.000Z</published>
    <updated>2016-07-28T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>项目需要配置两个数据源（spring 3.0.5，ibatis2.3.4），查了一些资料，终于配置成功，在此记录一下<br><a id="more"></a></p>
<h1 id="ibatis多数据源配置">ibatis多数据源配置</h1><p>数据源采用jndi的方式，之前一个datasource的dao.xml配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!--DataSource --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"dataSource"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.jndi.JndiObjectFactoryBean"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"jndiName"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">value</span>&gt;</span>java:comp/env/jdbc/fds<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"sqlMapClient"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.orm.ibatis.SqlMapClientFactoryBean"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"configLocation"</span> <span class="attribute">value</span>=<span class="value">"classpath:context/dao/sql-map-config.xml"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"dataSource"</span> <span class="attribute">ref</span>=<span class="value">"dataSource"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"sqlMapClientTemplate"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.orm.ibatis.SqlMapClientTemplate"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"sqlMapClient"</span> <span class="attribute">ref</span>=<span class="value">"sqlMapClient"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>按照以上的配置，增加一个datasource就copy一份改改，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--DataSource --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"dataSource"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.jndi.JndiObjectFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"jndiName"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">value</span>&gt;</span>java:comp/env/jdbc/fds<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"sqlMapClient"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.orm.ibatis.SqlMapClientFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"configLocation"</span> <span class="attribute">value</span>=<span class="value">"classpath:context/dao/sql-map-config.xml"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"dataSource"</span> <span class="attribute">ref</span>=<span class="value">"dataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">      <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"sqlMapClientTemplate"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.orm.ibatis.SqlMapClientTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"sqlMapClient"</span> <span class="attribute">ref</span>=<span class="value">"sqlMapClient"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">     <span class="comment">&lt;!-- fks --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"fksDataSource"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.jndi.JndiObjectFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"jndiName"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">value</span>&gt;</span>java:comp/env/jdbc/fks<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"fksSqlMapClient"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.orm.ibatis.SqlMapClientFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"configLocation"</span> <span class="attribute">value</span>=<span class="value">"classpath:context/dao/sql-map-config-fks.xml"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"dataSource"</span> <span class="attribute">ref</span>=<span class="value">"fksDataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">  <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"fksSqlMapClientTemplate"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.orm.ibatis.SqlMapClientTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"sqlMapClient"</span> <span class="attribute">ref</span>=<span class="value">"fksSqlMapClient"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>不同的sqlMap放在对应的sql-map-config.xml中</p>
<h1 id="@Qualifier指定SqlMapClient">@Qualifier指定SqlMapClient</h1><p>dao层需要做简单处理，使用新的数据源需要 @Qualifier(“fksSqlMapClient”) 指定一下SqlMapClient即可</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">Repository</span></span><br><span class="line">public class <span class="type">FksAlarmlistDAOImpl</span> extends <span class="type">SqlMapClientDaoSupport</span> implements <span class="type">FksAlarmlistDAO</span> &#123;</span><br><span class="line">    @<span class="type">Autowired</span></span><br><span class="line">    @<span class="type">Qualifier</span>(<span class="string">"fksSqlMapClient"</span>)</span><br><span class="line">    public <span class="type">void</span> setSqlMapClientTemp(<span class="type">SqlMapClient</span> sqlMapClient) &#123;</span><br><span class="line">        setSqlMapClient(sqlMapClient);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * <span class="type">This</span> <span class="keyword">method</span> was generated by <span class="type">MyBatis</span> <span class="type">Generator</span>. <span class="type">This</span> <span class="keyword">method</span> corresponds to the database table fks_alarmlist</span><br><span class="line">     * </span><br><span class="line">     * @mbggenerated <span class="type">Thu</span> <span class="type">Jul</span> <span class="number">28</span> <span class="number">14</span>:<span class="number">43</span>:<span class="number">44</span> <span class="type">CST</span> <span class="number">2016</span></span><br><span class="line">     */</span><br><span class="line">    public <span class="type">FksAlarmlistDAOImpl</span>() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * <span class="type">This</span> <span class="keyword">method</span> was generated by <span class="type">MyBatis</span> <span class="type">Generator</span>. <span class="type">This</span> <span class="keyword">method</span> corresponds to the database table fks_alarmlist</span><br><span class="line">     * </span><br><span class="line">     * @mbggenerated <span class="type">Thu</span> <span class="type">Jul</span> <span class="number">28</span> <span class="number">14</span>:<span class="number">43</span>:<span class="number">44</span> <span class="type">CST</span> <span class="number">2016</span></span><br><span class="line">     */</span><br><span class="line">    public <span class="type">int</span> countByExample(<span class="type">FksAlarmlistExample</span> example) &#123;</span><br><span class="line">        <span class="type">Integer</span> count = (<span class="type">Integer</span>) getSqlMapClientTemplate().queryForObject(<span class="string">"fks_alarmlist.countByExample"</span>, example);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>项目需要配置两个数据源（spring 3.0.5，ibatis2.3.4），查了一些资料，终于配置成功，在此记录一下<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hbase单机安装与基础命令]]></title>
    <link href="http://tonylit.me/2016/07/21/hbase%E5%8D%95%E6%9C%BA%E5%AE%89%E8%A3%85%E4%B8%8E%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <id>http://tonylit.me/2016/07/21/hbase单机安装与基础命令/</id>
    <published>2016-07-21T03:37:27.000Z</published>
    <updated>2016-07-21T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>hbase单机安装与基础命令<br><strong>环境：</strong><br>Centos5.11<br>Jdk1.7<br>Hbase：1.2.2<br><a id="more"></a></p>
<h1 id="hbase下载">hbase下载</h1><p><a href="http://apache.fayea.com/hbase/" target="_blank" rel="external">http://apache.fayea.com/hbase/</a><br>这里下载的最新版1.2.2的，注意不要下载带有src的（源码）</p>
<h1 id="配置安装">配置安装</h1><p>1.放到机器上，解压缩，这里将其放在/app/目录下<br>2.配置hbase环境变量<br>修改/etc/profile文件增加环境变量</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HBASE_HOME=/app/hbase-<span class="number">1.2</span>.<span class="number">2</span></span><br><span class="line">export PATH=<span class="variable">$PATH</span>:<span class="variable">$HBASE</span>_HOME/bin</span><br></pre></td></tr></table></figure>
<p>记得：source /etc/profile<br>3.修改hbase目录下，/conf/hbase-env.sh</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> HBASE_MANAGES_ZK=<span class="literal">true</span></span><br><span class="line"><span class="keyword">export</span> JAVA_HOME=/opt/jdk1<span class="number">.7</span><span class="number">.0</span>_40/</span><br></pre></td></tr></table></figure>
<p>4.配置/conf/hbase-site.xml增加以下内容</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">value</span>&gt;</span>file:///app/hbase-1.2.2/hbase-tmp<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="启动hbase">启动hbase</h1><p>hbase/bin目录下：<br>start-hbase.sh</p>
<p>打开浏览器访问localhost:16010/master-status，可以看到hbase的一些状态信息</p>
<h1 id="hbase常用shell命令">hbase常用shell命令</h1><p>在/bin 目录下 执行  hbase shell 即可进入hbase命令行：</p>
<blockquote>
<p><strong>alter</strong>    修改列族（column family）模式<br><strong>count</strong>    统计表中行的数量<br><strong>create</strong>    创建表:create ‘member’,’member_id’,’address’,’info’<br><strong>describe</strong>    显示表相关的详细信息 describe member<br><strong>delete</strong>    删除指定对象的值（可以为表，行，列对应的值，另外也可以指定时间戳的值）<br><strong>deleteall    </strong>删除指定行的所有元素值<br><strong>disable</strong>    使表无效<br><strong>drop</strong>    删除表<br><strong>enable</strong>    使表有效<br><strong>exists</strong>    测试表是否存在<br><strong>exit    </strong>退出hbase shell<br><strong>get</strong>    获取行或单元（cell）的值 get ‘member’,’xueba’<br><strong>incr</strong>    增加指定表，行或列的值<br><strong>list</strong>    列出hbase中存在的所有表<br><strong>put</strong>    向指向的表单元添加值 put ‘member’,’xueba’,’info:age’,’25’<br><strong>tools</strong>    列出hbase所支持的工具<br><strong>scan</strong>    通过对表的扫描来获取对用的值<br><strong>status</strong>    返回hbase集群的状态信息<br><strong>shutdown</strong>    关闭hbase集群（与exit不同）<br><strong>truncate</strong>    重新创建指定表  truncate ‘member’<br><strong>version</strong>    返回hbase版本信息</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>hbase单机安装与基础命令<br><strong>环境：</strong><br>Centos5.11<br>Jdk1.7<br>Hbase：1.2.2<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker容器时间修改-通过时区偏移量]]></title>
    <link href="http://tonylit.me/2016/07/19/docker%E5%AE%B9%E5%99%A8%E6%97%B6%E9%97%B4%E4%BF%AE%E6%94%B9-%E9%80%9A%E8%BF%87%E6%97%B6%E5%8C%BA%E5%81%8F%E7%A7%BB%E9%87%8F/"/>
    <id>http://tonylit.me/2016/07/19/docker容器时间修改-通过时区偏移量/</id>
    <published>2016-07-19T03:37:27.000Z</published>
    <updated>2016-07-19T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>我们知道docker容器的时间使用的是宿主机内核的时间，没有做date namespace，所以修改docker容器时间的时候，同时修改了宿主机的时间，反之一样。<br>如果需要在容器内做时间修改，但是不影响其他容器，就比较困难。<br>but，我们可以通过修改时区的方式间接修改时间，但是有局限性，只能修改到24h之内的时间。<br><a id="more"></a><br>这边写了个脚本，date.sh<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> != <span class="number">2</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">         <span class="built_in">echo</span> <span class="string">"Please input two parameter,like  '2016-05-20 12:00' "</span></span><br><span class="line">         <span class="built_in">exit</span> <span class="number">200</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#check /etc/profile exits 'export TZ' environment,if exits ,delete</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">checkProfile</span></span>()&#123;</span><br><span class="line">  <span class="built_in">return</span>Str=`grep -ri <span class="string">'export TZ'</span> /etc/profile`</span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$returnStr</span>"</span> !=  <span class="string">""</span>  ]</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">     sed -i <span class="operator">-e</span> <span class="string">'/export TZ/d'</span>  /etc/profile</span><br><span class="line">       </span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line">checkProfile</span><br><span class="line"><span class="comment">#check time format</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">isValidDate</span></span>()&#123;  </span><br><span class="line">    date <span class="operator">-d</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="string">"+%F"</span>|grep -q <span class="string">"<span class="variable">$1</span>"</span> <span class="number">2</span>&gt;/dev/null </span><br><span class="line">    <span class="keyword">if</span> [ $? = <span class="number">0</span> ]; <span class="keyword">then</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"input:"</span> <span class="variable">$1</span> <span class="variable">$2</span> </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Time format is not correct ,please input like '2016-05-20 12:00' "</span> </span><br><span class="line">    <span class="keyword">fi</span>  </span><br><span class="line">&#125;</span><br><span class="line">isValidDate <span class="variable">$1</span> <span class="variable">$2</span></span><br><span class="line">CURTIME=`date <span class="string">"+%Y-%m-%d %H:%M"</span> `;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"now:"</span> <span class="variable">$CURTIME</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">timeExport</span></span>()&#123;</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$2</span>"</span> == <span class="number">1</span> ]</span><br><span class="line">     <span class="keyword">then</span></span><br><span class="line">     timeFormat=`awk <span class="string">'BEGIN&#123;printf "%.2f\n",'</span><span class="variable">$1</span><span class="string">'/3600&#125;'</span>`</span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$1</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$timeFormat</span></span><br><span class="line">     hour=`<span class="built_in">echo</span> <span class="variable">$timeFormat</span>|awk -F <span class="string">'.'</span> <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line">     mins=`<span class="built_in">echo</span> <span class="variable">$timeFormat</span>|awk -F <span class="string">'.'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">     minm=`awk <span class="string">'BEGIN&#123;printf "%.0f\n",0.'</span><span class="variable">$mins</span><span class="string">'*60&#125;'</span>`</span><br><span class="line">     timeRetrunHour=`expr <span class="variable">$hour</span> + <span class="number">8</span>`</span><br><span class="line">      </span><br><span class="line">     <span class="comment">###分钟计算</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"input min:"</span><span class="variable">$3</span></span><br><span class="line">     inputmin=`<span class="built_in">echo</span> <span class="variable">$3</span>|awk -F <span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">     nowmin=`date |awk <span class="string">'&#123;print $4&#125;'</span>|awk -F <span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$nowmin</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$inputmin</span></span><br><span class="line">     <span class="keyword">if</span> [ <span class="string">"<span class="variable">$nowmin</span>"</span> <span class="operator">-gt</span> <span class="string">"<span class="variable">$inputmin</span>"</span> ]</span><br><span class="line">      <span class="keyword">then</span> </span><br><span class="line">       <span class="built_in">let</span> hour=<span class="variable">$hour</span>-<span class="number">1</span></span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line">       </span><br><span class="line">     timeRetrunTime=<span class="variable">$timeRetrunHour</span>:<span class="variable">$minm</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"export TZ=RPC-<span class="variable">$timeRetrunTime</span>"</span>     </span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">       <span class="keyword">if</span> [ <span class="string">"<span class="variable">$2</span>"</span> == <span class="number">2</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">     timeFormat=`awk <span class="string">'BEGIN&#123;printf "%.2f\n",'</span><span class="variable">$1</span><span class="string">'/3600&#125;'</span>`</span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$1</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$timeFormat</span></span><br><span class="line">     hour=`<span class="built_in">echo</span> <span class="variable">$timeFormat</span>|awk -F <span class="string">'.'</span> <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line">     mins=`<span class="built_in">echo</span> <span class="variable">$timeFormat</span>|awk -F <span class="string">'.'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">     minm=`awk <span class="string">'BEGIN&#123;printf "%.0f\n",0.'</span><span class="variable">$mins</span><span class="string">'*60&#125;'</span>`</span><br><span class="line">     <span class="built_in">let</span> timeRetrunHour=<span class="variable">$hour</span>-<span class="number">8</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$timeRetrunHour</span></span><br><span class="line">          <span class="comment">###分钟计算</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"input min:"</span><span class="variable">$3</span></span><br><span class="line">     inputmin=`<span class="built_in">echo</span> <span class="variable">$3</span>|awk -F <span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">     nowmin=`date |awk <span class="string">'&#123;print $4&#125;'</span>|awk -F <span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$nowmin</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$inputmin</span></span><br><span class="line">     <span class="keyword">if</span> [ <span class="string">"<span class="variable">$nowmin</span>"</span> <span class="operator">-gt</span> <span class="string">"<span class="variable">$inputmin</span>"</span> ]</span><br><span class="line">      <span class="keyword">then</span> </span><br><span class="line">       <span class="built_in">let</span> hour=<span class="variable">$hour</span>-<span class="number">1</span></span><br><span class="line">     <span class="keyword">fi</span> </span><br><span class="line">     timeRetrunTime=<span class="variable">$timeRetrunHour</span>:<span class="variable">$minm</span></span><br><span class="line">          <span class="keyword">if</span> [ <span class="string">"<span class="variable">$timeRetrunHour</span>"</span> <span class="operator">-lt</span> <span class="number">0</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">           <span class="built_in">echo</span> <span class="string">"export TZ=RPC-<span class="variable">$&#123;timeRetrunTime#-&#125;</span>"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">           <span class="built_in">echo</span> <span class="string">"export TZ=RPC+<span class="variable">$timeRetrunTime</span>"</span></span><br><span class="line">         <span class="keyword">fi</span></span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Sys_data=`date <span class="operator">-d</span>  <span class="string">"<span class="variable">$CURTIME</span>"</span> +%s`    <span class="comment">#把当前时间转化为Linux时间</span></span><br><span class="line">In_data=`date <span class="operator">-d</span>  <span class="string">"<span class="variable">$1</span> <span class="variable">$2</span>"</span> +%s`</span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$In_data</span> -ge <span class="variable">$Sys_data</span> ]</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">    interval=`expr <span class="variable">$In_data</span> - <span class="variable">$Sys_data</span>`  <span class="comment">#计算2个时间的差</span></span><br><span class="line">    timeExport <span class="variable">$interval</span> <span class="number">1</span> <span class="variable">$2</span></span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">    interval=`expr  <span class="variable">$Sys_data</span> - <span class="variable">$In_data</span>`  </span><br><span class="line">    timeExport <span class="variable">$interval</span> <span class="number">2</span> <span class="variable">$2</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$interval</span></span><br></pre></td></tr></table></figure></p>
<p>然后手动执行输出的结果：<br>export TZ=xxxx</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我们知道docker容器的时间使用的是宿主机内核的时间，没有做date namespace，所以修改docker容器时间的时候，同时修改了宿主机的时间，反之一样。<br>如果需要在容器内做时间修改，但是不影响其他容器，就比较困难。<br>but，我们可以通过修改时区的方式间接修改时间，但是有局限性，只能修改到24h之内的时间。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker crontab不执行解决方法]]></title>
    <link href="http://tonylit.me/2016/07/19/docker%20crontab%E4%B8%8D%E6%89%A7%E8%A1%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://tonylit.me/2016/07/19/docker crontab不执行解决方法/</id>
    <published>2016-07-19T03:37:27.000Z</published>
    <updated>2016-07-19T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>centos镜像，在该镜像中没有安装crond，通过yum安装成功后，crontab没有生效。</p>
<a id="more"></a>
<h1 id="解决办法：">解决办法：</h1><p>修改/etc/pam.d/crond文件，将其中的required改为sufficient即可。</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The PAM configuration file for the cron daemon</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">auth       sufficient pam_env.so</span><br><span class="line">auth       sufficient   pam_rootok.so</span><br><span class="line">auth       <span class="built_in">include</span>    <span class="keyword">system</span>-auth</span><br><span class="line">account    sufficient   pam_access.so</span><br><span class="line">account    <span class="built_in">include</span>    <span class="keyword">system</span>-auth</span><br><span class="line">session    sufficient   pam_loginuid.so</span><br><span class="line">session    <span class="built_in">include</span>    <span class="keyword">system</span>-auth</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>centos镜像，在该镜像中没有安装crond，通过yum安装成功后，crontab没有生效。</p>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jmagick安装-jdk版本问题]]></title>
    <link href="http://tonylit.me/2016/07/14/jmagick%E5%AE%89%E8%A3%85jdk%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86/"/>
    <id>http://tonylit.me/2016/07/14/jmagick安装jdk报错处理/</id>
    <published>2016-07-14T03:37:27.000Z</published>
    <updated>2016-07-14T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p> 这两天一直在处理jmagick图片压缩的问题，各种莫名其妙的jmagick版本不兼容、jdk不兼容。<br> 这里总结一下：<br><a id="more"></a></p>
<h1 id="jmagick和Imagick安装">jmagick和Imagick安装</h1><p>1.环境：centos5.11， jdk1.6<br>2.先装imagick，再装jmagick,jmagick和Imagick的版本一定要一个版本，不然可能会报no scale to image，确认安装了gcc  gcc-c++<br>jmagick安装包汇总<br><a href="http://pan.baidu.com/s/1i5FFUCH" target="_blank" rel="external">http://pan.baidu.com/s/1i5FFUCH</a></p>
<p>安装脚本如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#! /bin/bash</span><br><span class="line"></span></span><br><span class="line">mkdir /home/soft/</span><br><span class="line"><span class="built_in">cd</span> /home/soft/</span><br><span class="line"><span class="comment">##下载好jmagick.jar</span></span><br><span class="line"><span class="comment">##http://pan.baidu.com/s/1i5FFUCH</span></span><br><span class="line">tar -xvf jmagick.tar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">yum install libpng* -y</span><br><span class="line">yum install -y perl-devel perl-CPAN</span><br><span class="line"><span class="built_in">cd</span> support</span><br><span class="line"></span><br><span class="line">tar -xvf freetype-<span class="number">2.3</span>.<span class="number">11</span>.tar.gz </span><br><span class="line"><span class="built_in">cd</span> freetype-<span class="number">2.3</span>.<span class="number">11</span></span><br><span class="line"> ./configure &amp;&amp;make &amp;&amp;make install</span><br><span class="line"><span class="keyword">if</span> [ $? <span class="operator">-gt</span> <span class="number">0</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">unzip jasper-<span class="number">1.900</span>.<span class="number">1</span>.zip</span><br><span class="line"><span class="built_in">cd</span> jasper-<span class="number">1.900</span>.<span class="number">1</span></span><br><span class="line"><span class="built_in">export</span> CFLAGS=<span class="string">"-O2 -fPIC"</span>  &amp;&amp;  ./configure  &amp;&amp;make &amp;&amp;make install</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? <span class="operator">-gt</span> <span class="number">0</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tar -xvf jpegsrc.v7.tar.gz </span><br><span class="line"><span class="built_in">cd</span> jpeg-<span class="number">7</span></span><br><span class="line"> ./configure &amp;&amp;make &amp;&amp;make install</span><br><span class="line"> <span class="keyword">if</span> [ $? <span class="operator">-gt</span> <span class="number">0</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> <span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment">## tar -xvf libpng-1.4.0.tar.gz </span></span><br><span class="line"><span class="comment"># cd libpng-1.4.0</span></span><br><span class="line"><span class="comment">#  ./configure  &amp;&amp;make &amp;&amp;make install </span></span><br><span class="line"><span class="comment">#  if [ $? -gt 0 ];then</span></span><br><span class="line"><span class="comment">#exit</span></span><br><span class="line"><span class="comment">#fi</span></span><br><span class="line"><span class="comment"># cd ..</span></span><br><span class="line"></span><br><span class="line">tar -xvf tiff-<span class="number">3.9</span>.<span class="number">1</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> tiff-<span class="number">3.9</span>.<span class="number">1</span></span><br><span class="line">./configure  &amp;&amp;make &amp;&amp;make install</span><br><span class="line"><span class="keyword">if</span> [ $? <span class="operator">-gt</span> <span class="number">0</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> <span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"> tar -xvf zlib-<span class="number">1.2</span>.<span class="number">3</span>.tar.gz </span><br><span class="line"> <span class="built_in">cd</span> zlib-<span class="number">1.2</span>.<span class="number">3</span></span><br><span class="line">./configure  &amp;&amp;make &amp;&amp;make install</span><br><span class="line"><span class="keyword">if</span> [ $? <span class="operator">-gt</span> <span class="number">0</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> <span class="built_in">cd</span> ../..</span><br><span class="line"></span><br><span class="line"> tar -xvf  ImageMagick-<span class="number">6.4</span>.<span class="number">0</span>-<span class="number">0</span>.tar.gz </span><br><span class="line"> <span class="built_in">cd</span> ImageMagick-<span class="number">6.4</span>.<span class="number">0</span></span><br><span class="line"> ./configure  --with-quantum-depth=<span class="number">8</span>   --enable-share --without-x&amp;&amp; make &amp;&amp;make install</span><br><span class="line"> <span class="keyword">if</span> [ $? <span class="operator">-gt</span> <span class="number">0</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> <span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> tar -xvf jmagick-<span class="number">6.4</span>.<span class="number">0</span>-src.tar.gz </span><br><span class="line"> <span class="built_in">cd</span> <span class="number">6.4</span>.<span class="number">0</span> </span><br><span class="line">  ./configure --with-java-home=/opt/jdk1.<span class="number">6.0</span>_14/&amp;&amp;make &amp;&amp;make install </span><br><span class="line">  <span class="keyword">if</span> [ $? <span class="operator">-gt</span> <span class="number">0</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">cp lib/*.jar  <span class="variable">$JAVA_HOME</span>/jre/lib/ext/</span><br><span class="line">line=$(cat /etc/profile|wc <span class="operator">-l</span>) &amp;&amp; line1=$(( <span class="variable">$line</span> - <span class="number">1</span>))&amp;&amp; sed  -i  <span class="string">"<span class="variable">$line1</span> i LD_LIBRARY_PATH=/usr/local/lib"</span> /etc/profile &amp;&amp;  <span class="built_in">source</span> /etc/profile &amp;&amp; <span class="built_in">echo</span>  <span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"></span><br><span class="line">ln <span class="operator">-s</span>  /usr/<span class="built_in">local</span>/lib/libjpeg.so.<span class="number">7</span> /usr/lib64/libjpeg.so.<span class="number">62</span></span><br></pre></td></tr></table></figure>
<p>OK，其实按照上面的脚本可以一键安装，基本上没问题，<br>哎…..<br>由于当时脚本里面没有写jdk的环境变量，而且在做docker镜像的时候dockerfile中设置了env=jdk1.7，在jmagick编译的时候即使指定了<br>./configure –with-java-home=/opt/jdk1.6.0_14/，也没用，编译出来的jar包还是1.7的，而且jar包比较糊弄人~~</p>
<h1 id="问题处理">问题处理</h1><p>按照上面的脚本安装了jmagick，出现了如下坑爹报错：<br><img src="/img/jmagick/major51-error.PNG" alt="Alt text"></p>
<p>可以看到是jdk版本的问题，项目用的jdk1.6，但是jmagick是1.7的<br>OK，我们把jmagick-6.4.0.jar拿出来看看<br>打开jar包，检查MANIFEST.MF文件<br><img src="/img/jmagick/jar-1.6.PNG" alt="Alt text"></p>
<p>疑~，是1.6的啊，没有问题，怎么回事~~<br>再查看class文件版本<br><img src="/img/jmagick/major51.PNG" alt="Alt text"></p>
<p>看到这边major version:51跟MANIFEST.MF中的jdk1.6不对应。<br>赶紧修改安装脚本，加上jdk环境变量</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/jdk1.<span class="number">6.0</span>_14</span><br><span class="line">export CLASSPATH=<span class="variable">$JAVA_HOME</span>/lib/tools<span class="class">.jar</span>:<span class="variable">$JAVA_HOME</span>/lib/<span class="tag">dt</span><span class="class">.jar</span>:<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JAVA_HOME</span>/jre/lib:</span><br><span class="line"><span class="id">#export</span> LANG=en_US<span class="class">.UTF-8</span></span><br><span class="line">export PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/lib:/usr/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>
<p>重新安装了一遍，没问题了！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p> 这两天一直在处理jmagick图片压缩的问题，各种莫名其妙的jmagick版本不兼容、jdk不兼容。<br> 这里总结一下：<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[修改docker loop-lvm存储大小和位置]]></title>
    <link href="http://tonylit.me/2016/07/04/%E4%BF%AE%E6%94%B9docker%20loop-lvm%E5%AD%98%E5%82%A8%E5%A4%A7%E5%B0%8F%E5%92%8C%E4%BD%8D%E7%BD%AE/"/>
    <id>http://tonylit.me/2016/07/04/修改docker loop-lvm存储大小和位置/</id>
    <published>2016-07-04T03:37:27.000Z</published>
    <updated>2016-07-04T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>刚开始使用docker的时候没有注意系统分区，根目录磁盘分小了，分了50G。<br>centos7 docker默认使用的devicemapper loop-lvm存储，默认大小是100G，导致容器多的时候存储不够。<br><a id="more"></a></p>
<h1 id="存储需求">存储需求</h1><p>1.增大devicemapper loop data的存储大小<br>2.把存储的位置放到/home目录下</p>
<h1 id="解决方案">解决方案</h1><p>很简单，修改docker的启动参数，重启即可<br>修改/lib/systemd/system/docker.service</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/docker daemon --graph=/home/lib/docker --storage-driver=devicemapper --storage-opt dm.fs=ext4 \</span><br><span class="line">                                  --storage-opt dm.loopdatasize=<span class="number">100</span>G --storage-opt dm.loopmetadatasize=<span class="number">8</span>G \</span><br><span class="line">                                  --insecure-registry=docker.vemic.com:<span class="number">5000</span> -H <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">2375</span> -H fd:<span class="comment">//</span></span><br></pre></td></tr></table></figure>
<p>重启docker，ok了<br><img src="/img/devicemapper.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>刚开始使用docker的时候没有注意系统分区，根目录磁盘分小了，分了50G。<br>centos7 docker默认使用的devicemapper loop-lvm存储，默认大小是100G，导致容器多的时候存储不够。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[spring aop-AspectJ注解方式]]></title>
    <link href="http://tonylit.me/2016/06/29/spring%20aop-AspectJ%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F/"/>
    <id>http://tonylit.me/2016/06/29/spring aop-AspectJ注解方式/</id>
    <published>2016-06-29T03:37:27.000Z</published>
    <updated>2016-06-29T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>项目中没有用到spring的aop，最近在写监控逻辑的时候，发现要写大量的日志逻辑，太烦！<br>决定用一用aop，顺便学习~</p>
<a id="more"></a>
<h1 id="术语">术语</h1><p>说实话，这些术语开始看的时候根本看不懂，先了解下，写个aop的demo后再回头看看就很好理解了。</p>
<blockquote>
<p>切面(aspect)：用来切插业务方法的类。<br>连接点(joinpoint)：是切面类和业务类的连接点，其实就是封装了业务方法的一些基本属性，作为通知的参数来解析。<br>通知(advice)：在切面类中，声明对业务方法做额外处理的方法。<br>切入点(pointcut)：业务类中指定的方法，作为切面切入的点。其实就是指定某个方法作为切面切的地方。<br>目标对象(target object)：被代理对象。<br>AOP代理(aop proxy)：代理对象。</p>
</blockquote>
<p>AOP通知类型：</p>
<blockquote>
<p>前置通知(before advice)：在切入点之前执行。<br>后置通知(after returning advice)：在切入点执行完成后，执行通知。<br>环绕通知(around advice)：包围切入点，调用方法前后完成自定义行为。<br>异常通知(after throwing advice)：在切入点抛出异常后，执行通知</p>
</blockquote>
<hr>
<h1 id="Spring_AOP环境">Spring AOP环境</h1><p>使用Spring AOP需要在项目中导入除了spring jar包之外，还有aspectjweaver.jar，aopalliance.jar ，asm.jar 和cglib.jar</p>
<hr>
<h1 id="AspectJ注解方式实例">AspectJ注解方式实例</h1><p>比较常用的是xml和注解的方式，注解的优劣势不提，用起来很方便，可读性更好，写起来也顺手。<br>这里写了个demo~</p>
<hr>
<h2 id="spring配置文件配置aop">spring配置文件配置aop</h2><p>在配置文件中增加aop的支持：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 启动对@AspectJ注解的支持 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">aop:aspectj-autoproxy</span> <span class="attribute">proxy-target-class</span>=<span class="value">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>最好是放在DispatcherServlet下面的servlet.xml中，不然有可能会出现问题。我这里是配在context.xml中的，还好没出错。<br><strong>web.xml配置：</strong><br><img src="/img/apring-aop/webxml.PNG" alt="Alt text"><br><strong>context.xml配置：</strong><br><img src="/img/apring-aop/contextxml.PNG" alt="Alt text"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   <span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span> <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">    <span class="attribute">xmlns:context</span>=<span class="value">"http://www.springframework.org/schema/context"</span> <span class="attribute">xmlns:aop</span>=<span class="value">"http://www.springframework.org/schema/aop"</span></span><br><span class="line">    <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span><br><span class="line">      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</span><br><span class="line">      http://www.springframework.org/schema/aop     </span><br><span class="line">      http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">context:annotation-config</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">context:property-placeholder</span> <span class="attribute">location</span>=<span class="value">"classpath:context/properties/context.properties"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">context:component-scan</span> <span class="attribute">base-package</span>=<span class="value">"com.focustech.fds.biz"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">import</span> <span class="attribute">resource</span>=<span class="value">"classpath:context/dao/dao.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">import</span> <span class="attribute">resource</span>=<span class="value">"classpath:context/quartz/quartz.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">import</span> <span class="attribute">resource</span>=<span class="value">"classpath:context/ffs/ffs.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!-- 启动对@AspectJ注解的支持 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">aop:aspectj-autoproxy</span> <span class="attribute">proxy-target-class</span>=<span class="value">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意头部的aop声明，不能缺少。</p>
<h2 id="项目结构">项目结构</h2><p>maven项目，切面类和业务类都放在fds-biz子项目中，测试类放在fds-web子项目<br><img src="/img/apring-aop/项目结构.PNG" alt="Alt text"><br><img src="/img/apring-aop/测试类.PNG" alt="Alt text"><br><img src="/img/apring-aop/项目结构2.PNG" alt="Alt text"></p>
<h2 id="新增切面类">新增切面类</h2><p>新增AspectAdvice类：</p>
<figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.focustech.fds.biz.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterThrowing;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * AspectAdvice.java</span><br><span class="line"> *</span><br><span class="line"> * @author lit</span><br><span class="line"> */</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 定义切面</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@Controller</span></span><br><span class="line"><span class="keyword">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> AspectAdvice &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * </span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> AspectAdvice() &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"construct"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 指定切入点匹配表达式，注意它是以方法的形式进行声明的。</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">@Pointcut</span>(<span class="string">"execution(* com.focustech.fds.biz.aop.*.*(..))"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> anyMethod() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 前置通知</span><br><span class="line">     * </span><br><span class="line">     * @param jp</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">@Before</span>(<span class="string">"anyMethod()"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> doBefore(JoinPoint joinPoint) &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"-----beforeAdvice().invoke-----"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">" 此处意在执行核心业务逻辑前，做一些安全性的判断等等"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">" 可通过joinPoint来获取所需要的内容"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"-----End of beforeAdvice()------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * After 核心业务逻辑退出后（包括正常执行结束和异常退出），执行此Advice</span><br><span class="line">     * </span><br><span class="line">     * @param joinPoint</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">@After</span>(<span class="string">"anyMethod()"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> afterAdvice(JoinPoint joinPoint) &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"-----afterAdvice().invoke-----"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">" 此处意在执行核心业务逻辑之后，做一些日志记录操作等等"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">" 可通过joinPoint来获取所需要的内容"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"-----End of afterAdvice()------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Around 手动控制调用核心业务逻辑，以及调用前和调用后的处理, 注意：当核心业务抛异常后，立即退出，转向AfterAdvice 执行完AfterAdvice，再转到ThrowingAdvice</span><br><span class="line">     * </span><br><span class="line">     * @param pjp</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Throwable</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">@Around</span>(<span class="string">"anyMethod()"</span>)</span><br><span class="line">    <span class="keyword">public</span> Object aroundAdvice(ProceedingJoinPoint pjp) throws Throwable &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"-----aroundAdvice().invoke-----"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">" 此处可以做类似于Before Advice的事情"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用核心逻辑</span></span><br><span class="line">        Object retVal = pjp.proceed();</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">" 此处可以做类似于After Advice的事情"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"-----End of aroundAdvice()------"</span>);</span><br><span class="line">        <span class="keyword">return</span> retVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AfterReturning 核心业务逻辑调用正常退出后，不管是否有返回值，正常退出后，均执行此Advice</span><br><span class="line">     * </span><br><span class="line">     * @param joinPoint</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">@AfterReturning</span>(<span class="string">"anyMethod()"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> afterReturningAdvice(JoinPoint joinPoint) &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"-----afterReturningAdvice().invoke-----"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">" 此处可以对返回值做进一步处理"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">" 可通过joinPoint来获取所需要的内容"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"-----End of afterReturningAdvice()------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 核心业务逻辑调用异常退出后，执行此Advice，处理错误信息 注意：执行顺序在Around Advice之后</span><br><span class="line">     * </span><br><span class="line">     * @param joinPoint</span><br><span class="line">     * @param ex</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">@AfterThrowing</span>(<span class="string">"anyMethod()"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> afterThrowingAdvice(JoinPoint joinPoint) &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"-----afterThrowingAdvice().invoke-----"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">" 此处意在执行核心业务逻辑出错时，捕获异常，并可做一些日志记录操作等等"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">" 可通过joinPoint来获取所需要的内容"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"-----End of afterThrowingAdvice()------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="业务类">业务类</h2><p>新增Business类：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.focustech.fds.biz.aop;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="keyword">Business</span>.java</span><br><span class="line"> <span class="keyword">*</span> </span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@author lit</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line"><span class="comment">@Service</span></span><br><span class="line">public class <span class="keyword">Business</span> &#123;</span><br><span class="line"></span><br><span class="line">    /<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">     <span class="keyword">*</span> 切入点</span><br><span class="line">     <span class="keyword">*</span>/</span><br><span class="line">    public void log() &#123;</span><br><span class="line">        System.out.println(<span class="string">"==========调用切入点："</span> + <span class="string">"我是切入点！===========\n"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="测试类">测试类</h2><p>test类：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">@<span class="type">Autowired</span></span><br><span class="line"> private <span class="type">Business</span> business;</span><br><span class="line"></span><br><span class="line"> @<span class="type">RequestMapping</span>(value = <span class="string">"/360/aop"</span>, <span class="keyword">method</span> = <span class="type">RequestMethod</span>.<span class="type">GET</span>)</span><br><span class="line"> public <span class="type">void</span> aop(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> res) &#123;</span><br><span class="line">     business.log();</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         res.getWriter().write(<span class="string">"OK"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     catch (<span class="type">IOException</span> ex) &#123;</span><br><span class="line">         ex.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="执行结果：">执行结果：</h2><p><img src="/img/apring-aop/result.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>项目中没有用到spring的aop，最近在写监控逻辑的时候，发现要写大量的日志逻辑，太烦！<br>决定用一用aop，顺便学习~</p>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我骑夺冠]]></title>
    <link href="http://tonylit.me/2016/06/27/%E9%AA%91%E5%A3%AB%E5%A4%BA%E5%86%A0/"/>
    <id>http://tonylit.me/2016/06/27/骑士夺冠/</id>
    <published>2016-06-27T03:37:27.000Z</published>
    <updated>2016-06-27T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>2015-2016赛季，nba总冠军，克利夫兰骑士。<br>NBA历史上没有一支球队，在总决赛1-3落后的情况下完成逆袭夺冠。<br>骑士队缔造了联盟的历史先例.<br>73-9的勇士成最大背景。</p>
<p>直接看图吧<br><img src="/img/nba/c.jpg" alt="Alt text"></p>
<a id="more"></a>
<h1 id="常规赛和季后赛荣誉统计：">常规赛和季后赛荣誉统计：</h1><p><img src="/img/nba/常规赛.png" alt="Alt text"><br><img src="/img/nba/季后赛.jpg" alt="Alt text"></p>
<h1 id="我詹帅图：">我詹帅图：</h1><p><img src="/img/nba/2016-05-22 135235.jpg" alt="Alt text"><br><img src="/img/nba/2016-05-07 160636.jpg" alt="Alt text"><br><img src="/img/nba/2016-05-07 162947.jpg" alt="Alt text"><br><img src="/img/nba/2016-06-26 095813.jpg" alt="Alt text"></p>
<h1 id="我詹荣誉：">我詹荣誉：</h1><p><img src="/img/nba/2016-06-22 122552.jpg" alt="Alt text"></p>
<h1 id="各天神">各天神</h1><p><img src="/img/nba/2016-06-26 183422.jpg" alt="Alt text"><br><img src="/img/nba/2016-06-26 183448.jpg" alt="Alt text"><br><img src="/img/nba/2016-06-26 183425.jpg" alt="Alt text"><br><img src="/img/nba/2016-06-26 183444.jpg" alt="Alt text"><br><img src="/img/nba/2016-06-26 183451.jpg" alt="Alt text"><br><img src="/img/nba/2016-06-26 183459.jpg" alt="Alt text"><br><img src="/img/nba/2016-06-26 183456.jpg" alt="Alt text"><br><img src="/img/nba/2016-06-26 183453.jpg" alt="Alt text"><br><img src="/img/nba/2016-06-26 183505.jpg" alt="Alt text"><br><img src="/img/nba/2016-06-26 183508.jpg" alt="Alt text"><br><img src="/img/nba/2016-06-26 183511.jpg" alt="Alt text"><br><img src="/img/nba/2016-06-26 183502.jpg" alt="Alt text"><br><img src="/img/nba/2016-06-26 183514.jpg" alt="Alt text"><br><img src="/img/nba/2016-06-26 183516.jpg" alt="Alt text"><br><img src="/img/nba/2016-06-26 183519.jpg" alt="Alt text"><br><img src="/img/nba/2016-06-26 183522.jpg" alt="Alt text"><br><img src="/img/nba/2016-06-26 183524.jpg" alt="Alt text"><br><img src="/img/nba/2016-06-26 183527.jpg" alt="Alt text"><br><img src="/img/nba/2016-06-26 183529.jpg" alt="Alt text"><br><img src="/img/nba/2016-06-26 183532.jpg" alt="Alt text"><br><img src="/img/nba/2016-06-26 183535.jpg" alt="Alt text"><br><img src="/img/nba/2016-06-26 183537.jpg" alt="Alt text"><br><img src="/img/nba/2016-06-26 183540.jpg" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>2015-2016赛季，nba总冠军，克利夫兰骑士。<br>NBA历史上没有一支球队，在总决赛1-3落后的情况下完成逆袭夺冠。<br>骑士队缔造了联盟的历史先例.<br>73-9的勇士成最大背景。</p>
<p>直接看图吧<br><img src="/img/nba/c.jpg" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="lebron james" scheme="http://tonylit.me/tags/lebron-james/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker java时区设置]]></title>
    <link href="http://tonylit.me/2016/06/14/docker%20java%E6%97%B6%E5%8C%BA%E8%AE%BE%E7%BD%AE/"/>
    <id>http://tonylit.me/2016/06/14/docker java时区设置/</id>
    <published>2016-06-14T03:37:27.000Z</published>
    <updated>2016-06-14T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>docker启动的时候通过-v /etc/localtime:/etc/localtime:ro ，<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  -v  <span class="regexp">/etc/</span><span class="string">localtime:</span><span class="regexp">/etc/</span><span class="string">localtime:</span>ro  focustest-centos5  <span class="regexp">/opt/</span>ActivePython-<span class="number">2.7</span><span class="regexp">/bin/</span>supervisord -c <span class="regexp">/opt/</span>supervisor/supervisord.conf &amp;</span><br></pre></td></tr></table></figure></p>
<p>容器内的系统时间确实跟宿主机的一样了，</p>
<p>但是在docker中启动resin，发现resin日志里的时间和系统时间差8个小时…..<br><img src="/img/time-8.PNG" alt="Alt text"></p>
<a id="more"></a>
<h1 id="解决方法">解决方法</h1><h2 id="第一种">第一种</h2><p>在resin的启动脚本中加入TZ环境变量：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TZ=<span class="string">"Asia/Shanghai"</span></span><br><span class="line"><span class="built_in">export</span> TZ</span><br></pre></td></tr></table></figure>
<h2 id="第二种">第二种</h2><p>java启动参数中加上 -Duser.timezone=GMT+08</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAV<span class="built_in">A_ARGS</span>=<span class="string">"-J-Djava.util.logging.manager=com.caucho.log.LogManagerImpl  -J-Dfile.encoding=GBK -Duser.timezone=GMT+08  -J-d64 -J-Djava.awt.headless=true -Xms1024m -Xmx1024m -Xss2m -J-XX:PermSize=256M -J-XX:MaxPermSize=512M "</span></span><br></pre></td></tr></table></figure>
<p>另外，网上很多说设置clock的、timezone的，都试过了，不行~<br>还有，百度真是搜不到东西，用bing了~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>docker启动的时候通过-v /etc/localtime:/etc/localtime:ro ，<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  -v  <span class="regexp">/etc/</span><span class="string">localtime:</span><span class="regexp">/etc/</span><span class="string">localtime:</span>ro  focustest-centos5  <span class="regexp">/opt/</span>ActivePython-<span class="number">2.7</span><span class="regexp">/bin/</span>supervisord -c <span class="regexp">/opt/</span>supervisor/supervisord.conf &amp;</span><br></pre></td></tr></table></figure></p>
<p>容器内的系统时间确实跟宿主机的一样了，</p>
<p>但是在docker中启动resin，发现resin日志里的时间和系统时间差8个小时…..<br><img src="/img/time-8.PNG" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux swap解读]]></title>
    <link href="http://tonylit.me/2016/06/06/swap%E8%A7%A3%E8%AF%BB/"/>
    <id>http://tonylit.me/2016/06/06/swap解读/</id>
    <published>2016-06-06T03:37:27.000Z</published>
    <updated>2016-06-06T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>之前遇到过线上swap导致io频繁的问题，当时运维人员调整的swappiness参数，解决了问题。<br>一直对swap一知半解，今天看到公众号推送一篇关于swap的好文章，<br>主要内容：<strong>swap、swappiness及kswapd原理，swap分区优先级</strong><br>在此转载一下。<br>【转自】<a href="http://mp.weixin.qq.com/s?__biz=MzA4Nzg5Nzc5OA==&amp;mid=2651660097&amp;idx=1&amp;sn=a3d38e3af2c9d8d431c46fe7680b428d&amp;scene=0#wechat_redirect" target="_blank" rel="external">Linux SWAP 深度解读</a><br><a id="more"></a></p>
<h1 id="概述">概述</h1><p>本文讨论的swap基于Linux4.4内核代码。Linux内存管理是一套非常复杂的系统，而swap只是其中一个很小的处理逻辑。<br>希望本文能让读者了解Linux对swap的使用大概是什么样子。阅读完本文，应该可以帮你解决以下问题：</p>
<blockquote>
<p>1、swap到底是干嘛的？<br>2、swappiness到底是用来调节什么的？<br>3、kswapd什么时候会进行swap操作？<br>4、什么是内存水位标记？<br>5、swap分区的优先级（priority）有啥用？</p>
</blockquote>
<h1 id="1、什么是SWAP，到底是干嘛的？">1、什么是SWAP，到底是干嘛的？</h1><p>我们一般所说的swap，指的是一个交换分区或文件。在Linux上可以使用swapon -s命令查看当前系统上正在使用的交换空间有哪些，以及相关信息：<br><img src="/img/swap解读/swapon.PNG" alt="Alt text"><br>从功能上讲，交换分区主要是在内存不够用的时候，将部分内存上的数据交换到swap空间上，以便让系统不会因内存不够用而导致oom或者更致命的情况出现。</p>
<p>所以，当内存使用存在压力，开始触发内存回收的行为时，就可能会使用swap空间。</p>
<p>内核对swap的使用实际上是跟内存回收行为紧密结合的。那么关于内存回收和swap的关系，我们需要思考以下几个问题：</p>
<blockquote>
<p>1.为什么要进行内存回收？<br>2.哪些内存可能会被回收呢？<br>3.回收的过程中什么时候会进行交换呢？<br>4.具体怎么交换？</p>
</blockquote>
<p>下面我们就从这些问题出发，一个一个进行分析。</p>
<h2 id="为什么要进行内存回收？">为什么要进行内存回收？</h2><p>内核之所以要进行内存回收，主要原因有两个：</p>
<blockquote>
<p>1.内核需要为任何时刻突发到来的内存申请提供足够的内存。所以一般情况下保证有足够的free空间对于内核来说是必要的。</p>
<p>另外，Linux内核使用cache的策略虽然是不用白不用，内核会使用内存中的page cache对部分文件进行缓存，以便提升文件的读写效率。</p>
<p>所以内核有必要设计一个周期性回收内存的机制，以便cache的使用和其他相关内存的使用不至于让系统的剩余内存长期处于很少的状态。</p>
<p>2.当真的有大于空闲内存的申请到来的时候，会触发强制内存回收</p>
</blockquote>
<p>所以，<strong>内核在应对这两类回收的需求下，分别实现了两种不同的机制</strong>：</p>
<p> 一个是使用<strong>kswapd进程对内存进行周期检查</strong>，以保证平常状态下剩余内存尽可能够用。</p>
<p> 另一个是<strong>直接内存回收（directpagereclaim）</strong>，就是当内存分配时没有空闲内存可以满足要求时，触发直接内存回收。</p>
<p>这两种内存回收的触发路径不同：<br>一个是由内核进程kswapd直接调用内存回收的逻辑进行内存回收；</p>
<blockquote>
<p>参见mm/vmscan.c中的<a href="http://www.kerneltravel.net/kernel-book/%E7%AC%AC%E5%85%AD%E7%AB%A0%20Linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/6.6.2.htm" target="_blank" rel="external">kswapd()主逻辑</a></p>
</blockquote>
<p>另一个是内存申请的时候进入slow path的内存申请逻辑进行回收。</p>
<blockquote>
<p>参见内核代码中的mm/page_alloc.c中的<a href="http://www.linuxidc.com/Linux/2012-01/51157.htm" target="_blank" rel="external">__alloc_pages_slowpath方法</a></p>
</blockquote>
<p>这两个方法中实际进行内存回收的过程殊途同归，最终都是调用shrink_zone()方法进行针对每个zone的内存页缩减。</p>
<p>这个方法中会再调用shrink_lruvec()这个方法对每个组织页的链表进程检查。找到这个线索之后，我们就可以清晰的看到内存回收操作究竟针对的page有哪些了。</p>
<blockquote>
<p>这些链表主要定义在mm/vmscan.c一个enum中：<br><img src="/img/swap解读/lru.PNG" alt="Alt text"><br>根据这个enum可以看到，内存回收主要需要进行扫描的链表有如下4个：<br>anon的inactive<br>anon的active<br>file的inactive<br>file的active</p>
</blockquote>
<p>就是说，内存回收操作主要针对的就是内存中的文件页（file  cache）和匿名页。</p>
<p>关于活跃（active）还是不活跃（inactive）的判断内核会使用lru算法进行处理并进行标记，我们这里不详细解释这个过程。</p>
<p>整个扫描的过程分几个循环：<br>1.首先扫描每个zone上的cgroup组；</p>
<p>2.然后再以cgroup的内存为单元进行page链表的扫描；</p>
<p>3.内核会先扫描anon的active链表，将不频繁的放进inactive链表中，然后扫描inactive链表，将里面活跃的移回active中；</p>
<p><img src="/img/swap解读/lianbiao.PNG" alt="Alt text"></p>
<p>4.进行swap的时候，先对inactive的页进行换出；</p>
<p>5.如果是file的文件映射page页，则判断其是否为脏数据，如果是脏数据就写回，不是脏数据可以直接释放。</p>
<p>这样看来，<strong>内存回收这个行为会对两种内存的使用进行回收</strong>:</p>
<blockquote>
<p>一种是anon的匿名页内存，主要回收手段是swap；</p>
<p>另一种是file-backed的文件映射页，主要的释放手段是写回和清空。</p>
</blockquote>
<p>因为针对filebased的内存，没必要进行交换，其数据原本就在硬盘上，回收这部分内存只要在有脏数据时写回，并清空内存就可以了，以后有需要再从对应的文件读回来。</p>
<p>内存对匿名页和文件缓存一共用了四条链表进行组织，回收过程主要是针对这四条链表进行扫描和操作。</p>
<h1 id="2、swappiness到底是用来调节什么的？">2、swappiness到底是用来调节什么的？</h1><p>很多人应该都知道/proc/sys/vm/swappiness这个文件，是个可以用来调整跟swap相关的参数。这个文件的默认值是60，可以的取值范围是0-100。</p>
<blockquote>
<p>这很容易给大家一个暗示：我是个百分比哦！</p>
</blockquote>
<p>那么这个文件具体到底代表什么意思呢？我们先来看一下说明：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">======</span><br><span class="line">swappiness</span><br><span class="line"></span><br><span class="line">This control <span class="keyword">is</span> used <span class="keyword">to</span> define how aggressive <span class="keyword">the</span> kernel will swap memory pages. Higher values will increase agressiveness, lower values decrease <span class="keyword">the</span> amount <span class="keyword">of</span> swap.</span><br><span class="line"></span><br><span class="line">A value <span class="keyword">of</span> <span class="number">0</span> instructs <span class="keyword">the</span> kernel <span class="keyword">not</span> <span class="keyword">to</span> initiate swap <span class="keyword">until</span> <span class="keyword">the</span> amount <span class="keyword">of</span> free <span class="keyword">and</span> <span class="type">file</span>-backed pages <span class="keyword">is</span> <span class="keyword">less than</span> <span class="keyword">the</span> high water mark <span class="keyword">in</span> a zone.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The default value <span class="keyword">is</span> <span class="number">60.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">======</span><br></pre></td></tr></table></figure>
<p>这个文件的值用来定义内核使用swap的积极程度：</p>
<blockquote>
<p>值越高，内核就会越积极的使用swap；<br>值越低，就会降低对swap的使用积极性。<br>如果这个值为0，那么内存在free和file-backed使用的页面总量小于高水位标记（high water mark）之前，不会发生交换。</p>
</blockquote>
<p>在这里我们可以理解file-backed这个词的含义了，实际上就是上文所说的文件映射页的大小。</p>
<p><strong>我想应该主要考虑这样几个问题:</strong></p>
<p>1.如果回收内存可以有两种途径（匿名页交换和file缓存清空），那么我应该考虑在本次回收的时候，什么情况下多进行file写回，什么情况下应该多进行swap交换。说白了就是平衡两种回收手段的使用，以达到最优。</p>
<p>2.如果符合交换条件的内存较长，是不是可以不用全部交换出去？比如可以交换的内存有100M，但是目前只需要50M内存，实际只要交换50M就可以了，不用把能交换的都交换出去。</p>
<p>分析代码会发现，Linux内核对这部分逻辑的实现代码在<strong>get_scan_count()</strong>这个方法中，这个方法被<strong>shrink_lruvec()</strong>调用。</p>
<p>get_sacn_count()就是处理上述逻辑的，swappiness是它所需要的一个参数，这个参数实际上是指导内核在清空内存的时候，是更倾向于清空file-backed内存还是更倾向于进行匿名页的交换的。</p>
<p>当然，这只是个倾向性，是指在两个都够用的情况下，更愿意用哪个，如果不够用了，那么该交换还是要交换。</p>
<p><strong>简单看一下get_sacn_count()函数的处理部分代码，其中关于swappiness的第一个处理是：</strong><br><img src="/img/swap解读/swappiness.PNG" alt="Alt text"><br>这里注释的很清楚：</p>
<p>1.如果swappiness设置为100，那么匿名页和文件将用同样的优先级进行回收。</p>
<p>很明显，使用清空文件的方式将有利于减轻内存回收时可能造成的IO压力。</p>
<p>因为如果file-backed中的数据不是脏数据的话，那么可以不用写回，这样就没有IO发生，而一旦进行交换，就一定会造成IO。</p>
<p>2.所以系统默认将swappiness的值设置为60，这样回收内存时，对file-backed的文件cache内存的清空比例会更大，内核将会更倾向于进行缓存清空而不是交换。</p>
<p>这里的swappiness值如果是60，那么是不是说内核回收的时候，会按照60:140的比例去做相应的swap和清空file-backed的空间呢？并不是。</p>
<p>在做这个比例计算的时候，内核还要参考当前内存使用的其他信息。对这里具体是怎么处理感兴趣的人，可以自己详细看get_sacn_count()的实现，本文就不多解释了。</p>
<p>我们在此要明确的概念是：swappiness的值是用来控制内存回收时，回收的匿名页更多一些还是回收的file cache更多一些。</p>
<p>3.swappiness设置为0的话，是不是内核就根本不会进行swap了呢？这个答案也是否定的。</p>
<p>首先是内存真的不够用的时候，该swap的话还是要swap。</p>
<p>其次在内核中还有一个逻辑会导致直接使用swap，<strong>内核代码</strong>是这样处理的：<br><img src="/img/swap解读/kukel_swappiness.PNG" alt="Alt text"><br>这里的逻辑是说，如果触发的是全局回收，并且zonefile + zonefree &lt;= high_wmark_pages(zone)条件成立时，就将scan_balance这个标记置为SCAN_ANON。</p>
<p>后续处理scan_balance的时候，如果它的值是SCAN_ANON，则一定会进行针对匿名页的swap操作。</p>
<p>要理解这个行为，我们首先要搞清楚什么是高水位标记（high_wmark_pages）。</p>
<h1 id="3、kswapd什么时候会进行swap操作？">3、kswapd什么时候会进行swap操作？</h1><p>我们回到kswapd周期检查和直接内存回收的两种内存回收机制。</p>
<p><strong>直接内存回收</strong>比较好理解，当申请的内存大于剩余内存的时候，就会触发直接回收。</p>
<p>那么kswapd进程在周期检查的时候触发回收的条件是什么呢？<br>还是从设计角度来看，kswapd进程要周期对内存进行检测，达到一定阈值的时候开始进行内存回收。</p>
<p>这个所谓的阈值可以理解为内存目前的使用压力，就是说，虽然我们还有剩余内存，但是当剩余内存比较小的时候，就是内存压力较大的时候，就应该开始试图回收些内存了，这样才能保证系统尽可能的有足够的内存给突发的内存申请所使用。</p>
<h1 id="4、什么是内存水位标记？(watermark)">4、什么是内存水位标记？(watermark)</h1><p><strong>那么如何描述内存使用的压力呢？</strong></p>
<p>Linux内核使用水位标记（watermark）的概念来描述这个压力情况。</p>
<p>Linux为内存的使用设置了三种内存水位标记:high、low、min。他们<strong>所标记的含义</strong>分别为：</p>
<blockquote>
<p>剩余内存在high以上表示内存剩余较多，目前内存使用压力不大；</p>
<p>high-low的范围表示目前剩余内存存在一定压力；</p>
<p>low-min表示内存开始有较大使用压力，剩余内存不多了；</p>
<p>min是最小的水位标记，当剩余内存达到这个状态时，就说明内存面临很大压力。</p>
<p>小于min这部分内存，内核是保留给特定情况下使用的，一般不会分配。</p>
</blockquote>
<p>内存回收行为就是基于剩余内存的水位标记进行决策的：</p>
<p><strong>当系统剩余内存低于watermark[low]的时候，内核的kswapd开始起作用，进行内存回收。直到剩余内存达到watermark[high]的时候停止。</strong></p>
<p><strong>如果内存消耗导致剩余内存达到了或超过了watermark[min]时，就会触发直接回收（direct reclaim）。</strong></p>
<p>明白了水位标记的概念之后，zonefile + zonefree &lt;= high_wmark_pages(zone)这个公式就能理解了。</p>
<p>这里的zonefile相当于内存中文件映射的总量，zonefree相当于剩余内存的总量。</p>
<p>内核一般认为，如果zonefile还有的话，就可以尽量通过清空文件缓存获得部分内存，而不必只使用swap方式对anon的内存进行交换。</p>
<p>整个判断的概念是说，在全局回收的状态下（有global_reclaim(sc)标记），如果当前的文件映射内存总量+剩余内存总量的值评估小于等于watermark[high]标记的时候，就可以进行直接swap了。</p>
<p>这样是为了防止进入cache陷阱，具体描述可以见代码注释。</p>
<p>这个判断对系统的影响是，<strong>swappiness设置为0时，有剩余内存的情况下也可能发生交换。</strong></p>
<p><strong>那么watermark相关值是如何计算的呢？</strong></p>
<p>所有的内存watermark标记都是根据当前内存总大小和一个可调参数进行运算得来的，这个参数是：/proc/sys/vm/min_free_kbytes</p>
<blockquote>
<p>首先这个参数本身决定了系统中每个zone的watermark[min]的值大小。</p>
<p>然后内核根据min的大小并参考每个zone的内存大小分别算出每个zone的low水位和high水位值。</p>
</blockquote>
<p>想了解具体逻辑可以参见源代码目录下的该文件：</p>
<blockquote>
<p>mm/page_alloc.c</p>
</blockquote>
<p>在系统中可以从/proc/zoneinfo文件中查看当前系统的相关的信息和使用情况。</p>
<p>我们会发现以上内存管理的相关逻辑都是以zone为单位的，这里zone的含义是指内存的分区管理。</p>
<p>Linux将内存分成多个区，主要有:</p>
<blockquote>
<p>直接访问区(DMA)<br>一般区(Normal)<br>高端内存区(HighMemory)</p>
</blockquote>
<p>内核对内存不同区域的访问因为硬件结构因素会有寻址和效率上的差别。如果在NUMA架构上，不同CPU所管理的内存也是不同的zone。</p>
<h1 id="相关参数设置">相关参数设置</h1><p><strong>zone_reclaim_mode：</strong></p>
<p>zone_reclaim_mode模式是在2.6版本后期开始加入内核的一种模式，可以用来管理当一个内存区域(zone)内部的内存耗尽时，是从其内部进行内存回收还是可以从其他zone进行回收的选项，我们可以通过<strong>/proc/sys/vm/zone_reclaim_mode</strong>文件对这个参数进行调整。</p>
<p>在申请内存时(内核的get_page_from_freelist()方法中)，内核在当前zone内没有足够内存可用的情况下，会根据zone_reclaim_mode的设置来决策是从下一个zone找空闲内存还是在zone内部进行回收。这个值为0时表示可以从下一个zone找可用内存，非0表示在本地回收。</p>
<p><strong>这个文件可以设置的值及其含义如下：</strong></p>
<blockquote>
<p>echo 0 &gt; /proc/sys/vm/zone_reclaim_mode：意味着关闭zone_reclaim模式，可以从其他zone或NUMA节点回收内存。</p>
<p>echo 1 &gt; /proc/sys/vm/zone_reclaim_mode：表示打开zone_reclaim模式，这样内存回收只会发生在本地节点内。</p>
<p>echo 2 &gt; /proc/sys/vm/zone_reclaim_mode：在本地回收内存时，可以将cache中的脏数据写回硬盘，以回收内存。</p>
<p>echo 4 &gt; /proc/sys/vm/zone_reclaim_mode：可以用swap方式回收内存。</p>
</blockquote>
<p>不同的参数配置会在NUMA环境中对其他内存节点的内存使用产生不同的影响，大家可以根据自己的情况进行设置以优化你的应用。</p>
<p>默认情况下，zone_reclaim模式是关闭的。这在很多应用场景下可以提高效率，比如文件服务器，或者依赖内存中cache比较多的应用场景。</p>
<p>这样的场景对内存cache速度的依赖要高于进程进程本身对内存速度的依赖，所以我们宁可让内存从其他zone申请使用，也不愿意清本地cache。</p>
<p>如果确定应用场景是内存需求大于缓存，而且尽量要避免内存访问跨越NUMA节点造成的性能下降的话，则可以打开zone_reclaim模式。</p>
<p>此时页分配器会优先回收容易回收的可回收内存（主要是当前不用的page cache页），然后再回收其他内存。</p>
<p>打开本地回收模式的写回可能会引发其他内存节点上的大量的脏数据写回处理。如果一个内存zone已经满了，那么脏数据的写回也会导致进程处理速度收到影响，产生处理瓶颈。</p>
<p>这会降低某个内存节点相关的进程的性能，因为进程不再能够使用其他节点上的内存。但是会增加节点之间的隔离性，其他节点的相关进程运行将不会因为另一个节点上的内存回收导致性能下降。</p>
<p>除非针对本地节点的内存限制策略或者cpuset配置有变化，对swap的限制会有效约束交换只发生在本地内存节点所管理的区域上。</p>
<p><strong>min_unmapped_ratio：</strong></p>
<p>这个参数只在NUMA架构的内核上生效。这个值表示NUMA上每个内存区域的pages总数的百分比。</p>
<p>在zone_reclaim_mode模式下，只有当相关区域的内存使用达到这个百分比，才会发生区域内存回收。</p>
<p>在zone_reclaim_mode设置为4的时候，内核会比较所有的file-backed和匿名映射页，包括swapcache占用的页以及tmpfs文件的总内存使用是否超过这个百分比。</p>
<p>其他设置的情况下，只比较基于一般文件的未映射页，不考虑其他相关页。</p>
<p><strong>page-cluster：</strong></p>
<p>page-cluster是用来控制从swap空间换入数据的时候，一次连续读取的页数，这相当于对交换空间的预读。这里的连续是指在swap空间上的连续，而不是在内存地址上的连续。</p>
<p>因为swap空间一般是在硬盘上，对硬盘设备的连续读取将减少磁头的寻址，提高读取效率。</p>
<p>这个文件中设置的值是2的指数。就是说，如果设置为0，预读的swap页数是2的0次方，等于1页。如果设置为3，就是2的3次方，等于8页。</p>
<p>同时，设置为0也意味着关闭预读功能。文件默认值为3。我们可以根据我们的系统负载状态来设置预读的页数大小。</p>
<h1 id="5、swap分区的优先级（priority）有啥用？">5、swap分区的优先级（priority）有啥用？</h1><p>在使用多个swap分区或者文件的时候，还有一个优先级的概念（Priority）。</p>
<p>在swapon的时候，我们可以使用-p参数指定相关swap空间的优先级，<strong>值越大优先级越高</strong>，可以指定的数字范围是－1到32767。</p>
<p>内核在使用swap空间的时候总是先使用优先级高的空间，后使用优先级低的。</p>
<p>当然如果把多个swap空间的优先级设置成一样的，那么两个swap空间将会以轮询方式并行进行使用。</p>
<p>如果两个swap放在两个不同的硬盘上，相同的优先级可以起到类似RAID0的效果，增大swap的读写效率。</p>
<p>另外，编程时使用mlock()也可以将指定的内存标记为不会换出，具体帮助可以参考man 2 mlock。</p>
<h1 id="最后">最后</h1><p>关于swap的使用建议，针对不同负载状态的系统是不一样的。有时我们希望swap大一些，可以在内存不够用的时候不至于触发oom-killer导致某些关键进程被杀掉，比如数据库业务。</p>
<p>也有时候我们希望不要swap，因为当大量进程爆发增长导致内存爆掉之后，会因为swap导致IO跑死，整个系统都卡住，无法登录，无法处理。</p>
<p>这时候我们就希望不要swap，即使出现oom-killer也造成不了太大影响，但是不能允许服务器因为IO卡死像多米诺骨牌一样全部死机，而且无法登陆。跑cpu运算的无状态的apache就是类似这样的进程池架构的程序。</p>
<p>所以：</p>
<blockquote>
<p>swap到底怎么用?<br>要还是不要？<br>设置大还是小？<br>相关参数应该如何配置？</p>
</blockquote>
<p>是要根据我们自己的生产环境的情况而定的。</p>
<p>阅读完本文后希望大家可以明白一些swap的深层次知识。</p>
<h1 id="Q&amp;A：">Q&amp;A：</h1><p><strong>1.一个内存剩余还比较大的系统中，是否有可能使用swap？</strong></p>
<blockquote>
<p>A: 有可能，如果运行中的某个阶段出发了这个条件”zonefile+zonefree&lt;=high_wmark_pages(zone)“，就可能会swap。</p>
</blockquote>
<p><strong>2.swappiness设置为0就相当于关闭swap么？</strong></p>
<blockquote>
<p>A: 不是的，关闭swap要使用swapoff命令。swappiness只是在内存发生回收操作的时候用来平衡cache回收和swap交换的一个参数，调整为0意味着，尽量通过清缓存来回收内存。</p>
</blockquote>
<p><strong>3.A: swappiness设置为100代表系统会尽量少用剩余内存而多使用swap么？</strong></p>
<blockquote>
<p>不是的，这个值设置为100表示内存发生回收时，从cache回收内存和swap交换的优先级一样。就是说，如果目前需求100M内存，那么较大机率会从cache中清除50M内存，再将匿名页换出50M，把回收到的内存给应用程序使用。但是这还要看cache中是否能有空间，以及swap是否可以交换50m。内核只是试图对它们平衡一些而已。</p>
</blockquote>
<p><strong>4.kswapd进程什么时候开始内存回收？</strong></p>
<blockquote>
<p>A: kswapd根据内存水位标记决定是否开始回收内存，如果标记达到low就开始回收，回收到剩余内存达到high标记为止。</p>
</blockquote>
<p><strong>5.如何查看当前系统的内存水位标记？</strong></p>
<blockquote>
<p>A: cat /proc/zoneinfo。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前遇到过线上swap导致io频繁的问题，当时运维人员调整的swappiness参数，解决了问题。<br>一直对swap一知半解，今天看到公众号推送一篇关于swap的好文章，<br>主要内容：<strong>swap、swappiness及kswapd原理，swap分区优先级</strong><br>在此转载一下。<br>【转自】<a href="http://mp.weixin.qq.com/s?__biz=MzA4Nzg5Nzc5OA==&amp;mid=2651660097&amp;idx=1&amp;sn=a3d38e3af2c9d8d431c46fe7680b428d&amp;scene=0#wechat_redirect">Linux SWAP 深度解读</a><br>]]>
    
    </summary>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[rsync和scp传输时间比较]]></title>
    <link href="http://tonylit.me/2016/05/18/scp%E5%92%8Crsync%E4%BC%A0%E8%BE%93%E9%80%9F%E5%BA%A6%E6%AF%94%E8%BE%83/"/>
    <id>http://tonylit.me/2016/05/18/scp和rsync传输速度比较/</id>
    <published>2016-05-18T03:37:27.000Z</published>
    <updated>2016-05-18T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>测试一下rsync和scp在跨服务器之间传输速度比较。因为rsync可以增量同步，但是scp不能，所以rsync测试两次。<br><a id="more"></a><br>传输一个3.2G的文件，里面杂七杂八的图片、小文件、大文件、视频….</p>
<h1 id="rsync传输">rsync传输</h1><p>脚本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">start=$(date +%s)  </span><br><span class="line"></span><br><span class="line">rsync -avr --progress --delete /app/src root@<span class="number">192.168</span>.<span class="number">47.11</span>:/app/</span><br><span class="line"></span><br><span class="line">end=$(date +%s)  </span><br><span class="line">time=$(( <span class="variable">$end</span> - <span class="variable">$start</span> ))  </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$time</span> `enter code here`</span><br></pre></td></tr></table></figure></p>
<h2 id="第一次传输：">第一次传输：</h2><p><strong>时间：58s</strong></p>
<h2 id="第二次传输：">第二次传输：</h2><p><strong>时间：1s</strong></p>
<p>#scp传输<br>脚本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">start=$(date +%s)  </span><br><span class="line"></span><br><span class="line">scp -r /app/src root@<span class="number">192.168</span>.<span class="number">47.11</span>:/app/</span><br><span class="line"></span><br><span class="line">end=$(date +%s)  </span><br><span class="line">time=$(( <span class="variable">$end</span> - <span class="variable">$start</span> ))  </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$time</span> `enter code here`</span><br></pre></td></tr></table></figure></p>
<p><strong>时间：511s</strong></p>
<h1 id="结论：">结论：</h1><p>rsync的传输速度比scp快很多</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>测试一下rsync和scp在跨服务器之间传输速度比较。因为rsync可以增量同步，但是scp不能，所以rsync测试两次。<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ssh 免登陆]]></title>
    <link href="http://tonylit.me/2016/05/18/ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"/>
    <id>http://tonylit.me/2016/05/18/ssh免密码登录/</id>
    <published>2016-05-18T03:37:27.000Z</published>
    <updated>2016-05-18T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>配置A服务器ssh无密码登陆到B服务器<br><a id="more"></a></p>
<h1 id="A服务器生成公钥和私钥">A服务器生成公钥和私钥</h1><blockquote>
<p>ssh-keygen -t rsa -P ‘ ‘</p>
</blockquote>
<p><img src="/img/ssh-keygen.PNG" alt="Alt text"></p>
<h1 id="copy公钥和私钥到B服务器">copy公钥和私钥到B服务器</h1><p>将生成好的两个秘钥拷贝到B服务器上，一样 的目录(/root/.ssh/)<br>id_rsa<br>id_rsa.pub</p>
<h1 id="在B上新建authorized_keys文件">在B上新建authorized_keys文件</h1><p>在b服务器的/root/.ssh/文件夹中新建authorized_keys，把id_rsa.pub<br>里面的内容拷贝进去，并付600权限</p>
<blockquote>
<p>cat id_rsa.pub &gt;&gt; authorized_keys<br>chmod 600 .ssh/authorized_keys</p>
</blockquote>
<p>以上完成后，可以免密码登录了。</p>
<p>tips:<br>ssh登录如果慢，可以修改 vim /etc/ssh/sshd_config，把  GSSAPIAuthentication  yes 改成no 试一试~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>配置A服务器ssh无密码登陆到B服务器<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[centos7 NFS搭建]]></title>
    <link href="http://tonylit.me/2016/05/06/centos7NFS%E5%AE%89%E8%A3%85/"/>
    <id>http://tonylit.me/2016/05/06/centos7NFS安装/</id>
    <published>2016-05-06T03:37:27.000Z</published>
    <updated>2016-05-06T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>使用独立的物理机做应用代码的svn(git)和编译操作，将打包后的文件通过NFS共享到docker宿主机。<br>来看看centos7上怎么搭建NFS。<br><a id="more"></a></p>
<h1 id="nfs安装">nfs安装</h1><blockquote>
<p>yum -y install nfs-utils rpcbind</p>
</blockquote>
<h1 id="配置nfs">配置nfs</h1><p>nfs的配置文件:/opt/exports<br>默认是空的，比如我需要共享/master/build文件下的文件</p>
<blockquote>
<p>/master/build *(rw,no_root_squash)</p>
</blockquote>
<p>配置信息如下：</p>
<blockquote>
<p>/master/build 可以为一个网段，一个IP，也可以是域名，域名支持通配符 如: *.qq.com<br>rw：read-write，可读写； ro：read-only，只读； sync：文件同时写入硬盘和内存；<br>async：文件暂存于内存，而不是直接写入内存；<br>no_root_squash：NFS客户端连接服务端时如果使用的是root的话，那么对服务端分享的目录来说，也拥有root权限。显然开启这项是不安全的。<br>root_squash：NFS客户端连接服务端时如果使用的是root的话，那么对服务端分享的目录来说，拥有匿名用户权限，通常他将使用nobody或nfsnobody身份；<br>all_squash：不论NFS客户端连接服务端时使用什么用户，对服务端分享的目录来说都是拥有匿名用户权限；<br>anonuid：匿名用户的UID值，可以在此处自行设定。 anongid：匿名用户的GID值。</p>
</blockquote>
<h1 id="启动NFS">启动NFS</h1><blockquote>
<p>service rpcbind start<br>service nfs start</p>
</blockquote>
<h1 id="检查挂载情况">检查挂载情况</h1><blockquote>
<p>showmount -e 192.168.47.10  #查看可挂载</p>
</blockquote>
<p><img src="/img/nfs-mount.PNG" alt="Alt text"></p>
<h2 id="客户端挂载">客户端挂载</h2><p>mount -t nfs 192.168.43.10:/app/test</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>使用独立的物理机做应用代码的svn(git)和编译操作，将打包后的文件通过NFS共享到docker宿主机。<br>来看看centos7上怎么搭建NFS。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何不输出docker日志到控制台]]></title>
    <link href="http://tonylit.me/2016/04/22/%E5%A6%82%E4%BD%95%E4%B8%8D%E8%BE%93%E5%87%BAdocker%E6%97%A5%E5%BF%97%E5%88%B0%E6%8E%A7%E5%88%B6%E5%8F%B0/"/>
    <id>http://tonylit.me/2016/04/22/如何不输出docker日志到控制台/</id>
    <published>2016-04-22T03:37:27.000Z</published>
    <updated>2016-04-22T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>docker run 后一些日志会打印到控制台，怎样不让信息打印到控制台呢？<br><a id="more"></a></p>
<p>解决方法：docker -d &gt; docker.log</p>
<p>docker run -d &gt; docker.log –name test -v /app/webroot/:/app/webroot/ -P docker.vemic.com:5000/focustest-centos5:5.4  /opt/ActivePython-2.7/bin/supervisord -c /opt/supervisor/supervisord.conf &amp;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>docker run 后一些日志会打印到控制台，怎样不让信息打印到控制台呢？<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[supervisor管理容器进程]]></title>
    <link href="http://tonylit.me/2016/04/22/supervisor%E7%AE%A1%E7%90%86docker%E8%BF%9B%E7%A8%8B/"/>
    <id>http://tonylit.me/2016/04/22/supervisor管理docker进程/</id>
    <published>2016-04-22T03:37:27.000Z</published>
    <updated>2016-04-22T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>启动容器的时候，为了保证容器退出时保持UP状态，可以使用 /usr/sbin/sshd -D<br>我们经常会在后面加上若干启动命令：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -ti --name test docker<span class="class">.vemic</span><span class="class">.com</span>:<span class="number">5000</span>/focustest-centos5 -P <span class="number">22</span> -P <span class="number">80</span> /usr/sbin/sshd -D &amp;&amp; nginx &amp;&amp; /opt/resin<span class="class">.sh</span> restart</span><br></pre></td></tr></table></figure></p>
<p>命令多的时候看起来会很乱<br>but，可以使用supervisor来进行优化（管理进程）<br>可以写成这样：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[supervisord]</span></span><br><span class="line"><span class="setting">nodaemon=<span class="value"><span class="keyword">true</span></span></span></span><br><span class="line"><span class="title">[program:sshd]</span></span><br><span class="line"><span class="setting">command=<span class="value">/usr/sbin/sshd -D</span></span></span><br><span class="line"><span class="title">[program:nginx]</span></span><br><span class="line"><span class="setting">command=<span class="value">nginx</span></span></span><br><span class="line"><span class="title">[program:resin]</span></span><br><span class="line"><span class="setting">command=<span class="value">/opt/resin.sh restart</span></span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="supervisor_安装">supervisor 安装</h1><p>具体可以参考：<br><a href="https://rayed.com/wordpress/?p=1496" target="_blank" rel="external">https://rayed.com/wordpress/?p=1496</a></p>
<blockquote>
<p> yum install python-setuptools<br> easy_install pip<br> pip install supervisorr</p>
</blockquote>
<h1 id="编写supervisor-conf">编写supervisor.conf</h1><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[supervisord]</span></span><br><span class="line"><span class="setting">nodaemon=<span class="value"><span class="keyword">true</span></span></span></span><br><span class="line"><span class="title">[program:sshd]</span></span><br><span class="line"><span class="setting">command=<span class="value">/usr/sbin/sshd -D</span></span></span><br><span class="line"><span class="title">[program:dns]</span></span><br><span class="line"><span class="setting">command=<span class="value">/bin/bash -c <span class="string">" echo nameserver 192.168.42.200 &gt; /etc/resolv.conf "</span></span></span></span><br><span class="line"><span class="title">[program:resin]</span></span><br><span class="line"><span class="setting">command=<span class="value">bash /app/build/resin.sh restart</span></span></span><br></pre></td></tr></table></figure>
<h1 id="启动docker-supervisor">启动docker-supervisor</h1><blockquote>
<p>docker run -d  &gt; /home/docker.log –name test -v /app/webroot/:/app/webroot/ -P docker.vemic.com:5000/focustest-centos5:5.4<br>/opt/ActivePython-2.7/bin/supervisord -c /opt/supervisor/supervisord.conf &amp;</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>启动容器的时候，为了保证容器退出时保持UP状态，可以使用 /usr/sbin/sshd -D<br>我们经常会在后面加上若干启动命令：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -ti --name test docker<span class="class">.vemic</span><span class="class">.com</span>:<span class="number">5000</span>/focustest-centos5 -P <span class="number">22</span> -P <span class="number">80</span> /usr/sbin/sshd -D &amp;&amp; nginx &amp;&amp; /opt/resin<span class="class">.sh</span> restart</span><br></pre></td></tr></table></figure></p>
<p>命令多的时候看起来会很乱<br>but，可以使用supervisor来进行优化（管理进程）<br>可以写成这样：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[supervisord]</span></span><br><span class="line"><span class="setting">nodaemon=<span class="value"><span class="keyword">true</span></span></span></span><br><span class="line"><span class="title">[program:sshd]</span></span><br><span class="line"><span class="setting">command=<span class="value">/usr/sbin/sshd -D</span></span></span><br><span class="line"><span class="title">[program:nginx]</span></span><br><span class="line"><span class="setting">command=<span class="value">nginx</span></span></span><br><span class="line"><span class="title">[program:resin]</span></span><br><span class="line"><span class="setting">command=<span class="value">/opt/resin.sh restart</span></span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[中国南京软件开发者大会-参会收获]]></title>
    <link href="http://tonylit.me/2016/04/18/%E5%8D%97%E4%BA%AC%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E8%80%85%E5%A4%A7%E4%BC%9A/"/>
    <id>http://tonylit.me/2016/04/18/南京软件开发者大会/</id>
    <published>2016-04-18T03:37:27.000Z</published>
    <updated>2016-04-18T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>4月16，17两天去参加<a href="http://www.njsd-china.org/" target="_blank" rel="external">中国南京软件开发者大会</a>，比较感兴趣的方向是性能和容器技术这块，很遗憾这两块的分享比较少。其他技术方面（微服务架构、云平台、移动端、VR等）不能全都听明白，不过也有不少收获，开阔了视野。<br>今年是第二届南京开发者大会，参会的人数比去年多了3倍，大概700人。组委会和媒体人数比较多，挺有氛围。<br><a id="more"></a><br><img src="/img/中国南京软件开发者大会/njsd.PNG" alt="Alt text"></p>
<h2 id="16号上午">16号上午</h2><p>上午是4个大牛的分享，<img src="/img/中国南京软件开发者大会/4-16讲师.PNG" alt="Alt text"><br><img src="/img/中国南京软件开发者大会/4-16课程.PNG" alt="Alt text"></p>
<h3 id="李云鹏-打造尊重个性的工程师文化分享">李云鹏-打造尊重个性的工程师文化分享</h3><p>我南大的学哥，赴美留学，在oracle工作10来年，然后回国创业。分享了oracle公司的工程师们怎样工作，然后谈了硅谷其他的fb，google等公司程序员的生活、工作环境，每个公司的工程师文化都不一样，不过都会加班，这个跟国内一样。</p>
<h3 id="王丰明-互联网时代的产品增长">王丰明-互联网时代的产品增长</h3><p>用数据分析来帮助企业定位产品方向。<br>这个我不感兴趣，没仔细听。</p>
<h3 id="许世伟-共建创新生态环境">许世伟-共建创新生态环境</h3><p>七牛的CEO，本来觉得他会讲讲技术，来点干货。然而他说：中国不缺技术，缺的是创新。<br>他从自己的工作经历和七牛的创业经历分享了一些自己的心得，如何创新。<br>我理解的是这样的：其实我们身边有很多痛点，抓住并解决这些痛点就有机会赚钱。</p>
<h2 id="曾凯-微软拥抱Spark的开源之路">曾凯-微软拥抱Spark的开源之路</h2><p>分享了微软基于Spark做了自己的mobius，大数据处理系统。</p>
<h1 id="16号下午">16号下午</h1><p>分了5个会场，我选择跟我工作相关的听听。</p>
<h2 id="无线测试技术会场-沪江无线持续集成的解决方案">无线测试技术会场-沪江无线持续集成的解决方案</h2><p>分享了沪江无线怎么去做app测试持续集成，思想都一样：hook住git仓库，代码有更新的时候jenkins去做后续的打包发布，自动化测试，出报告。</p>
<h3 id="整体流程：">整体流程：</h3><p>自动构建-&gt;APK扫描-&gt;自动化测试-&gt;专项扫描-&gt;聚合报告和产品交付。<br><img src="/img/中国南京软件开发者大会/沪江无线-持续集成.PNG" alt="Alt text"></p>
<h3 id="打包：">打包：</h3><p>android的打包方式：Gradle<br>包的依赖管理：maven<br>产出：debug-apk，release-apk<br>ios的打包方式：xctools<br>包依赖管理：cocoapods<br>产出：debug-ipa、release-ipa debug-app</p>
<h3 id="自动化框架">自动化框架</h3><p><img src="/img/中国南京软件开发者大会/沪江无线流程.PNG" alt="Alt text"></p>
<h3 id="成果">成果</h3><p><img src="/img/中国南京软件开发者大会/沪江无线-成果1.PNG" alt="Alt text"><br><img src="/img/中国南京软件开发者大会/沪江无线-成果2.PNG" alt="Alt text"></p>
<p>我对移动测试这块没太涉及。讲了一些专业知识听不懂！！</p>
<h2 id="架构实践与微服务会场-Akka与微服务实践">架构实践与微服务会场-Akka与微服务实践</h2><p>分享一号店怎样使用akka来做分布式服务，与dubbo做了比较。<br>我们公司分布式服务框架candy也不逊色。</p>
<h2 id="架构实践与微服务会场-数据库应用的Docker化实践">架构实践与微服务会场-数据库应用的Docker化实践</h2><p>分享了七牛怎样使用docker进行数据库应用的承载。<br>为什么七牛要做docker化服务<br>痛点一：部署繁琐<br>               -准备物理机<br>               -配置软件<br>               -难以自动化<br> 痛点二：运维麻烦<br>              -配置监控<br>              -备份策略<br>              -手动运维，难以自动化<br>  痛点三：资源浪费<br>                -不同节点资源消耗不同<br>                -混合部署增大运维的复杂度<br>                -资源利用率低<br>   痛点四：很难支持多租户<br>                -共享db集群，业务互相影响<br>                -自己实现db中间件，实现复杂；开发周期长；投入大，产出小！<br> 这个docker确实可以很好的解决问题，因为docker就这干这个事情的。</p>
<h3 id="存储管理">存储管理</h3><p>七牛目前支持本地LVM，未来可以拓展到网络存储。</p>
<h3 id="网络管理">网络管理</h3><p>-SDN<br>-openvswitch，vxlan，这个之前也研究过，配置比较复杂。我用的是<a href="http://tonylit.me/2016/04/08/pipework%E9%85%8D%E7%BD%AEdocker%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C/">pipework</a></p>
<h3 id="一些坑">一些坑</h3><h4 id="避免docker镜像缓存">避免docker镜像缓存</h4><p>错误：</p>
<blockquote>
<p>run mkdir -p opt &amp;&amp; tar -xvf jdk.tar.gz &amp;&amp; rm -rf jdk,tar,gz</p>
</blockquote>
<p>正确：</p>
<blockquote>
<p>run mkdir -p opt \<br> &amp;&amp; tar -xvf jdk.tar.gz  \<br> &amp;&amp; rm -rf jdk,tar,gz</p>
</blockquote>
<h4 id="容器重启策略">容器重启策略</h4><p>设置恰当的重启策略：<br>no<br>on-failure 【DB类】<br>always（无状态类，缓存类）</p>
<h2 id="无线测试技术会场-云化环境中可靠性测试的自动化技术分享">无线测试技术会场-云化环境中可靠性测试的自动化技术分享</h2><p> 分享了华为怎样将可靠性测试自动化。<br> 整体的实现方案跟ftm发布流程差不多，环境准备完成后，需要自动注入不同的测试点（比如内存泄露，网络波动，断电等）收集系统的处理情况。整个系统还是很牛X的。</p>
<h2 id="17号上午">17号上午</h2><h3 id="软件前沿技术会场-全球最大的OpenStack私有云平台部署和二次开发">软件前沿技术会场-全球最大的OpenStack私有云平台部署和二次开发</h3><p>分享了paypal怎样使用openstack。</p>
<h3 id="DEVOPS-快速迭代中的精益应用性能管理">DEVOPS-快速迭代中的精益应用性能管理</h3><p>听云的APM介绍，没有用开源的框架，自己基于cglib写的一套框架，进行分布式服务应用的监控和节点间的跟踪。<br>我想到了公司用的pinpoint，主要的功能差不多，方法执行时间、堆栈信息、线程信息。<br>后面有时间会对此研究一下，可以跟性能测试很好的结合起来。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>4月16，17两天去参加<a href="http://www.njsd-china.org/">中国南京软件开发者大会</a>，比较感兴趣的方向是性能和容器技术这块，很遗憾这两块的分享比较少。其他技术方面（微服务架构、云平台、移动端、VR等）不能全都听明白，不过也有不少收获，开阔了视野。<br>今年是第二届南京开发者大会，参会的人数比去年多了3倍，大概700人。组委会和媒体人数比较多，挺有氛围。<br>]]>
    
    </summary>
    
      <category term="life" scheme="http://tonylit.me/tags/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker与VMware性能对比]]></title>
    <link href="http://tonylit.me/2016/04/11/docker-vm%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83/"/>
    <id>http://tonylit.me/2016/04/11/docker-vm性能比较/</id>
    <published>2016-04-11T03:37:27.000Z</published>
    <updated>2016-04-11T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>公司的测试环境一直用的vmware，由于docker的优势，现准备将环境部署在docker中。<br>对比虚拟机，docker在磁盘空间上的节省不用说了，MB 与 GB的对比。<br> 性能上的比较一直想做，由于资源和测试方案上面的不足，迟迟没做起来。好在VMware公司自己做了一份性能报告，在此整理一下。<br><a id="more"></a><br>一切源于2014年8月份召开的VMWorld会议，VM宣布与docker合作建立一个项目来研究如何在VM虚拟技术上使用docker。<br>然而IBM出来打了VM的脸（<a href="http://tonylit.me/2015/11/24/docker/">参考之前一篇文章，最下面IBM发表的论文</a>），意思是我做了个实验，结论是docker对物理机几乎没有损耗，但是虚拟机对物理机的损耗很大。<br>VMWare当然不干了，事实是，VMware公司进行了与之前报道类似的实验。实验结果说明，虚拟机环境下运行Docker容器，其性能损失是完全可以接受的，有力的反驳了之前的言论。<br>根据VMware公司所公布的在vSphere虚拟机和直接在服务器中运行Docker容器的结果，可以看出：对于绝大部分的微测试集和Redis测试，vSphere表现出近乎和真实机器同样的性能，而且平均额外开销小于5%；最重要的是，在vSphere虚拟机的Docker容器中运行应用程序的额外开销和在真实服务器上的操作系统上运行容器的额外开销基本相等。<br>VMware公司的实验中，所采用的实验平台、测试集信息以及最终实验结果的详细信息如下。<br>实验平台包括了真实机器（直接运行Ubuntu和CentOS的Linux操作系统）、vSphere虚拟机（在与真实机器同样条件的操作系统中运行即将发布的vSphere）以及运行Docker的真实机器和虚拟机等4中情况。实验中采用包括LINPACK等4个微测试集以及Redis等真实负载。</p>
<p>针对各个测试集的性能结果如下：</p>
<blockquote>
<p>LINPACK。对于45K的问题大小，虚拟化的额外开销基本可以忽略。对于更大的问题，由于内置页表的问题，硬件虚拟化会不可避免的引入相应的额外开销。但是，在虚拟机的Docker容器中运行应用程序和直接在虚拟机中运行并不会引入额外的开销。<br>STREAM。针对所有的操作，虚拟机会引入大约2-3%的额外开销。在真实机器上运行的Docker容器所带来的1-2%的额外开销可能处于噪声边缘，基本可以忽略。<br>FIO。对于随机读操作，虚拟机中的最大可接收IOPS相比于真实机器要小2%左右。但是，二者的随机写操作性能基本相同。总的来讲，Docker容器不会对随机读和随机写造成明显的性能损失。<br>Netperf。对于所有的实验平台，网络的吞吐量是相同的。在延迟测试方面，使用桥接NAT功能时，Docker容器会引入9-10微秒的额外延迟；如果直接使用宿主机网络，Docker容器基本上不会引入额外的延迟时间。<br>Redis。在虚拟机上运行Redis会比真实操作系统中运行性能稍有下降。但是，使用宿主机网络运行Docker容器时，无论Docker运行在真实机器还是虚拟机中，实验性能都跟直接运行在真实机器中基本相同。<br>基于以上的实验结果，VMware公司指出虚拟化会只会引入大约2%到4%的性能损失。在Docker容器中运行像Redis这样的应用程序，其性能是完全可以接受的，而其在安全、管理等方面的优势使得Docker容器成为虚拟化方面的推荐选择。</p>
</blockquote>
<p>具体测试如下：</p>
<h1 id="测试场景：">测试场景：</h1><blockquote>
<p><strong>Native</strong>: Linux OS running directly on hardware (Ubuntu, CentOS)<br><strong>vSphere VM</strong>: Upcoming release of vSphere with the same guest OS as native<br><strong>Native-Docker</strong>: Docker version 1.2 running on a native OS<br><strong>VM-Docker</strong>: Docker version 1.2 running in guest VM on a vSphere host</p>
</blockquote>
<p><img src="/img/docker-vm性能比较/dock_in_vmware_scnerios.png" alt="Alt text"></p>
<h1 id="测试工具">测试工具</h1><blockquote>
<p>LINPACK: This benchmark solves a dense system of linear equations. For large problem sizes it has a large working set and does mostly floating point operations.<br>STREAM: This benchmark measures memory bandwidth across various configurations.<br>FIO: This benchmark is used for I/O benchmarking for block devices and file systems.<br>Netperf: This benchmark is used to measure network performance.<br>Redis: In this experiment, many clients perform continuous requests to the Redis server (key-value datastore).</p>
</blockquote>
<h1 id="测试数据">测试数据</h1><h2 id="LINPACK">LINPACK</h2><p><img src="/img/docker-vm性能比较/dock_in_vmware_linpack.png" alt="Alt text"></p>
<h2 id="STREAM">STREAM</h2><p><img src="/img/docker-vm性能比较/docker_in_vmware_stream.png" alt="Alt text"></p>
<h2 id="FIO">FIO</h2><p><img src="/img/docker-vm性能比较/docker_in_vmware_fio.png" alt="Alt text"></p>
<h2 id="Netperf">Netperf</h2><p><img src="/img/docker-vm性能比较/docker_in_vmware_netperf-latency.png" alt="Alt text"></p>
<p><img src="/img/docker-vm性能比较/docker_in_vmware_netperf-latency-passthrough.png" alt="Alt text"></p>
<p><img src="/img/docker-vm性能比较/docker_in_vmware_netperf-recieve.png" alt="Alt text"></p>
<p><img src="/img/docker-vm性能比较/docker_in_vmware_netperf-transmit.png" alt="Alt text"></p>
<h2 id="Redis">Redis</h2><p><img src="/img/docker-vm性能比较/docker_in_vmware_redis.png" alt="Alt text"></p>
<h1 id="测试结论">测试结论</h1><p><strong>Docker的性能几乎和原生主机性能一致；<br>Docker在VMware虚拟机中的性能损耗很小，仅仅在10GE时延上有大概20%左右的损耗;</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>公司的测试环境一直用的vmware，由于docker的优势，现准备将环境部署在docker中。<br>对比虚拟机，docker在磁盘空间上的节省不用说了，MB 与 GB的对比。<br> 性能上的比较一直想做，由于资源和测试方案上面的不足，迟迟没做起来。好在VMware公司自己做了一份性能报告，在此整理一下。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[pipework配置docker容器网络]]></title>
    <link href="http://tonylit.me/2016/04/08/pipework%E9%85%8D%E7%BD%AEdocker%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C/"/>
    <id>http://tonylit.me/2016/04/08/pipework配置docker容器网络/</id>
    <published>2016-04-08T03:37:27.000Z</published>
    <updated>2016-04-08T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>我希望docker容器有以下几个特点：<br>1.独立的ip，可以和宿主机一个网段<br>2.多宿主机之间的容器相互连通<br>3.容器可以访问外部网络<br><a id="more"></a><br>docker容器默认是可以访问宿主机和外网，但是容器分配的ip不能满足一些业务需求。<br>比如同一台宿主机上面启动两个相同的apache，相同的域名；默认情况只能通过宿主机ip+映射端口的方式访问，不能通过域名的方式访问，这样测试人员用起来很不方便。</p>
<hr>
<p>为了满足以上几点要求，可以通过如下方式实现：<br>1.在宿主机上新建网桥，网桥接口为宿主机网卡<br>2.pipework修改容器的ip<br>OK，下面来看看具体怎样配置：</p>
<hr>
<h1 id="准备"><strong>准备</strong></h1><p>操作系统：centos7<br>docker版本：1.7<br>两台宿主机：<br>A：192.168.43.17<br>B：192.168.43.240</p>
<p><strong>最终实现：</strong><br>A上面启动两个容器，<br>IP分别为192.168.43.245，<br>               192.168.43.246<br> B上面启动两个容器，<br> IP分别为192.168.43.247<br>                192.168.43.248<br> 4个容器相互连通，可以访问宿主机和外部网络。</p>
<h1 id="首先确认一下宿主机上的网卡模式为混杂模式，确认网络可以相互访问">首先确认一下宿主机上的网卡模式为混杂模式，确认网络可以相互访问</h1><p>在实验时，发现docker容器不能访问外网，查了好几天的原因，最终发现我的物理网卡设置的混杂模式为拒绝，哎！！<br><img src="/img/pipework/混杂模式.PNG" alt="Alt text"></p>
<hr>
<h1 id="新建网桥"><strong>新建网桥</strong></h1><p>之间介绍过<a href="http://tonylit.me/2016/04/06/centos7%E7%BD%91%E6%A1%A5%E9%85%8D%E7%BD%AE/">centos7网桥的配置</a>，这里再配置一次：</p>
<h2 id="192-168-43-17宿主机上配置：">192.168.43.17宿主机上配置：</h2><h3 id="新建br0网桥">新建br0网桥</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="preprocessor"># cat /etc/sysconfig/network-scripts/ifcfg-br0 </span></span><br><span class="line">DEVICE=br0</span><br><span class="line">TYPE=Bridge</span><br><span class="line">IPADDR=<span class="number">192.168</span><span class="number">.43</span><span class="number">.17</span></span><br><span class="line">NETMASK=<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line">GATEWAY=<span class="number">192.168</span><span class="number">.43</span><span class="number">.3</span></span><br><span class="line">ONBOOT=yes</span><br><span class="line">BOOTPROTO=none</span><br></pre></td></tr></table></figure>
<h3 id="修改网卡配置">修改网卡配置</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[root@localhost ~]</span><span class="comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens32 </span></span><br><span class="line"><span class="setting">TYPE=<span class="value">Ethernet</span></span></span><br><span class="line"><span class="setting">BOOTPROTO=<span class="value">none</span></span></span><br><span class="line"><span class="setting">DEFROUTE=<span class="value"><span class="keyword">yes</span></span></span></span><br><span class="line"><span class="setting">IPV4_FAILURE_FATAL=<span class="value"><span class="keyword">yes</span></span></span></span><br><span class="line"><span class="setting">IPV6INIT=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_AUTOCONF=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_DEFROUTE=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_PEERDNS=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_PEERROUTES=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_FAILURE_FATAL=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">NAME=<span class="value">ens32</span></span></span><br><span class="line"><span class="setting">UUID=<span class="value"><span class="number">8</span>af1da2e-d878-<span class="number">4325</span>-b28a-f12d7ffbb85c</span></span></span><br><span class="line"><span class="setting">DEVICE=<span class="value">ens32</span></span></span><br><span class="line"><span class="setting">ONBOOT=<span class="value"><span class="keyword">yes</span></span></span></span><br><span class="line"><span class="setting">BRIDGE=<span class="value">br0</span></span></span><br><span class="line"><span class="comment">#IPADDR=192.168.43.17</span></span><br><span class="line"><span class="comment">#PREFIX=24</span></span><br><span class="line"><span class="comment">#GATEWAY=192.168.43.3</span></span><br></pre></td></tr></table></figure>
<h3 id="重启网卡">重启网卡</h3><blockquote>
<p>service network restart</p>
</blockquote>
<p>检查一下成功没：<br><img src="/img/pipework/43-17.PNG" alt="Alt text"></p>
<h2 id="192-168-43-240宿主机配置:">192.168.43.240宿主机配置:</h2><h3 id="新建br0网桥-1">新建br0网桥</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="preprocessor"># cat /etc/sysconfig/network-scripts/ifcfg-br0 </span></span><br><span class="line">DEVICE=br0</span><br><span class="line">TYPE=Bridge</span><br><span class="line">IPADDR=<span class="number">192.168</span><span class="number">.43</span><span class="number">.240</span></span><br><span class="line">NETMASK=<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line">GATEWAY=<span class="number">192.168</span><span class="number">.43</span><span class="number">.3</span></span><br><span class="line">ONBOOT=yes</span><br><span class="line">BOOTPROTO=none</span><br></pre></td></tr></table></figure>
<h3 id="修改网卡配置-1">修改网卡配置</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[root@localhost ~]</span><span class="comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens32 </span></span><br><span class="line"><span class="setting">TYPE=<span class="value">Ethernet</span></span></span><br><span class="line"><span class="setting">BOOTPROTO=<span class="value">none</span></span></span><br><span class="line"><span class="setting">DEFROUTE=<span class="value"><span class="keyword">yes</span></span></span></span><br><span class="line"><span class="setting">IPV4_FAILURE_FATAL=<span class="value"><span class="keyword">yes</span></span></span></span><br><span class="line"><span class="setting">IPV6INIT=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_AUTOCONF=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_DEFROUTE=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_PEERDNS=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_PEERROUTES=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_FAILURE_FATAL=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">NAME=<span class="value">ens32</span></span></span><br><span class="line"><span class="setting">UUID=<span class="value"><span class="number">8</span>af1da2e-d878-<span class="number">4325</span>-b28a-f12d7ffbb85c</span></span></span><br><span class="line"><span class="setting">DEVICE=<span class="value">ens32</span></span></span><br><span class="line"><span class="setting">ONBOOT=<span class="value"><span class="keyword">yes</span></span></span></span><br><span class="line"><span class="setting">BRIDGE=<span class="value">br0</span></span></span><br><span class="line"><span class="comment">#IPADDR=192.168.43.17</span></span><br><span class="line"><span class="comment">#PREFIX=24</span></span><br><span class="line"><span class="comment">#GATEWAY=192.168.43.3</span></span><br></pre></td></tr></table></figure>
<h3 id="重启网卡-1">重启网卡</h3><blockquote>
<p>service network restart</p>
</blockquote>
<p>检查一下成功没：<img src="/img/pipework/43-240.PNG" alt="Alt text"></p>
<hr>
<h1 id="安装pipework"><strong>安装pipework</strong></h1><p>二进制文件，可以从git上下载<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># git clone https://github.com/jpetazzo/pipework   </span></span><br><span class="line"><span class="preprocessor"># cd pipework/</span></span><br><span class="line"><span class="preprocessor"># cp pipework  /usr/bin</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/pipework/pipework.PNG" alt="Alt text"></p>
<hr>
<h1 id="pipework配置容器网络"><strong>pipework配置容器网络</strong></h1><p>1.先启动一个容器，网络模式为none</p>
<blockquote>
<p>docker run -ti –net=none –name=test1    docker.vemic.com:5000/centos5.11 /bin/bash</p>
</blockquote>
<p>2.设置容器网络为192.168.43.245，网关为192.168.43.3</p>
<blockquote>
<p>pipework br0 test1 192.168.43.245/24@192.168.43.3</p>
</blockquote>
<p>进入容器看一下ip：<br><img src="/img/pipework/test.PNG" alt="Alt text"></p>
<p>按照以上方式配置其他容器<br>192.168.43.246<br>另外一台宿主机上配置：<br>192.168.43.247<br>192.168.43.248</p>
<hr>
<h1 id="配置完成，结果测试"><strong>配置完成，结果测试</strong></h1><p>登录到一个容器中，ping其他容器、宿主机、外部网络</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="number">4</span>b6561695c71 /]<span class="preprocessor"># ping <span class="number">192.168</span><span class="number">.43</span><span class="number">.245</span></span></span><br><span class="line">PING <span class="number">192.168</span><span class="number">.43</span><span class="number">.245</span> (<span class="number">192.168</span><span class="number">.43</span><span class="number">.245</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span><span class="number">.43</span><span class="number">.245</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">0.059</span> ms</span><br><span class="line">^C</span><br><span class="line">--- <span class="number">192.168</span><span class="number">.43</span><span class="number">.245</span> ping statistics ---</span><br><span class="line"><span class="number">1</span> packets transmitted, <span class="number">1</span> received, <span class="number">0</span>% packet loss, time <span class="number">0</span>ms</span><br><span class="line">rtt min/avg/max/mdev = <span class="number">0.059</span>/<span class="number">0.059</span>/<span class="number">0.059</span>/<span class="number">0.000</span> ms</span><br><span class="line">[root@<span class="number">4</span>b6561695c71 /]<span class="preprocessor"># ping <span class="number">192.168</span><span class="number">.43</span><span class="number">.246</span></span></span><br><span class="line">PING <span class="number">192.168</span><span class="number">.43</span><span class="number">.246</span> (<span class="number">192.168</span><span class="number">.43</span><span class="number">.246</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span><span class="number">.43</span><span class="number">.246</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">0.209</span> ms</span><br><span class="line">^C</span><br><span class="line">--- <span class="number">192.168</span><span class="number">.43</span><span class="number">.246</span> ping statistics ---</span><br><span class="line"><span class="number">1</span> packets transmitted, <span class="number">1</span> received, <span class="number">0</span>% packet loss, time <span class="number">0</span>ms</span><br><span class="line">rtt min/avg/max/mdev = <span class="number">0.209</span>/<span class="number">0.209</span>/<span class="number">0.209</span>/<span class="number">0.000</span> ms</span><br><span class="line">[root@<span class="number">4</span>b6561695c71 /]<span class="preprocessor"># ping <span class="number">192.168</span><span class="number">.43</span><span class="number">.247</span></span></span><br><span class="line">PING <span class="number">192.168</span><span class="number">.43</span><span class="number">.247</span> (<span class="number">192.168</span><span class="number">.43</span><span class="number">.247</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span><span class="number">.43</span><span class="number">.247</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">1.50</span> ms</span><br><span class="line">^C</span><br><span class="line">--- <span class="number">192.168</span><span class="number">.43</span><span class="number">.247</span> ping statistics ---</span><br><span class="line"><span class="number">1</span> packets transmitted, <span class="number">1</span> received, <span class="number">0</span>% packet loss, time <span class="number">0</span>ms</span><br><span class="line">rtt min/avg/max/mdev = <span class="number">1.505</span>/<span class="number">1.505</span>/<span class="number">1.505</span>/<span class="number">0.000</span> ms</span><br><span class="line">[root@<span class="number">4</span>b6561695c71 /]<span class="preprocessor"># ping <span class="number">192.168</span><span class="number">.43</span><span class="number">.248</span></span></span><br><span class="line">PING <span class="number">192.168</span><span class="number">.43</span><span class="number">.248</span> (<span class="number">192.168</span><span class="number">.43</span><span class="number">.248</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span><span class="number">.43</span><span class="number">.248</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">1.61</span> ms</span><br><span class="line">^C</span><br><span class="line">--- <span class="number">192.168</span><span class="number">.43</span><span class="number">.248</span> ping statistics ---</span><br><span class="line"><span class="number">1</span> packets transmitted, <span class="number">1</span> received, <span class="number">0</span>% packet loss, time <span class="number">0</span>ms</span><br><span class="line">rtt min/avg/max/mdev = <span class="number">1.619</span>/<span class="number">1.619</span>/<span class="number">1.619</span>/<span class="number">0.000</span> ms</span><br><span class="line">[root@<span class="number">4</span>b6561695c71 /]<span class="preprocessor"># ping <span class="number">192.168</span><span class="number">.43</span><span class="number">.17</span></span></span><br><span class="line">PING <span class="number">192.168</span><span class="number">.43</span><span class="number">.17</span> (<span class="number">192.168</span><span class="number">.43</span><span class="number">.17</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span><span class="number">.43</span><span class="number">.17</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">0.303</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span><span class="number">.43</span><span class="number">.17</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">64</span> time=<span class="number">0.086</span> ms</span><br><span class="line">^C</span><br><span class="line">--- <span class="number">192.168</span><span class="number">.43</span><span class="number">.17</span> ping statistics ---</span><br><span class="line"><span class="number">2</span> packets transmitted, <span class="number">2</span> received, <span class="number">0</span>% packet loss, time <span class="number">1000</span>ms</span><br><span class="line">rtt min/avg/max/mdev = <span class="number">0.086</span>/<span class="number">0.194</span>/<span class="number">0.303</span>/<span class="number">0.109</span> ms</span><br><span class="line">[root@<span class="number">4</span>b6561695c71 /]<span class="preprocessor"># ping <span class="number">192.168</span><span class="number">.43</span><span class="number">.240</span></span></span><br><span class="line">PING <span class="number">192.168</span><span class="number">.43</span><span class="number">.240</span> (<span class="number">192.168</span><span class="number">.43</span><span class="number">.240</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span><span class="number">.43</span><span class="number">.240</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">0.787</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span><span class="number">.43</span><span class="number">.240</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">64</span> time=<span class="number">0.617</span> ms</span><br><span class="line">^C</span><br><span class="line">--- <span class="number">192.168</span><span class="number">.43</span><span class="number">.240</span> ping statistics ---</span><br><span class="line"><span class="number">2</span> packets transmitted, <span class="number">2</span> received, <span class="number">0</span>% packet loss, time <span class="number">1000</span>ms</span><br><span class="line">rtt min/avg/max/mdev = <span class="number">0.617</span>/<span class="number">0.702</span>/<span class="number">0.787</span>/<span class="number">0.085</span> ms</span><br><span class="line">[root@<span class="number">4</span>b6561695c71 /]<span class="preprocessor"># ping <span class="number">192.168</span><span class="number">.43</span><span class="number">.10</span></span></span><br><span class="line">PING <span class="number">192.168</span><span class="number">.43</span><span class="number">.10</span> (<span class="number">192.168</span><span class="number">.43</span><span class="number">.10</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span><span class="number">.43</span><span class="number">.10</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">2.11</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span><span class="number">.43</span><span class="number">.10</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">64</span> time=<span class="number">0.415</span> ms</span><br><span class="line">^C</span><br><span class="line">--- <span class="number">192.168</span><span class="number">.43</span><span class="number">.10</span> ping statistics ---</span><br><span class="line"><span class="number">2</span> packets transmitted, <span class="number">2</span> received, <span class="number">0</span>% packet loss, time <span class="number">1001</span>ms</span><br><span class="line">rtt min/avg/max/mdev = <span class="number">0.415</span>/<span class="number">1.263</span>/<span class="number">2.111</span>/<span class="number">0.848</span> ms</span><br></pre></td></tr></table></figure>
<p>都可以ping通</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我希望docker容器有以下几个特点：<br>1.独立的ip，可以和宿主机一个网段<br>2.多宿主机之间的容器相互连通<br>3.容器可以访问外部网络<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[centos7 网桥的配置]]></title>
    <link href="http://tonylit.me/2016/04/06/centos7%E7%BD%91%E6%A1%A5%E9%85%8D%E7%BD%AE/"/>
    <id>http://tonylit.me/2016/04/06/centos7网桥配置/</id>
    <published>2016-04-06T03:37:27.000Z</published>
    <updated>2016-04-06T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>centos7下配置网桥，两个步骤:<br>1.新建网桥配置<br>2.修改网卡配置<br><a id="more"></a></p>
<h1 id="新建br0_网桥配置">新建br0 网桥配置</h1><p>在/etc/sysconfig/network-scripts/目录下新建ifcfg-br0,添加如下配置信息：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=br0</span><br><span class="line">TYPE=Bridge</span><br><span class="line">IPADDR=<span class="number">192.168</span><span class="number">.43</span><span class="number">.17</span></span><br><span class="line">NETMASK=<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line">GATEWAY=<span class="number">192.168</span><span class="number">.43</span><span class="number">.3</span></span><br><span class="line">ONBOOT=yes</span><br><span class="line">BOOTPROTO=none</span><br></pre></td></tr></table></figure>
<h1 id="修改网卡配置">修改网卡配置</h1><p>我这里的网卡叫ens32，修改ifcfg-ens32<br>，并增加BRIDGE=br0</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">TYPE=<span class="value">Ethernet</span></span></span><br><span class="line"><span class="setting">BOOTPROTO=<span class="value">none</span></span></span><br><span class="line"><span class="setting">DEFROUTE=<span class="value"><span class="keyword">yes</span></span></span></span><br><span class="line"><span class="setting">IPV4_FAILURE_FATAL=<span class="value"><span class="keyword">yes</span></span></span></span><br><span class="line"><span class="setting">IPV6INIT=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_AUTOCONF=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_DEFROUTE=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_PEERDNS=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_PEERROUTES=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">IPV6_FAILURE_FATAL=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">NAME=<span class="value">ens32</span></span></span><br><span class="line"><span class="setting">UUID=<span class="value"><span class="number">8</span>af1da2e-d878-<span class="number">4325</span>-b28a-f12d7ffbb85c</span></span></span><br><span class="line"><span class="setting">DEVICE=<span class="value">ens32</span></span></span><br><span class="line"><span class="setting">ONBOOT=<span class="value"><span class="keyword">yes</span></span></span></span><br><span class="line"><span class="setting">BRIDGE=<span class="value">br0</span></span></span><br><span class="line"><span class="comment">#IPADDR=192.168.43.17</span></span><br><span class="line"><span class="comment">#PREFIX=24</span></span><br><span class="line"><span class="comment">#GATEWAY=192.168.43.3</span></span><br></pre></td></tr></table></figure>
<h1 id="重启网卡">重启网卡</h1><blockquote>
<p>service network restart</p>
</blockquote>
<p>看看生效没：<br><img src="/img/docker/centos7网桥.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>centos7下配置网桥，两个步骤:<br>1.新建网桥配置<br>2.修改网卡配置<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[centos7 自定义docker网桥]]></title>
    <link href="http://tonylit.me/2016/04/05/centos7%E8%87%AA%E5%AE%9A%E4%B9%89docker%E7%BD%91%E6%A1%A5/"/>
    <id>http://tonylit.me/2016/04/05/centos7自定义docker网桥/</id>
    <published>2016-04-05T03:37:27.000Z</published>
    <updated>2016-04-05T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>如果你不想使用docker0，docker可以指定使用的网桥</p>
<blockquote>
<p>-b BRIDGE or –bridge=BRIDGE</p>
</blockquote>
<a id="more"></a>
<h1 id="新建网桥_编辑bridge的配置文件">新建网桥 编辑bridge的配置文件</h1><p>我这里使用的centos7，在/etc/sysconfig/network-scripts下新建一个网桥配置：ifcfg-br0 并编辑：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=<span class="string">"br0"</span></span><br><span class="line">ONBOOT=<span class="string">"yes"</span></span><br><span class="line">TYPE=Bridge</span><br><span class="line">BOOTPROTO=<span class="keyword">static</span></span><br><span class="line">IPADDR=<span class="number">192.168</span><span class="number">.43</span><span class="number">.244</span></span><br><span class="line">NETMASK=<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>
<p>我们看到，这里指定一个名叫br0的网桥，ip为192.168.43.244</p>
<h2 id="重启网络">重启网络</h2><blockquote>
<p> service network restart</p>
</blockquote>
<p>查看一下网桥有木有生效<br><img src="/img/docker网桥/br0网桥.PNG" alt="Alt text"><br>好的，已经生效！</p>
<h1 id="修改docker启动参数，增加-b=br0">修改docker启动参数，增加-b=br0</h1><blockquote>
<p>vim /lib/systemd/system/docker.service</p>
</blockquote>
<p><img src="/img/docker网桥/网桥参数.PNG" alt="Alt text"></p>
<h2 id="重启docker服务">重启docker服务</h2><blockquote>
<p>service docker restart</p>
</blockquote>
<p>创建一个容器，看一下是不是连接到br0网桥上了<br><img src="/img/docker网桥/brctl-show.PNG" alt="Alt text"></p>
<p>我们看到新建的容器连接到了br0网桥上面</p>
<h1 id="删除网桥">删除网桥</h1><p>当然，如果想删除网桥，可以用以下命令：</p>
<blockquote>
<p> ip link set dev br0 down<br> ip link del br0</p>
</blockquote>
<h1 id="拓扑图">拓扑图</h1><p><img src="/img/docker网桥/dockertuopu-1.jpg" alt="Alt text"><br><img src="/img/docker网桥/dockertuopu-2.jpg" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>如果你不想使用docker0，docker可以指定使用的网桥</p>
<blockquote>
<p>-b BRIDGE or –bridge=BRIDGE</p>
</blockquote>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker 远程访问]]></title>
    <link href="http://tonylit.me/2016/04/02/docker%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    <id>http://tonylit.me/2016/04/02/docker远程连接/</id>
    <published>2016-04-02T03:37:27.000Z</published>
    <updated>2016-04-02T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>docker的client与server有两种连接方式，一种是socket连接，另外一种就是remote api。<br>这里整理一下怎样进行remote api访问docker的server。<br><a id="more"></a><br>docker守护进程启动时-H 有三个选项：配置服务端的3种连接方式<br><img src="/img/docker/docker连接方式.PNG" alt="Alt text"></p>
<h1 id="修改成tcp的连接方式">修改成tcp的连接方式</h1><p>我这里是centos7，修改/lib/systemd/system/docker.service<br><img src="/img/docker/docker-tcp连接方式.PNG" alt="Alt text"></p>
<p>修改完成后重启docker service</p>
<blockquote>
<p>service docker restart</p>
</blockquote>
<p>看一下是不是tcp的方式<br><img src="/img/docker/docker-tcp进程.PNG" alt="Alt text"></p>
<h1 id="测试一下remote_api">测试一下remote api</h1><blockquote>
<p>curl localhost:2375/info<br><img src="/img/docker/remote-info.PNG" alt="Alt text"></p>
</blockquote>
<h1 id="也可以通过修改DOCKER_HOST的方式">也可以通过修改DOCKER_HOST的方式</h1><blockquote>
<p>export DOCKER_HOST=”tcp://localhost:2375”</p>
</blockquote>
<p>添加此环境变量后，不用修改docker守护进程的启动方式也可以进行docker remote连接。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>docker的client与server有两种连接方式，一种是socket连接，另外一种就是remote api。<br>这里整理一下怎样进行remote api访问docker的server。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用weave实现docker多宿主机互联]]></title>
    <link href="http://tonylit.me/2016/03/29/docker-weave%E7%BD%91%E7%BB%9C%E4%BA%92%E8%BF%9E/"/>
    <id>http://tonylit.me/2016/03/29/docker-weave网络互连/</id>
    <published>2016-03-29T03:37:27.000Z</published>
    <updated>2016-03-29T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>使用weave实现docker多宿主机互联<br><a id="more"></a><br>weave是编织的意思，这里指的是建立一个虚拟的网络，将不同主机上的docker容器连接起来<br><img src="/img/docker-weave/weave图.PNG" alt="Alt text"><br>weave的实现原理如下图：</p>
<h1 id="环境准备">环境准备</h1><p>两台装有docker的物理机<br>192.168.1.111<br>192.168.1.113</p>
<h1 id="安装weave">安装weave</h1><p>从github上下载二进制文件安装</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># sudo wget -O <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>weave https:<span class="comment">//raw.githubusercontent.com/zettio/weave/master/weave</span></span><br><span class="line"># sudo chmod a+x <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>weave</span><br></pre></td></tr></table></figure>
<h1 id="启动weave">启动weave</h1><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># weave launch</span></span><br><span class="line">Unable <span class="keyword">to</span> find image <span class="string">'zettio/weave'</span> locally</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p><img src="/img/docker-weave/weave launch.PNG" alt="Alt text"></p>
<p>其实下载了三个镜像文件，并且启动了3个容器<br><img src="/img/docker-weave/weave镜像文件.PNG" alt="Alt text"><br><img src="/img/docker-weave/weave容器.PNG" alt="Alt text"></p>
<p>此时会发现有两个网桥，一个是Docker默认生成的，另一个是Weave生成的<br><img src="/img/docker-weave/weave网桥.PNG" alt="Alt text"></p>
<h1 id="连接不同主机">连接不同主机</h1><p>主机B要连接到主机A，则需要在weave launch 后面加上A的ip<br>在B的主机上</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># weave launch <span class="number">192.168</span><span class="number">.1</span><span class="number">.111</span></span></span><br></pre></td></tr></table></figure>
<h1 id="通过weave启动容器">通过weave启动容器</h1><p>可以使用如下方式启动</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weave run <span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span>/<span class="number">24</span> -ti centos /bin/bash</span><br></pre></td></tr></table></figure>
<p>网上有一个比较好的做法：将启动后容器的id赋给c2变量</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># c2=$(weave run <span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span>/<span class="number">24</span> -ti centos /bin/bash)</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># docker-enter c2</span></span><br></pre></td></tr></table></figure>
<p>OK，两个主机上的容器可以互联了</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>使用weave实现docker多宿主机互联<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker pull关于https的报错处理]]></title>
    <link href="http://tonylit.me/2016/03/29/docker_pull_https_error/"/>
    <id>http://tonylit.me/2016/03/29/docker_pull_https_error/</id>
    <published>2016-03-29T03:37:27.000Z</published>
    <updated>2016-03-29T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>从docker1.3.2版本以后，docker registry使用的是https，用docker pull 非https的docker regsitry的时候会报下面错误：<br><img src="/img/docker异常/docker_pull_https_error.PNG" alt="Alt text"></p>
<a id="more"></a>
<p>网上很多解决方法都是Ubuntu系统的，centos7 docker的配置文件真是难找。</p>
<h1 id="修改docker配置文件">修改docker配置文件</h1><p>刚开始修改/etc/sysconfig/docker文件，加入–insecure-registry docker.vemic.com:5000，没启作用。<br>起作用的配置如下修改：<br>vi /usr/lib/systemd/system/docker.service</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[Unit]</span></span><br><span class="line"><span class="setting">Description=<span class="value">Docker Application Container Engine</span></span></span><br><span class="line"><span class="comment">##这里讲https-&gt;http</span></span><br><span class="line"><span class="setting">Documentation=<span class="value">http://docs.docker.com</span></span></span><br><span class="line"><span class="setting">After=<span class="value">network.target docker.socket</span></span></span><br><span class="line"><span class="setting">Requires=<span class="value">docker.socket</span></span></span><br><span class="line"><span class="title"></span><br><span class="line">[Service]</span></span><br><span class="line"><span class="comment">##这里加入-d  --insecure-registry docker.vemic.com:5000</span></span><br><span class="line"><span class="setting">ExecStart=<span class="value">/usr/bin/docker -d  --insecure-registry docker.vemic.com:<span class="number">5000</span> -H fd:// <span class="variable">$OPTIONS</span> <span class="variable">$DOCKER_STORAGE_OPTIONS</span>  </span></span></span><br><span class="line"><span class="setting">MountFlags=<span class="value">slave</span></span></span><br><span class="line"><span class="setting">LimitNOFILE=<span class="value"><span class="number">1048576</span></span></span></span><br><span class="line"><span class="setting">LimitNPROC=<span class="value"><span class="number">1048576</span></span></span></span><br><span class="line"><span class="setting">LimitCORE=<span class="value">infinity</span></span></span><br><span class="line"><span class="title"></span><br><span class="line">[Install]</span></span><br><span class="line"><span class="setting">WantedBy=<span class="value">multi-user.target</span></span></span><br></pre></td></tr></table></figure>
<p>以上修改后重启docker</p>
<blockquote>
<p>service docker restart<br>systemctl daemon-reload</p>
</blockquote>
<p>OK了</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>从docker1.3.2版本以后，docker registry使用的是https，用docker pull 非https的docker regsitry的时候会报下面错误：<br><img src="/img/docker异常/docker_pull_https_error.PNG" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker网络学习]]></title>
    <link href="http://tonylit.me/2016/03/22/docker%E5%9B%9B%E7%A7%8D%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F/"/>
    <id>http://tonylit.me/2016/03/22/docker四种网络模式/</id>
    <published>2016-03-22T03:37:27.000Z</published>
    <updated>2016-03-22T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>docker发展到现在，依然后很多不完善的地方，其中网络方面就是比较薄弱的部分。最近在学习docker网络方面的知识，在此整理一下。<br><a id="more"></a></p>
<h1 id="Docker的4种网络模式">Docker的4种网络模式</h1><p>我们在使用docker run创建Docker容器时，可以用–net选项指定容器的网络模式，Docker有以下4种网络模式：</p>
<blockquote>
<p><strong>host模式</strong>，使用–net=host指定。<br><strong>container模式</strong>，使用–net=container:NAME_or_ID指定。<br><strong>none模式</strong>，使用–net=none指定。<br><strong>bridge模式</strong>，使用–net=bridge指定，默认设置。</p>
</blockquote>
<p>研究docker网络之前先看一下docker宿主机的网络情况：<br>输入ifconfig<br><img src="/img/docker-network/宿主机网络情况.PNG" alt="Alt text"><br>可以看到，安装了docker后，docker会虚拟出一个名字叫docker0的网桥（其上有一个 docker0 内部接口），它在内核层连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到同一个物理网络。</p>
<hr>
<p>基于centos:5.11版本我自己做了一个镜像focustech/centos:5.11，就用这个镜像来实验。</p>
<h1 id="bridge模式-默认模式">bridge模式-默认模式</h1><p>bridge模式是Docker默认的网络设置，此模式会为每一个容器分配Network Namespace、设置IP等，并将一个主机上的Docker容器连接到一个虚拟网桥上。<br>启动一个容器看一下：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="command">run</span> -ti <span class="comment">--rm focustech/centos:5.11 /bin/bash</span></span><br></pre></td></tr></table></figure>
<p><img src="/img/docker-network/docker-bridge-network.PNG" alt="Alt text"></p>
<h2 id="bridge模式拓扑">bridge模式拓扑</h2><p>上面也提到了，docker server启动的时候，会创建名叫docker0的虚拟网桥，在此宿主机上启动的docker容器都会连接到这个网桥上来进行通信，有点类似于交换机。<br>容器的ip分配会从<a href="http://tools.ietf.org/html/rfc1918" target="_blank" rel="external">RFC1918</a>所定义的私有ip网段中取，一般会使用172.17.0.0/16这个网段</p>
<p><img src="/img/docker-network/docker0拓扑.png" alt="Alt text"><br>Docker完成以上网络配置的过程大致是这样的：</p>
<blockquote>
<p>在主机上创建一对虚拟网卡veth<br>pair设备。veth设备总是成对出现的，它们组成了一个数据的通道，数据从一个设备进入，就会从另一个设备出来。因此，veth设备常用来连接两个网络设备。</p>
<p>Docker将veth pair设备的一端放在新创建的容器中，并命名为eth0。另一端放在主机中，以veth65f9这样类似的名字命名，并将这个网络设备加入到docker0网桥中，可以通过brctl show命令查看。</p>
<p>从docker0子网中分配一个IP给容器使用，并设置docker0的IP地址为容器的默认网关。</p>
</blockquote>
<h1 id="host模式">host模式</h1><p>Docker使用了Linux的Namespaces技术来进行资源隔离，如PID Namespace隔离进程，Mount Namespace隔离文件系统，Network Namespace隔离网络等。一个Network Namespace提供了一份独立的网络环境，包括网卡、路由、Iptable规则等都与其他的Network Namespace隔离。一个Docker容器一般会分配一个独立的Network Namespace。但如果启动容器的时候使用host模式，那么这个容器将不会获得一个独立的Network Namespace，而是和宿主机共用一个Network Namespace。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。</p>
<p>使用–net=host来启动容器看一下：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span> -ti --<span class="keyword">net</span>=host --<span class="keyword">rm</span> focustech/centos:5.11 /bin/bash</span><br></pre></td></tr></table></figure></p>
<p>输入ifconfig，会看到它的网络情况和宿主机器的一模一样。</p>
<h1 id="container模式">container模式</h1><p>这个模式指定新创建的容器和已经存在的容器共享一个network namespace。新创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过lo网卡设备通信。</p>
<h1 id="none模式">none模式</h1><p>在这种模式下，Docker容器拥有自己的Network Namespace，但是，并不为Docker容器进行任何网络配置。也就是说，这个Docker容器没有网卡、IP、路由等信息。需要我们自己为Docker容器添加网卡、配置IP等。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span> -ti --<span class="keyword">net</span>=none --<span class="keyword">rm</span> focustech/centos:5.11 /bin/bash</span><br></pre></td></tr></table></figure>
<p><img src="/img/docker-network/none.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>docker发展到现在，依然后很多不完善的地方，其中网络方面就是比较薄弱的部分。最近在学习docker网络方面的知识，在此整理一下。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[spring quartz执行定时任务]]></title>
    <link href="http://tonylit.me/2016/03/15/spring%20quartz%E9%85%8D%E7%BD%AE/"/>
    <id>http://tonylit.me/2016/03/15/spring quartz配置/</id>
    <published>2016-03-15T03:37:27.000Z</published>
    <updated>2016-03-15T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>最近定时任务总是执行延后，定时任务执行比较频繁，而且时间比较长<br>查了许久，发现自己没有配置定时任务线程数量<br>在此回顾一下quartz配置。<br><a id="more"></a></p>
<h1 id="需要执行任务的业务类">需要执行任务的业务类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">syncAppTrigger</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SyncApp syncApp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        syncApp.delete();</span><br><span class="line">        syncApp.sync();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="quzrtz-xml_配置">quzrtz.xml 配置</h1><p>线程池配置,默认是10个，在此修改为50个<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 线程执行器配置，用于任务注册 --&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"executor"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"corePoolSize"</span> <span class="attribute">value</span>=<span class="value">"50"</span> /&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxPoolSize"</span> <span class="attribute">value</span>=<span class="value">"50"</span> /&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"queueCapacity"</span> <span class="attribute">value</span>=<span class="value">"500"</span> /&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>任务启动<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- schedule的配置信息 --&gt;</span><br><span class="line">&lt;bean class=<span class="string">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span></span><br><span class="line">      lazy-init=<span class="string">"false"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"triggers"</span>&gt;</span><br><span class="line">        &lt;list&gt;</span><br><span class="line">            &lt;<span class="keyword">ref</span> bean=<span class="string">"syncAppTrigger"</span> /&gt;</span><br><span class="line">        &lt;/list&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">     &lt;property name=<span class="string">"taskExecutor"</span> <span class="keyword">ref</span>=<span class="string">"executor"</span> /&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p>
<p>配置触发器<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- trigger的配置信息 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 应用定时任务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"syncApp"</span> <span class="attribute">class</span>=<span class="value">"com.focustech.fds.quartz.trigger.sync.syncAppTrigger"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"syncAppTask"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"targetObject"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">ref</span> <span class="attribute">bean</span>=<span class="value">"syncApp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"targetMethod"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">value</span>&gt;</span>excute<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"syncAppTrigger"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.scheduling.quartz.CronTriggerBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"jobDetail"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">ref</span> <span class="attribute">bean</span>=<span class="value">"syncAppTask"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"cronExpression"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">value</span>&gt;</span>0 0/1 * * * ?<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="Cron常用的表达式">Cron常用的表达式</h1><blockquote>
<p>“0 0 12 <em> </em> ?” 每天中午12点触发<br>“0 15 10 ? <em> </em>“ 每天上午10:15触发<br>“0 15 10 <em> </em> ?” 每天上午10:15触发<br>“0 15 10 <em> </em> ? <em>“ 每天上午10:15触发<br>“0 15 10 </em> <em> ? 2005”  2005年的每天上午10:15触发<br>“0 </em> 14 <em> </em> ?” 在每天下午2点到下午2:59期间的每1分钟触发<br>“0 0/5 14 <em> </em> ?” 在每天下午2点到下午2:55期间的每5分钟触发<br>“0 0/5 14,18 <em> </em> ?”  在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发<br>“0 0-5 14 <em> </em> ?”  在每天下午2点到下午2:05期间的每1分钟触发<br>“0 10,44 14 ? 3 WED” 每年三月的星期三的下午2:10和2:44触发<br>“0 15 10 ? <em> MON-FRI” 周一至周五的上午10:15触发<br>“0 15 10 15 </em> ?” 每月15日上午10:15触发 “0<br>15 10 L <em> ?” 每月最后一日的上午10:15触发<br>“0 15 10 ? </em> 6L” 每月的最后一个星期五上午10:15触发<br>“0 15 10 ? <em> 6L 2002-2005” 2002年至2005年的每月的最后一个星期五上午10:15触发<br>“0 15 10 ? </em>6#3” 每月的第三个星期五上午10:15触发</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近定时任务总是执行延后，定时任务执行比较频繁，而且时间比较长<br>查了许久，发现自己没有配置定时任务线程数量<br>在此回顾一下quartz配置。<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[40个Java多线程问题总结]]></title>
    <link href="http://tonylit.me/2016/03/12/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%8440%E4%B8%AA%E9%97%AE%E9%A2%98/"/>
    <id>http://tonylit.me/2016/03/12/java多线程的40个问题/</id>
    <published>2016-03-12T03:37:27.000Z</published>
    <updated>2016-03-12T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>朋友圈分享的好文章，关于java多线程的，在此转载。我很喜欢作者对技术的态度，引用他的一段话：</p>
<blockquote>
<p>我不能保证写的每个地方都是对的，但是至少能保证不复制、不黏贴，保证每一句话、每一行代码都经过了认真的推敲、仔细的斟酌。每一篇文章的背后，希望都能看到自己对于技术、对于生活的态度。<br>我相信乔布斯说的，只有那些疯狂到认为自己可以改变世界的人才能真正地改变世界。面对压力，我可以挑灯夜战、不眠不休；面对困难，我愿意迎难而上、永不退缩</p>
</blockquote>
<p><a href="http://www.cnblogs.com/xrq730/p/5060921.html" target="_blank" rel="external">原创地址</a><br><a id="more"></a></p>
<h1 id="40个问题汇总">40个问题汇总</h1><h2 id="1、多线程有什么用？">1、多线程有什么用？</h2><p>一个可能在很多人看来很扯淡的一个问题：我会用多线程就好了，还管它有什么用？在我看来，这个回答更扯淡。所谓”知其然知其所以然”，”会用”只是”知其然”，”为什么用”才是”知其所以然”，只有达到”知其然知其所以然”的程度才可以说是把一个知识点运用自如。OK，下面说说我对这个问题的看法：</p>
<p>（1）发挥多核CPU的优势</p>
<p>随着工业的进步，现在的笔记本、台式机乃至商用的应用服务器至少也都是双核的，4核、8核甚至16核的也都不少见，如果是单线程的程序，那么在双核CPU上就浪费了50%，在4核CPU上就浪费了75%。单核CPU上所谓的”多线程”那是假的多线程，同一时间处理器只会处理一段逻辑，只不过线程之间切换得比较快，看着像多个线程”同时”运行罢了。多核CPU上的多线程才是真正的多线程，它能让你的多段逻辑同时工作，多线程，可以真正发挥出多核CPU的优势来，达到充分利用CPU的目的。</p>
<p>（2）防止阻塞</p>
<p>从程序运行效率的角度来看，单核CPU不但不会发挥出多线程的优势，反而会因为在单核CPU上运行多线程导致线程上下文的切换，而降低程序整体的效率。但是单核CPU我们还是要应用多线程，就是为了防止阻塞。试想，如果单核CPU使用单线程，那么只要这个线程阻塞了，比方说远程读取某个数据吧，对端迟迟未返回又没有设置超时时间，那么你的整个程序在数据返回回来之前就停止运行了。多线程可以防止这个问题，多条线程同时运行，哪怕一条线程的代码执行读取数据阻塞，也不会影响其它任务的执行。</p>
<p>（3）便于建模</p>
<p>这是另外一个没有这么明显的优点了。假设有一个大的任务A，单线程编程，那么就要考虑很多，建立整个程序模型比较麻烦。但是如果把这个大的任务A分解成几个小任务，任务B、任务C、任务D，分别建立程序模型，并通过多线程分别运行这几个任务，那就简单很多了。</p>
<h2 id="2、创建线程的方式">2、创建线程的方式</h2><p>比较常见的一个问题了，一般就是两种：</p>
<p>（1）继承Thread类</p>
<p>（2）实现Runnable接口</p>
<p>至于哪个好，不用说肯定是后者好，因为实现接口的方式比继承类的方式更灵活，也能减少程序之间的耦合度，面向接口编程也是设计模式6大原则的核心。</p>
<h2 id="3、start()方法和run()方法的区别">3、start()方法和run()方法的区别</h2><p>只有调用了start()方法，才会表现出多线程的特性，不同线程的run()方法里面的代码交替执行。如果只是调用run()方法，那么代码还是同步执行的，必须等待一个线程的run()方法里面的代码全部执行完毕之后，另外一个线程才可以执行其run()方法里面的代码。</p>
<h2 id="4、Runnable接口和Callable接口的区别">4、Runnable接口和Callable接口的区别</h2><p>有点深的问题了，也看出一个Java程序员学习知识的广度。</p>
<p>Runnable接口中的run()方法的返回值是void，它做的事情只是纯粹地去执行run()方法中的代码而已；Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。</p>
<p>这其实是很有用的一个特性，因为多线程相比单线程更难、更复杂的一个重要原因就是因为多线程充满着未知性，某条线程是否执行了？某条线程执行了多久？某条线程执行的时候我们期望的数据是否已经赋值完毕？无法得知，我们能做的只是等待这条多线程的任务执行完毕而已。而Callable+Future/FutureTask却可以获取多线程运行的结果，可以在等待时间太长没获取到需要的数据的情况下取消该线程的任务，真的是非常有用。</p>
<h2 id="5、CyclicBarrier和CountDownLatch的区别">5、CyclicBarrier和CountDownLatch的区别</h2><p>两个看上去有点像的类，都在java.util.concurrent下，都可以用来表示代码运行到某个点上，二者的区别在于：</p>
<p>（1）CyclicBarrier的某个线程运行到某个点上之后，该线程即停止运行，直到所有的线程都到达了这个点，所有线程才重新运行；CountDownLatch则不是，某线程运行到某个点上之后，只是给某个数值-1而已，该线程继续运行</p>
<p>（2）CyclicBarrier只能唤起一个任务，CountDownLatch可以唤起多个任务</p>
<p>（3）CyclicBarrier可重用，CountDownLatch不可重用，计数值为0该CountDownLatch就不可再用了</p>
<h2 id="6、volatile关键字的作用">6、volatile关键字的作用</h2><p>一个非常重要的问题，是每个学习、应用多线程的Java程序员都必须掌握的。理解volatile关键字的作用的前提是要理解Java内存模型，这里就不讲Java内存模型了，可以参见第31点，volatile关键字的作用主要有两个：</p>
<p>（1）多线程主要围绕可见性和原子性两个特性而展开，使用volatile关键字修饰的变量，保证了其在多线程之间的可见性，即每次读取到volatile变量，一定是最新的数据</p>
<p>（2）代码底层执行不像我们看到的高级语言—-Java程序这么简单，它的执行是Java代码–&gt;字节码–&gt;根据字节码执行对应的C/C++代码–&gt;C/C++代码被编译成汇编语言–&gt;和硬件电路交互，现实中，为了获取更好的性能JVM可能会对指令进行重排序，多线程下可能会出现一些意想不到的问题。使用volatile则会对禁止语义重排序，当然这也一定程度上降低了代码执行效率</p>
<p>从实践角度而言，volatile的一个重要作用就是和CAS结合，保证了原子性，详细的可以参见java.util.concurrent.atomic包下的类，比如AtomicInteger。</p>
<h2 id="7、什么是线程安全">7、什么是线程安全</h2><p>又是一个理论的问题，各式各样的答案有很多，我给出一个个人认为解释地最好的：如果你的代码在多线程下执行和在单线程下执行永远都能获得一样的结果，那么你的代码就是线程安全的。</p>
<p>这个问题有值得一提的地方，就是线程安全也是有几个级别的：</p>
<p>（1）不可变</p>
<p>像String、Integer、Long这些，都是final类型的类，任何一个线程都改变不了它们的值，要改变除非新创建一个，因此这些不可变对象不需要任何同步手段就可以直接在多线程环境下使用</p>
<p>（2）绝对线程安全</p>
<p>不管运行时环境如何，调用者都不需要额外的同步措施。要做到这一点通常需要付出许多额外的代价，Java中标注自己是线程安全的类，实际上绝大多数都不是线程安全的，不过绝对线程安全的类，Java中也有，比方说CopyOnWriteArrayList、CopyOnWriteArraySet</p>
<p>（3）相对线程安全</p>
<p>相对线程安全也就是我们通常意义上所说的线程安全，像Vector这种，add、remove方法都是原子操作，不会被打断，但也仅限于此，如果有个线程在遍历某个Vector、有个线程同时在add这个Vector，99%的情况下都会出现ConcurrentModificationException，也就是fail-fast机制。</p>
<p>（4）线程非安全</p>
<p>这个就没什么好说的了，ArrayList、LinkedList、HashMap等都是线程非安全的类</p>
<h2 id="8、Java中如何获取到线程dump文件">8、Java中如何获取到线程dump文件</h2><p>死循环、死锁、阻塞、页面打开慢等问题，打线程dump是最好的解决问题的途径。所谓线程dump也就是线程堆栈，获取到线程堆栈有两步：</p>
<p>（1）获取到线程的pid，可以通过使用jps命令，在Linux环境下还可以使用ps -ef | grep java</p>
<p>（2）打印线程堆栈，可以通过使用jstack pid命令，在Linux环境下还可以使用kill -3 pid</p>
<p>另外提一点，Thread类提供了一个getStackTrace()方法也可以用于获取线程堆栈。这是一个实例方法，因此此方法是和具体线程实例绑定的，每次获取获取到的是具体某个线程当前运行的堆栈，</p>
<h2 id="9、一个线程如果出现了运行时异常会怎么样">9、一个线程如果出现了运行时异常会怎么样</h2><p>如果这个异常没有被捕获的话，这个线程就停止执行了。另外重要的一点是：如果这个线程持有某个某个对象的监视器，那么这个对象监视器会被立即释放</p>
<h2 id="10、如何在两个线程之间共享数据">10、如何在两个线程之间共享数据</h2><p>通过在线程之间共享对象就可以了，然后通过wait/notify/notifyAll、await/signal/signalAll进行唤起和等待，比方说阻塞队列BlockingQueue就是为线程之间共享数据而设计的</p>
<h2 id="11、sleep方法和wait方法有什么区别">11、sleep方法和wait方法有什么区别</h2><p>这个问题常问，sleep方法和wait方法都可以用来放弃CPU一定的时间，不同点在于如果线程持有某个对象的监视器，sleep方法不会放弃这个对象的监视器，wait方法会放弃这个对象的监视器</p>
<h2 id="12、生产者消费者模型的作用是什么">12、生产者消费者模型的作用是什么</h2><p>这个问题很理论，但是很重要：</p>
<p>（1）通过平衡生产者的生产能力和消费者的消费能力来提升整个系统的运行效率，这是生产者消费者模型最重要的作用</p>
<p>（2）解耦，这是生产者消费者模型附带的作用，解耦意味着生产者和消费者之间的联系少，联系越少越可以独自发展而不需要收到相互的制约</p>
<h2 id="13、ThreadLocal有什么用">13、ThreadLocal有什么用</h2><p>简单说ThreadLocal就是一种以空间换时间的做法，在每个Thread里面维护了一个以开地址法实现的ThreadLocal.ThreadLocalMap，把数据进行隔离，数据不共享，自然就没有线程安全方面的问题了</p>
<h2 id="14、为什么wait()方法和notify()/notifyAll()方法要在同步块中被调用">14、为什么wait()方法和notify()/notifyAll()方法要在同步块中被调用</h2><p>这是JDK强制的，wait()方法和notify()/notifyAll()方法在调用前都必须先获得对象的锁</p>
<h2 id="15、wait()方法和notify()/notifyAll()方法在放弃对象监视器时有什么区别">15、wait()方法和notify()/notifyAll()方法在放弃对象监视器时有什么区别</h2><p>wait()方法和notify()/notifyAll()方法在放弃对象监视器的时候的区别在于：wait()方法立即释放对象监视器，notify()/notifyAll()方法则会等待线程剩余代码执行完毕才会放弃对象监视器。</p>
<h2 id="16、为什么要使用线程池">16、为什么要使用线程池</h2><p>避免频繁地创建和销毁线程，达到线程对象的重用。另外，使用线程池还可以根据项目灵活地控制并发的数目。</p>
<h2 id="17、怎么检测一个线程是否持有对象监视器">17、怎么检测一个线程是否持有对象监视器</h2><p>我也是在网上看到一道多线程面试题才知道有方法可以判断某个线程是否持有对象监视器：Thread类提供了一个holdsLock(Object obj)方法，当且仅当对象obj的监视器被某条线程持有的时候才会返回true，注意这是一个static方法，这意味着“某条线程”指的是当前线程。</p>
<h2 id="18、synchronized和ReentrantLock的区别">18、synchronized和ReentrantLock的区别</h2><p>synchronized是和if、else、for、while一样的关键字，ReentrantLock是类，这是二者的本质区别。既然ReentrantLock是类，那么它就提供了比synchronized更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量，ReentrantLock比synchronized的扩展性体现在几点上：</p>
<p>（1）ReentrantLock可以对获取锁的等待时间进行设置，这样就避免了死锁</p>
<p>（2）ReentrantLock可以获取各种锁的信息</p>
<p>（3）ReentrantLock可以灵活地实现多路通知</p>
<p>另外，二者的锁机制其实也是不一样的。ReentrantLock底层调用的是Unsafe的park方法加锁，synchronized操作的应该是对象头中mark word，这点我不能确定。</p>
<h2 id="19、ConcurrentHashMap的并发度是什么">19、ConcurrentHashMap的并发度是什么</h2><p>ConcurrentHashMap的并发度就是segment的大小，默认为16，这意味着最多同时可以有16条线程操作ConcurrentHashMap，这也是ConcurrentHashMap对Hashtable的最大优势，任何情况下，Hashtable能同时有两条线程获取Hashtable中的数据吗？</p>
<h2 id="20、ReadWriteLock是什么">20、ReadWriteLock是什么</h2><p>首先明确一下，不是说ReentrantLock不好，只是ReentrantLock某些时候有局限。如果使用ReentrantLock，可能本身是为了防止线程A在写数据、线程B在读数据造成的数据不一致，但这样，如果线程C在读数据、线程D也在读数据，读数据是不会改变数据的，没有必要加锁，但是还是加锁了，降低了程序的性能。</p>
<p>因为这个，才诞生了读写锁ReadWriteLock。ReadWriteLock是一个读写锁接口，ReentrantReadWriteLock是ReadWriteLock接口的一个具体实现，实现了读写的分离，读锁是共享的，写锁是独占的，读和读之间不会互斥，读和写、写和读、写和写之间才会互斥，提升了读写的性能。</p>
<h2 id="21、FutureTask是什么">21、FutureTask是什么</h2><p>这个其实前面有提到过，FutureTask表示一个异步运算的任务。FutureTask里面可以传入一个Callable的具体实现类，可以对这个异步运算的任务的结果进行等待获取、判断是否已经完成、取消任务等操作。当然，由于FutureTask也是Runnable接口的实现类，所以FutureTask也可以放入线程池中。</p>
<h2 id="22、Linux环境下如何查找哪个线程使用CPU最长">22、Linux环境下如何查找哪个线程使用CPU最长</h2><p>这是一个比较偏实践的问题，这种问题我觉得挺有意义的。可以这么做：</p>
<p>（1）获取项目的pid，jps或者ps -ef | grep java，这个前面有讲过</p>
<p>（2）top -H -p pid，顺序不能改变</p>
<p>这样就可以打印出当前的项目，每条线程占用CPU时间的百分比。注意这里打出的是LWP，也就是操作系统原生线程的线程号，我笔记本山没有部署Linux环境下的Java工程，因此没有办法截图演示，网友朋友们如果公司是使用Linux环境部署项目的话，可以尝试一下。</p>
<p>使用”top -H -p pid”+”jps pid”可以很容易地找到某条占用CPU高的线程的线程堆栈，从而定位占用CPU高的原因，一般是因为不当的代码操作导致了死循环。</p>
<p>最后提一点，”top -H -p pid”打出来的LWP是十进制的，”jps pid”打出来的本地线程号是十六进制的，转换一下，就能定位到占用CPU高的线程的当前线程堆栈了。</p>
<h2 id="23、Java编程写一个会导致死锁的程序">23、Java编程写一个会导致死锁的程序</h2><p>第一次看到这个题目，觉得这是一个非常好的问题。很多人都知道死锁是怎么一回事儿：线程A和线程B相互等待对方持有的锁导致程序无限死循环下去。当然也仅限于此了，问一下怎么写一个死锁的程序就不知道了，这种情况说白了就是不懂什么是死锁，懂一个理论就完事儿了，实践中碰到死锁的问题基本上是看不出来的。</p>
<p>真正理解什么是死锁，这个问题其实不难，几个步骤：</p>
<p>（1）两个线程里面分别持有两个Object对象：lock1和lock2。这两个lock作为同步代码块的锁；</p>
<p>（2）线程1的run()方法中同步代码块先获取lock1的对象锁，Thread.sleep(xxx)，时间不需要太多，50毫秒差不多了，然后接着获取lock2的对象锁。这么做主要是为了防止线程1启动一下子就连续获得了lock1和lock2两个对象的对象锁</p>
<p>（3）线程2的run)(方法中同步代码块先获取lock2的对象锁，接着获取lock1的对象锁，当然这时lock1的对象锁已经被线程1锁持有，线程2肯定是要等待线程1释放lock1的对象锁的</p>
<p>这样，线程1″睡觉”睡完，线程2已经获取了lock2的对象锁了，线程1此时尝试获取lock2的对象锁，便被阻塞，此时一个死锁就形成了。代码就不写了，占的篇幅有点多，Java多线程7：死锁这篇文章里面有，就是上面步骤的代码实现。</p>
<h2 id="24、怎么唤醒一个阻塞的线程">24、怎么唤醒一个阻塞的线程</h2><p>如果线程是因为调用了wait()、sleep()或者join()方法而导致的阻塞，可以中断线程，并且通过抛出InterruptedException来唤醒它；如果线程遇到了IO阻塞，无能为力，因为IO是操作系统实现的，Java代码并没有办法直接接触到操作系统。</p>
<h2 id="25、不可变对象对多线程有什么帮助">25、不可变对象对多线程有什么帮助</h2><p>前面有提到过的一个问题，不可变对象保证了对象的内存可见性，对不可变对象的读取不需要进行额外的同步手段，提升了代码执行效率。</p>
<h2 id="26、什么是多线程的上下文切换">26、什么是多线程的上下文切换</h2><p>多线程的上下文切换是指CPU控制权由一个已经正在运行的线程切换到另外一个就绪并等待获取CPU执行权的线程的过程。</p>
<h2 id="27、如果你提交任务时，线程池队列已满，这时会发生什么">27、如果你提交任务时，线程池队列已满，这时会发生什么</h2><p>如果你使用的LinkedBlockingQueue，也就是无界队列的话，没关系，继续添加任务到阻塞队列中等待执行，因为LinkedBlockingQueue可以近乎认为是一个无穷大的队列，可以无限存放任务；如果你使用的是有界队列比方说ArrayBlockingQueue的话，任务首先会被添加到ArrayBlockingQueue中，ArrayBlockingQueue满了，则会使用拒绝策略RejectedExecutionHandler处理满了的任务，默认是AbortPolicy。</p>
<h2 id="28、Java中用到的线程调度算法是什么">28、Java中用到的线程调度算法是什么</h2><p>抢占式。一个线程用完CPU之后，操作系统会根据线程优先级、线程饥饿情况等数据算出一个总的优先级并分配下一个时间片给某个线程执行。</p>
<h2 id="29、Thread-sleep(0)的作用是什么">29、Thread.sleep(0)的作用是什么</h2><p>这个问题和上面那个问题是相关的，我就连在一起了。由于Java采用抢占式的线程调度算法，因此可能会出现某条线程常常获取到CPU控制权的情况，为了让某些优先级比较低的线程也能获取到CPU控制权，可以使用Thread.sleep(0)手动触发一次操作系统分配时间片的操作，这也是平衡CPU控制权的一种操作。</p>
<h2 id="30、什么是自旋">30、什么是自旋</h2><p>很多synchronized里面的代码只是一些很简单的代码，执行时间非常快，此时等待的线程都加锁可能是一种不太值得的操作，因为线程阻塞涉及到用户态和内核态切换的问题。既然synchronized里面的代码执行得非常快，不妨让等待锁的线程不要被阻塞，而是在synchronized的边界做忙循环，这就是自旋。如果做了多次忙循环发现还没有获得锁，再阻塞，这样可能是一种更好的策略。</p>
<h2 id="31、什么是Java内存模型">31、什么是Java内存模型</h2><p>Java内存模型定义了一种多线程访问Java内存的规范。Java内存模型要完整讲不是这里几句话能说清楚的，我简单总结一下Java内存模型的几部分内容：</p>
<p>（1）Java内存模型将内存分为了主内存和工作内存。类的状态，也就是类之间共享的变量，是存储在主内存中的，每次Java线程用到这些主内存中的变量的时候，会读一次主内存中的变量，并让这些内存在自己的工作内存中有一份拷贝，运行自己线程代码的时候，用到这些变量，操作的都是自己工作内存中的那一份。在线程代码执行完毕之后，会将最新的值更新到主内存中去</p>
<p>（2）定义了几个原子操作，用于操作主内存和工作内存中的变量</p>
<p>（3）定义了volatile变量的使用规则</p>
<p>（4）happens-before，即先行发生原则，定义了操作A必然先行发生于操作B的一些规则，比如在同一个线程内控制流前面的代码一定先行发生于控制流后面的代码、一个释放锁unlock的动作一定先行发生于后面对于同一个锁进行锁定lock的动作等等，只要符合这些规则，则不需要额外做同步措施，如果某段代码不符合所有的happens-before规则，则这段代码一定是线程非安全的</p>
<h2 id="32、什么是CAS">32、什么是CAS</h2><p>CAS，全称为Compare and Swap，即比较-替换。假设有三个操作数：内存值V、旧的预期值A、要修改的值B，当且仅当预期值A和内存值V相同时，才会将内存值修改为B并返回true，否则什么都不做并返回false。当然CAS一定要volatile变量配合，这样才能保证每次拿到的变量是主内存中最新的那个值，否则旧的预期值A对某条线程来说，永远是一个不会变的值A，只要某次CAS操作失败，永远都不可能成功。</p>
<h2 id="33、什么是乐观锁和悲观锁">33、什么是乐观锁和悲观锁</h2><p>（1）乐观锁：就像它的名字一样，对于并发间操作产生的线程安全问题持乐观状态，乐观锁认为竞争不总是会发生，因此它不需要持有锁，将比较-替换这两个动作作为一个原子操作尝试去修改内存中的变量，如果失败则表示发生冲突，那么就应该有相应的重试逻辑。</p>
<p>（2）悲观锁：还是像它的名字一样，对于并发间操作产生的线程安全问题持悲观状态，悲观锁认为竞争总是会发生，因此每次对某资源进行操作时，都会持有一个独占的锁，就像synchronized，不管三七二十一，直接上了锁就操作资源了。</p>
<h2 id="34、什么是AQS">34、什么是AQS</h2><p>简单说一下AQS，AQS全称为AbstractQueuedSychronizer，翻译过来应该是抽象队列同步器。</p>
<p>如果说java.util.concurrent的基础是CAS的话，那么AQS就是整个Java并发包的核心了，ReentrantLock、CountDownLatch、Semaphore等等都用到了它。AQS实际上以双向队列的形式连接所有的Entry，比方说ReentrantLock，所有等待的线程都被放在一个Entry中并连成双向队列，前面一个线程使用ReentrantLock好了，则双向队列实际上的第一个Entry开始运行。</p>
<p>AQS定义了对双向队列所有的操作，而只开放了tryLock和tryRelease方法给开发者使用，开发者可以根据自己的实现重写tryLock和tryRelease方法，以实现自己的并发功能。</p>
<h2 id="35、单例模式的线程安全性">35、单例模式的线程安全性</h2><p>老生常谈的问题了，首先要说的是单例模式的线程安全意味着：某个类的实例在多线程环境下只会被创建一次出来。单例模式有很多种的写法，我总结一下：</p>
<p>（1）饿汉式单例模式的写法：线程安全</p>
<p>（2）懒汉式单例模式的写法：非线程安全</p>
<p>（3）双检锁单例模式的写法：线程安全</p>
<h2 id="36、Semaphore有什么作用">36、Semaphore有什么作用</h2><p>Semaphore就是一个信号量，它的作用是限制某段代码块的并发数。Semaphore有一个构造函数，可以传入一个int型整数n，表示某段代码最多只有n个线程可以访问，如果超出了n，那么请等待，等到某个线程执行完毕这段代码块，下一个线程再进入。由此可以看出如果Semaphore构造函数中传入的int型整数n=1，相当于变成了一个synchronized了。</p>
<h2 id="37、Hashtable的size()方法中明明只有一条语句”return_count”，为什么还要做同步？">37、Hashtable的size()方法中明明只有一条语句”return count”，为什么还要做同步？</h2><p>这是我之前的一个困惑，不知道大家有没有想过这个问题。某个方法中如果有多条语句，并且都在操作同一个类变量，那么在多线程环境下不加锁，势必会引发线程安全问题，这很好理解，但是size()方法明明只有一条语句，为什么还要加锁？</p>
<p>关于这个问题，在慢慢地工作、学习中，有了理解，主要原因有两点：</p>
<p>（1）同一时间只能有一条线程执行固定类的同步方法，但是对于类的非同步方法，可以多条线程同时访问。所以，这样就有问题了，可能线程A在执行Hashtable的put方法添加数据，线程B则可以正常调用size()方法读取Hashtable中当前元素的个数，那读取到的值可能不是最新的，可能线程A添加了完了数据，但是没有对size++，线程B就已经读取size了，那么对于线程B来说读取到的size一定是不准确的。而给size()方法加了同步之后，意味着线程B调用size()方法只有在线程A调用put方法完毕之后才可以调用，这样就保证了线程安全性</p>
<p>（2）CPU执行代码，执行的不是Java代码，这点很关键，一定得记住。Java代码最终是被翻译成汇编代码执行的，汇编代码才是真正可以和硬件电路交互的代码。即使你看到Java代码只有一行，甚至你看到Java代码编译之后生成的字节码也只有一行，也不意味着对于底层来说这句语句的操作只有一个。一句”return count”假设被翻译成了三句汇编语句执行，完全可能执行完第一句，线程就切换了。</p>
<h2 id="38、线程类的构造方法、静态块是被哪个线程调用的">38、线程类的构造方法、静态块是被哪个线程调用的</h2><p>这是一个非常刁钻和狡猾的问题。请记住：线程类的构造方法、静态块是被new这个线程类所在的线程所调用的，而run方法里面的代码才是被线程自身所调用的。</p>
<p>如果说上面的说法让你感到困惑，那么我举个例子，假设Thread2中new了Thread1，main函数中new了Thread2，那么：</p>
<p>（1）Thread2的构造方法、静态块是main线程调用的，Thread2的run()方法是Thread2自己调用的</p>
<p>（2）Thread1的构造方法、静态块是Thread2调用的，Thread1的run()方法是Thread1自己调用的</p>
<h2 id="39、同步方法和同步块，哪个是更好的选择">39、同步方法和同步块，哪个是更好的选择</h2><p>同步块，这意味着同步块之外的代码是异步执行的，这比同步整个方法更提升代码的效率。请知道一条原则：同步的范围越小越好。</p>
<p>借着这一条，我额外提一点，虽说同步的范围越少越好，但是在Java虚拟机中还是存在着一种叫做锁粗化的优化方法，这种方法就是把同步范围变大。这是有用的，比方说StringBuffer，它是一个线程安全的类，自然最常用的append()方法是一个同步方法，我们写代码的时候会反复append字符串，这意味着要进行反复的加锁-&gt;解锁，这对性能不利，因为这意味着Java虚拟机在这条线程上要反复地在内核态和用户态之间进行切换，因此Java虚拟机会将多次append方法调用的代码进行一个锁粗化的操作，将多次的append的操作扩展到append方法的头尾，变成一个大的同步块，这样就减少了加锁–&gt;解锁的次数，有效地提升了代码执行的效率。</p>
<h2 id="40、高并发、任务执行时间短的业务怎样使用线程池？并发不高、任务执行时间长的业务怎样使用线程池？并发高、业务执行时间长的业务怎样使用线程池？">40、高并发、任务执行时间短的业务怎样使用线程池？并发不高、任务执行时间长的业务怎样使用线程池？并发高、业务执行时间长的业务怎样使用线程池？</h2><p>这是我在并发编程网上看到的一个问题，把这个问题放在最后一个，希望每个人都能看到并且思考一下，因为这个问题非常好、非常实际、非常专业。关于这个问题，个人看法是：</p>
<p>（1）高并发、任务执行时间短的业务，线程池线程数可以设置为CPU核数+1，减少线程上下文的切换</p>
<p>（2）并发不高、任务执行时间长的业务要区分开看：</p>
<p>a）假如是业务时间长集中在IO操作上，也就是IO密集型的任务，因为IO操作并不占用CPU，所以不要让所有的CPU闲下来，可以加大线程池中的线程数目，让CPU处理更多的业务</p>
<p>b）假如是业务时间长集中在计算操作上，也就是计算密集型任务，这个就没办法了，和（1）一样吧，线程池中的线程数设置得少一些，减少线程上下文的切换</p>
<p>（3）并发高、业务执行时间长，解决这种类型任务的关键不在于线程池而在于整体架构的设计，看看这些业务里面某些数据是否能做缓存是第一步，增加服务器是第二步，至于线程池的设置，设置参考（2）。最后，业务执行时间长的问题，也可能需要分析一下，看看能不能使用中间件对任务进行拆分和解耦。</p>
<p><strong>我不能保证写的每个地方都是对的，但是至少能保证不复制、不黏贴，保证每一句话、每一行代码都经过了认真的推敲、仔细的斟酌。每一篇文章的背后，希望都能看到自己对于技术、对于生活的态度。<br>我相信乔布斯说的，只有那些疯狂到认为自己可以改变世界的人才能真正地改变世界。面对压力，我可以挑灯夜战、不眠不休；面对困难，我愿意迎难而上、永不退缩。<br>其实我想说的是，我只是一个程序员，这就是我现在纯粹人生的全部。</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>朋友圈分享的好文章，关于java多线程的，在此转载。我很喜欢作者对技术的态度，引用他的一段话：</p>
<blockquote>
<p>我不能保证写的每个地方都是对的，但是至少能保证不复制、不黏贴，保证每一句话、每一行代码都经过了认真的推敲、仔细的斟酌。每一篇文章的背后，希望都能看到自己对于技术、对于生活的态度。<br>我相信乔布斯说的，只有那些疯狂到认为自己可以改变世界的人才能真正地改变世界。面对压力，我可以挑灯夜战、不眠不休；面对困难，我愿意迎难而上、永不退缩</p>
</blockquote>
<p><a href="http://www.cnblogs.com/xrq730/p/5060921.html">原创地址</a><br>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker-compose]]></title>
    <link href="http://tonylit.me/2016/03/09/docker-compose/"/>
    <id>http://tonylit.me/2016/03/09/docker-compose/</id>
    <published>2016-03-09T03:37:27.000Z</published>
    <updated>2016-03-09T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>Compose是用于定义和运行复杂Docker应用的工具。<br>你可以在一个文件中定义一个多容器的应用，然后使用一条命令来启动你的应用，然后所有相关的操作都会被自动完成<br><a id="more"></a></p>
<p><strong>安装docker-compose-方式一</strong><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -<span class="constant">L</span> <span class="symbol">https:</span>/<span class="regexp">/github.com/docker</span><span class="regexp">/compose/releases</span><span class="regexp">/download/</span><span class="number">1.1</span>.<span class="number">0</span>/docker-compose-<span class="string">`uname -s`</span>-<span class="string">`uname -m`</span> &gt; <span class="regexp">/usr/local</span><span class="regexp">/bin/docker</span>-compose</span><br><span class="line"></span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></p>
<p><strong>安装docker-compose-方式二</strong><br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> -U docker-compose</span><br></pre></td></tr></table></figure></p>
<p>之后，可以添加 bash 补全命令。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>curl -<span class="constant">L </span><span class="symbol">https:</span>/<span class="regexp">/raw.githubusercontent.com/docker</span><span class="regexp">/compose/</span><span class="number">1.2</span>.<span class="number">0</span>/contrib/completion/bash/docker-compose &gt; <span class="regexp">/etc/bash</span>_completion.d/docker-compose</span><br></pre></td></tr></table></figure></p>
<hr>
<p><strong>用一个compose.yaml来定义你的应用服务，他们可以把不同的服务生成不同的容器中组成你的应用</strong></p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">web</span>:</span><br><span class="line">  <span class="attribute">build</span>:.</span><br><span class="line">  <span class="attribute">command</span>: python app.py</span><br><span class="line">  <span class="attribute">ports</span>:-<span class="string">"5000:5000"</span></span><br><span class="line">  <span class="attribute">volumes</span>:-.:/code</span><br><span class="line">  <span class="attribute">links</span>:- redis</span><br><span class="line"><span class="attribute">redis</span>:</span><br><span class="line">  <span class="attribute">image</span>: redis</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>执行docker-compose up来启动你的应用，它会根据compose.yaml的设置来pull/run这俩个容器，然后再启动</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up <span class="operator">-d</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>Compose是用于定义和运行复杂Docker应用的工具。<br>你可以在一个文件中定义一个多容器的应用，然后使用一条命令来启动你的应用，然后所有相关的操作都会被自动完成<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker run]]></title>
    <link href="http://tonylit.me/2016/03/08/docker-run/"/>
    <id>http://tonylit.me/2016/03/08/docker-run/</id>
    <published>2016-03-08T03:37:27.000Z</published>
    <updated>2016-03-08T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/docker-run.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/docker-run.PNG" alt="Alt text"></p>
]]>
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用docker-enter进入docker容器]]></title>
    <link href="http://tonylit.me/2016/03/01/docker-enter/"/>
    <id>http://tonylit.me/2016/03/01/docker-enter/</id>
    <published>2016-03-01T03:37:27.000Z</published>
    <updated>2016-03-01T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>之前进入docker容器的时候，会用docker exec命令，今天发现一个更好用的docker-enter命令！<br><a id="more"></a><br>1.首先确认安装了nsenter<br>nsenter一般linux操作系统默认自带了，没有的话，安装下。<br>2.在$PATH下面新建docker-enter文件<br>将下面的脚本copy进去，赋执行权限，使用方式： docker-enter <container-id></container-id></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="operator">-e</span> $(dirname <span class="string">"<span class="variable">$0</span>"</span>)/nsenter ]; <span class="keyword">then</span></span><br><span class="line">  <span class="comment"># with boot2docker, nsenter is not in the PATH but it is in the same folder</span></span><br><span class="line">  NSENTER=$(dirname <span class="string">"<span class="variable">$0</span>"</span>)/nsenter</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  NSENTER=nsenter</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Usage: `basename "</span><span class="variable">$0</span><span class="string">"` CONTAINER [COMMAND [ARG]...]"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Enters the Docker CONTAINER and executes the specified COMMAND."</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"If COMMAND is not specified, runs an interactive shell in CONTAINER."</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  PID=$(docker inspect --format <span class="string">"&#123;&#123;.State.Pid&#125;&#125;"</span> <span class="string">"<span class="variable">$1</span>"</span>)</span><br><span class="line">  <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$PID</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exit</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">shift</span></span><br><span class="line">  OPTS=<span class="string">"--target <span class="variable">$PID</span> --mount --uts --ipc --net --pid --"</span></span><br><span class="line">  <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># No command given.</span></span><br><span class="line">    <span class="comment"># Use su to clear all host environment variables except for TERM,</span></span><br><span class="line">    <span class="comment"># initialize the environment variables HOME, SHELL, USER, LOGNAME, PATH,</span></span><br><span class="line">    <span class="comment"># and start a login shell.</span></span><br><span class="line">    <span class="string">"<span class="variable">$NSENTER</span>"</span> <span class="variable">$OPTS</span> su - root</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="comment"># Use env to clear all host environment variables.</span></span><br><span class="line">    <span class="string">"<span class="variable">$NSENTER</span>"</span> <span class="variable">$OPTS</span> env --ignore-environment -- <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前进入docker容器的时候，会用docker exec命令，今天发现一个更好用的docker-enter命令！<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[apache http跳转https]]></title>
    <link href="http://tonylit.me/2016/02/29/apache_http%E8%B7%B3%E8%BD%AC/"/>
    <id>http://tonylit.me/2016/02/29/apache_http跳转/</id>
    <published>2016-02-29T03:37:27.000Z</published>
    <updated>2016-02-29T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>apache中开启转发配置，将http跳转到https<br><a id="more"></a></p>
<p>#开启apache的rewrite模块<br><img src="/img/mod_rewrite.PNG" alt="Alt text"></p>
<h1 id="全部http请求跳转https">全部http请求跳转https</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword"><span class="common">Listen</span></span> 443</span><br><span class="line"><span class="keyword">NameVirtualHost</span> *:443</span><br><span class="line"><span class="tag">&lt;VirtualHost *:443&gt;</span></span><br><span class="line">	<span class="keyword">SSLEngine</span> <span class="literal">on</span></span><br><span class="line">        <span class="keyword">SSLProtocol</span> <span class="literal">all</span> -SSLv2</span><br><span class="line">        <span class="keyword">SSLCipherSuite</span> <span class="literal">ALL</span>:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL</span><br><span class="line">        <span class="keyword">SSLCertificateFile</span> <span class="string">"/opt/xyz/apache2.2.9_resin3.0.25/etc/apache2/server.crt"</span></span><br><span class="line">        <span class="keyword">SSLCertificateKeyFile</span> <span class="string">"/opt/xyz/apache2.2.9_resin3.0.25/etc/apache2/server.key"</span></span><br><span class="line">        <span class="keyword">SSLCertificateChainFile</span>  <span class="string">"/opt/xyz/apache2.2.9_resin3.0.25/etc/apache2//intermediate.crt"</span></span><br><span class="line"><span class="tag">&lt;/VirtualHost&gt;</span></span><br><span class="line"><span class="tag">&lt;VirtualHost  *:80&gt;</span></span><br><span class="line">        <span class="keyword"><span class="common">RewriteEngine</span></span> <span class="literal">on</span></span><br><span class="line">        <span class="keyword"><span class="common">RewriteCond</span></span> <span class="cbracket">%&#123;SERVER_PORT&#125;</span> !^443$</span><br><span class="line">        <span class="keyword"><span class="common">RewriteRule</span></span> ^/?(.*)$ https://<span class="cbracket">%&#123;SERVER_NAME&#125;</span><span class="cbracket">%&#123;REQUEST_URI&#125;</span><span class="sqbracket"> [L,R]</span></span><br><span class="line"><span class="tag">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="单url跳转">单url跳转</h1><p>比如<a href="http://sales.vemic.com/logon.do" target="_blank" rel="external">http://sales.vemic.com/logon.do</a> 跳转到<a href="https://sales.vemic.com/logon.do" target="_blank" rel="external">https://sales.vemic.com/logon.do</a></p>
<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword"><span class="common">RewriteEngine</span></span> <span class="literal">on</span></span><br><span class="line"><span class="keyword"><span class="common">RewriteCond</span></span> <span class="cbracket">%&#123;SERVER_PORT&#125;</span> !^443$</span><br><span class="line"><span class="keyword"><span class="common">RewriteRule</span></span> ^/logon.do$ https://<span class="cbracket">%&#123;SERVER_NAME&#125;</span><span class="cbracket">%&#123;REQUEST_URI&#125;</span><span class="sqbracket"> [L,R]</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>apache中开启转发配置，将http跳转到https<br>]]>
    
    </summary>
    
      <category term="apache" scheme="http://tonylit.me/tags/apache/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[dockerfile中的RUN、CMD和ENTRY]]></title>
    <link href="http://tonylit.me/2016/01/27/dockerCMD%E5%92%8CRUN/"/>
    <id>http://tonylit.me/2016/01/27/dockerCMD和RUN/</id>
    <published>2016-01-27T03:37:27.000Z</published>
    <updated>2016-01-27T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>最近在学习dockerfile，有几条指令着实比较混淆，RUN，CMD，ENTRYPOINT。<br>在此记录一下用法，回头好多看看！<br><a id="more"></a></p>
<h1 id="用法">用法</h1><blockquote>
<p><strong>RUN</strong>在构建image时运行的指令, 在Dockerfile中可以写多条RUN指令.<br><strong>CMD</strong>和<strong>ENTRYPOINT</strong>则是在运行container 时会运行的指令, 都只能写一条, 如果写了多条, 则最后一条生效.<br><strong>CMD</strong>和<strong>ENTRYPOINT</strong>的<strong>区别</strong>是:  CMD在运行时会被command覆盖, ENTRYPOINT不会被运行时的command覆盖</p>
</blockquote>
<p>CMD和ENTRYPOINT比较让人费解，举个例子就明白了：</p>
<blockquote>
<p>docker run [OPTIONS] IMAGE [COMMAND] [ARG…]   –entrypoint=””<br>docker run -ti tony/web1 /opt/resin.sh start</p>
</blockquote>
<p> 这里的/opt/resin.sh start就是command，将覆盖Dockerfile的CMD, 但是不会覆盖ENTRYPOINT.<br>如果要覆盖ENTRYPOINT, 那么可以在docker run运行时输入 –entrypoint=”….”.</p>
<p>CMD和ENTRYPOINT一般用于制作具备后台服务的image, 例如apache, database等. 在使用这种image启动container时, 自动启动服务</p>
<hr>
<h1 id="需要注意">需要注意</h1><p>在Docker　daemon模式下，无论你是使用ENTRYPOINT，还是CMD，最后的命令，一定要是当前进程需要一直运行的，才能够防容器退出。</p>
<h2 id="以下无效方式：">以下无效方式：</h2><blockquote>
<p> ENTRYPOINT service tomcat7 start #运行几秒钟之后，容器就会退出  CMD service tomcat7<br>start #运行几秒钟之后，容器就会退出</p>
</blockquote>
<h2 id="这样有效：">这样有效：</h2><blockquote>
<p>ENTRYPOINT service tomcat7 start &amp;&amp; tail -f<br>/var/lib/tomcat7/logs/catalina.out</p>
</blockquote>
<p> 或者</p>
<blockquote>
<p>CMD service tomcat7 start &amp;&amp; tail -f<br>/var/lib/tomcat7/logs/catalina.out</p>
</blockquote>
<p>这样也有效：</p>
<blockquote>
<p>ENTRYPOINT [“/usr/sbin/sshd”]  CMD [“-D”]</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在学习dockerfile，有几条指令着实比较混淆，RUN，CMD，ENTRYPOINT。<br>在此记录一下用法，回头好多看看！<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[resin性能监控]]></title>
    <link href="http://tonylit.me/2016/01/25/resin%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/"/>
    <id>http://tonylit.me/2016/01/25/resin性能监控/</id>
    <published>2016-01-25T03:37:27.000Z</published>
    <updated>2016-01-25T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<h1 id="性能分析过程">性能分析过程</h1><p>公司很多项目用的resin，resin3.0和3.1居多，如果需要监控resin，可以配置一下resin.conf就行了，监控起来也比较方便。<br><a id="more"></a></p>
<h1 id="简易版监控">简易版监控</h1><h2 id="resin3-0版本">resin3.0版本</h2><p>在resin.conf中加入以下配置信息，重启即可！</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">servlet-mapping</span> <span class="attribute">servlet-class</span>=<span class="value">'com.caucho.servlets.ResinStatusServlet'</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/resin-status<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">init</span> <span class="attribute">enable</span>=<span class="value">"read"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>重启完，访问<a href="http://域名/resin-status。" target="_blank" rel="external">http://域名/resin-status。</a><br><img src="/img/resin_monitor/resin3.0_1.PNG" alt="Alt text"></p>
<h1 id="全能版监控">全能版监控</h1><h2 id="resin3-0版本-1">resin3.0版本</h2><p>在resin.conf最下面加入以下配置信息，重启resin</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;web-app id=<span class="string">"/resin-admin"</span> root-directory=<span class="string">"$&#123;resin.home&#125;/php/admin"</span>&gt;</span><br><span class="line">        &lt;prologue&gt;</span><br><span class="line">          &lt;resin:<span class="keyword">set</span> <span class="keyword">var</span>=<span class="string">"resin_admin_user"</span> <span class="keyword">value</span>=<span class="string">"admin"</span>/&gt;</span><br><span class="line">          &lt;resin:<span class="keyword">set</span> <span class="keyword">var</span>=<span class="string">"resin_admin_password"</span> <span class="keyword">value</span>=<span class="string">"123456"</span>/&gt;</span><br><span class="line">          &lt;resin:<span class="keyword">set</span> <span class="keyword">var</span>=<span class="string">"resin_admin_external"</span> <span class="keyword">value</span>=<span class="string">"true"</span>/&gt;</span><br><span class="line"> &lt;resin:<span class="keyword">set</span> <span class="keyword">var</span>=<span class="string">"resin_admin_insecure"</span> <span class="keyword">value</span>=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;/prologue&gt;</span><br><span class="line">      &lt;/web-app&gt;</span><br></pre></td></tr></table></figure>
<p>重启后，进入<a href="http://域名/resin-admin后得到一个密码" target="_blank" rel="external">http://域名/resin-admin后得到一个密码</a><br><img src="/img/resin_monitor/resin3.0_2.PNG" alt="Alt text"></p>
<p>将resin.conf中management标签下替换上面的值</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;user <span class="property">name</span>=<span class="string">"ADMIN"</span> password=<span class="string">"3I9OqhqXNqcGeNZMu8BHlw=="</span>/&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/img/resin_monitor/resin_3.0_4.PNG" alt="Alt text"><br>重启即可！<br><img src="/img/resin_monitor/resin_3.0_3.PNG" alt="Alt text"></p>
<h2 id="resin3-1版本">resin3.1版本</h2><p>在resin.conf的<web-app-default>下面增加: </web-app-default></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">servlet-mapping</span> <span class="attribute">servlet-class</span>=<span class="value">'com.caucho.servlets.ResinStatusServlet'</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/resin-status<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="title">init</span> <span class="attribute">enable</span>=<span class="value">"read"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">security-constraint</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="title">web-resource-collection</span> <span class="attribute">url-pattern</span>=<span class="value">"/resin-status/*"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">security-constraint</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>进入<a href="http://域名/resin-status" target="_blank" rel="external">http://域名/resin-status</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="性能分析过程">性能分析过程</h1><p>公司很多项目用的resin，resin3.0和3.1居多，如果需要监控resin，可以配置一下resin.conf就行了，监控起来也比较方便。<br>]]>
    
    </summary>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[loadrunner11 负载机报错处理]]></title>
    <link href="http://tonylit.me/2016/01/22/loadrunner%E8%B4%9F%E8%BD%BD%E6%9C%BA%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86/"/>
    <id>http://tonylit.me/2016/01/22/loadrunner负载机报错处理/</id>
    <published>2016-01-22T03:37:27.000Z</published>
    <updated>2016-01-22T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>吐槽一下，坑！！！！<br>LR11可以连接负载机，但在跑场景的时候跪了，就连报错也搜不到解决办法，尝试各种设置终于解决！<br><img src="/img/agent_error2.PNG" alt="Alt text"><br><a id="more"></a></p>
<h1 id="负载机设置">负载机设置</h1><p>添加负载机的时候设置一下log的位置就行了<br><img src="/img/agent_error1.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>吐槽一下，坑！！！！<br>LR11可以连接负载机，但在跑场景的时候跪了，就连报错也搜不到解决办法，尝试各种设置终于解决！<br><img src="/img/agent_error2.PNG" alt="Alt text"><br>]]>
    
    </summary>
    
      <category term="loadrunner" scheme="http://tonylit.me/tags/loadrunner/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[服务器上连接数查看]]></title>
    <link href="http://tonylit.me/2016/01/20/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%9F%A5%E7%9C%8B/"/>
    <id>http://tonylit.me/2016/01/20/服务器上连接数查看/</id>
    <published>2016-01-20T03:37:27.000Z</published>
    <updated>2016-01-20T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>平时查看服务器连接数，很多命令记不住<br>在此整理一下！</p>
<a id="more"></a>
<h1 id="查看Web服务器（Nginx_Apache）的并发请求数及其TCP连接状态：">查看Web服务器（Nginx Apache）的并发请求数及其TCP连接状态：</h1><p>netstat -n | awk ‘/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}’</p>
<p>或者：<br>netstat -n|grep  ^tcp|awk ‘{print $NF}’|sort -nr|uniq -c</p>
<p>或者：<br>netstat -n | awk ‘/^tcp/ {++state[$NF]} END {for(key in state) print key,state[key]}’</p>
<p>返回结果一般如下：</p>
<blockquote>
<p>LAST_ACK 5 （正在等待处理的请求数）<br>SYN_RECV 30<br>ESTABLISHED 1597 （正常数据传输状态）<br>FIN_WAIT1 51<br>FIN_WAIT2 504<br>TIME_WAIT 1057 （处理完毕，等待超时结束的请求数）</p>
</blockquote>
<p>其他参数说明：</p>
<blockquote>
<p>CLOSED：无连接是活动的或正在进行<br>LISTEN：服务器在等待进入呼叫<br>SYN_RECV：一个连接请求已经到达，等待确认<br>SYN_SENT：应用已经开始，打开一个连接<br>ESTABLISHED：正常数据传输状态<br>FIN_WAIT1：应用说它已经完成<br>FIN_WAIT2：另一边已同意释放<br>ITMED_WAIT：等待所有分组死掉<br>CLOSING：两边同时尝试关闭<br>TIME_WAIT：另一边已初始化一个释放<br>LAST_ACK：等待所有分组死掉</p>
</blockquote>
<h1 id="查看Nginx运行进程数">查看Nginx运行进程数</h1><blockquote>
<p>ps -ef | grep nginx | wc -l<br>返回的数字就是nginx的运行进程数，如果是apache则执行<br>ps -ef | grep httpd | wc -l</p>
</blockquote>
<h1 id="查看Web服务器进程连接数：">查看Web服务器进程连接数：</h1><blockquote>
<p>netstat -antp | grep 80 | grep ESTABLISHED -c</p>
</blockquote>
<h1 id="查看MySQL进程连接数：">查看MySQL进程连接数：</h1><blockquote>
<p>ps -axef | grep mysqld -c</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>平时查看服务器连接数，很多命令记不住<br>在此整理一下！</p>]]>
    
    </summary>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Loadrunner11录制APP]]></title>
    <link href="http://tonylit.me/2016/01/13/loadrunner11%E5%BD%95%E5%88%B6app/"/>
    <id>http://tonylit.me/2016/01/13/loadrunner11录制app/</id>
    <published>2016-01-13T03:37:27.000Z</published>
    <updated>2016-01-13T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>app的性能测试，loadrunner12已经支持该协议，无奈12的破解….<br>而且我要吐槽一下，12的bug好多啊，而且界面风格非驴非马，看着着实难受！<br>so，怎么使用我们的11来录制app脚本呢？<br><a id="more"></a></p>
<h1 id="原理">原理</h1><p>手机终端和电脑在同一无线网络内，手机终端可以使用代理将请求通过电脑进行转发。</p>
<h1 id="步骤">步骤</h1><h2 id="手机和电脑连接同一wifi">手机和电脑连接同一wifi</h2><p>看一下电脑的ip，记录下来<br><img src="/img/LR_APP/77.png" alt="Alt text"></p>
<h2 id="loadrunner设置">loadrunner设置</h2><p>1.选择web（HTTP/HTML协议）<br><img src="/img/LR_APP/4.png" alt="Alt text"><br>2.选择Win32 Application<br>   Porgram to record:选择C:\Program Files(x86)\HP\LoadRunner\bin\wplus_init_wsock.exe<br>   <img src="/img/LR_APP/3.png" alt="Alt text"></p>
<p>3.录制选项的设置：<br>a. Capture Level Socket level data<br><img src="/img/LR_APP/5.png" alt="Alt text"><br>b. New Entry 配置<br><img src="/img/LR_APP/66.png" alt="Alt text"><br>192.168.51.27:8094是我们进行测试的网址<br>说明：Taregt Server为需要录制的地址，Port设置为80<br>Traffic Forwarding 为代理转发的IP，需要与手机端设置一致，设置为本机不冲突的端口即可，如2008</p>
<ol>
<li>配置完成后保存即可</li>
</ol>
<p>##手机设置<br><img src="/img/LR_APP/88.png" alt="Alt text"><br>其中IP为笔记本IP，代理端口为Loadrunner设置的代理转发端口号</p>
<h1 id="开始录制">开始录制</h1><p>点击开始录制，然后就可以操作手机app了。<br><img src="/img/LR_APP/1.png" alt="Alt text"><br><img src="/img/LR_APP/2.png" alt="Alt text"></p>
<p>如果手机不能走电脑代理，可以参考：<br><a href="http://bbs.zol.com.cn/sjbbs/d297_391410.html" target="_blank" rel="external">http://bbs.zol.com.cn/sjbbs/d297_391410.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>app的性能测试，loadrunner12已经支持该协议，无奈12的破解….<br>而且我要吐槽一下，12的bug好多啊，而且界面风格非驴非马，看着着实难受！<br>so，怎么使用我们的11来录制app脚本呢？<br>]]>
    
    </summary>
    
      <category term="loadrunner" scheme="http://tonylit.me/tags/loadrunner/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015年终总结]]></title>
    <link href="http://tonylit.me/2015/12/28/2015%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://tonylit.me/2015/12/28/2015年终总结/</id>
    <published>2015-12-28T03:37:27.000Z</published>
    <updated>2015-12-28T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>仔细回忆一整年的工作，点点滴滴，有苦有甜。<br>写在前面<br>今年的一月初进入部门，主要有三个工作需要接手：FDS维护、MIC测试环境发布、性能测试，之前对这三块都是一知半解，短时间内熟悉这些工作，可谓是压力很大。另外这几块工作需要自己去学习，相关的指导和文档很少，势必要走一些弯路。 大概在7月份才掌握这几块工作，比自己的预期晚了2个多月。一路走来，自己的努力、同事的鼓励帮助与包容、领导的关心与指导，我感到很温暖，感谢所有帮助我的人。<br><a id="more"></a></p>
<h1 id="2015工作总结如下：">2015工作总结如下：</h1><h1 id="结果和产出">结果和产出</h1><h2 id="一、FDS维护方面：">一、FDS维护方面：</h2><ol>
<li>bug修复与优化<br>增加事务管理、Micstatic应用优先发布控制、单应用发布功能、部署优先级优化等。 </li>
<li>配合新版FTM，升级FDS和DNS服务接口<br>18个接口升级并联调，线上未发现问题，升级比较成功。 </li>
<li>老版FDS完全迁移新版FDS<br>之前还有小部分功能在老版FDS中，将其全部迁移至新版FDS，目前老版已废弃。 </li>
<li>内外网迁移工作<br>配合MIC外网迁移，FDS以及测试环境迁移外网。 </li>
<li>FDS发布管理系统-直观的展现版本发布进度、日志、报错等<br>做这个项目主要因为处理测试环境问题耗时耗力，几十个版本三百台机器查找问题很痛苦。 4月份第一版上线，<a href="http://192.168.43.10:22222/main，将测试版本发布过程、发布失败的版本、机器IP、原因很清楚的展示，在环境问题处理上节省很多时间。" target="_blank" rel="external">http://192.168.43.10:22222/main，将测试版本发布过程、发布失败的版本、机器IP、原因很清楚的展示，在环境问题处理上节省很多时间。</a> 目前已推广至整个MIC测试部以及研发部门，功能已经比较多，包括单应用发布功能暂时也集成在里面。<h2 id="二、测试环境方面：">二、测试环境方面：</h2></li>
<li>环境问题处理<br>测试环境问题集中在MIC，多数问题测试人员结合FDS发布管理系统可以自己处理。 </li>
<li>内外网迁移<br>测试环境迁移至外网，由于前期准备不足，迁移后发布出现很多问题。尤其在maven仓库和micstatic应用上，maven仓库jar包不全，前期全部手动将jar包拷贝到发布机器；由于svn路径的问题，导致外网的micstatic编译时间很长，与邢世康配合解决该问题。 </li>
<li>测试环境搭建<br>今年新增47个应用，后面考虑将环境搭建工作自动化。 <h2 id="三、_性能测试方面：">三、 性能测试方面：</h2>工作不是很多，大概22个测试任务。包括数据库、JAVA、接口、IM、页面、功能。<br>印象比较深刻的是中文版MRO和FTM性能测试，MRO首页调优后性能提升4倍（首页6.5s-&gt;1.6s），FTM调优后性能提升10倍以上(新建用例20s-&gt;2s)。<br>最难的是TM的性能测试，需要用socket模拟长连接。<br>功能最多的是优采企业版，一共30个功能，c3p0连接池释放问题对性能影响比较大。<br>整体来看，性能测试做的不多，调优这块很大欠缺，只能说马马虎虎完成工作。<h2 id="四、分享方面：">四、分享方面：</h2>部门分享比较少，只有性能测试实践和FDS发布流程2个分享。<br>兴趣小组内分享比较多，组织小组活动13次，10次性能测试方面分享。 <h1 id="成长和进步">成长和进步</h1>年初，结合工作在笔记本上大概的列出全年学习的方向：测试环境、性能测试、java，当然列出的点比较多，很多细化的东西，回头看看，大多方面都完成了。<br>1、测试环境<br>现在可以快速搭建测试环境，处理环境问题比较得心应手，快速解决问题。相比之前对环境一知半解的，处理问题花费大半天时间，确实有很大的进步。<br>2、性能测试<br>相比去年录制脚本还存在问题，现在可以独立完成整个性能测试流程，并且能够有效定位到性能问题，进行简单的调优工作，有不小的进步。但后面的路还很长，自己也是刚刚入门级，继续加油吧。<br>3、java<br>一直没好的机会去写。接手FDS以后，重新把springmvc拾起来，对FDS进行优化、写了FDS发布管理系统，学习了一些前后端的技术，也算对java真正入了门。<br>4、其他<br>今年兴趣小组内的分享比较多，也愿意去做这种分享，帮助大家的同时自己也有所提升。<h1 id="不足和差距">不足和差距</h1>如果给全年的工作打分，我给自己打75分。很多想去做的事情没去做，很多要去学习的知识也没去学。<br>目前的工作也只是工作，没有多少创新。<br>测试环境发布时间比较长，一直也没有解决掉该问题。<br>性能测试很多方面只掌握到了皮毛，实际碰到问题不知道如何下手解决。<br>平时缺少总结，很多工作做完了就做完了，该犯的错下次还在犯。<br>当然，问题不止这些，明年对自己严格一些，多做改变。<h1 id="2016年规划">2016年规划</h1>第一：自动化性能测试平台搭建，结合jmeter、jenkins、maven进行自动化性能测试，希望明年可以将平台搞起来。<br>第二：测试环境docker化，现在很多云平台都使用docker，性能、资源使用方面都有很大提升，不过这块还在学习实践当中，希望明年尽快将docker用在测试环境上。<br>第三：测试环境发布完全托管，包括问题定位，配置文件替换，新应用搭建。目前环境工作也就这几块占据比重，明年可以结合FDS发布管理系统做一些功能。<br>规划的再好，不去做也没用，明年对自己严格一些，多想多做吧。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>仔细回忆一整年的工作，点点滴滴，有苦有甜。<br>写在前面<br>今年的一月初进入部门，主要有三个工作需要接手：FDS维护、MIC测试环境发布、性能测试，之前对这三块都是一知半解，短时间内熟悉这些工作，可谓是压力很大。另外这几块工作需要自己去学习，相关的指导和文档很少，势必要走一些弯路。 大概在7月份才掌握这几块工作，比自己的预期晚了2个多月。一路走来，自己的努力、同事的鼓励帮助与包容、领导的关心与指导，我感到很温暖，感谢所有帮助我的人。<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[staf使用]]></title>
    <link href="http://tonylit.me/2015/12/22/staf%E4%BD%BF%E7%94%A8/"/>
    <id>http://tonylit.me/2015/12/22/staf使用/</id>
    <published>2015-12-22T03:37:27.000Z</published>
    <updated>2015-12-22T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<h1 id="STAF概念：">STAF概念：</h1><p>全称：Software Testing AntoMation Framework,软件测试自动化框架，为测试人员提供了一个端到端的自动化测试解决方案。<br>每台装有STAF环境的机器都是对等的，一个端可以直接调用另一个端提供服务。采用P2P架构，没有服务端、客户端之分，任何一台机器都可以向其他的机器发送请求。可以利用STAF的这种特性来实现分布式执行的功能。</p>
<hr>
<a id="more"></a>
<h1 id="STAF在linunx下的安装：">STAF在linunx下的安装：</h1><p>1.下载STAF的安装包STAF3412-linux.tar.gz</p>
<p>2.解压：tar -xzvf  STAF3412-linux.tar.gz</p>
<p>3.解压缩完进入staf文件夹，执行./STAFIns，一直回车，安装OK</p>
<p>4.在环境变量中加入STAF配置<br>编辑 /etc/profile，加入以下配置信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PATH=<span class="string">"/usr/local/staf/bin:<span class="variable">$&#123;PATH&#125;</span>"</span> <span class="built_in">export</span> STAFCONVDIR=/usr/<span class="built_in">local</span>/staf/codepage <span class="built_in">export</span></span><br><span class="line">LD_LIBRARY_PATH=<span class="string">"/usr/local/staf/lib:<span class="variable">$&#123;LD_LIBRARY_PATH&#125;</span>"</span> <span class="built_in">export</span></span><br><span class="line">CLASSPATH=<span class="string">"/usr/local/staf/lib/JSTAF.jar:/usr/local/staf/samples/demo/STAFDemo.jar:<span class="variable">$&#123;CLASSPATH&#125;</span>"</span></span><br></pre></td></tr></table></figure></p>
<p>5.输入source /etc/profile,让配置文件生效</p>
<p>6.修改staf配置文件，在staf安装目录下（默认会安装在/usr/local/staf/）的bin文件夹中-STAF.cfg<br><strong>参数格式</strong></p>
<blockquote>
<p>#当错误条件发生的时候形成trace信息 trace enable tracepoints “error deprecated”  </p>
<p>#Enable TCP/IP connections</p>
<p>#在网络上发送和接受STAF请求，默认端口为6500。如果需要定义自己的端口可以使用interface tcp library STAFTCP option Secure=No  option Port=6600</p>
<p>#interface ssl library STAFTCP option Secure=Yes option Port=6550 interface tcp library STAFTCP option Secure=No  option Port=55500  </p>
<p>#Set default local trust</p>
<p>#设置本地机器为full access 信任级别 trust machine local://local level 5 trust machine <em>.</em>.<em>.</em> level 5</p>
<p>#Add default service loader</p>
<p>#注册默认的Service Loader。可以动态加载Log,Monitor等服务 serviceloader library STAFDSLS</p>
</blockquote>
<p>TRUST LEVEL 5 MACHINE，利用命令staf local trust list. 可以查看本机的信任机器<br>每种请求都有安全级别的限制，只有你达到这种安全级别才能发送这种请求。<br>分为六级，级别0-5,0最低，5最高</p>
<blockquote>
<p> Level 0 - No access<br>    Level 1 - Restricted access. Only PING and helps available.<br>    Level 2 - Limited access. Only query/view facilities available.<br>    Level 3 - Standard access. Non-destructive updates allowed, e.g., logging.<br>    Level 4 - Advanced access. Update abilities, e.g., copying files, deleting log files.<br>    Level 5 - All access, e.g., SHUTDOWN, Process invocation, Trust definition manipulation</p>
</blockquote>
<p>默认是trust machine local://local level 5     //表示本地local的操作是5级权限<br>如果需要外部的pc能够 操作本地的staf，发送各种请求的话，需要执行ip地址或是网段<br>trust machine ssl://192.100.<em> level 5   //表示 对于192.100 网段开放 5级权限  针对ssl<br>trust machine tcp://192.100.</em> level 5    //表示 对于192.100 网段开放 5级权限  针对tcp</p>
<p>7.启动STAF服务<br>cd /usr/local/staf/bin<br>./STAFProc &amp;<br>查看是否启动</p>
<p>8.确认已经安装完成<br>staf local service list<br><img src="/img/staf/staf_1.PNG" alt="Alt text"></p>
<p>说明安装成功了</p>
<h1 id="STAF请求格式">STAF请求格式</h1><p>STAF  <endpoint>  &lt; Service&gt;  <request></request></endpoint></p>
<p><endpoint> 远程机器的IP或者localhost。表示向哪台机器发送请求</endpoint></p>
<p><server> Endpoint端机器上STAF环境中的服务名称。表示向哪个服务发送请求</server></p>
<p><request>请求的内容。<br> 例子：<br>staf 192.168.10.18 ping ping<br><img src="/img/staf/staf_2.PNG" alt="Alt text"></request></p>
<h1 id="STAF服务">STAF服务</h1><p>STAF所有功能都是通过服务实现的<br>主要有两种类型的服务：内部服务（Internal Service），外部服务(External Service)。每种服务都可以处理多种请求，每种请求都有安全级别限制<br>内部服务：开启staf这些服务就可以工作了。一般被集成到STAFProc,一般都是一些比较基本常用的服务。<br>外部服务：不是staf基本服务，必须将服务注册到staf才可以使用。需要动态载入，可执行代码不在STAFProc中，一般都在jar中或者外部dll库中。<br><img src="/img/staf/staf_3.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="STAF概念：">STAF概念：</h1><p>全称：Software Testing AntoMation Framework,软件测试自动化框架，为测试人员提供了一个端到端的自动化测试解决方案。<br>每台装有STAF环境的机器都是对等的，一个端可以直接调用另一个端提供服务。采用P2P架构，没有服务端、客户端之分，任何一台机器都可以向其他的机器发送请求。可以利用STAF的这种特性来实现分布式执行的功能。</p>
<hr>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[export、import导出导入docker容器]]></title>
    <link href="http://tonylit.me/2015/12/22/docker%20import%E5%92%8Cexport/"/>
    <id>http://tonylit.me/2015/12/22/docker import和export/</id>
    <published>2015-12-22T03:37:27.000Z</published>
    <updated>2015-12-22T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<h1 id="导入容器快照">导入容器快照</h1><p>可以使用docker import导入docker的镜像，已centos系统为例，我们导入<a href="http://download.openvz.org/template/precreated/" target="_blank" rel="external">centos-6-x86_64.tar.gz</a></p>
<blockquote>
<p>Usage: docker import [OPTIONS] URL|- [REPOSITORY[:TAG]]</p>
<p>Create an empty filesystem image and import the contents of the<br>tarball (.tar, .tar.gz, .tgz, .bzip, .tar.xz, .txz) into it, then<br>optionally tag it.<br><a id="more"></a></p>
</blockquote>
<h2 id="实例">实例</h2><blockquote>
<p>cat centos-6-x86_64.tar.gz|docker import - test/centos-6:v1.0<br><img src="/img/docker/docker_import.PNG" alt="Alt text"></p>
</blockquote>
<p>此外，也可以通过指定 URL 或者某个目录来导入，例如</p>
<blockquote>
<p> docker import <a href="http://example.com/exampleimage.tgz" target="_blank" rel="external">http://example.com/exampleimage.tgz</a> example/imagerepo</p>
</blockquote>
<p>*注：用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。</p>
<h1 id="导出容器">导出容器</h1><p>先启动一下容器：</p>
<blockquote>
<p>docker run -t -i 5de0ac2f6f7e /bin/bash</p>
</blockquote>
<p>两个参数，-t表示给容器tty终端，-i表示可以interactive，可以交互。</p>
<p><img src="/img/docker/docker_ps.PNG" alt="Alt text"></p>
<blockquote>
<p>docker export 5d73efeb9a38 &gt; tonylit_centos6.tar</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="导入容器快照">导入容器快照</h1><p>可以使用docker import导入docker的镜像，已centos系统为例，我们导入<a href="http://download.openvz.org/template/precreated/">centos-6-x86_64.tar.gz</a></p>
<blockquote>
<p>Usage: docker import [OPTIONS] URL|- [REPOSITORY[:TAG]]</p>
<p>Create an empty filesystem image and import the contents of the<br>tarball (.tar, .tar.gz, .tgz, .bzip, .tar.xz, .txz) into it, then<br>optionally tag it.<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[loadrunner测试webservice]]></title>
    <link href="http://tonylit.me/2015/12/20/loadrunner%E6%B5%8B%E8%AF%95webservice/"/>
    <id>http://tonylit.me/2015/12/20/loadrunner测试webservice/</id>
    <published>2015-12-20T03:37:27.000Z</published>
    <updated>2015-12-20T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>现在很多应用都提供webservice服务，在做性能测试的时候免不了去测试webservice，我们来看看怎样使用LR进行测试。<br><a id="more"></a></p>
<h1 id="什么是webservice">什么是webservice</h1><p>测试之前先了解下什么是webservice<br>WebService是一个SOA（面向服务的编程）的结构，它不依赖语言、不依赖平台，可以实现不同语言间的相互调用，通过网络进行基于Http协议的网络应用间的交互。<br>一句话概括：WebService是一种跨编程语言和跨操作系统平台的远程调用技术。<br>WebService=WSDL+SOAP+UDDI（webservice的注册）<br><img src="/img/webservice/webservice_1.PNG" alt="Alt text"></p>
<h1 id="loadruner怎样测试webservice">loadruner怎样测试webservice</h1><p>1.打开vugen，选择webservice协议<br><img src="/img/webservice/webservice_2.PNG" alt="Alt text"></p>
<p>2.导入WSDL<br><img src="/img/webservice/webservice_3.PNG" alt="Alt text"></p>
<p>3.点击import后，输入url，这里的url是开发提供的wsdl接口url（如：<a href="http://localhost:9001/Service/ServiceHello?wsdl）" target="_blank" rel="external">http://localhost:9001/Service/ServiceHello?wsdl）</a></p>
<p><img src="/img/webservice/webservice_4.PNG" alt="Alt text"></p>
<p>4.点击OK<br>5.选择目标测试函数<br><img src="/img/webservice/webservice_5.PNG" alt="Alt text"></p>
<p>6.填写参数值，将返回值放入变量中<br><img src="/img/webservice/webservice_6.PNG" alt="Alt text"><br><img src="/img/webservice/webservice_7.PNG" alt="Alt text"></p>
<p>7.点击OK后，自动生成脚本<br><img src="/img/webservice/webservice_8.PNG" alt="Alt text"></p>
<p>8.我们可以进行参数化<br><img src="/img/webservice/webservice_9.PNG" alt="Alt text"></p>
<p>9.运行脚本<br><img src="/img/webservice/webservice_10.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>现在很多应用都提供webservice服务，在做性能测试的时候免不了去测试webservice，我们来看看怎样使用LR进行测试。<br>]]>
    
    </summary>
    
      <category term="loadrunner" scheme="http://tonylit.me/tags/loadrunner/"/>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java调用shell脚本]]></title>
    <link href="http://tonylit.me/2015/12/19/java%E8%B0%83%E7%94%A8shell%E8%84%9A%E6%9C%AC/"/>
    <id>http://tonylit.me/2015/12/19/java调用shell脚本/</id>
    <published>2015-12-19T03:37:27.000Z</published>
    <updated>2015-12-19T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>测试环境发布系统，通过java调用远程机器上的shell脚本，实现自动化发布工作。<br>在此记录一下java调用shell脚本的实现。<br><a id="more"></a><br>需要的jar包：ganymed-ssh2-build210-sources.jar 和apache的commons-io包commons-io-1.3.2.jar<br>pom.xml依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">     </span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>ch.ethz.ganymed<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>ganymed-ssh2<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>build210<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最终实现的情况：<br>远程机器：192.168.xx.xx<br>用户名：xxxx<br>密码：xxxx<br>登陆后执行服务器上的脚本 /master/bin/a.sh<br> 代码比较简单，如下 a.sh脚本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"aaa"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"bbb"</span></span><br><span class="line"><span class="built_in">exit</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>java实现：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.focustech.fds.common.utils;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> ch.ethz.ssh2.ChannelCondition;</span><br><span class="line"><span class="keyword">import</span> ch.ethz.ssh2.Connection;</span><br><span class="line"><span class="keyword">import</span> ch.ethz.ssh2.Session;</span><br><span class="line"><span class="keyword">import</span> ch.ethz.ssh2.StreamGobbler;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * RmtShellExecutor.java</span><br><span class="line"> * </span><br><span class="line"> * @author lit</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> class RmtShellExecutor &#123;</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="comment">/**  */</span></span><br><span class="line">    <span class="keyword">private</span> Connection conn;</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="comment">/** 远程机器IP */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> ip;</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="comment">/** 用户名 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> usr;</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="comment">/** 密码 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> psword;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> charset = Charset.defaultCharset().toString();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> TIME_OUT = <span class="number">1000</span> * <span class="number">5</span> * <span class="number">60</span>;</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 构造函数</span><br><span class="line">     * </span><br><span class="line">     * @param ip</span><br><span class="line">     * @param usr</span><br><span class="line">     * @param ps</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> RmtShellExecutor() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> RmtShellExecutor(<span class="keyword">String</span> ip, <span class="keyword">String</span> usr, <span class="keyword">String</span> ps) &#123;</span><br><span class="line">        <span class="keyword">this</span>.ip = ip;</span><br><span class="line">        <span class="keyword">this</span>.usr = usr;</span><br><span class="line">        psword = ps;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 登录</span><br><span class="line">     * </span><br><span class="line">     * @return</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">boolean</span> login() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        conn = <span class="keyword">new</span> Connection(ip);</span><br><span class="line">        conn.connect();</span><br><span class="line">        <span class="keyword">return</span> conn.authenticateWithPassword(usr, psword);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 执行脚本</span><br><span class="line">     * </span><br><span class="line">     * @param cmds</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> exec(<span class="keyword">String</span> cmds) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        InputStream stdOut = <span class="keyword">null</span>;</span><br><span class="line">        InputStream stdErr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">String</span> outStr = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">String</span> outErr = <span class="string">""</span>;</span><br><span class="line">        <span class="built_in">int</span> ret = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (login()) &#123;</span><br><span class="line">                <span class="comment">// 创建session</span></span><br><span class="line">                Session session = conn.openSession();</span><br><span class="line">                <span class="comment">// 执行远程脚本.</span></span><br><span class="line">                session.execCommand(cmds);</span><br><span class="line">                stdOut = <span class="keyword">new</span> StreamGobbler(session.getStdout());</span><br><span class="line">                outStr = processStream(stdOut, charset);</span><br><span class="line">                stdErr = <span class="keyword">new</span> StreamGobbler(session.getStderr());</span><br><span class="line">                outErr = processStream(stdErr, charset);</span><br><span class="line">                session.waitForCondition(ChannelCondition.EXIT_STATUS, TIME_OUT);</span><br><span class="line">                ret = session.getExitStatus();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"登录远程机器失败"</span> + ip); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;</span><br><span class="line">            IOUtils.closeQuietly(stdOut);</span><br><span class="line">            IOUtils.closeQuietly(stdErr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * @param in</span><br><span class="line">     * @param charset</span><br><span class="line">     * @return</span><br><span class="line">     * @throws IOException</span><br><span class="line">     * @throws UnsupportedEncodingException</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> processStream(InputStream in, <span class="keyword">String</span> charset) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] buf = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span> (in.read(buf) != -<span class="number">1</span>) &#123;</span><br><span class="line">            sb.<span class="built_in">append</span>(<span class="keyword">new</span> <span class="keyword">String</span>(buf, charset));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// bash参数：bash /master/bin/a.sh</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> execute(<span class="keyword">String</span> bash) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        RmtShellExecutor exe = <span class="keyword">new</span> RmtShellExecutor(<span class="string">"192.168.10.199"</span>, <span class="string">"admin"</span>, <span class="string">"focus1234"</span>);</span><br><span class="line">        System.out.<span class="built_in">println</span>(exe.exec(bash));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~</span><br></pre></td></tr></table></figure></p>
<p>结果如下：<br>aaa<br>bbb<br>1</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>测试环境发布系统，通过java调用远程机器上的shell脚本，实现自动化发布工作。<br>在此记录一下java调用shell脚本的实现。<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java线程状态学习]]></title>
    <link href="http://tonylit.me/2015/12/18/java%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%AD%A6%E4%B9%A0/"/>
    <id>http://tonylit.me/2015/12/18/java线程状态学习/</id>
    <published>2015-12-18T03:37:27.000Z</published>
    <updated>2015-12-18T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>一直对java线程的几种状态认识的模模糊糊，平时在对java进行监控的时候，用jstack打出一堆线程状态，看的不是很懂，另外网上一堆乌七八糟的东西，看着着实难受，自己学习一下，整理整理。<br><a id="more"></a></p>
<h1 id="可以直接看java-lang-Thread-State类，里面对几种状态有详细解释。">可以直接看java.lang.Thread.State类，里面对几种状态有详细解释。</h1><blockquote>
<p><strong>NEW</strong> 状态是指线程刚创建, 尚未启动</p>
<p><strong>RUNNABLE</strong> 状态是线程正在正常运行中, 当然可能会有某种耗时计算/IO等待的操作/CPU时间片切换等, 这个状态下发生的等待一般是其他系统资源, 而不是锁, Sleep等</p>
<p><strong>BLOCKED </strong> 这个状态下, 是在多个线程有同步操作的场景, 比如正在等待另一个线程的synchronized 块的执行释放, 或者可重入的 synchronized块里别人调用wait() 方法, 也就是这里是线程在等待进入临界区  </p>
<p><strong>WAITING</strong>  这个状态下是指线程拥有了某个锁之后, 调用了他的wait方法, 等待其他线程/锁拥有者调用 notify / notifyAll 一遍该线程可以继续下一步操作, 这里要区分 BLOCKED 和 WATING 的区别, 一个是在临界点外面等待进入. 一个是在理解点里面wait等待别人notify, 线程调用了join方法 join了另外的线程的时候, 也会进入WAITING状态,<br>等待被他join的线程执行结束</p>
<p><strong>TIMED_WAITING</strong>  这个状态就是有限的(时间限制)的WAITING, 一般出现在调用wait(long), join(long)等情况下, 另外一个线程sleep后, 也会进入TIMED_WAITING状态</p>
<p><strong>TERMINATED</strong> 这个状态下表示 该线程的run方法已经执行完毕了, 基本上就等于死亡了(当时如果线程被持久持有, 可能不会被回收)</p>
</blockquote>
<hr>
<p> 上面的几段话仔细读一读，想一想</p>
<h1 id="下面我们来写写代码，让这些线程进入以上几种状态：">下面我们来写写代码，让这些线程进入以上几种状态：</h1><h2 id="NEW，这个比较easy：">NEW，这个比较easy：</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Thread</span> <span class="keyword">thread</span> = <span class="literal">new</span> <span class="keyword">Thread</span>();</span><br><span class="line"> System<span class="built_in">.</span>out<span class="built_in">.</span>println(<span class="keyword">thread</span><span class="built_in">.</span>getState());</span><br></pre></td></tr></table></figure>
<p>输出NEW</p>
<h2 id="RUNABLE，也easy，将线程start，同时代码里面不要wait或者sleep">RUNABLE，也easy，将线程start，同时代码里面不要wait或者sleep</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Thread thread = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">     @<span class="function">Override</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">             System.out.println(currentThread().getState());</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;;</span><br><span class="line"> thread.start();</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br><img src="/img/thread/runnable.png" alt="Alt text"></p>
</blockquote>
<h2 id="BLOCKED，这个需要至少两个线程，然后互相等待synchronized">BLOCKED，这个需要至少两个线程，然后互相等待synchronized</h2><pre><code><span class="comment"><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">final Object lock = new Object<span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"> Thread run = new Thread<span class="params">()</span> &#123;</span><br><span class="line">     @Override</span><br><span class="line">     public void run<span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">for</span> <span class="params">(int i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++)</span> &#123;</span><br><span class="line">             synchronized <span class="params">(lock)</span> &#123;</span><br><span class="line">                 System.out.println<span class="params">(currentThread<span class="params">()</span>.getState<span class="params">()</span>)</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> Thread t1 = new Thread<span class="params">(run)</span>;</span><br><span class="line"> t1.setName<span class="params">( “t1”)</span>;</span><br><span class="line"> Thread t2 = new Thread<span class="params">(run)</span>;</span><br><span class="line"> t2.setName<span class="params">( “t2”)</span>;</span><br><span class="line"> t1.start<span class="params">()</span>;</span><br><span class="line"> t2.start<span class="params">()</span>;</span><br></pre></td></tr></table></figure></span>
</code></pre><p><img src="/img/thread/BLOCKED.png" alt="Alt text"><br>这时候, 一个在RUNNABLE, 另一个就会在BLOCKED (等待另一个线程的 System.out.println.. 这是个IO操作, 属于系统资源, 不会造成WAITING</p>
<h2 id="WAITING,这个需要用到生产者消费者模型,_当生产者生产过慢的时候,_消费者就会等待生产者的下一次notify">WAITING,这个需要用到生产者消费者模型, 当生产者生产过慢的时候, 消费者就会等待生产者的下一次notify</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">final Object <span class="keyword">lock</span> = <span class="keyword">new</span> Object();</span><br><span class="line">         Thread t1 = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">              @<span class="function">Override</span><br><span class="line">              <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                 </span><br><span class="line">                  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                 </span><br><span class="line">                  <span class="keyword">while</span>(<span class="keyword">true</span> )&#123;</span><br><span class="line">                       synchronized (<span class="keyword">lock</span>) &#123;</span><br><span class="line">                           <span class="keyword">try</span> &#123;</span><br><span class="line">                               <span class="keyword">lock</span>.wait();</span><br><span class="line">                          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                          &#125;</span><br><span class="line">                          System. <span class="keyword">out</span>.println(i++);</span><br><span class="line">                      &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;;</span><br><span class="line">         </span><br><span class="line">         Thread t2 = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">              @<span class="function">Override</span><br><span class="line">              <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                 </span><br><span class="line">                  <span class="keyword">while</span>(<span class="keyword">true</span> )&#123;</span><br><span class="line">                       synchronized (<span class="keyword">lock</span>) &#123;</span><br><span class="line">                           <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; <span class="number">10000000</span>; i++)&#123;</span><br><span class="line">                              System. <span class="keyword">out</span>.println(i);</span><br><span class="line">                          &#125;</span><br><span class="line">                          <span class="keyword">lock</span>.notifyAll();</span><br><span class="line">                      &#125;</span><br><span class="line">                      </span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;;</span><br><span class="line">         </span><br><span class="line">         t1.setName( “^^t1^^”);</span><br><span class="line">         t2.setName( “^^t2^^”);</span><br><span class="line">         </span><br><span class="line">         t1.start();</span><br><span class="line">         t2.start();</span><br></pre></td></tr></table></figure>
<p><img src="/img/thread/WAITTING.png" alt="Alt text"></p>
<h1 id="TIMED_WAITING,_这个仅需要在4的基础上,_在wait方法加上一个时间参数进行限制就OK了">TIMED_WAITING, 这个仅需要在4的基础上, 在wait方法加上一个时间参数进行限制就OK了</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">synchronized (<span class="keyword">lock</span>) &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">lock</span>.wait(<span class="number">60</span> * <span class="number">1000</span>L);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">   &#125;</span><br><span class="line">   System. <span class="keyword">out</span> .println(i++);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p> <img src="/img/thread/TIMED_WAITING.png" alt="Alt text"></p>
<p>另外看stack的输出,  他叫 TIMED_WAITING(on  object monitor) , 说明括号后面还有其他的情况, 比如sleep, 我们直接把t2的for循环改成sleep试试:<br> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">synchronized (lock) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">          sleep(<span class="number">30</span>*<span class="number">1000L</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    lock.notifyAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/thread/TIMED_WAITING_2.png" alt="Alt text"><br>t2的state是 TIMED_WAITING( sleeping),  而t1依然是on object monitor , 因为t1还是wait在等待t2 notify, 而t2是自己sleep</p>
<h2 id="TERMINATED,_这个状态只要线程结束了run方法,_就会进入了">TERMINATED, 这个状态只要线程结束了run方法, 就会进入了</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>一直对java线程的几种状态认识的模模糊糊，平时在对java进行监控的时候，用jstack打出一堆线程状态，看的不是很懂，另外网上一堆乌七八糟的东西，看着着实难受，自己学习一下，整理整理。<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[系统监控-nmon使用]]></title>
    <link href="http://tonylit.me/2015/12/17/%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7-nmon%E4%BD%BF%E7%94%A8/"/>
    <id>http://tonylit.me/2015/12/17/系统监控-nmon使用/</id>
    <published>2015-12-17T03:37:27.000Z</published>
    <updated>2015-12-17T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>压力测试的时候，可以使用nmon收集服务器资源使用情况。工具很不错，收集的结果展示起来也比较直观，是性能测试监控工具的一把好刷子。<br><img src="/img/nmon/nmon_2.PNG" alt="Alt text"></p>
<a id="more"></a>
<h1 id="Nmon简介">Nmon简介</h1><p>Nmon是由IBM提供的，免费监控AIX系统和 linux系统资源的工具，使用比较广泛。相对于其他的监控工具来说，nmon所记录的信息比较全面，它能在系统运行中实时地捕捉系统资源的使用情况，并 能输出结果到文件中，然后通过nmon_analyzer工具产生数据文件和图形化的结果。<br>另外，它不会消耗大量的CPU周期，通常低于百分之一。<br>nmon所记录的数据包含以下几个方面：</p>
<blockquote>
<p>● cpu占用率<br>● 内存使用情况<br>● 磁盘I/O速度、传输和读写比<br>● 文件系统的使用率<br>● 网络I/O速度、传输和读写比率、错误统计率与传输包的大小<br>● 消耗资源最多的进程<br>● 计算机详细信息和资源<br>● 页面空间和页面I/O速度<br>●用户自定义的磁盘组<br>● 网络文件系统</p>
</blockquote>
<h1 id="Nmon安装使用">Nmon安装使用</h1><p>1.首先检查自己的操作系统，我这里为centos5.8 64位<br>下载nmon监控工具和nmon analyser分析工具<br><a href="http://pan.baidu.com/s/1nuicjHJ" target="_blank" rel="external">http://pan.baidu.com/s/1nuicjHJ</a><br>2.将nmon监控工具放在监控服务器上，解压；该文件无执行权限，给它加上chmod +x mon_x86_64_centos5<br><img src="/img/nmon/nmon_1.PNG" alt="Alt text"><br>3.运行./nmon_x86_64_centos5，便可进入nmon监控界面<br><img src="/img/nmon/nmon_2.PNG" alt="Alt text"></p>
<p>按h键，查看选项<br><img src="/img/nmon/nmon_3.PNG" alt="Alt text"><br>4.我们键入c，m，d，看下cpu，内存，磁盘I/O<br><img src="/img/nmon/nmon_4.PNG" alt="Alt text"></p>
<h1 id="nmon数据采集与分析">nmon数据采集与分析</h1><blockquote>
<p>./nmon_x86_64_centos5 -f -t -s 30 -c 180<br>-f:按标准格式输出文件：<hostname>_YYYYMMDD_HHMM.nmon<br>-t:输出中包括占用率较高的进程<br>-s 30：每30秒收集一次数据<br>-c 180：一共收集180次</hostname></p>
</blockquote>
<p>生成的文件如下：<br><img src="/img/nmon/nmon_5.PNG" alt="Alt text"><br>为了分析nmon监控获得的结果，我们用nmon_analyser工具图形化监控结果<br>打开nmon_analyser<br><img src="/img/nmon/nmon_6.PNG" alt="Alt text"></p>
<p>将我们监控的结果添加进来，自动生成图形：<br><img src="/img/nmon/nmon_7.PNG" alt="Alt text"></p>
<h1 id="性能参数介绍：">性能参数介绍：</h1><p>nmon analyser生成的execl中包括很多工作表<br><img src="/img/nmon/nmon_8.PNG" alt="Alt text"></p>
<blockquote>
<p>?    系统汇总（对应SYS_SUMM标签），其中蓝线为cpu占用的变化情况，粉线代表磁盘IO的变化情况<br>?    磁盘读写情况汇总（对应DIS_SUMM标签），其中蓝色为磁盘读的速率KB/S，紫色为磁盘写的速率KB/S<br>?    内存情况汇总（对应MEM标签），曲线表示内存剩余量（MB）</p>
</blockquote>
<h2 id="SYS_SUMM标签页：系统汇总页面">SYS_SUMM标签页：系统汇总页面</h2><blockquote>
<p> User%  ：用户进程占CPU时间百分比  Sys%    ：线程和中断占用CPU时间百分比<br>Wait%    ：所有进程线程被阻塞等待完成一次IO所占CPU时间百分比 Idle%    ：CPU空闲时间百分比 CPU%    ：CPU利用率的百分比</p>
</blockquote>
<p>如果一个CPU被充分利用，比例应该是：65%~70% user time，30%~35% system time，0%~5% idle time</p>
<h2 id="AAA标签页：系统信息">AAA标签页：系统信息</h2><p>页面信息包括：执行的命令、主机cpu数、操作系统版本信息、主机名等信息<br><img src="/img/nmon/nmon_9.PNG" alt="Alt text"></p>
<h2 id="CPU使用情况：标签页（CPU_ALL,CPU_SUMM,CPU001，CPU002）">CPU使用情况：标签页（CPU_ALL,CPU_SUMM,CPU001，CPU002）</h2><p>主机CPU使用情况以及单颗CPU的使用情况<br><img src="/img/nmon/nmon_10.PNG" alt="Alt text"></p>
<h2 id="磁盘读写情况：标签页（DISK_SUMM/DISKBUSY/DISKREAD/DISKWRITE/DISKXFER）">磁盘读写情况：标签页（DISK_SUMM/DISKBUSY/DISKREAD/DISKWRITE/DISKXFER）</h2><p>磁盘的读写、及I/O的统计信息，系统各磁盘分区的情况。<br><img src="/img/nmon/nmon_11.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>压力测试的时候，可以使用nmon收集服务器资源使用情况。工具很不错，收集的结果展示起来也比较直观，是性能测试监控工具的一把好刷子。<br><img src="/img/nmon/nmon_2.PNG" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jenkins+maven+jmeter 性能自动化实践]]></title>
    <link href="http://tonylit.me/2015/12/16/jenkins+maven+jmeter%E6%80%A7%E8%83%BD%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%9E%E8%B7%B5/"/>
    <id>http://tonylit.me/2015/12/16/jenkins+maven+jmeter性能自动化实践/</id>
    <published>2015-12-16T03:37:27.000Z</published>
    <updated>2015-12-16T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>先简单介绍这几个工具，其实都不陌生了，平时工作中都会接触到<br>jenkins：前身hudson，开源的CI服务器<br>maven：这里主要是要用到maven与jmeter集成的插件（jmeter-maven-plugin）<br>jmeter：java编写的apache下开源的性能测试工具</p>
<h1 id="整个环境搭建过程：">整个环境搭建过程：</h1><blockquote>
<ol>
<li>新建maven工程，在pom中加入jmeter的插件，将jmeter脚本放入项目中，测试</li>
<li>搭建jenkins（这里使用的linux环境 centos5.8）</li>
<li>将maven项目配置在jenkins中</li>
<li>在jenkins中集成jmeter结果展示的插件（Performance），进行jenkins构建，测试</li>
</ol>
</blockquote>
<a id="more"></a>
<h1 id="第一步：新建maven项目">第一步：新建maven项目</h1><p>1.新建maven项目，在pom中加入jmeter-maven-plugin插件（由于jmeter-maven插件运行时会自动引入jmeter所需要的类库，所以机器上可以不单独安装jmeter）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>com.lazerycode.jmeter<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>jmeter-maven-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.10.1<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">id</span>&gt;</span>jmeter-tests<span class="tag">&lt;/<span class="title">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="title">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">goal</span>&gt;</span>jmeter<span class="tag">&lt;/<span class="title">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.在项目中新建source Folder：src/test/jmeter，因为插件中指定在此目录下面查找jmeter脚本来执行，如果想更改路径的话，在pom中自己配置<br><img src="/img/jenkins/jenkins_1.PNG" alt="Alt text"></p>
<p>3.在Command Line Shell中执行：mvn verify或者mvn jmeter:jmeter，这样jmeter的脚本运行了。<br><img src="/img/jenkins/jenkins_2.PNG" alt="Alt text"></p>
<p>这里的jmeter脚本比较简单，就是打开一个页面，10个并发，我们可以看下执行结果，确实是按照我们的设置运行了。</p>
<p><img src="/img/jenkins/jenkins_3.PNG" alt="Alt text"></p>
<p>以上，我们集成Jmeter插件的maven项目就OK了。</p>
<hr>
<h1 id="第二步，搭建jenkins">第二步，搭建jenkins</h1><p>我是linux环境下安装的（下载地址：  <a href="http://pan.baidu.com/s/1bnYTisn" target="_blank" rel="external">jenkins.war</a> 和它常用的插件<a href="http://updates.jenkins-ci.org/download/plugins/" target="_blank" rel="external">jenkins_plugin</a>）（先下载performance，后面会用），jenkins启动直接采用java -jar，用nginx进行访问代理<br>1.将jenkins.war放入服务器上</p>
<ol>
<li>直接命令（java的版本需要jdk1.7+）：java -jar jenkins.war，jenkins就启动了，默认端口8080，也可以指定端口启动:加入启动参数 –httpPort=$HTTP_PORT(设置端口)，–httpsPort=$HTTP_PORT(便是使用https协议)；当然完全可以搭建在 tomcat或者resin服务器中。<br><img src="/img/jenkins/jenkins_4.PNG" alt="Alt text"></li>
</ol>
<p>3.启动完，我们可以访问jenkins了，输入ip:端口<br><img src="/img/jenkins/jenkins_5.PNG" alt="Alt text"><br>4.使用nginx代理访问jenkins，这一步可以不要，主要是我想用域名方式访问。我们在nginx中简单配置下就可以了：<br><img src="/img/jenkins/jenkins_6.PNG" alt="Alt text"><br><img src="/img/jenkins/jenkins_7.PNG" alt="Alt text"><br>以上，jenkins搭建完成了，比较简单。</p>
<hr>
<h1 id="第三步：将项目放在jenkins中构建">第三步：将项目放在jenkins中构建</h1><p>我这里实现的很简单，直接调用的服务器上的脚本运行的；而且本人对jenkins的配置刚开始了解，不太懂，关于项目配置大家可以具体学习下，网上资料比较多。<br>1.开始之前，需要在jenkins中加入上面下载的插件，在jenkins的插件管理中上传就可以了。<br>2.新建一个项目（我这里新建的构建一个自由风格的软件项目），直接运行服务器上的脚本<br><img src="/img/jenkins/jenkins_8.PNG" alt="Alt text"><br>脚本中实现如下：<br><img src="/img/jenkins/jenkins_9.PNG" alt="Alt text"></p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export LANG=en_US</span><br><span class="line">export LC_ALL=en_US</span><br><span class="line">export JAVA_HOME=/opt/jdk1.<span class="number">7.0_40</span>/</span><br><span class="line">export CLASSPATH=<span class="variable">$JAVA</span>_HOME/lib:<span class="variable">$JAVA</span>_HOME/jre/lib:<span class="variable">$CLASSPATH</span></span><br><span class="line">export MAVEN_HOME=/opt/apache-maven-<span class="number">3.0</span>.<span class="number">4</span>/</span><br><span class="line">export PATH=<span class="variable">$JAVA</span>_HOME/bin:$&#123;MAVEN_HOME&#125;/bin:<span class="variable">$PATH</span></span><br><span class="line">export MAVEN_OPTS=<span class="string">"-Xmx1024m -XX:MaxPermSize=512m"</span></span><br><span class="line"> </span><br><span class="line">cd  /app/maven_jmeter/</span><br><span class="line">/opt/apache-maven-<span class="number">3.0</span>.<span class="number">4</span>/bin/mvn -s /opt/apache-maven-<span class="number">3.0</span>.<span class="number">4</span>/conf/voen_setting.xml jmeter:jmeter</span><br></pre></td></tr></table></figure>
<p>以上，jenkins的项目构建结束。</p>
<hr>
<h1 id="第四步：测试结果展示">第四步：测试结果展示</h1><p>测试的结果怎样在jenkins中显示呢？这里需要performance插件（上面svn中有）<br>1.我们先来看下结果放在哪<br><img src="/img/jenkins/jenkins_10.PNG" alt="Alt text"><br>2.在jenkins中加入publish perfoemance test result resport<br><img src="/img/jenkins/jenkins_11.PNG" alt="Alt text"><br>3.我们进行构建，看下结果<br><img src="/img/jenkins/jenkins_12.PNG" alt="Alt text"><br>这里展现的结果可以做优化，并且可以集成邮件功能<br>以上，整个实践结束，整体还是比较简单的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>先简单介绍这几个工具，其实都不陌生了，平时工作中都会接触到<br>jenkins：前身hudson，开源的CI服务器<br>maven：这里主要是要用到maven与jmeter集成的插件（jmeter-maven-plugin）<br>jmeter：java编写的apache下开源的性能测试工具</p>
<h1 id="整个环境搭建过程：">整个环境搭建过程：</h1><blockquote>
<ol>
<li>新建maven工程，在pom中加入jmeter的插件，将jmeter脚本放入项目中，测试</li>
<li>搭建jenkins（这里使用的linux环境 centos5.8）</li>
<li>将maven项目配置在jenkins中</li>
<li>在jenkins中集成jmeter结果展示的插件（Performance），进行jenkins构建，测试</li>
</ol>
</blockquote>]]>
    
    </summary>
    
      <category term="Jmeter" scheme="http://tonylit.me/tags/Jmeter/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SoupUI接口性能测试]]></title>
    <link href="http://tonylit.me/2015/12/16/soupui%E6%8E%A5%E5%8F%A3%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <id>http://tonylit.me/2015/12/16/soupui接口性能测试/</id>
    <published>2015-12-16T03:37:27.000Z</published>
    <updated>2015-12-16T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>SoapUI做接口测试时，可能会忽略它有压力测试的套件LoadTest，在做WebServices接口压力测试时，比loadrunner更胜一筹。<br><a id="more"></a><br><img src="/img/soupui/soupui_1.PNG" alt="Alt text"><br>Threads：线程数量，相对于LR中的虚拟用户数<br>Strategy：我们选择Simple就可以了<br>Test Delay：用例之间的等待时间，相对于LR中的思考时间<br>Random：思考时间取值区间，相对于LR中思考时间设置里面的Use Random Percent…<br>Limit：运行时间，相对于LR中的持续时间<br>这里的设置项比较少，但一般情况是够用了；另外结果的展现部分和LR是没法比较的。最主要的它的免费的。<br>在WebServices接口测试方面，准确性比LR高。至于原因（网上说的）：<br>soapui 是专门针对webservices接口的测试工具，在发送请求的时候，直接以组装好的soapui报文进行发送，而LR是使用 web_services_call方法，从方法传入相应的参数，由LR组装成soap报文后再发送接口调用。所以相应时间上LR更长。<br>对于非webservices接口，我也测试了一下（REST POST请求），看下图对比：<br><img src="/img/soupui/soupui_2.PNG" alt="Alt text"><br><img src="/img/soupui/soupui_3.PNG" alt="Alt text"><br>可以看到响应时间上面，soapui更小</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>SoapUI做接口测试时，可能会忽略它有压力测试的套件LoadTest，在做WebServices接口压力测试时，比loadrunner更胜一筹。<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaMelody监控java应用]]></title>
    <link href="http://tonylit.me/2015/12/16/javamelody%E7%9B%91%E6%8E%A7java%E5%BA%94%E7%94%A8/"/>
    <id>http://tonylit.me/2015/12/16/javamelody监控java应用/</id>
    <published>2015-12-16T03:37:27.000Z</published>
    <updated>2015-12-16T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>公司里大多都是java项目，之前监控一直用jprofiler，最近在论坛上发现JavaMelody这个监控神器，真是眼前一亮！<br><img src="/img/javamelody/javamelody_1.jpg" alt="Alt text"></p>
<a id="more"></a>
<h1 id="JavaMelody介绍">JavaMelody介绍</h1><p>JavaMelody 能够监测Java或Java EE应用程序服务器，并以图表的方式显示：Java内存和Java  CPU使用情况，用户Session数量，JDBC连接数，和http请求、sql请求、jsp页面与业务接口方法（EJB3、Spring、 Guice）的执行数量，平均执行时间，错误百分比等。图表可以按天，周，月，年或自定义时间段查看。</p>
<h1 id="监控配置">监控配置</h1><p>今天先介绍怎样简单的做项目监控，与spring或者Struts集成先不谈。<br>你需要做的只是拷贝两个jar包，添加10行xml的代码就OK了。</p>
<h2 id="下载一个javamelody-1-58-0-zip_解压开来">下载一个javamelody-1.58.0.zip 解压开来</h2><p>下载地址在github上，<a href="https://github.com/javamelody/javamelody/releases，现在的最新版本是1.58，下载javamelody-1.58.0.zip" target="_blank" rel="external">https://github.com/javamelody/javamelody/releases，现在的最新版本是1.58，下载javamelody-1.58.0.zip</a><br>解压开，将里面的javamelody.jar和jrobin-1.5.9.1.jar拷贝到项目WEB-INF下的lib中。</p>
<h1 id="配置web-xml">配置web.xml</h1><p>在web.xml中添加配置：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;filter&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="variable">&lt;filter-name&gt;</span>monitoring<span class="variable">&lt;/filter-name&gt;</span></span><br><span class="line">      <span class="variable">&lt;filter-class&gt;</span>net.bull.javamelody.MonitoringFilter<span class="variable">&lt;/filter-class&gt;</span></span><br><span class="line"><span class="variable">&lt;/filter&gt;</span></span><br><span class="line"><span class="variable">&lt;filter-mapping&gt;</span></span><br><span class="line">       <span class="variable">&lt;filter-name&gt;</span>monitoring<span class="variable">&lt;/filter-name&gt;</span></span><br><span class="line">       <span class="variable">&lt;url-pattern&gt;</span>/<span class="keyword">*</span><span class="variable">&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="variable">&lt;/filter-mapping&gt;</span></span><br><span class="line"><span class="variable">&lt;listener&gt;</span></span><br><span class="line">       <span class="variable">&lt;listener-class&gt;</span>net.bull.javamelody.SessionListener<span class="variable">&lt;/listener-class&gt;</span></span><br><span class="line"><span class="variable">&lt;/listener&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="重启应用，完成配置">重启应用，完成配置</h1><p>现在就可以启动应用服务器打开网址查看监控效果了。网址：http://<host>/monitoring<br>如：<a href="http://192.168.43.103:82/monitoring" target="_blank" rel="external">http://192.168.43.103:82/monitoring</a><br><img src="/img/javamelody/javamelody.PNG" alt="Alt text"></host></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>公司里大多都是java项目，之前监控一直用jprofiler，最近在论坛上发现JavaMelody这个监控神器，真是眼前一亮！<br><img src="/img/javamelody/javamelody_1.jpg" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Druid连接池监控]]></title>
    <link href="http://tonylit.me/2015/12/15/druid%E8%BF%9E%E6%8E%A5%E6%B1%A0%E7%9B%91%E6%8E%A7/"/>
    <id>http://tonylit.me/2015/12/15/druid连接池监控/</id>
    <published>2015-12-15T03:37:27.000Z</published>
    <updated>2015-12-15T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>Druid是一个JDBC组件， 首先是一个数据库连接池，属于阿里巴巴众多开源项目的一个。如果想看具体的介绍请看这里：<br>官网介绍：<a href="http://code.alibabatech.com/wiki/display/Druid/Home" target="_blank" rel="external">http://code.alibabatech.com/wiki/display/Druid/Home</a><br>我这里主要介绍怎么监控druid<br><a id="more"></a></p>
<h1 id="在web-xml中添加如下：">在web.xml中添加如下：</h1><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;servlet&gt;</span>  </span><br><span class="line"></span><br><span class="line">        <span class="variable">&lt;servlet-name&gt;</span>DruidStatView<span class="variable">&lt;/servlet-name&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;servlet-class&gt;</span>com.alibaba.druid.support.http.StatViewServlet<span class="variable">&lt;/servlet-class&gt;</span>  </span><br><span class="line">    <span class="variable">&lt;/servlet&gt;</span>  </span><br><span class="line">    <span class="variable">&lt;servlet-mapping&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;servlet-name&gt;</span>DruidStatView<span class="variable">&lt;/servlet-name&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;url-pattern&gt;</span>/druid/<span class="keyword">*</span><span class="variable">&lt;/url-pattern&gt;</span>  </span><br><span class="line">    <span class="variable">&lt;/servlet-mapping&gt;</span> </span><br><span class="line"><span class="variable">&lt;filter&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;filter-name&gt;</span>DruidWebStatFilter<span class="variable">&lt;/filter-name&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;filter-class&gt;</span>com.alibaba.druid.support.http.WebStatFilter<span class="variable">&lt;/filter-class&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;init-param&gt;</span>  </span><br><span class="line">            <span class="variable">&lt;param-name&gt;</span>exclusions<span class="variable">&lt;/param-name&gt;</span>  </span><br><span class="line">            <span class="variable">&lt;param-value&gt;</span><span class="keyword">*</span>.js,<span class="keyword">*</span>.gif,<span class="keyword">*</span>.jpg,<span class="keyword">*</span>.png,<span class="keyword">*</span>.css,<span class="keyword">*</span>.ico,/druid/<span class="keyword">*</span><span class="variable">&lt;/param-value&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;/init-param&gt;</span>  </span><br><span class="line">      <span class="variable">&lt;/filter&gt;</span>  </span><br><span class="line">      <span class="variable">&lt;filter-mapping&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;filter-name&gt;</span>DruidWebStatFilter<span class="variable">&lt;/filter-name&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;url-pattern&gt;</span>/<span class="keyword">*</span><span class="variable">&lt;/url-pattern&gt;</span>  </span><br><span class="line">      <span class="variable">&lt;/filter-mapping&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="配置完成，重启应用，访问http://ip地址+端口/druid/index-html">配置完成，重启应用，访问<a href="http://ip地址+端口/druid/index.html" target="_blank" rel="external">http://ip地址+端口/druid/index.html</a></h1><p><img src="/img/druid.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Druid是一个JDBC组件， 首先是一个数据库连接池，属于阿里巴巴众多开源项目的一个。如果想看具体的介绍请看这里：<br>官网介绍：<a href="http://code.alibabatech.com/wiki/display/Druid/Home">http://code.alibabatech.com/wiki/display/Druid/Home</a><br>我这里主要介绍怎么监控druid<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[性能测试葵花宝典]]></title>
    <link href="http://tonylit.me/2015/12/10/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E8%91%B5%E8%8A%B1%E5%AE%9D%E5%85%B8/"/>
    <id>http://tonylit.me/2015/12/10/性能测试葵花宝典/</id>
    <published>2015-12-10T03:37:27.000Z</published>
    <updated>2015-12-10T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>在此整理性能测试过程中的一些精华内容，并持续进行<br>为此命名为性能测试葵花宝典，我先练上！<br><img src="/img/葵花宝典.jpg" alt="Alt text"></p>
<a id="more"></a>
<h1 id="压力机的资源利用率">压力机的资源利用率</h1><blockquote>
<p>cpu%&lt;50%<br>内存&lt;80%<br>network&lt;30%,高了容易丢包<br>disk的忙闲&lt;50%<br>disk的空间&lt;90%，高了会碎片整理</p>
</blockquote>
<h1 id="OS常用阀值">OS常用阀值</h1><blockquote>
<p>TotalCPU%&lt;75%<br> sysCPU%&lt;30%<br>  load average&lt;5<br> wio%&lt;40%<br>  network%&lt;30%<br>mem%&lt;80%~90%<br> disk%busy&lt;60%<br> disk queueing &lt;5<br> disk usage&lt;90%</p>
</blockquote>
<h1 id="OSI7层模型">OSI7层模型</h1><p><img src="/img/OSI_7.gif" alt="Alt text"></p>
<h1 id="线程状态">线程状态</h1><p><img src="/img/线程状态.jpg" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在此整理性能测试过程中的一些精华内容，并持续进行<br>为此命名为性能测试葵花宝典，我先练上！<br><img src="/img/葵花宝典.jpg" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Jmeter测试java程序]]></title>
    <link href="http://tonylit.me/2015/12/10/jmeter%E6%B5%8B%E8%AF%95java/"/>
    <id>http://tonylit.me/2015/12/10/jmeter测试java/</id>
    <published>2015-12-10T03:37:27.000Z</published>
    <updated>2015-12-10T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>之前写过用loadrunner测试java程序。其实Jmeter同样可以，它本身是开源、java实现的，对java的支持比较优秀。<br>那么问题来了，怎么使用Jmeter进行工作呢？<br><img src="/img/jmeter/jmeter.jpg" alt="Alt text"></p>
<a id="more"></a>
<h1 id="第一步：">第一步：</h1><p>创建java工程，并把Jmeter文件夹中lib目录下的jar包添加进入工程。<br><img src="/img/jmeter/jmeter_jar.PNG" alt="Alt text"></p>
<h1 id="第二步">第二步</h1><p>创建一个类继承AbstractJavaSamplerClient，并重写；</p>
<blockquote>
<p>public Arguments getDefaultParameters();设置可用参数及默认值；<br>public void setupTest(JavaSamplerContext arg0)：每个线程测试前执行一次，做一些初始化工作；<br>public SampleResult runTest(JavaSamplerContext arg0)：开始测试，从arg0参数可以获得参数值；<br>public void teardownTest(JavaSamplerContext arg0)：测试结束时调用；</p>
</blockquote>
<p>执行的先后顺序为：<br>getDefaultParameters() –&gt; setupTest(JavaSamplerContext context) –&gt; runTest(JavaSamplerContext context) –&gt; teardownTest(JavaSamplerContext context)</p>
<blockquote>
<p>常用的方法： </p>
<ul>
<li>addArgument(“name”, “value”)    定义参数</li>
<li>sampleStart()   定义事务的开始，类似于LR的lr_start_transaction，和LR一样事务间不要放无关代码 </li>
<li>sampleEnd()    定义事务的结束，类似于LR的lr_end_transaction </li>
<li>setSuccessful(true、false)   设置运行结果的成功或失败，Jmeter统计成功失败的次数，在聚合报告中能够体现。</li>
</ul>
</blockquote>
<h1 id="第三步">第三步</h1><p>将java工程导出为jar包，将此jar包放入JMETER_HOME\lib\ext目录</p>
<h1 id="第四步">第四步</h1><p>打开JMeter，创建线程组、Java Request、查看结果树，进行测试；</p>
<h1 id="实例">实例</h1><h2 id="先写一个被测试的类">先写一个被测试的类</h2><p>简单一点：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">     <span class="keyword">*</span> Copyright 2015 Focus Technology, Co., Ltd. All rights reserved.</span><br><span class="line">package jmeter.test;</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> HelloWorld.java</span><br><span class="line"> <span class="keyword">*</span> </span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@author lit</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">public class HelloWorld &#123;</span><br><span class="line"></span><br><span class="line">  public String sayHello(String world1, String world2) &#123;</span><br><span class="line">        return world1 + world2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="创建一个JmeterTest类，并继承AbstractJavaSamplerClient：">创建一个JmeterTest类，并继承AbstractJavaSamplerClient：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"> * Copyright <span class="number">2015</span> Focus Technology, Co., Ltd. All rights reserved.</span><br><span class="line"><span class="keyword">package</span> jmeter.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.jmeter.config.Arguments;</span><br><span class="line"><span class="keyword">import</span> org.apache.jmeter.protocol.java.sampler.AbstractJavaSamplerClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.jmeter.samplers.SampleResult;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * JmeterTest.java</span><br><span class="line"> * </span><br><span class="line"> * <span class="doctag">@author</span> lit</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmeterTest</span> <span class="keyword">extends</span> <span class="title">AbstractJavaSamplerClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String world1;</span><br><span class="line">    <span class="keyword">private</span> String world2;</span><br><span class="line">    <span class="keyword">private</span> String world_final;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 这个方法是用来自定义java方法入参的。 params.addArgument("name","guodegang");表示入参名字叫name,值为guodegang。 设置可用参数及的默认值；</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Arguments <span class="title">getDefaultParameters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Arguments arguments = <span class="keyword">new</span> Arguments();</span><br><span class="line">        arguments.addArgument(<span class="string">"name"</span>, <span class="string">"guodegang"</span>);</span><br><span class="line">        arguments.addArgument(<span class="string">"age"</span>, <span class="string">"48"</span>);</span><br><span class="line">        <span class="keyword">return</span> arguments;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每个线程测试前执行一次，做一些初始化工作；</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setupTest</span><span class="params">(JavaSamplerContext arg0)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 开始测试，从arg0参数可以获得参数值；</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SampleResult <span class="title">runTest</span><span class="params">(JavaSamplerContext arg0)</span> </span>&#123;</span><br><span class="line">        world1 = arg0.getParameter(<span class="string">"name"</span>);</span><br><span class="line">        world2 = arg0.getParameter(<span class="string">"age"</span>);</span><br><span class="line">        <span class="comment">// 增加jmter的sample</span></span><br><span class="line">        SampleResult sr = <span class="keyword">new</span> SampleResult();</span><br><span class="line">        sr.setSampleLabel(<span class="string">"java request"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// jmeter 开始统计响应时间标记</span></span><br><span class="line">            sr.sampleStart();</span><br><span class="line">            HelloWorld helloWorld = <span class="keyword">new</span> HelloWorld();</span><br><span class="line">            world_final = helloWorld.sayHello(world1, world2);</span><br><span class="line">            <span class="keyword">if</span> (world_final != <span class="keyword">null</span> &amp;&amp; world_final.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                sr.setResponseData(<span class="string">"结果是："</span> + world_final, <span class="keyword">null</span>);</span><br><span class="line">                sr.setDataType(SampleResult.TEXT);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sr.setSuccessful(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            sr.setSuccessful(<span class="keyword">false</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// jmeter 结束统计响应时间标记</span></span><br><span class="line">            sr.sampleEnd();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试结束时调用；</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teardownTest</span><span class="params">(JavaSamplerContext arg0)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 本地测试用</span><br><span class="line">     * </span><br><span class="line">     * <span class="doctag">@param</span> args</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        Arguments params = <span class="keyword">new</span> Arguments();</span><br><span class="line">        params.addArgument(<span class="string">"name"</span>, <span class="string">"guodegang"</span>);</span><br><span class="line">        params.addArgument(<span class="string">"age"</span>, <span class="string">"48"</span>);</span><br><span class="line">        JavaSamplerContext arg0 = <span class="keyword">new</span> JavaSamplerContext(params);</span><br><span class="line">        JmeterTest test = <span class="keyword">new</span> JmeterTest();</span><br><span class="line">        test.setupTest(arg0);</span><br><span class="line">        test.runTest(arg0);</span><br><span class="line">        test.teardownTest(arg0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Export为Runnable_Jar_File：hello-jar">Export为Runnable Jar File：hello.jar</h2><h2 id="将此hello-jar包放入JMETER_HOME\lib\ext目录；">将此hello.jar包放入JMETER_HOME\lib\ext目录；</h2><h2 id="打开JMeter,添加线程组，添加Java请求，查看结果树。">打开JMeter,添加线程组，添加Java请求，查看结果树。</h2><p><img src="/img/jmeter/jmeter_java.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前写过用loadrunner测试java程序。其实Jmeter同样可以，它本身是开源、java实现的，对java的支持比较优秀。<br>那么问题来了，怎么使用Jmeter进行工作呢？<br><img src="/img/jmeter/jmeter.jpg" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="Jmeter" scheme="http://tonylit.me/tags/Jmeter/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[loadrunner调用java程序]]></title>
    <link href="http://tonylit.me/2015/12/07/loadrunner%E8%B0%83%E7%94%A8java/"/>
    <id>http://tonylit.me/2015/12/07/loadrunner调用java/</id>
    <published>2015-12-07T03:37:27.000Z</published>
    <updated>2015-12-07T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>有些时候，需要使用LR来调用我们写好的java程序（接口），做一些压力测试。<br>那么问题来了，怎么使用LR进行工作呢？<br><a id="more"></a></p>
<p>步骤如下：<br>1.将java项目中使用的jar包找出来<br>2.将java工程文件打成jar包<br>3.打开loadrunner，新建一个Java Vuser的脚本<br><img src="/img/java_vuser.PNG" alt="Alt text"><br>4.设置Run—time Settings中的ClassPath，加入java工程中调用的jar包<br><img src="/img/java_jar.PNG" alt="Alt text"><br>5.接下来我们编写Vuser脚本，和java一样，导入需要的包名，调用项目中的接口或者函数<br><img src="/img/java_java.PNG" alt="Alt text"><br>6.写完以后，编译运行一下，没问题，就可以设置测试场景加压了<br>当然还有其他方式调用java程序，以上是比较简单的一种。<br>对于业务场景，完全可以在Vuser中编写，不过在Vuser中编写有些不方便，看个人喜好吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有些时候，需要使用LR来调用我们写好的java程序（接口），做一些压力测试。<br>那么问题来了，怎么使用LR进行工作呢？<br>]]>
    
    </summary>
    
      <category term="loadrunner" scheme="http://tonylit.me/tags/loadrunner/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux系统抓包-tcpdump与tcpflow]]></title>
    <link href="http://tonylit.me/2015/12/04/tcpdump/"/>
    <id>http://tonylit.me/2015/12/04/tcpdump/</id>
    <published>2015-12-04T03:37:27.000Z</published>
    <updated>2015-12-04T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>平时抓包用的最多的是wireshark和httpwatch，<br>如果想在linux服务器上抓包，比较常用tcpdump，tcpflow命令，tcpdump对http包的抓取支持不好，tcpflow的http的抓取表现不错<br><a id="more"></a></p>
<h1 id="tcpdump">tcpdump</h1><h2 id="tcpdump的命令格式">tcpdump的命令格式</h2><blockquote>
<p>tcpdump [-i 网卡] -nnAX ‘表达式’ 各参数说明如下：<br>-i：interface 监听的网卡。<br>-nn：表示以ip和port的方式显示来源主机和目的主机，而不是用主机名和服务。<br>-A：以ascii的方式显示数据包，抓取web数据时很有用。<br>-X：数据包将会以16进制和ascii的方式显示。  表达式：表达式有很多种，常见的有：host 主机；port 端口；src host 发包主机；dst host 收包主机。</p>
</blockquote>
<h2 id="监听网卡eth0">监听网卡eth0</h2><blockquote>
<p>tcpdump -i eth0</p>
</blockquote>
<h2 id="监听指定协议的数据">监听指定协议的数据</h2><blockquote>
<p>tcpdump -i eth0 -nn ‘icmp’</p>
</blockquote>
<p>这个是用来监听icmp协议的数据，就是ping命令使用的协议。<br>类似的，如果要监听tcp或者是udp协议，只需要修改上例的icmp就可以了</p>
<h2 id="监听指定的主机">监听指定的主机</h2><blockquote>
<p> tcpdump -i eth0 -nn ‘host 192.168.43.59’</p>
</blockquote>
<p>这样的话，192.168.1.231这台主机接收到的包和发送的包都会被抓取。</p>
<blockquote>
<p>  tcpdump -i eth0 -nn ‘src host 192.168.43.59’ </p>
</blockquote>
<p>这样只有192.168.43.59这台主机发送的包才会被抓取。</p>
<blockquote>
<p> tcpdump -i eth0 -nn ‘dst host 192.168.43.59’ </p>
</blockquote>
<p>  这样只有192.168.43.59这台主机接收到的包才会被抓取。</p>
<p>监听指定端口</p>
<blockquote>
<p> tcpdump -i eth0 -nnA ‘port 80’</p>
</blockquote>
<p>用来监听主机的80端口收到和发送的所有数据包。</p>
<p>监听指定主机和端口<br> tcpdump -i eth0 -nnA ‘port 80 and src host 192.168.43.59’<br>多个条件可以用and，or连接。<br>上例表示监听192.168.43.59主机通过80端口发送的数据包。</p>
<h1 id="tcpflow">tcpflow</h1><p>一般情况操作系统不会自带tcpflow，下载一个<br><a href="http://download.chinaunix.net/download/0011000/10190.shtml" target="_blank" rel="external">tcpflow下载</a></p>
<p>安装啥的就不说了，主要看一下抓取包的内容</p>
<blockquote>
<p>tcpflow -i eth0 host ‘192.168.17.39’</p>
</blockquote>
<p>他会生成很多文件：<br><img src="/img/tcoflow1.PNG" alt="Alt text"></p>
<p>打开看看：<br><img src="/img/tcvpflow2.PNG" alt="Alt text"></p>
<p>是不是和浏览器查看的差不多！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>平时抓包用的最多的是wireshark和httpwatch，<br>如果想在linux服务器上抓包，比较常用tcpdump，tcpflow命令，tcpdump对http包的抓取支持不好，tcpflow的http的抓取表现不错<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[lrs_set_recv_timeout 解决长连接等待]]></title>
    <link href="http://tonylit.me/2015/12/04/tcp/"/>
    <id>http://tonylit.me/2015/12/04/tcp/</id>
    <published>2015-12-04T03:37:27.000Z</published>
    <updated>2015-12-04T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>最近又碰到坑爹的通讯项目，web端登录与客户端登录消息用的一套长连接机制。<br>脚本写的真是蛋疼、累死，不仅要用socket协议，还要模拟长连接接收消息，最后要看一堆无语的data.ws文件。<br>而且，两个部门协作起来真是无力吐槽了！<br>还好有<strong>lrs_set_recv_timeout</strong><br><a id="more"></a><br>lrs_set_recv_timeout有两个函数<br>lrs_set_recv_timeout和lrs_set_recv_timeout2</p>
<blockquote>
<p> lrs_set_recv_timeout(long sec, long u_sec);  // 设置接收数据的等待时间（超时时间）<br>lrs_set_recv_timeout2(long sec, long u_sec);  // 设置建立连接成功之后，接收数据的等待时间。</p>
</blockquote>
<p>Example:</p>
<blockquote>
<p>lrs_create_socket(“socket2”, “TCP”,<br>“RemoteHost=tears.mercury.co.il:23”, LrsLastArg); lrs_send(“socket2”,<br>“buf2”, LrsLastArg); lrs_set_recv_timeout(120,0);<br>lrs_set_recv_timeout2(10,0); lrs_receive(“socket2”, “buf3”,<br>LrsLastArg);</p>
</blockquote>
<p>我的脚本：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">/*********************************************************************</span><br><span class="line"> * Created by Mercury Interactive Windows Sockets Recorder</span><br><span class="line"> *</span><br><span class="line"> * Created on: Tue Oct 27 17:48:09</span><br><span class="line"> *********************************************************************/</span><br><span class="line"></span><br><span class="line">#include "lrs.h"</span><br><span class="line">...</span><br><span class="line">char *position;</span><br><span class="line">char *position2;</span><br><span class="line">Action()</span><br><span class="line"></span><span class="expression">&#123;</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket0"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line">	/<span class="end-block">/GET mictouch</span>_<span class="variable">logout</span> <span class="variable">HTTP</span>1<span class="variable">.</span>1 <span class="variable">Host</span>: <span class="variable">m.made-in-china.com</span></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket0"</span>, <span class="string">"buf0"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket0"</span>, <span class="string">"buf1"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">    /<span class="end-block">/location</span>: <span class="end-block">/login</span></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket0"</span>, <span class="string">"buf2"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket0"</span>, <span class="string">"buf3"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket1"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket2"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line">   /<span class="end-block">/GET </span><span class="end-block">/mt</span><span class="end-block">/img</span><span class="end-block">/phone.svg</span>?_<span class="variable">v</span>=1445919622415 <span class="variable">HTTP</span>/1<span class="variable">.</span>1\<span class="variable">r</span>\<span class="variable">n</span></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket1"</span>, <span class="string">"buf4"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket3"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket1"</span>, <span class="string">"buf5"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket4"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket5"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket6"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket7"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket8"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=203.208.40.135:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket0"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket9"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=203.208.40.135:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket4"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket2"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket3"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket6"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket5"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket7"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket9"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket8"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket10"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line">    /<span class="end-block">/GET </span><span class="end-block">/favicon.ico HTTP</span>/1<span class="variable">.</span>1\<span class="variable">r</span>\<span class="variable">n</span><span class="string">"</span><br><span class="line"></span><br><span class="line">    lrs_send("</span><span class="variable">socket</span>10<span class="string">", "</span><span class="variable">buf</span>7<span class="string">", LrsLastArg);</span><br><span class="line"></span><br><span class="line">    lrs_create_socket("</span><span class="variable">socket</span>11<span class="string">", "</span><span class="variable">TCP</span><span class="string">", "</span><span class="variable">RemoteHost</span>=<span class="variable">webserver.trademessenger.com</span>:80<span class="string">",  LrsLastArg);</span><br><span class="line"></span><br><span class="line">    lrs_receive("</span><span class="variable">socket</span>10<span class="string">", "</span><span class="variable">buf</span>8<span class="string">", LrsLastArg);</span><br><span class="line">    //POST /mictouch_login HTTP/1.1\r\n"</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket10"</span>, <span class="string">"buf9"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket10"</span>, <span class="string">"buf10"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket11"</span>, <span class="string">"buf11"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket11"</span>, <span class="string">"buf12"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket12"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket13"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=203.208.40.135:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket14"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">//<span class="end-block">/tm</span><span class="end-block">/leaveword</span><span class="end-block">/count.jsonp</span>?<span class="variable">domainUserId</span>=<span class="variable">CdekVYuGXQJi</span>_00&amp;<span class="variable">domain</span>=<span class="variable">micen</span>&amp;<span class="variable">ca</span></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket14"</span>, <span class="string">"buf16"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket15"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket14"</span>, <span class="string">"buf17"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket10"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket12"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket11"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket14"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket15"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket13"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"login----------------------"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket16"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket17"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line">/<span class="end-block">/GET </span><span class="end-block">/favicon.ico</span></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket16"</span>, <span class="string">"buf18"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">/<span class="end-block">/GET </span><span class="end-block">/webtm</span><span class="end-block">/contacts</span></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket17"</span>, <span class="string">"buf19"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">     <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(15,0);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">receive</span>_<span class="variable">option</span>(<span class="variable">EndMarker</span>, <span class="variable">StringTerminator</span> , <span class="string">"HTTP/1.1"</span>);</span><br><span class="line">	 <span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket16"</span>, <span class="string">"buf20"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">     </span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"1"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(15,0);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"2"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket17"</span>, <span class="string">"buf21"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"2"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line">/<span class="end-block">/GET </span><span class="end-block">/mt</span><span class="end-block">/webim</span><span class="end-block">/dist</span><span class="end-block">/css</span><span class="end-block">/webim.css</span>?<span class="variable">v</span>=1444877296783 <span class="variable">HTTP</span>/1<span class="variable">.</span>1\<span class="variable">r</span>\<span class="variable">n</span></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket1"</span>, <span class="string">"buf22"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(15,0);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"3"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket1"</span>, <span class="string">"buf23"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"3"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line">/<span class="end-block">/GET </span><span class="end-block">/mt</span><span class="end-block">/webim</span><span class="end-block">/dist</span><span class="end-block">/js</span><span class="end-block">/webim.js</span>?<span class="variable">v</span>=1444877296783</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket1"</span>, <span class="string">"buf24"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(15,0);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"4"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket1"</span>, <span class="string">"buf25"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"4"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket18"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=203.208.40.135:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket19"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket20"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=203.208.40.135:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket21"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket22"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line">/<span class="end-block">/GET </span><span class="end-block">/connect</span>?<span class="variable">callback</span>=<span class="variable">jQuery</span>21406809277604824309_1445939283967&amp;_=144593928</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket21"</span>, <span class="string">"buf27"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(15,0);</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">receive</span>_<span class="variable">option</span>(<span class="variable">EndMarker</span>, <span class="variable">StringTerminator</span> , <span class="string">":15"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"5"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket21"</span>, <span class="string">"buf28"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">    </span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"5"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line">/<span class="end-block">/GET </span><span class="end-block">/webtm</span><span class="end-block">/getauth</span>/?<span class="variable">callback</span>=<span class="variable">jQuery</span>21406809277604824309_1445939283967&amp;_=14</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket23"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket23"</span>, <span class="string">"buf29"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">/<span class="end-block">/GET </span><span class="end-block">/connect</span>?<span class="variable">callback</span>=<span class="variable">jQuery</span>21406809277604824309_1445939283970&amp;<span class="variable">s</span>=<span class="variable">fc</span>90<span class="variable">b</span>31<span class="variable">b</span>1</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket21"</span>, <span class="string">"buf30"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(60,0);</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">receive</span>_<span class="variable">option</span>(<span class="variable">EndMarker</span>, <span class="variable">StringTerminator</span> , <span class="string">"username"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"6"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">receive</span>_<span class="variable">option</span>(<span class="variable">EndMarker</span>, <span class="variable">StringTerminator</span> , <span class="string">"HTTP/1.1"</span>);</span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket23"</span>, <span class="string">"buf31"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"6"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket22"</span>, <span class="string">"buf32"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(15,0);</span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">receive</span>_<span class="variable">option</span>(<span class="variable">EndMarker</span>, <span class="variable">StringTerminator</span> , <span class="string">"jQuery"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"7"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket22"</span>, <span class="string">"buf33"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"7"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">receive</span>_<span class="variable">option</span>(<span class="variable">EndMarker</span>, <span class="variable">StringTerminator</span> , <span class="string">"LoginReq"</span>);</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(15,0);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"8"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket21"</span>, <span class="string">"buf34"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"8"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket21"</span>, <span class="string">"buf35"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">//	<span class="variable">lrs</span>_<span class="variable">save</span>_<span class="variable">param</span>_<span class="variable">ex</span>(<span class="string">"socket21"</span>,<span class="string">"received"</span>,<span class="variable">NULL</span>,200,400,<span class="variable">NULL</span>,<span class="string">"Param_Received"</span>);</span><br><span class="line">//	<span class="variable">lr</span>_<span class="variable">output</span>_<span class="variable">message</span>(<span class="variable">lr</span>_<span class="variable">eval</span>_<span class="variable">string</span>(<span class="string">"&lt;Param_Received&gt;"</span>));</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(15,0);</span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">receive</span>_<span class="variable">option</span>(<span class="variable">EndMarker</span>, <span class="variable">StringTerminator</span> , <span class="string">"plantData"</span>);</span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket21"</span>, <span class="string">"buf36"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/<span class="end-block">/   position </span>=(<span class="variable">char</span>*) <span class="variable">strstr</span>(<span class="variable">lr</span>_<span class="variable">eval</span>_<span class="variable">string</span>(<span class="string">"&lt;Param_Received&gt;"</span>),<span class="variable">lr</span>_<span class="variable">eval</span>_<span class="variable">string</span>(<span class="string">"LoginReq"</span>)); </span><br><span class="line">/<span class="end-block">/  position</span>2 =(<span class="variable">char</span>*) <span class="variable">strstr</span>(<span class="variable">lr</span>_<span class="variable">eval</span>_<span class="variable">string</span>(<span class="string">"&lt;Param_Received&gt;"</span>),<span class="variable">lr</span>_<span class="variable">eval</span>_<span class="variable">string</span>(<span class="string">"plantData"</span>)); </span><br><span class="line">/<span class="end-block">/  <span class="keyword">if</span></span>(<span class="variable">position</span>==<span class="variable">NULL</span>&amp;&amp;<span class="variable">position</span>2==<span class="variable">NULL</span>)</span><br><span class="line">/<span class="end-block">/lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"login----------------------"</span>, <span class="variable">LR</span>_<span class="variable">FAIL</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"login----------------------"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket16"</span>);</span><br><span class="line"><span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket17"</span>);</span><br><span class="line"><span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket18"</span>);</span><br><span class="line"><span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket19"</span>);</span><br><span class="line"><span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket20"</span>);</span><br><span class="line"><span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket21"</span>);</span><br><span class="line"><span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket22"</span>);</span><br><span class="line"><span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket23"</span>);</span><br><span class="line">    <span class="variable">return</span> 0;</span><br><span class="line">&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近又碰到坑爹的通讯项目，web端登录与客户端登录消息用的一套长连接机制。<br>脚本写的真是蛋疼、累死，不仅要用socket协议，还要模拟长连接接收消息，最后要看一堆无语的data.ws文件。<br>而且，两个部门协作起来真是无力吐槽了！<br>还好有<strong>lrs_set_recv_timeout</strong><br>]]>
    
    </summary>
    
      <category term="loadrunner" scheme="http://tonylit.me/tags/loadrunner/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[centos7.1下docker安装]]></title>
    <link href="http://tonylit.me/2015/12/02/centos7.1%E4%B8%8B%E5%AE%89%E8%A3%85docker/"/>
    <id>http://tonylit.me/2015/12/02/centos7.1下安装docker/</id>
    <published>2015-12-02T03:37:27.000Z</published>
    <updated>2015-12-02T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>之前已经<a href="http://tonylit.me/2015/11/24/docker/">介绍了docker</a>，今天来安装一下。<br>首先，准备一个 CentOS 的操作系统<br>Ubuntu 或其它 Linux 操作系统也能玩 Docker，这里就不介绍了。<br><a id="more"></a><br><strong>CentOS 具体要求如下：</strong><br>必须是 64 位操作系统<br>建议内核在 3.8 以上<br>低版本的请升级系统~</p>
<p>安装起来很简单：</p>
<h1 id="安装docker">安装docker</h1><p>1.由于条件限制，只能把rpm包下载下来：<a href="http://pan.baidu.com/s/1c0C0X0G，" target="_blank" rel="external">http://pan.baidu.com/s/1c0C0X0G，</a> 也可以直接：</p>
<blockquote>
<p>rpm -Uvh<br><a href="https://get.docker.com/rpm/1.7.1/centos-7/RPMS/x86_64/docker-engine-1.7.1-1.el7.centos.x86_64.rpm" target="_blank" rel="external">https://get.docker.com/rpm/1.7.1/centos-7/RPMS/x86_64/docker-engine-1.7.1-1.el7.centos.x86_64.rpm</a></p>
</blockquote>
<p>2.然后rpm安装一下就可以了：</p>
<blockquote>
<p>rpm -Uvh docker-engine-1.7.1-1.el7.centos.x86_64.rpm</p>
</blockquote>
<p>或者(最新1.10版本，革命性的版本)</p>
<h2 id="&gt;_yum_install_docker-engine">&gt; yum install docker-engine</h2><p><img src="/img/docker/docker-anzhuang2.PNG" alt="Alt text"></p>
<p>如果有如下报错：</p>
<blockquote>
<p>error: Failed dependencies:     libcgroup is needed by<br>docker-engine-1.7.1-1.el7.centos.x86_64<br>请安装libcgroup<br><img src="/img/docker/docker-anzhuang1.png" alt="Alt text"></p>
</blockquote>
<h1 id="验证安装：">验证安装：</h1><p>安装完成看一看有木有安装好：</p>
<blockquote>
<p>docker version</p>
</blockquote>
<h1 id="启动docker">启动docker</h1><blockquote>
<p>service docker start<br><img src="/img/docker/docker-begin.PNG" alt="Alt text"></p>
</blockquote>
<h1 id="加入开机启动">加入开机启动</h1><blockquote>
<p>chkconfig docker on</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前已经<a href="http://tonylit.me/2015/11/24/docker/">介绍了docker</a>，今天来安装一下。<br>首先，准备一个 CentOS 的操作系统<br>Ubuntu 或其它 Linux 操作系统也能玩 Docker，这里就不介绍了。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[atom编辑器爆爆爆]]></title>
    <link href="http://tonylit.me/2015/12/01/atom%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>http://tonylit.me/2015/12/01/atom编辑器/</id>
    <published>2015-12-01T03:37:27.000Z</published>
    <updated>2015-12-01T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>狂拽炫酷屌炸天的编辑器插件，<br>来点音乐、再配上机械键盘，啪啪啪！爆爆爆爆！!<br><img src="/img/atom/atom1.gif" alt="Alt text"><br><img src="/img/atom/atom2.gif" alt="Alt text"><br><a id="more"></a></p>
<h1 id="网页效果">网页效果</h1><p>demo：<a href="http://kushagragour.in/code-blast-codemirror/demo/index.html" target="_blank" rel="external">http://kushagragour.in/code-blast-codemirror/demo/index.html</a></p>
<p>安装起来很简单</p>
<h1 id="下载atom编辑器并安装">下载atom编辑器并安装</h1><p>网上很多，自行下载并安装</p>
<h1 id="下载插件">下载插件</h1><p>1.github上面<a href="https://github.com/tonylit/activate-power-mode，" target="_blank" rel="external">https://github.com/tonylit/activate-power-mode，</a><br>  先fork一下，下载下来<br><img src="/img/atom/gitatom.PNG" alt="Alt text"></p>
<h1 id="安装插件">安装插件</h1><p>2.把下载的插件放入C:\Users\pc.atom\packages 文件夹中<br>  打开cmd调到activate-power-mode-master这个文件里面apm install就可以了<br> 如果有如下报错：<br> <img src="/img/atom/error.PNG" alt="Alt text"><br> 请多执行几次apm install（我是执行了几十次，网络实在是不稳定）</p>
<h1 id="开启插件">开启插件</h1><p> 重新打开atom，按快捷键ctrl+alt+o，如果快捷键冲突，请按 ctrl + alt + r reload window 之后就可以按 ctrl + alt + o </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>狂拽炫酷屌炸天的编辑器插件，<br>来点音乐、再配上机械键盘，啪啪啪！爆爆爆爆！!<br><img src="/img/atom/atom1.gif" alt="Alt text"><br><img src="/img/atom/atom2.gif" alt="Alt text"><br>]]>
    
    </summary>
    
      <category term="atom" scheme="http://tonylit.me/tags/atom/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[抽奖性能测试]]></title>
    <link href="http://tonylit.me/2015/11/30/%E6%8A%BD%E5%A5%96%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <id>http://tonylit.me/2015/11/30/抽奖性能测试/</id>
    <published>2015-11-30T03:37:27.000Z</published>
    <updated>2015-11-13T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>公司成立20周年在网站上搞了个<strong>抽奖活动</strong>，应邀给项目组做一次压力测试。<br>之前也没有过类似业务的测试，无指标参考，在此记录下，下次类似测试可以参考参考。<br><a id="more"></a></p>
<h1 id="业务说明">业务说明</h1><ul>
<li>第一步：填写祝福语</li>
<li>第二步：抽奖</li>
</ul>
<h1 id="技术架构：">技术架构：</h1><p>所有的记录先提交至redis中，<br>数据由定时程序1分钟从redis同步至数据库。</p>
<h1 id="测试环境：">测试环境：</h1><p><img src="/img/redis.png" alt="Alt text"></p>
<h1 id="被测系统硬件">被测系统硬件</h1><p>应用服务器    Intel(R) Xeon(R) CPU E5-2650<br>Processor :  1×2<br>Memory：1.5G</p>
<h1 id="结果：">结果：</h1><p>发送祝福语TPS:222<br>抽奖TPS：192</p>
<h1 id="其他：">其他：</h1><p>抽奖需要考虑的点：</p>
<ul>
<li>cache和db端持久化问题<br>redis这边数据不能每次入库就清空，保证要在redis中有持久化。</li>
<li>数据量保证一致<br>有多少奖就抽多少，不能发现多抽的情况</li>
<li>单个奖项数量一致<br>一等奖只有一个，不会被几个人同时抽中</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>公司成立20周年在网站上搞了个<strong>抽奖活动</strong>，应邀给项目组做一次压力测试。<br>之前也没有过类似业务的测试，无指标参考，在此记录下，下次类似测试可以参考参考。<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Jprofiler安装]]></title>
    <link href="http://tonylit.me/2015/11/25/Jprofiler%E5%AE%89%E8%A3%85/"/>
    <id>http://tonylit.me/2015/11/25/Jprofiler安装/</id>
    <published>2015-11-25T03:37:27.000Z</published>
    <updated>2015-11-25T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>Jprofiler是一个全面的JAVA剖析工具，它有很好的GUI帮助我们定位性能瓶颈、抓住内容泄露等问题。<br>之前一直没机会用，最近在某新项目组压性能的时候用了一下。<br>灰常牛X，直接定位到sql层面的问题（耗时长），在问题定位上省了很多时间。<br>项目组用的mysql数据库，慢查询真的挺shi的，如果用的oracle，AWR,ADDM,SLA一下，啪啪啪完事~</p>
<a id="more"></a>
<p>Jprofiler监控这块其实挺简单的，主要是安装，尤其是要监控远程resin或者tomcat，装起来还是挺麻烦的，搞了我一个多小时…</p>
<h1 id="Jprofiler下载">Jprofiler下载</h1><p><a href="http://www.ej-technologies.com/download/jprofiler/files" target="_blank" rel="external">下载最新版本的Jprofiler</a>，<a href="http://pan.baidu.com/s/1hqe2rv2" target="_blank" rel="external">我的网盘下载</a>，我用的9.0，windows和linux版本都需要下载。</p>
<h1 id="Jprofiler安装">Jprofiler安装</h1><p>windows下的安装不用说了，.exe文件一直next<br>这里说下linux下的，我用的centos5.8</p>
<h2 id="步骤一、服务器端安装Jprofiler">步骤一、服务器端安装Jprofiler</h2><p>将下载的Jprofiler放入服务器上，解压缩，比如我的目录：</p>
<blockquote>
<p>/home/admin/jprofiler9</p>
</blockquote>
<h2 id="步骤二、增加全部变量">步骤二、增加全部变量</h2><p>在/etc/profile中增加：</p>
<blockquote>
<p>export JPROFILE_HOME=/home/admin/jprofiler9 export<br>LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/admin/jprofiler9/bin/linux-x86</p>
</blockquote>
<p>添加完记得source一下：</p>
<blockquote>
<p>source /etc/profile</p>
</blockquote>
<h2 id="步骤三、在中间件中导入Jprofiler的jar包">步骤三、在中间件中导入Jprofiler的jar包</h2><p>我用的是resin，以此为例：<br>在resin.conf的<class-loader>标签中增加：</class-loader></p>
<blockquote>
<pre><code><span class="tag">&lt;<span class="title">tree-loader</span> <span class="attribute">path</span>=<span class="value">"/home/admin/jprofiler9/lib"</span>/&gt;</span>
 <span class="tag">&lt;<span class="title">tree-loader</span> <span class="attribute">path</span>=<span class="value">"/home/admin/jprofiler9/bin"</span>/&gt;</span>
</code></pre></blockquote>
<h2 id="步骤四、在启动脚本中增加jprofiler的启动参数">步骤四、在启动脚本中增加jprofiler的启动参数</h2><p>以resin为例，在resin的启动脚本中加入启动参数：</p>
<blockquote>
<p>-agentpath:/home/admin/jprofiler9/bin/linux-x64/libjprofilerti.so=port=8849,nowait<br>resin3.1的在配置文件中加入<br> <jvm-arg>-agentpath:/home/admin/jprofiler9/bin/linux-x64/libjprofilerti.so=port=8849,nowait</jvm-arg></p>
</blockquote>
<p>端口可以自己制定，注意后面连接的时候需要用到此端口</p>
<p>##步骤五、启动本地jprofiler客户端，配置信息</p>
<ul>
<li><p>启动客户端<br><img src="/img/jprofiler/jprofiler_1.PNG" alt="Alt text"></p>
</li>
<li><p>选择中间件<br><img src="/img/jprofiler/jprofiler_2.PNG" alt="Alt text"></p>
</li>
<li><p>选择远程监控的系统<br><img src="/img/jprofiler/jprofiler_3.PNG" alt="Alt text"></p>
</li>
<li><p>选择JDK版本，主要看下服务器上的jdk版本，是不是64位的<br><img src="/img/jprofiler/jprofiler_4.PNG" alt="Alt text"></p>
</li>
<li><p>选择启动方式，默认就行了<br><img src="/img/jprofiler/jprofiler_5.PNG" alt="Alt text"></p>
</li>
<li><p>填写服务器ip<br><img src="/img/jprofiler/jprofier_6.PNG" alt="Alt text"></p>
</li>
<li><p>填写服务器的哪个目录安装了jprofiler<br><img src="/img/jprofiler/jprofiler_7.PNG" alt="Alt text"></p>
</li>
<li><p>选择resin的启动脚本，我是将服务器上resin的启动脚本拿到本地<br><img src="/img/jprofiler/jprofiler_8.PNG" alt="Alt text"></p>
</li>
<li><p>端口号和上面设置的保持一样<br><img src="/img/jprofiler/jprofiler_9.PNG" alt="Alt text"></p>
</li>
</ul>
<p>后面一直next，就可以了</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Jprofiler是一个全面的JAVA剖析工具，它有很好的GUI帮助我们定位性能瓶颈、抓住内容泄露等问题。<br>之前一直没机会用，最近在某新项目组压性能的时候用了一下。<br>灰常牛X，直接定位到sql层面的问题（耗时长），在问题定位上省了很多时间。<br>项目组用的mysql数据库，慢查询真的挺shi的，如果用的oracle，AWR,ADDM,SLA一下，啪啪啪完事~</p>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker]]></title>
    <link href="http://tonylit.me/2015/11/24/docker/"/>
    <id>http://tonylit.me/2015/11/24/docker/</id>
    <published>2015-11-24T03:37:27.000Z</published>
    <updated>2015-11-24T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>如果你现在不知道<strong>docker</strong>，那你在这个圈子里就low了。<br>docker作为一个轻量级的虚拟化解决方案，完爆其他的虚拟化技术（kvm、vmware…），各大互联网公司，阿里、百度、qiniu等等，只要是做云的，都开始转向docker，包括VMware也宣布与docker合作。<br>不得不说民间大神还是吊啊，脑子和技术杠杠的，生下来这个一条大鲸鱼，这即将是一场革命，开发和运维是不是都在哈哈哈啊！！<br><img src="/img/docker/docker-ico.png" alt="Alt text"><br><a id="more"></a></p>
<h1 id="史上最全的docker资料集">史上最全的docker资料集</h1><p>不错的整理，<a href="http://special.csdncms.csdn.net/BeDocker/" target="_blank" rel="external">docker的很多资料都在这</a></p>
<h1 id="docker安装请移步：">docker安装请移步：</h1><p>  <a href="http://tonylit.me/2015/12/02/centos7.1%E4%B8%8B%E5%AE%89%E8%A3%85docker/">centos7.1下docker安装</a></p>
<h1 id="什么是docker？">什么是docker？</h1><p>Docker 是一个开源项目，诞生于 2013 年初，最初是 dotCloud 公司内部的一个业余项目。它基于 Google 公司推出的 Go 语言实现。<br> Docker 的基础是 Linux 容器（<a href="http://baike.baidu.com/link?url=1MqaZ9yQUbI7hbcp3v4oZlKyKVVfn01E1aDJ4SmXnTCmybuaWyMzpr4sr6wPNIBYKj5NqMq3Y3MhC7Anptdnwa" target="_blank" rel="external">LXC</a>）等技术，在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。</p>
<h1 id="为啥都在使用docker？">为啥都在使用docker？</h1><p><strong>Dock可以用来：</strong></p>
<ul>
<li>自动化打包和部署任何应用</li>
<li>创建一个轻量级私有PaaS云</li>
<li>搭建开发测试环境</li>
<li>部署可扩展的Web应用</li>
</ul>
<table>
<thead>
<tr>
<th>特性</th>
<th style="text-align:center">docker</th>
<th style="text-align:right">虚拟机</th>
</tr>
</thead>
<tbody>
<tr>
<td>启动</td>
<td style="text-align:center">秒级</td>
<td style="text-align:right">分钟级</td>
</tr>
<tr>
<td>硬盘使用</td>
<td style="text-align:center">一般为 MB</td>
<td style="text-align:right">一般为 GB</td>
</tr>
<tr>
<td>性能</td>
<td style="text-align:center">接近原生</td>
<td style="text-align:right">弱于</td>
</tr>
<tr>
<td>系统支持量</td>
<td style="text-align:center">单机支持上千个容器</td>
<td style="text-align:right">一般几十个</td>
</tr>
</tbody>
</table>
<h1 id="docker与传统虚拟机的比较">docker与传统虚拟机的比较</h1><p><strong>传统vm</strong><br><img src="/img/docker/docker-jiagou.png" alt="Alt text">  </p>
<p><strong>docker</strong><br><img src="/img/docker/vm-jiagou.png" alt="Alt text"></p>
<p>比较两图的差异，虚拟机的Guest OS层和Hypervisor层在docker中被Docker Engine层所替代。虚拟机的Guest OS就是虚拟机安装的操作系统，它是一个完整操作系统内核；虚拟机的Hypervisor层可以简单理解为一个硬件虚拟化平台，它在Host OS是以内核态的驱动存在的。<br>虚拟机实现资源隔离的方法是利用独立的OS，并利用Hypervisor虚拟化CPU、内存、IO设备等实现的。例如，为了虚拟CPU，Hypervisor会为每个虚拟的CPU创建一个数据结构，模拟CPU的全部寄存器的值，在适当的时候跟踪并修改这些值。需要指出的是在大多数情况下，虚拟机软件代码是直接跑在硬件上的，而不需要Hypervisor介入。只有在一些权限高的请求下，Guest OS需要运行内核态修改CPU的寄存器数据，Hypervisor会介入，修改并维护虚拟的CPU状态。<br>docker直接利用宿主机的内核，而不需要Guest OS。因此，当新建一个容器时，docker不需要和虚拟机一样重新加载一个操作系统内核。引导、加载操作系统内核是一个比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载Guest OS，这个新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统，则省略了这个过程，因此新建一个docker容器只需要几秒钟，因此，docker对比虚拟机在资源消耗上也占有比较大的优势。事实上，在一台物理机上我们可以很容易建立成百上千的容器，而只能建立几个虚拟机。</p>
<h2 id="计算能力上的比较（IBM发表的论文）">计算能力上的比较（IBM发表的论文）</h2><p>根据IBM发表的论文给出的数据进行分析。以下的数据均是在IBM x3650 M4服务器测得，其主要的硬件参数是：<br>（1）2颗英特尔xeon E5-2655 处理器，主频2.4-3.0 GHz。每颗处理器有8个核，因此总共有16个核。<br>（2）256 GB RAM.<br>在测试中是通过运算Linpack程序来获得计算能力数据的。结果如下图所示：<br><img src="/img/docker/yunsuan.png" alt="Alt text"><br>从左往右分别是物理机、docker和虚拟机的计算能力数据。<br>差距还是很明显的，docker相对于物理机其计算能力几乎没有损耗，而虚拟机对比物理机则有着非常明显的损耗。虚拟机的计算能力损耗在50%左右。<br>为什么会有这么大的性能损耗呢？一方面是因为虚拟机增加了一层虚拟硬件层，运行在虚拟机上的应用程序在进行数值计算时是运行在Hypervisor虚拟的CPU上的；另外一方面是由于计算程序本身的特性导致的差异。虚拟机虚拟的cpu架构不同于实际cpu架构，数值计算程序一般针对特定的cpu架构有一定的优化措施，虚拟化使这些措施作废，甚至起到反效果。</p>
<h1 id="docker的劣势">docker的劣势</h1><p>docker的劣势</p>
<p>docker也不是完美的系统。相对于虚拟机，docker还存在着以下几个缺点：<br>1.资源隔离方面不如虚拟机，docker是利用cgroup实现资源限制的，只能限制资源消耗的最大值，而不能隔绝其他程序占用自己的资源。<br>2.安全性问题。docker目前并不能分辨具体执行指令的用户，只要一个用户拥有执行docker的权限，那么他就可以对docker的容器进行所有操作，不管该容器是否是由该用户创建。比如A和B都拥有执行docker的权限，由于docker的server端并不会具体判断docker cline是由哪个用户发起的，A可以删除B创建的容器，存在一定的安全风险。<br>3.docker目前还在版本的快速更新中，细节功能调整比较大。一些核心模块依赖于高版本内核，存在版本兼容问题</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>如果你现在不知道<strong>docker</strong>，那你在这个圈子里就low了。<br>docker作为一个轻量级的虚拟化解决方案，完爆其他的虚拟化技术（kvm、vmware…），各大互联网公司，阿里、百度、qiniu等等，只要是做云的，都开始转向docker，包括VMware也宣布与docker合作。<br>不得不说民间大神还是吊啊，脑子和技术杠杠的，生下来这个一条大鲸鱼，这即将是一场革命，开发和运维是不是都在哈哈哈啊！！<br><img src="/img/docker/docker-ico.png" alt="Alt text"><br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[kafka与countdownlatch]]></title>
    <link href="http://tonylit.me/2015/11/24/kafka%E4%B8%8Ecountdownlatch/"/>
    <id>http://tonylit.me/2015/11/24/kafka与countdownlatch/</id>
    <published>2015-11-24T03:37:27.000Z</published>
    <updated>2015-11-24T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>之前测试kafka消息发送的QPS，刚开始用loadrunner写java的，模拟kafka produce的send，发现loadrunner对这种高精确的请求有很大误差（kafka 的消息精确到毫秒，最小的测试40ms），可能loadrunner模拟请求自身需要耗费时间，遂改为直接通过编写代码多线程方式发送请求。<br><a id="more"></a><br>哎，很惭愧，对java不是很精通~<br>开始直接无脑new Thread，for循环依次启动10个线程执行，如下：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class KafkaProduce &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ProducerConfig config;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">// 设置配置属性</span></span><br><span class="line">    Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">    props.put(<span class="string">"metadata.broker.list"</span>, <span class="string">"192.168.28.191:9092,192.168.28.192:9092"</span>);</span><br><span class="line">    props.put(<span class="string">"serializer.class"</span>, <span class="string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line">    <span class="comment">// key.serializer.class默认为serializer.class</span></span><br><span class="line">    props.put(<span class="string">"key.serializer.class"</span>, <span class="string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line">    <span class="comment">// 值为0,1,-1,可以参考</span></span><br><span class="line">    <span class="comment">// http://kafka.apache.org/08/configuration.html</span></span><br><span class="line">    props.put(<span class="string">"request.required.acks"</span>, <span class="string">"0"</span>);</span><br><span class="line">    config = <span class="keyword">new</span> ProducerConfig(props);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">String</span> topic = <span class="string">"kafka_test_1"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] data = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                <span class="comment">// 创建producer</span></span><br><span class="line">                Producer&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; producer = <span class="keyword">new</span> Producer&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;(config);</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line">                    <span class="keyword">long</span> all = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">long</span> begin = System.nanoTime();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                        producer.send(<span class="keyword">new</span> KeyedMessage&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;(topic, <span class="keyword">new</span> <span class="keyword">String</span>(data)));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">                    all += end - begin;</span><br><span class="line">                    System.out.<span class="built_in">println</span>(TimeUnit.NANOSECONDS.toMillis(all));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;.start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"kafka failed"</span>);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1106</span></span><br><span class="line"><span class="number">1637</span></span><br><span class="line"><span class="number">1676</span></span><br><span class="line"><span class="number">1682</span></span><br><span class="line"><span class="number">1701</span></span><br><span class="line"><span class="number">1751</span></span><br><span class="line"><span class="number">1760</span></span><br><span class="line"><span class="number">1777</span></span><br><span class="line"><span class="number">1859</span></span><br><span class="line"><span class="number">1913</span></span><br><span class="line"><span class="number">1938</span></span><br></pre></td></tr></table></figure>
<p>今天无聊逛了逛贴吧，发现竟然有countdownlatch这么个东东，可以让10个线程一块跑，并发执行的话，这个应该更合理吧，遂改了一下代码：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> class KafaProduce2 &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ProducerConfig config;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">// 设置配置属性</span></span><br><span class="line">    Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">    props.put(<span class="string">"metadata.broker.list"</span>, <span class="string">"192.168.28.191:9092,192.168.28.192:9092"</span>);</span><br><span class="line">    props.put(<span class="string">"serializer.class"</span>, <span class="string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line">    <span class="comment">// key.serializer.class默认为serializer.class</span></span><br><span class="line">    props.put(<span class="string">"key.serializer.class"</span>, <span class="string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line">    <span class="comment">// 值为0,1,-1,可以参考</span></span><br><span class="line">    <span class="comment">// http://kafka.apache.org/08/configuration.html</span></span><br><span class="line">    props.put(<span class="string">"request.required.acks"</span>, <span class="string">"0"</span>);</span><br><span class="line">    config = <span class="keyword">new</span> ProducerConfig(props);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">String</span> topic = <span class="string">"kafka_test_1"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] data = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 倒数计数器</span></span><br><span class="line">    <span class="keyword">final</span> CountDownLatch begin = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 倒数计数器</span></span><br><span class="line">    <span class="keyword">final</span> CountDownLatch end = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建producer</span></span><br><span class="line">            Producer&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; producer = <span class="keyword">new</span> Producer&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;(config);</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    begin.await();</span><br><span class="line">                    <span class="keyword">long</span> all = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">long</span> begin = System.nanoTime();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                        producer.send(<span class="keyword">new</span> KeyedMessage&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;(topic, <span class="keyword">new</span> <span class="keyword">String</span>(data)));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">                    all = end - begin;</span><br><span class="line">                    System.out.<span class="built_in">println</span>(TimeUnit.NANOSECONDS.toMillis(all));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">finally</span> &#123;</span><br><span class="line">                    end.countDown();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    begin.countDown();</span><br><span class="line"></span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"开始。。。。"</span>);</span><br><span class="line"></span><br><span class="line">    end.await();</span><br><span class="line"></span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"结束。。。。"</span>);</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">开始。。。。</span><br><span class="line"><span class="number">1406</span></span><br><span class="line"><span class="number">1618</span></span><br><span class="line"><span class="number">1643</span></span><br><span class="line"><span class="number">1708</span></span><br><span class="line"><span class="number">1714</span></span><br><span class="line"><span class="number">1768</span></span><br><span class="line"><span class="number">1783</span></span><br><span class="line"><span class="number">1837</span></span><br><span class="line"><span class="number">1840</span></span><br><span class="line"><span class="number">1858</span></span><br><span class="line">结束。。。。</span><br></pre></td></tr></table></figure>
<p>然后，加了个线程池，如下：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class KafkaProduce3 &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ProducerConfig config;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">// 设置配置属性</span></span><br><span class="line">    Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">    props.put(<span class="string">"metadata.broker.list"</span>, <span class="string">"192.168.28.191:9092,192.168.28.192:9092"</span>);</span><br><span class="line">    props.put(<span class="string">"serializer.class"</span>, <span class="string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line">    <span class="comment">// key.serializer.class默认为serializer.class</span></span><br><span class="line">    props.put(<span class="string">"key.serializer.class"</span>, <span class="string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line">    <span class="comment">// 值为0,1,-1,可以参考</span></span><br><span class="line">    <span class="comment">// http://kafka.apache.org/08/configuration.html</span></span><br><span class="line">    props.put(<span class="string">"request.required.acks"</span>, <span class="string">"0"</span>);</span><br><span class="line">    config = <span class="keyword">new</span> ProducerConfig(props);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">String</span> topic = <span class="string">"kafka_test_1"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] data = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 倒数计数器</span></span><br><span class="line">    <span class="keyword">final</span> CountDownLatch begin = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 倒数计数器</span></span><br><span class="line">    <span class="keyword">final</span> CountDownLatch end = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    ExecutorService execu = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建producer</span></span><br><span class="line">            Producer&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; producer = <span class="keyword">new</span> Producer&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;(config);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    begin.await();</span><br><span class="line">                    <span class="keyword">long</span> all = <span class="number">0</span>;</span><br><span class="line">                    KeyedMessage k = <span class="keyword">new</span> KeyedMessage&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;(topic, <span class="keyword">new</span> <span class="keyword">String</span>(data));</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                        <span class="keyword">long</span> begin = System.nanoTime();</span><br><span class="line">                        producer.send(k);</span><br><span class="line">                        <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">                        all += end - begin;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.<span class="built_in">println</span>(TimeUnit.NANOSECONDS.toMillis(all));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">finally</span> &#123;</span><br><span class="line">                    end.countDown();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        execu.submit(r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    begin.countDown();</span><br><span class="line"></span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"开始。。。。"</span>);</span><br><span class="line"></span><br><span class="line">    end.await();</span><br><span class="line"></span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"结束。。。。"</span>);</span><br><span class="line">    execu.shutdown();</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">开始。。。。</span><br><span class="line"><span class="number">1296</span></span><br><span class="line"><span class="number">1463</span></span><br><span class="line"><span class="number">1464</span></span><br><span class="line"><span class="number">1578</span></span><br><span class="line"><span class="number">1603</span></span><br><span class="line"><span class="number">1630</span></span><br><span class="line"><span class="number">1755</span></span><br><span class="line"><span class="number">1771</span></span><br><span class="line"><span class="number">1826</span></span><br><span class="line"><span class="number">1854</span></span><br><span class="line">结束。。。。</span><br></pre></td></tr></table></figure>
<p>后面2个结果好一些，做并发测试的时候也更合理！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前测试kafka消息发送的QPS，刚开始用loadrunner写java的，模拟kafka produce的send，发现loadrunner对这种高精确的请求有很大误差（kafka 的消息精确到毫秒，最小的测试40ms），可能loadrunner模拟请求自身需要耗费时间，遂改为直接通过编写代码多线程方式发送请求。<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
      <category term="kafka" scheme="http://tonylit.me/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[天选之子-lebron james]]></title>
    <link href="http://tonylit.me/2015/11/22/%E5%A4%A9%E9%80%89%E4%B9%8B%E5%AD%90-%E8%A9%B9%E5%A7%86%E6%96%AF/"/>
    <id>http://tonylit.me/2015/11/22/天选之子-詹姆斯/</id>
    <published>2015-11-22T03:37:27.000Z</published>
    <updated>2015-11-22T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>什么时候开始喜欢詹姆斯，<br>应该是09年东决G2绝杀魔术，<br>1s绝杀的时候，真的是把我看哭了，一个人带队实在是太不容易！<br>现在，23号又回到了家乡，<br>剑指总冠军，我们拭目以待！！</p>
<p><img src="/img/james/james.jpg" alt="Alt text"><br><img src="/img/levron-james.jpg" alt="Alt text"></p>
<a id="more"></a>
<hr>
<h1 id="荣誉榜-What_is_the_MVP_means？">荣誉榜-What is the MVP means？</h1><p><img src="/img/king.jpg" alt="Alt text"></p>
<h1 id="激情夺冠之路">激情夺冠之路</h1><div class="owl-youku"><br><div class="owl-media owl-video owl-youku"><iframe src="http://player.youku.com/embed/XNTAzODA2ODYw" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen></iframe></div><br></div>

<h1 id="2013总冠军">2013总冠军</h1><div class="owl-youku"><br><div class="owl-media owl-video owl-youku"><iframe src="http://player.youku.com/embed/XNTg4NjMyNjY4" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen></iframe></div><br></div>

<h1 id="07东决G5_封神一站">07东决G5 封神一站</h1><div class="owl-youku"><br><div class="owl-media owl-video owl-youku"><iframe src="http://player.youku.com/embed/XNTA0MzQ1Mjk2" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen></iframe></div><br></div>]]></content>
    <summary type="html">
    <![CDATA[<p>什么时候开始喜欢詹姆斯，<br>应该是09年东决G2绝杀魔术，<br>1s绝杀的时候，真的是把我看哭了，一个人带队实在是太不容易！<br>现在，23号又回到了家乡，<br>剑指总冠军，我们拭目以待！！</p>
<p><img src="/img/james/james.jpg" alt="Alt text"><br><img src="/img/levron-james.jpg" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="lebron james" scheme="http://tonylit.me/tags/lebron-james/"/>
    
      <category term="life" scheme="http://tonylit.me/tags/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[kafka入门]]></title>
    <link href="http://tonylit.me/2015/11/19/kafka%E5%85%A5%E9%97%A8/"/>
    <id>http://tonylit.me/2015/11/19/kafka入门/</id>
    <published>2015-11-19T03:37:27.000Z</published>
    <updated>2015-11-19T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>公司的一些项目用的<a href="http://www.cnblogs.com/kgdxpr/p/3381974.html" target="_blank" rel="external">ActivemMQ</a>，最近有个项目开始尝试使用Kafka，有幸帮忙测试了kafka-Producer和Consumer消息吞吐相关的性能，包括broker切换消息的丢失率。在此之前，我对kafka完全不了解。<br>kafka 作为分布式的消息系统，性能大大超过传统的ActiveMQ，市场前景很广，虽然目前还有一些不足的地方，但以后很可能会是分布式消息系统的主流，有必要学习一下！<br><a id="more"></a></p>
<h1 id="介绍">介绍</h1><p>kafka是Linkedin于2010年12月份开源的消息系统，它主要用于处理活跃的流式数据。活跃的流式数据在web网站应用中非常常见，这些数据包括网站的pv、用户访问了什么内容，搜索了什么内容等。 这些数据通常以日志的形式记录下来，然后每隔一段时间进行一次统计处理。<br>传统的日志分析系统提供了一种离线处理日志信息的可扩展方案，但若要进行实时处理，通常会有较大延迟。而现有的消息（队列）系统能够很好的处理实时或者近似实时的应用，但未处理的数据通常不会写到磁盘上，这对于Hadoop之类（一小时或者一天只处理一部分数据）的离线应用而言，可能存在问题。Kafka正是为了解决以上问题而设计的，它能够很好地离线和在线应用。</p>
<h1 id="与其他常用Message_Queue对比">与其他常用Message Queue对比</h1><ul>
<li><strong>RabbitMQ</strong><br>RabbitMQ是使用Erlang编写的一个开源的消息队列，本身支持很多的协议：AMQP，XMPP, SMTP, STOMP，也正因如此，它非常重量级，更适合于企业级的开发。同时实现了Broker构架，这意味着消息在发送给客户端时先在中心队列排队。对路由，负载均衡或者数据持久化都有很好的支持。</li>
<li><strong>Redis</strong><br>Redis是一个基于Key-Value对的NoSQL数据库，开发维护很活跃。虽然它是一个Key-Value数据库存储系统，但它本身支持MQ功能，所以完全可以当做一个轻量级的队列服务来使用。对于RabbitMQ和Redis的入队和出队操作，各执行100万次，每10万次记录一次执行时间。测试数据分为128Bytes、512Bytes、1K和10K四个不同大小的数据。实验表明：入队时，当数据比较小时Redis的性能要高于RabbitMQ，而如果数据大小超过了10K，Redis则慢的无法忍受；出队时，无论数据大小，Redis都表现出非常好的性能，而RabbitMQ的出队性能则远低于Redis。</li>
<li><strong>ZeroMQ</strong><br>ZeroMQ号称最快的消息队列系统，尤其针对大吞吐量的需求场景。ZMQ能够实现RabbitMQ不擅长的高级/复杂的队列，但是开发人员需要自己组合多种技术框架，技术上的复杂度是对这MQ能够应用成功的挑战。ZeroMQ具有一个独特的非中间件的模式，你不需要安装和运行一个消息服务器或中间件，因为你的应用程序将扮演了这个服务角色。你只需要简单的引用ZeroMQ程序库，可以使用NuGet安装，然后你就可以愉快的在应用程序之间发送消息了。但是ZeroMQ仅提供非持久性的队列，也就是说如果宕机，数据将会丢失。其中，Twitter的Storm 0.9.0以前的版本中默认使用ZeroMQ作为数据流的传输（Storm从0.9版本开始同时支持ZeroMQ和Netty作为传输模块）。</li>
<li><strong>ActiveMQ</strong><br>ActiveMQ是Apache下的一个子项目。 类似于ZeroMQ，它能够以代理人和点对点的技术实现队列。同时类似于RabbitMQ，它少量代码就可以高效地实现高级应用场景。<br>-<strong>Kafka/Jafka</strong><br>Kafka是Apache下的一个子项目，是一个高性能跨语言分布式发布/订阅消息队列系统，而Jafka是在Kafka之上孵化而来的，即Kafka的一个升级版。具有以下特性：快速持久化，可以在O(1)的系统开销下进行消息持久化；高吞吐，在一台普通的服务器上既可以达到10W/s的吞吐速率；完全的分布式系统，Broker、Producer、Consumer都原生自动支持分布式，自动实现复杂均衡；支持Hadoop数据并行加载，对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka通过Hadoop的并行加载机制来统一了在线和离线的消息处理。Apache Kafka相对于ActiveMQ是一个非常轻量级的消息系统，除了性能非常好之外，还是一个工作良好的分布式系统。<h2 id="术语">术语</h2>首先让我们看几个基本的消息系统术语：</li>
<li><strong>Broker</strong><br>Kafka集群包含一个或多个服务器，这种服务器被称为broker</li>
<li><strong>Topic</strong><br>每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic。（物理上不同Topic的消息分开存储，逻辑上一个Topic的消息虽然保存于一个或多个broker上但用户只需指定消息的Topic即可生产或消费数据而不必关心数据存于何处）</li>
<li><strong>Partition</strong><br>Parition是物理上的概念，每个Topic包含一个或多个Partition.</li>
<li><strong>Producer</strong><br>负责发布消息到Kafka broker</li>
<li><strong>Consumer</strong><br>消息消费者，向Kafka broker读取消息的客户端。</li>
<li><strong>Consumer Group</strong><br>每个Consumer属于一个特定的Consumer Group（可为每个Consumer指定group name，若不指定group name则属于默认的group）。<h2 id="拓扑结构">拓扑结构</h2><img src="/img/kafkatuopu.jpg" alt="Alt text"><br>如上图所示，一个典型的Kafka集群中包含若干Producer（可以是web前端产生的Page View，或者是服务器日志，系统CPU、Memory等），若干broker（Kafka支持水平扩展，一般broker数量越多，集群吞吐率越高），若干Consumer Group，以及一个Zookeeper集群。Kafka通过Zookeeper管理集群配置，选举leader，以及在Consumer Group发生变化时进行rebalance。Producer使用push模式将消息发布到broker，Consumer使用pull模式从broker订阅并消费消息。<br>需要提到的一点：<strong>客户端和服务端通过TCP协议通信</strong>。Kafka提供了Java客户端，并且对多种语言都提供了支持。<h2 id="Topics_和Logs">Topics 和Logs</h2>先来看一下Kafka提供的一个抽象概念:topic.<br>一个topic是对一组消息的归纳。Topic在逻辑上可以被认为是一个queue，每条消费都必须指定它的topic，可以简单理解为必须指明把这条消息放进哪个queue里。对每个topic，Kafka 对它的日志进行了分区，如下图所示：<br><img src="/img/topic.png" alt="Alt text"><br>每个分区都由一系列有序的、不可变的消息组成，这些消息被连续的追加到分区中。分区中的每个消息都有一个连续的序列号叫做offset,用来在分区中唯一的标识这个消息。<br>在一个可配置的时间段内，Kafka集群保留所有发布的消息，不管这些消息有没有被消费。比如，如果消息的保存策略被设置为2天，那么在一个消息被发布的两天时间内，它都是可以被消费的。之后它将被丢弃以释放空间。Kafka的性能是和数据量无关的常量级的，所以保留太多的数据并不是问题。</li>
</ul>
<p>实际上每个consumer唯一需要维护的数据是消息在日志中的位置，也就是offset.这个offset有consumer来维护：一般情况下随着consumer不断的读取消息，这offset的值不断增加，但其实consumer可以以任意的顺序读取消息，比如它可以将offset设置成为一个旧的值来重读之前的消息。</p>
<p>以上特点的结合，使Kafka consumers非常的轻量级：它们可以在不对集群和其他consumer造成影响的情况下读取消息。你可以使用命令行来”tail”消息而不会对其他正在消费消息的consumer造成影响。</p>
<p>将日志分区可以达到以下目的：首先这使得每个日志的数量不会太大，可以在单个服务上保存。另外每个分区可以单独发布和消费，为并发操作topic提供了一种可能。</p>
<h2 id="分布式">分布式</h2><p>每个分区在Kafka集群的若干服务中都有副本，这样这些持有副本的服务可以共同处理数据和请求，副本数量是可以配置的。副本使Kafka具备了容错能力。<br>每个分区都由一个服务器作为“leader”，零或若干服务器作为“followers”,leader负责处理消息的读和写，followers则去复制leader.如果leader down了，followers中的一台则会自动成为leader。集群中的每个服务都会同时扮演两个角色：作为它所持有的一部分分区的leader，同时作为其他分区的followers，这样集群就会据有较好的负载均衡。</p>
<h2 id="Producers">Producers</h2><p>Producer将消息发布到它指定的topic中,并负责决定发布到哪个分区。通常简单的由负载均衡机制随机选择分区，但也可以通过特定的分区函数选择分区。使用的更多的是第二种,我们也是使用的这个。</p>
<h2 id="Consumers">Consumers</h2><p>发布消息通常有两种模式：队列模式（queuing）和发布-订阅模式(publish-subscribe)。队列模式中，consumers可以同时从服务端读取消息，每个消息只被其中一个consumer读到；发布-订阅模式中消息被广播到所有的consumer中。Consumers可以加入一个consumer 组，共同竞争一个topic，topic中的消息将被分发到组中的一个成员中。同一组中的consumer可以在不同的程序中，也可以在不同的机器上。如果所有的consumer都在一个组中，这就成为了传统的队列模式，在各consumer中实现负载均衡。如果所有的consumer都不在不同的组中，这就成为了发布-订阅模式，所有的消息都被分发到所有的consumer中。更常见的是，每个topic都有若干数量的consumer组，每个组都是一个逻辑上的“订阅者”，为了容错和更好的稳定性，每个组由若干consumer组成。这其实就是一个发布-订阅模式，只不过订阅者是个组而不是单个consumer。<br><img src="/img/consumers.png" alt="Alt text"><br>由两个机器组成的集群拥有4个分区 (P0-P3) 2个consumer组. A组有两个consumerB组有4个</p>
<h2 id="消息的有序性">消息的有序性</h2><p><strong>相比传统的消息系统，Kafka可以很好的保证有序性。</strong><br>传统的队列在服务器上保存有序的消息，如果多个consumers同时从这个服务器消费消息，服务器就会以消息存储的顺序向consumer分发消息。虽然服务器按顺序发布消息，但是消息是被异步的分发到各consumer上，所以当消息到达时可能已经失去了原来的顺序，这意味着并发消费将导致顺序错乱。为了避免故障，这样的消息系统通常使用“专用consumer”的概念，其实就是只允许一个消费者消费消息，当然这就意味着失去了并发性。</p>
<p>在这方面Kafka做的更好，通过分区的概念，Kafka可以在多个consumer组并发的情况下提供较好的有序性和负载均衡。将每个分区分只分发给一个consumer组，这样一个分区就只被这个组的一个consumer消费，就可以顺序的消费这个分区的消息。因为有多个分区，依然可以在多个consumer组之间进行负载均衡。注意consumer组的数量不能多于分区的数量，也就是有多少分区就允许多少并发消费。</p>
<p>Kafka只能保证一个分区之内消息的有序性，在不同的分区之间是不可以的，这已经可以满足大部分应用的需求。如果需要topic中所有消息的有序性，那就只能让这个topic只有一个分区，当然也就只有一个consumer组消费它。</p>
<hr>
<h1 id="环境搭建">环境搭建</h1><h2 id="下载kafka">下载kafka</h2><p><a href="http://kafka.apache.org/downloads.html" target="_blank" rel="external">下载最新版本的kafka</a>，我用的kafka_2.9.2-0.8.1.1</p>
<blockquote>
<p>我是放在/opt 目录下的<br>tar -xvf kafka_2.9.2-0.8.1.1.tgz</p>
</blockquote>
<h2 id="启动服务">启动服务</h2><h3 id="先启动zookeeper">先启动zookeeper</h3><p>Kafka用到了Zookeeper，所有首先启动Zookper，下面简单的启用一个单实例的Zookkeeper服务。可以在命令的结尾加个&amp;符号，这样就可以启动后离开控制台。</p>
<blockquote>
<p>cd kafka_2.9.2-0.8.1.1/bin/<br>bash zookeeper-server-start.sh /opt/kafka_2.9.2-0.8.1.1/config/zookeeper.properties &amp;</p>
</blockquote>
<p>这里可能会报错：<br>Unrecognized VM option ‘+UseCompressedOops’<br>Could not create the Java virtual machine.</p>
<blockquote>
<p>解决方法：<br>查看 bin/kafka-run-class.sh<br>找到<br>if [ -z “$KAFKA_JVM_PERFORMANCE_OPTS” ]; then<br>  KAFKA_JVM_PERFORMANCE_OPTS=”-server  -XX:+UseCompressedOops -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+CMSScavengeBeforeRemark -XX:+DisableExplicitGC -Djava.awt.headless=true”<br>fi<br>去掉-XX:+UseCompressedOops<br>再启用就可以了</p>
</blockquote>
<h3 id="再启动kafka">再启动kafka</h3><blockquote>
<p>bash kafka-server-start.sh /opt/kafka_2.9.2-0.8.1.1/config/server.properties &amp;</p>
</blockquote>
<p>如果报错，启动不了，可以多开几个终端试一试。</p>
<h2 id="创建_topic">创建 topic</h2><p>创建一个叫做“test”的topic，它只有一个分区，一个副本。</p>
<blockquote>
<p>bash kafka-topics.sh –create –zookeeper localhost:2181 –replication-factor 1 –partitions 1 –topic test</p>
</blockquote>
<p>可以通过list命令查看创建的topic:</p>
<blockquote>
<p>bash kafka-topics.sh –list –zookeeper localhost:2181</p>
</blockquote>
<p>除了手动创建topic，还可以配置broker让它自动创建topic.</p>
<h2 id="发送消息">发送消息</h2><p>Kafka 使用一个简单的命令行producer，从文件中或者从标准输入中读取消息并发送到服务端。默认的每条命令将发送一条消息。<br>运行producer并在控制台中输一些消息，这些消息将被发送到服务端：</p>
<blockquote>
<p>bash kafka-console-producer.sh –broker-list localhost:9092 –topic<br>test</p>
</blockquote>
<p>ctrl+c可以退出发送。</p>
<h2 id="启动consumer">启动consumer</h2><p>Kafka也有一个命令行consumer可以读取消息并输出到标准输出</p>
<blockquote>
<p>bash kafka-console-consumer.sh –zookeeper localhost:2181 –topic test –from-beginning</p>
</blockquote>
<h2 id="搭建一个多个broker的集群">搭建一个多个broker的集群</h2><p>刚才只是启动了单个broker，现在启动有3个broker组成的集群，这些broker节点也都是在本机上的：<br>首先为每个节点编写配置文件：</p>
<blockquote>
<p>cp config/server.properties config/server-1.properties<br>cp config/server.properties config/server-2.properties</p>
</blockquote>
<p>在拷贝出的新文件中添加以下参数：<br>config/server-1.properties:<br>    broker.id=1<br>    port=9093<br>    log.dir=/tmp/kafka-logs-1</p>
<p>config/server-2.properties:<br>    broker.id=2<br>    port=9094<br>    log.dir=/tmp/kafka-logs-2</p>
<p>broker.id在集群中唯一的标注一个节点，因为在同一个机器上，所以必须制定不同的端口和日志文件，避免数据被覆盖。<br>刚才已经启动可Zookeeper和一个节点，现在启动另外两个节点：</p>
<blockquote>
<p>bin/kafka-server-start.sh config/server-1.properties &amp;<br>bin/kafka-server-start.sh config/server-2.properties &amp;</p>
</blockquote>
<p>创建一个拥有3个副本的topic:</p>
<blockquote>
<p>bin/kafka-topics.sh –create –zookeeper localhost:2181 –replication-factor 3 –partitions 1 –topic my-replicated-topic</p>
</blockquote>
<p>现在我们搭建了一个集群，怎么知道每个节点的信息呢？运行“”describe topics”命令就可以了：</p>
<blockquote>
<p>bin/kafka-topics.sh –describe –zookeeper localhost:2181 –topic my-replicated-topic<br>Topic:my-replicated-topic       PartitionCount:1        ReplicationFactor:3     Configs:<br>        Topic: my-replicated-topic      Partition: 0    Leader: 1       Replicas: 1,2,0 Isr: 1,2,0</p>
</blockquote>
<p>下面解释一下这些输出。第一行是对所有分区的一个描述，然后每个分区都会对应一行，因为我们只有一个分区所以下面就只加了一行。<br><strong>leader</strong>：负责处理消息的读和写，leader是从所有节点中随机选择的.<br><strong>replicas</strong>：列出了所有的副本节点，不管节点是否在服务中.<br><strong>isr</strong>：是正在服务中的节点.<br>在我们的例子中，节点1是作为leader运行。<br>向topic发送消息：</p>
<blockquote>
<p>bin/kafka-console-producer.sh –broker-list localhost:9092 –topic my-replicated-topic<br>my test message 1my test message 2</p>
</blockquote>
<p>消费这些消息：</p>
<blockquote>
<p>bin/kafka-console-consumer.sh –zookeeper localhost:2181 –from-beginning –topic my-replicated-topic</p>
<p>my test message 1<br>my test message 2</p>
</blockquote>
<p>测试一下容错能力.Broker 1作为leader运行，现在我们kill掉它：</p>
<blockquote>
<p>ps | grep server-1.properties7564 ttys002    0:15.91 /System/Library/Frameworks/JavaVM.framework/Versions/1.6/Home/bin/java…<br>kill -9 7564</p>
</blockquote>
<p>另外一个节点被选做了leader,node 1 不再出现在 in-sync 副本列表中：</p>
<blockquote>
<p>bin/kafka-topics.sh –describe –zookeeper localhost:218192 –topic my-replicated-topic<br>Topic:my-replicated-topic       PartitionCount:1        ReplicationFactor:3     Configs:<br>        Topic: my-replicated-topic      Partition: 0    Leader: 2       Replicas: 1,2,0 Isr: 2,0</p>
</blockquote>
<p>虽然最初负责续写消息的leader down掉了，但之前的消息还是可以消费的：</p>
<blockquote>
<p>bin/kafka-console-consumer.sh –zookeeper localhost:2181 –from-beginning –topic my-replicated-topic<br>…<br>my test message 1<br>my test message 2</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>公司的一些项目用的<a href="http://www.cnblogs.com/kgdxpr/p/3381974.html">ActivemMQ</a>，最近有个项目开始尝试使用Kafka，有幸帮忙测试了kafka-Producer和Consumer消息吞吐相关的性能，包括broker切换消息的丢失率。在此之前，我对kafka完全不了解。<br>kafka 作为分布式的消息系统，性能大大超过传统的ActiveMQ，市场前景很广，虽然目前还有一些不足的地方，但以后很可能会是分布式消息系统的主流，有必要学习一下！<br>]]>
    
    </summary>
    
      <category term="kafka" scheme="http://tonylit.me/tags/kafka/"/>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[全球黑客撕逼，蓝翔又在毕业考试吗？]]></title>
    <link href="http://tonylit.me/2015/11/18/%E5%85%A8%E7%90%83%E9%BB%91%E5%AE%A2%E6%92%95%E9%80%BC%EF%BC%8C%E8%93%9D%E7%BF%94%E5%8F%88%E5%9C%A8%E6%AF%95%E4%B8%9A%E8%80%83%E8%AF%95%E5%90%97%EF%BC%9F/"/>
    <id>http://tonylit.me/2015/11/18/全球黑客撕逼，蓝翔又在毕业考试吗？/</id>
    <published>2015-11-18T03:37:27.000Z</published>
    <updated>2015-11-18T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>前段时间全球黑客大战，在norse上看了一下世界地图，中国真是亮了，当然外行只能看看热闹~<br>世界地图上不时闪烁亮点，发射光波，攻击其他地域。每一次这样的闪烁表明某个地区施行了一次攻击<br><img src="/img/norse.gif" alt="Alt text"><br>附上两个网络攻击的监控网站，有兴趣的mark下~<br><a href="http://map.norsecorp.com/" target="_blank" rel="external">norse</a>  和 <a href="https://cybermap.kaspersky.com/" target="_blank" rel="external">cybermap</a></p>
<a id="more"></a>
<p><img src="/img/norse-attrack.jpg" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前段时间全球黑客大战，在norse上看了一下世界地图，中国真是亮了，当然外行只能看看热闹~<br>世界地图上不时闪烁亮点，发射光波，攻击其他地域。每一次这样的闪烁表明某个地区施行了一次攻击<br><img src="/img/norse.gif" alt="Alt text"><br>附上两个网络攻击的监控网站，有兴趣的mark下~<br><a href="http://map.norsecorp.com/">norse</a>  和 <a href="https://cybermap.kaspersky.com/">cybermap</a></p>]]>
    
    </summary>
    
      <category term="网络攻击" scheme="http://tonylit.me/tags/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB/"/>
    
      <category term="随笔" scheme="http://tonylit.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[性能分析过程]]></title>
    <link href="http://tonylit.me/2015/11/14/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/"/>
    <id>http://tonylit.me/2015/11/14/性能分析过程/</id>
    <published>2015-11-14T03:37:27.000Z</published>
    <updated>2015-11-14T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<h1 id="性能分析过程">性能分析过程</h1><p>一般情况，该怎样定位性能问题：<br><img src="/img/xingnengfenxiguocheng.PNG" alt="Alt text"></p>
<blockquote>
<p>资源利用率：top、vmstat、iostat、netstat<br>进程：top，top -Hp  &lt; pid &gt;<br>系统调用：strace<br>应用监控：jstack、jprofile、jvisualvm<br><a id="more"></a></p>
<h2 id="资源利用率">资源利用率</h2><p>top、vmstat、iostat、netstat、还有很多（sar、nmon），我比较喜欢用vmstat。</p>
</blockquote>
<p><img src="/img/vmstat.PNG" alt="Alt text"></p>
<blockquote>
<p>r： 表示运行队列,简单理解为有多少线程在排队，一般不要超过cpu个数的5倍。<br>b： 表示阻塞的进程,这个不多说，进程阻塞，大家懂的。<br>swpd ：虚拟内存已使用的大小。<br>free ：  空闲的物理内存的大小。<br>buff ：  物理内存用来缓存读写操作的buffer大小<br>cache： 物理内存用来缓存进程地址空间的 cache 大小<br>si ： 每秒从磁盘读入虚拟内存的大小，如果这个值大于0，表示物理内存不够用。<br>so：  每秒虚拟内存写入磁盘的大小，如果这个值大于0，同上。<br>bi ： 块设备每秒接收的块数量，一般指磁盘读入。<br>bo： 块设备每秒发送的块数量，一般指磁盘读出。<br>in： 每秒CPU的中断次数，包括时间中断<br>cs ：每秒上下文切换次数。<br>us： 用户CPU时间。<br>sy ：系统CPU时间，小于30%。<br>id ： 空闲 CPU时间。<br>wt：等待IO CPU时间，小于40%。</p>
</blockquote>
<p>我们先看一看哪一块的利用率超标了，下面附上OS常用阀值：</p>
<pre><code>-<span class="ruby"><span class="constant">TotalCPU</span>% &lt; <span class="number">75</span>%
</span>-<span class="ruby"><span class="constant">SysCPU</span>% &lt; <span class="number">30</span>%
</span>-<span class="ruby"><span class="constant">Load</span> <span class="constant">Average</span> &lt; <span class="number">5</span>
</span>-<span class="ruby"><span class="constant">Wio</span>% &lt; <span class="number">40</span>%
</span>-<span class="ruby">network% &lt; <span class="number">30</span>% -高了会大量丢包
</span>-<span class="ruby">mem% &lt; <span class="number">80</span>%~<span class="number">90</span>%
</span>-<span class="ruby"><span class="constant">Disk</span> busy% &lt; <span class="number">60</span>%
</span>-<span class="ruby"><span class="constant">Disk</span> usage &lt; <span class="number">90</span>% -高了会进行碎片整理</span>
</code></pre><p>如果发现比阀值高，肿么办？<br>不要着急，我们需要精确定位到具体的进程，看看到底哪个进程在捣鬼！<br>top 一下，看下cpu利用率占用或者内存占用高的进程。<br>将它的pid记住，开始动手分尸（分析）</p>
<pre><code><span class="number">1</span><span class="class">.strace</span> -f -c -<span class="tag">p</span> &lt;pid&gt;
<span class="number">2</span><span class="class">.jstack</span> -l &lt;pid&gt;
<span class="number">3</span>.jprofile或者jvisualvm
.....
</code></pre><p>strace：可以将应用对系统的所有调用都打出来，我们可以看到应用程序到底对内核干了多少坏坏的事儿~~~</p>
<blockquote>
<p>strace -f -c -p <pid><br><img src="/img/strace.PNG" alt="Alt text"></pid></p>
</blockquote>
<p>啥？？看不懂syscall，我也看不懂，老老实实百度~~<br>因为我接触大多都是java程序，所以我还是比较钟情于jstack和jprofiler的，嘿嘿！</p>
<blockquote>
<p>jstack -l <pid><br><img src="/img/jstack.PNG" alt="Alt text"><br>JVM的所有线程都打出来，建议输出到文件中，多打几次。</pid></p>
</blockquote>
<p>至于jprofiler，灰常牛X的jvm监控工具，线程数量，方法调用次数，sql执行时间，方法占用cpu的比例，内存大小，gc频率……所有的jvm相关的东东都有，具体怎么用在这里先不多说，上个图看看先~<br><img src="/img/jprofiler.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="性能分析过程">性能分析过程</h1><p>一般情况，该怎样定位性能问题：<br><img src="/img/xingnengfenxiguocheng.PNG" alt="Alt text"></p>
<blockquote>
<p>资源利用率：top、vmstat、iostat、netstat<br>进程：top，top -Hp  &lt; pid &gt;<br>系统调用：strace<br>应用监控：jstack、jprofile、jvisualvm<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[性能监控与分析-数据库]]></title>
    <link href="http://tonylit.me/2015/11/13/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%88%86%E6%9E%90-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://tonylit.me/2015/11/13/性能监控与分析-数据库/</id>
    <published>2015-11-13T03:37:27.000Z</published>
    <updated>2015-11-13T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>  一个网站的性能分为很多方面，从网络、OS、中间件、code、sql、数据库，还有前端的很多方面，比如：page size、请求数、开启压缩等，实在是太多太多，估计一辈子搞完所有的是不可能了。<br>    大型网站在访问高峰的时候，实际上<strong>最大的瓶颈在数据库</strong>。很多互联网公司为了解决数据库瓶颈，会在DB端应用很多缓存机制，memcache、redis、包括减轻流复制的压力会应用MQ，kafka等消息队列。据统计，某宝和某度数据库的压力仅占期请求的10%~20%,大多数都是被redis等处理掉了。<br>    那么问题来了，我们在性能测试的时候遇到DB端的性能问题该怎么定位与分析呢？</p>
<a id="more"></a>
<p>数据库的性能无非就两个方面-<strong>sql和配置</strong></p>
<h1 id="常见的数据库问题有哪些？">常见的数据库问题有哪些？</h1><blockquote>
<p>SQL语句低效或高负载<br>应用程序使用ORCLE数据库效果不佳<br>数据库内存结构大小不足<br>并发问题<br>I/O问题<br>数据库配置问题<br>数据库性能随着时间下降</p>
</blockquote>
<h1 id="ORCLE性能监控-AWR报告和ADDM">ORCLE性能监控-AWR报告和ADDM</h1><h2 id="awr和addm介绍">awr和addm介绍</h2><blockquote>
<p><strong>AWR</strong>:Automatic Workload Repository 是 10g 引入的一个重要组件，存贮着近期一段时间内数据库活动状态的详细信息、信息保留默认是7天。<br><img src="/img/ORACLE-AWR.png" alt="Alt text"></p>
<p><strong>ADDM</strong>：Oracle10g中推出了新的优化诊断工具：就是通过诊断和分析awr得到的数据来推断数据库可能存在的问题，addm给出的建议是依照减少db_time为依据。每次收集完awr报告后，都会产生一个addm分析，分析结果在shared_pool里，mmon进程定期将其写入磁盘，AWR每产生一次快照，MMON进程就通知ADDM把AWR最近两次快照之间的差值进行分析。因此，在默认情况下，每当有AWR的快照产生，ADDM将自动运行。通过em可以查看。所以说白了，addm应该是帮助我们发现问题的一个很好的工具。<strong>addm可以定位出很多问题，或许你想不到的，它都能帮你想到。</strong></p>
</blockquote>
<h2 id="如何导出awr报告">如何导出awr报告</h2><p>首先进入$ORACLE_HOME/rdbms/admin目录，在sqlplus下运行<strong>@awrrpt</strong>脚本（记得切换oralce用户哦~），按照提示一步一步就可以达成，导出的格式有两种，txt格式和html格式</p>
<p><img src="/img/login_oracle.PNG" alt="Alt text"></p>
<p><img src="/img/awr-create.PNG" alt="Alt text"></p>
<p><img src="/img/shengchengawr.PNG" alt="Alt text"></p>
<p>我们看到最后生成一个awr报告文件，把它拿出来，改成html格式的文件。</p>
<p><img src="/img/AWR-1.PNG" alt="Alt text"></p>
<h2 id="如何快速定位问题">如何快速定位问题</h2><p>刚开始看到AWR报告的时候我就mengbi了，内容实在是太多，从上到下哗啦啦的好多屏。<br>其实大家别害怕，里面99%的内容可以忽略了，我们直接看核心的东东-<strong>Top 5 Timed Events</strong> ，这个是oracle占用时间最长的5个events，直接看这个就行了。<br><img src="/img/Top_5_Timed_Events.PNG" alt="Alt text"></p>
<p>什么？里面写的啥，看不懂？？<br>其实，里面很多东西DBA也不懂，我们百度，谷歌搜起来，很多优化的方案都有，更专业的话，请看一些oracle自己的文章。<br>还有更懒省事、简单有效的方法，使用ADDM报告，上面也介绍了，它就像个私人医生，给你诊断oracle的性能问题并且给你解决方案。<br><strong>我们来看看ADDM能定位哪些问题</strong>：</p>
<blockquote>
<p>•操作系统内存页入页出问题<br>•由于Oracle负载和非Oracle负载导致的CPU瓶颈问题<br>•导致不同资源负载的Top SQL语句和对象——CPU消耗、IO带宽占用、潜在IO问题、RAC内部通讯繁忙<br>•按照PLSQL和JAVA执行时间排的Top SQL语句.<br>•过多地连接 (login/logoff).<br>•过多硬解析问题——由于shared pool过小、书写问题、绑定大小不适应、解析失败原因引起的。<br>•过多软解析问题<br>•索引查询过多导致资源争用.<br>•由于用户锁导致的过多的等待时间 (通过包dbms_lock加的锁)<br>•由于DML锁导致的过多等待时间(例如锁住表了)<br>•由于管道输出导致的过多等待时间(如通过包dbms_pipe.put进行管道输出)<br>•由于并发更新同一个记录导致的过多等待时间(行级锁等待)<br>•由于ITL不够导致的过多等待时间（大量的事务操作同一个数据块）<br>•系统中过多的commit和rollback(logfile sync事件).<br>•由于磁盘带宽太小和其他潜在问题（如由于logfile太小导致过多的checkpoint，MTTR设置问题，过多的undo操作等等）导致的IO性能问题I<br>•对于DBWR进程写数据块，磁盘IO吞吐量不足<br>•由于归档进程无法跟上redo日至产生的速度，导致系统变慢<br>•redo数据文件太小导致的问题<br>•由于扩展磁盘分配导致的争用<br>•由于移动一个对象的高水位导致的争用问题<br>•内存太小问题——SGA Target, PGA, Buffer Cache, Shared Pool<br>•在一个实例或者一个机群环境中存在频繁读写争用的热块<br>•在一个实例或者一个机群环境中存在频繁读写争用的热对象<br>•RAC环境中内部通讯问题<br>•LMS进程无法跟上导致锁请求阻塞<br>•在RAC环境中由于阻塞和争用导致的实例倾斜<br>•RMAN导致的IO和CPU问题<br>•Streams和AQ问题<br>•资源管理等待事件</p>
</blockquote>
<h2 id="如何导出ADDM报告">如何导出ADDM报告</h2><p>和上面导出AWR报告一样，首先进入$ORACLE_HOME/rdbms/admin目录，在sqlplus下运行<strong>@addmrpt</strong>脚本（记得切换oralce用户哦~），按照提示一步一步就可以达成。<br>我们把生成的addm报告拿出来，瞅一瞅~<br><img src="/img/addm-1.PNG" alt="Alt text"></p>
<p>哎，我英语不好，很多看不懂，没办法啊！！！<br>去百度整片翻译一下吧~~<br><img src="/img/addm-2.PNG" alt="Alt text"></p>
<p>好了，后面的事情不用多少了，调参数，优化sql，改bug吧~~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>  一个网站的性能分为很多方面，从网络、OS、中间件、code、sql、数据库，还有前端的很多方面，比如：page size、请求数、开启压缩等，实在是太多太多，估计一辈子搞完所有的是不可能了。<br>    大型网站在访问高峰的时候，实际上<strong>最大的瓶颈在数据库</strong>。很多互联网公司为了解决数据库瓶颈，会在DB端应用很多缓存机制，memcache、redis、包括减轻流复制的压力会应用MQ，kafka等消息队列。据统计，某宝和某度数据库的压力仅占期请求的10%~20%,大多数都是被redis等处理掉了。<br>    那么问题来了，我们在性能测试的时候遇到DB端的性能问题该怎么定位与分析呢？</p>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[登录filter实现]]></title>
    <link href="http://tonylit.me/2015/10/20/%E7%99%BB%E5%BD%95filter%E5%AE%9E%E7%8E%B0/"/>
    <id>http://tonylit.me/2015/10/20/登录filter实现/</id>
    <published>2015-10-20T03:37:27.000Z</published>
    <updated>2015-10-20T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>   最近想实现一个vo登录的功能，左思右想~~<br>   嗯，应该是需要实现权限和登录认证的功能，看来是做写一个登录过滤器或者拦截器了。<br> 项目使用的springmvc框架，查阅了一些资料，决定使用<strong>filter</strong>过滤器，<a href="http://blog.csdn.net/chenleixing/article/details/44573495" target="_blank" rel="external">拦截器与过滤器的区别</a>    </p>
<a id="more"></a>
<p>具体实现比较简单，配置配置，写个filter类就行了，如下：</p>
<ul>
<li><h1 id="在web-xml中增加对filer的配置">在web.xml中增加对filer的配置</h1><p><img src="/img/webxml-filter.PNG" alt="Alt text"></p>
</li>
<li><h1 id="新建一个filter类">新建一个filter类</h1></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.focustech.fds.web.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 登录验证的filter实现</span><br><span class="line"> * </span><br><span class="line"> * <span class="doctag">@author</span> lit</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> FilterConfig config;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] EXCEPT_PAGE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 登录页面</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOGIN_PAGE = <span class="string">"/login"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class="line">        request.setAttribute(<span class="string">"version"</span>, <span class="keyword">new</span> Random().nextInt());</span><br><span class="line">        BodyReaderHttpServletRequestWrapper requestWrapper = <span class="keyword">new</span> BodyReaderHttpServletRequestWrapper(request);</span><br><span class="line">        <span class="keyword">if</span> (requestWrapper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            request = requestWrapper;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排除一些jsp，css等文件</span></span><br><span class="line">        <span class="keyword">for</span> (String exception : EXCEPT_PAGE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (request.getRequestURI().endsWith(exception)) &#123;</span><br><span class="line"></span><br><span class="line">                filterChain.doFilter(request, response);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// String ref = request.getHeader("REFERER");</span></span><br><span class="line">        String ref = <span class="string">"REFERER"</span>;</span><br><span class="line">        HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line">        String type = request.getHeader(<span class="string">"X-Requested-With"</span>);</span><br><span class="line">        <span class="keyword">if</span> (session == <span class="keyword">null</span> || session.getAttribute(<span class="string">"fdsUser"</span>) == <span class="keyword">null</span> || ref == <span class="keyword">null</span> || <span class="string">""</span>.equals(ref)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"XMLHttpRequest"</span>.equalsIgnoreCase(type)) &#123;<span class="comment">// AJAX REQUEST</span></span><br><span class="line">                                                          <span class="comment">// PROCESS</span></span><br><span class="line">                response.setHeader(<span class="string">"sessionstatus"</span>, <span class="string">"timeout"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            response.sendRedirect(request.getContextPath() + LOGIN_PAGE);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        String exception = filterConfig.getInitParameter(<span class="string">"exception"</span>);</span><br><span class="line">        <span class="keyword">if</span> (exception != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(exception)) &#123;</span><br><span class="line">            EXCEPT_PAGE = exception.split(<span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        config = filterConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>搞定~<br>以后凡是URL中带有/vo/的请求都走过滤器滤一滤！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>   最近想实现一个vo登录的功能，左思右想~~<br>   嗯，应该是需要实现权限和登录认证的功能，看来是做写一个登录过滤器或者拦截器了。<br> 项目使用的springmvc框架，查阅了一些资料，决定使用<strong>filter</strong>过滤器，<a href="http://blog.csdn.net/chenleixing/article/details/44573495">拦截器与过滤器的区别</a>    </p>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
      <category term="springmvc" scheme="http://tonylit.me/tags/springmvc/"/>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[loadrunner监控linux服务器]]></title>
    <link href="http://tonylit.me/2015/10/14/loadrunner%E7%9B%91%E6%8E%A7linux%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://tonylit.me/2015/10/14/loadrunner监控linux服务器/</id>
    <published>2015-10-14T03:37:27.000Z</published>
    <updated>2015-10-14T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p><strong>loadrunner监控linux服务器的cpu、io、内存等</strong><br><img src="/img/linux-server.PNG" alt="Alt text"></p>
<a id="more"></a>
<p>需要在linux服务器上开启rstatd服务，首先看下机器上面有没有装过rstatd<br>rstatd 是一个为网络上其他机器收集和提供系统信息的守候程序</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">whereis</span> <span class="tag">rpc</span><span class="class">.ratatd</span></span><br></pre></td></tr></table></figure>
<p>如果没安装过，安装一下</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf rpc<span class="class">.rstatd-4</span>.<span class="number">0.1</span><span class="class">.tar</span><span class="class">.gz</span></span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>安装完成，启动rstatd</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">rpc</span><span class="class">.rstatd</span></span><br></pre></td></tr></table></figure>
<p>检查下是否启动成功</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">rpcinfo</span> -p</span><br></pre></td></tr></table></figure>
<p><img src="/img/rpcinfo.PNG" alt="Alt text"><br>说明rstatd启动成功了</p>
<p>最后在controller中添加UNIX resources监控，然后选择监控指标就行了。<br><img src="/img/unix_resources.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>loadrunner监控linux服务器的cpu、io、内存等</strong><br><img src="/img/linux-server.PNG" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="loadrunner" scheme="http://tonylit.me/tags/loadrunner/"/>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端性能测试]]></title>
    <link href="http://tonylit.me/2015/10/14/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <id>http://tonylit.me/2015/10/14/前端性能测试/</id>
    <published>2015-10-14T03:37:27.000Z</published>
    <updated>2015-10-14T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>前段时间领导要求统计网站几个核心页面的<strong>性能指标，pagesize、request数量、请求体积</strong>等，本身对前端 的东东不是很了解，看了一些资料，学习了一些前端的知识，包括页面渲染的顺序，各浏览器对请求的处理机制，各大公司对前端性能的一些指标等，结合网友总结 的一些工具的使用，简单的搭建了前端性能监控平台。<br><a id="more"></a><br>当然目前有很多前端性能测试网站，如阿里测、监控宝、webpagetest等，我搭建该平台的原因有三点，第一：网络问题，由于生成环境不能连接外网 第二：开源工具webpagetest搭建没搞定，网上的资料不全，英语不好，看不懂英文网站 第三：学习<br>前端知识的学习推荐：fex.baidu.com<br>性能测试网站推荐：<a href="http://www.alibench.com/" target="_blank" rel="external">http://www.alibench.com/</a><br>webpagetest开源工具：<a href="http://www.webpagetest.org/" target="_blank" rel="external">http://www.webpagetest.org/</a></p>
<h1 id="工具介绍：">工具介绍：</h1><h2 id="dynatrace：">dynatrace：</h2><p><a href="http://www.ibm.com/developerworks/cn/web/1205_xieju_dtraceajax/" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/web/1205_xieju_dtraceajax/</a></p>
<h2 id="showlsow：">showlsow：</h2><p>showslow是yslow的数据收集与展示平台<a href="http://www.showslow.com/，它是一个开源的php项目，可以用来与firefox的yslow插件、page" target="_blank" rel="external">http://www.showslow.com/，它是一个开源的php项目，可以用来与firefox的yslow插件、page</a> speed插件或者dynatrace通信，收集插件或程序所发送过来的信息并集中展示。只需要在dynatrace安装目录下进行一些设置，即可自动实现上传结果到showslow平台作为存档、分析及监控。<br><a href="http://www.showslow.org/Main_Page" target="_blank" rel="external">http://www.showslow.org/Main_Page</a></p>
<h2 id="yslow：">yslow：</h2><p>基于firebug的评测分析工具，yahoo产；和page speed类似工具，会给出页面的评分和优化说规则，同时会提供页面下载资源的统计分析功能，还提供了一些小工具，如js运行检测，图片的优化工具，未符合规则的资源有哪些等等。总的来说是page speed的增强版。<br>yslow前端评分标准：<br><a href="http://developer.yahoo.com/performance/rules.html" target="_blank" rel="external">http://developer.yahoo.com/performance/rules.html</a> </p>
<h2 id="pagespeed：">pagespeed：</h2><p>基于firebug的web页面优化的评测工具，同时还有支持chrome的插件，因为是google产的。<br><a href="https://developers.google.com/speed/docs/best-practices/rules_intro" target="_blank" rel="external">https://developers.google.com/speed/docs/best-practices/rules_intro</a></p>
<h2 id="selenium：">selenium：</h2><p>web自动化测试工具<br><a href="http://baike.baidu.com/subview/478050/6464537.htm?fr=aladdin" target="_blank" rel="external">http://baike.baidu.com/subview/478050/6464537.htm?fr=aladdin</a></p>
<h1 id="测试方案：">测试方案：</h1><p><img src="/img/ceshifangan.PNG" alt="Alt text"></p>
<h1 id="环境以及工具准备：">环境以及工具准备：</h1><p>下载相关工具<br>pagespeed插件：<a href="http://pan.baidu.com/s/1c0vP4VA" target="_blank" rel="external">http://pan.baidu.com/s/1c0vP4VA</a><br>yslow插件：<a href="http://pan.baidu.com/s/1eQkWdKu" target="_blank" rel="external">http://pan.baidu.com/s/1eQkWdKu</a><br>firebug：<a href="http://pan.baidu.com/s/1hq44Q92" target="_blank" rel="external">http://pan.baidu.com/s/1hq44Q92</a><br>dynatrace4.3.0：<a href="http://pan.baidu.com/s/1c01piBu" target="_blank" rel="external">http://pan.baidu.com/s/1c01piBu</a><br>xampp集成软件包：<a href="http://pan.baidu.com/s/1sj8Wkqh" target="_blank" rel="external">http://pan.baidu.com/s/1sj8Wkqh</a><br>MyEclipse8.6：<a href="http://pan.baidu.com/s/1eQEcuSq" target="_blank" rel="external">http://pan.baidu.com/s/1eQEcuSq</a></p>
<h2 id="说明：">说明：</h2><ul>
<li>(1).之所以用firefox19.0，因为坑爹的yslow、pagespeed、dynatrace、firebug、firefox之间的兼容问题，firefox30的兼容性不好，我也没多找资料，就用了19，我觉得完全可以用</li>
<li>(2).showslow为php的小项目，完全可以自己搭建一套php的环境、apache、，mysql，在此推荐xampp（XAMPP（Apache+MySQL+PHP+PERL）是一个功能强大的建 XAMPP 软件站集成软件包）<a href="http://baike.baidu.com/view/864591.htm?fr=aladdin" target="_blank" rel="external">http://baike.baidu.com/view/864591.htm?fr=aladdin</a><h1 id="工具下载好了，我们开始合体：">工具下载好了，我们开始合体：</h1></li>
<li><p>1.安装firefox19.0浏览器，把firebug、yslow、pagespeed插件加入<br><img src="/img/chajianjiaru.PNG" alt="Alt text"></p>
</li>
<li><p>2.安装dynatrace<br><img src="/img/dynatrace.PNG" alt="Alt text"></p>
</li>
</ul>
<ul>
<li><ol>
<li>安装xampp，整合showslow<br><img src="/img/showslow.PNG" alt="Alt text"></li>
</ol>
</li>
</ul>
<p>点击mysql的admin按钮，我们可以添加showslow的数据库，添加用户，设置权限，都比较简单，我添加了一个叫showslow的数据库<br> <img src="/img/showslowdatabase.PNG" alt="Alt text"></p>
<p>数据库方面的ok了，apache方面我们不用进行设置，默认的DocumentRoot在xampp文件夹下的htdocs文件。<br>进入xmapp安装目录的htdocs文件夹，清空所有东西，将下载的showslow减压到该文件夹中，修改showslow解压目录下的config.sample.php文件名为config.php，修改该文件的数据库连接信息，按照上面创建的数据库名，用户名，密码即可<br> <img src="/img/db-setting.PNG" alt="Alt text"></p>
<p>给showslow创建表结构，通过运行showslow解压主目录下的dbupgrade.php和users子目录下dbupgrade.php文件，我们只要在浏览器中输入<a href="http://localhost/dbupgrade.php" target="_blank" rel="external">http://localhost/dbupgrade.php</a> 和<a href="http://localhost/users/dbupgrade.php就可以了" target="_blank" rel="external">http://localhost/users/dbupgrade.php就可以了</a><br>然后，我们输入<a href="http://localhost/，测试一下showslow是否ok" target="_blank" rel="external">http://localhost/，测试一下showslow是否ok</a></p>
<ul>
<li><ol>
<li>环境基本搭建完成，下面我们设置dynatrace，yslow,pagespeed自动上传数据到showslow<h2 id="Dynatrace配置">Dynatrace配置</h2>配置：dynatrace安装文件下的dtajax.ini文件增加如下三行，其中第三行可设置dynatrace自动上传结果至showslow：<br>-Dcom.dynatrace.diagnostics.ajax.beacon.uploadurl=http:// localhost/beacon/dynatrace<br>-Dcom.dynatrace.diagnostics.ajax.beacon.portalurl=http:// localhost/<br>-Dcom.dynatrace.diagnostics.ajax.beacon.autoupload=true<h2 id="Yslow配置：">Yslow配置：</h2>配置YSlow  </li>
</ol>
</li>
<li>1.打开Firefox输入：about:config（我保证会很小心的）  </li>
<li>2.filter中输入：yslow  </li>
<li>3.修改以下三条数据<br>extensions.yslow.beaconUrl = <a href="http://localhost/showslow/beacon/yslow/" target="_blank" rel="external">http://localhost/showslow/beacon/yslow/</a><br>如果测试和服务器不在同一机器上，请将localhost改成实际地址<br>extensions.yslow.beaconInfo = grade<br>extensions.yslow.optinBeacon = true  </li>
<li>4.重启Firefox<br><img src="/img/firefox.PNG" alt="Alt text"></li>
</ul>
<p>Pagespeed配置：<br> <img src="/img/pagespeed.PNG" alt="Alt text"></p>
<p>万恶的pagespeed，不知道怎么的，数据上传不到showslow中，有知道原因的请解惑<br><a href="http://zhidao.baidu.com/question/552903737028719092.html?quesup2&amp;oldq=1" target="_blank" rel="external">http://zhidao.baidu.com/question/552903737028719092.html?quesup2&amp;oldq=1</a></p>
<h1 id="配置方面的可以参考：">配置方面的可以参考：</h1><p><a href="http://blog.csdn.net/five3/article/details/7688298" target="_blank" rel="external">http://blog.csdn.net/five3/article/details/7688298</a><br>结合selenium自动化性能测试：</p>
<h1 id="可以下载项目，自己看吧">可以下载项目，自己看吧</h1><p><a href="http://pan.baidu.com/s/1kTIBPEB" target="_blank" rel="external">http://pan.baidu.com/s/1kTIBPEB</a><br>设置环境变量<br>DT_AE_AGENTACTIVE=true<br>DT_AE_AGENTNAME=”any string name”</p>
<p><img src="/img/selenium-env.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前段时间领导要求统计网站几个核心页面的<strong>性能指标，pagesize、request数量、请求体积</strong>等，本身对前端 的东东不是很了解，看了一些资料，学习了一些前端的知识，包括页面渲染的顺序，各浏览器对请求的处理机制，各大公司对前端性能的一些指标等，结合网友总结 的一些工具的使用，简单的搭建了前端性能监控平台。<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="前端性能" scheme="http://tonylit.me/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
</feed>
