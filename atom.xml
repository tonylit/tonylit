<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[淘淘的博客]]></title>
  <subtitle><![CDATA[今年lebron绝逼夺冠，bie跟我急!]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://tonylit.me/"/>
  <updated>2016-02-29T05:37:27.000Z</updated>
  <id>http://tonylit.me/</id>
  
  <author>
    <name><![CDATA[tonyli]]></name>
    <email><![CDATA[489631402@qq.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[apache设置http跳转https转发]]></title>
    <link href="http://tonylit.me/2016/02/29/apache%20http%E8%B7%B3%E8%BD%AC/"/>
    <id>http://tonylit.me/2016/02/29/apache http跳转/</id>
    <published>2016-02-29T03:37:27.000Z</published>
    <updated>2016-02-29T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>apache中开启转发配置，将http跳转到https<br><a id="more"></a></p>
<p>#开启apache的rewrite模块<br><img src="/img/1456713499110.PNG" alt="Alt text"></p>
<h1 id="全部http请求跳转https">全部http请求跳转https</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword"><span class="common">Listen</span></span> 443</span><br><span class="line"><span class="keyword">NameVirtualHost</span> *:443</span><br><span class="line"><span class="tag">&lt;VirtualHost *:443&gt;</span></span><br><span class="line">	<span class="keyword">SSLEngine</span> <span class="literal">on</span></span><br><span class="line">        <span class="keyword">SSLProtocol</span> <span class="literal">all</span> -SSLv2</span><br><span class="line">        <span class="keyword">SSLCipherSuite</span> <span class="literal">ALL</span>:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL</span><br><span class="line">        <span class="keyword">SSLCertificateFile</span> <span class="string">"/opt/xyz/apache2.2.9_resin3.0.25/etc/apache2/server.crt"</span></span><br><span class="line">        <span class="keyword">SSLCertificateKeyFile</span> <span class="string">"/opt/xyz/apache2.2.9_resin3.0.25/etc/apache2/server.key"</span></span><br><span class="line">        <span class="keyword">SSLCertificateChainFile</span>  <span class="string">"/opt/xyz/apache2.2.9_resin3.0.25/etc/apache2//intermediate.crt"</span></span><br><span class="line"><span class="tag">&lt;/VirtualHost&gt;</span></span><br><span class="line"><span class="tag">&lt;VirtualHost  *:80&gt;</span></span><br><span class="line">        <span class="keyword"><span class="common">RewriteEngine</span></span> <span class="literal">on</span></span><br><span class="line">        <span class="keyword"><span class="common">RewriteCond</span></span> <span class="cbracket">%&#123;SERVER_PORT&#125;</span> !^443$</span><br><span class="line">        <span class="keyword"><span class="common">RewriteRule</span></span> ^/?(.*)$ https://<span class="cbracket">%&#123;SERVER_NAME&#125;</span><span class="cbracket">%&#123;REQUEST_URI&#125;</span><span class="sqbracket"> [L,R]</span></span><br><span class="line"><span class="tag">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="单url跳转">单url跳转</h1><p>比如<a href="http://sales.vemic.com/logon.do" target="_blank" rel="external">http://sales.vemic.com/logon.do</a> 跳转到<a href="https://sales.vemic.com/logon.do" target="_blank" rel="external">https://sales.vemic.com/logon.do</a></p>
<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword"><span class="common">RewriteEngine</span></span> <span class="literal">on</span></span><br><span class="line"><span class="keyword"><span class="common">RewriteCond</span></span> <span class="cbracket">%&#123;SERVER_PORT&#125;</span> !^443$</span><br><span class="line"><span class="keyword"><span class="common">RewriteRule</span></span> ^/logon.do$ https://<span class="cbracket">%&#123;SERVER_NAME&#125;</span><span class="cbracket">%&#123;REQUEST_URI&#125;</span><span class="sqbracket"> [L,R]</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>apache中开启转发配置，将http跳转到https<br>]]>
    
    </summary>
    
      <category term="apache" scheme="http://tonylit.me/tags/apache/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[apache http跳转https]]></title>
    <link href="http://tonylit.me/2016/02/29/apache_http%E8%B7%B3%E8%BD%AC/"/>
    <id>http://tonylit.me/2016/02/29/apache_http跳转/</id>
    <published>2016-02-29T03:37:27.000Z</published>
    <updated>2016-02-29T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>apache中开启转发配置，将http跳转到https<br><a id="more"></a></p>
<p>#开启apache的rewrite模块<br><img src="/img/1456713499110.png" alt="Alt text"></p>
<h1 id="全部http请求跳转https">全部http请求跳转https</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword"><span class="common">Listen</span></span> 443</span><br><span class="line"><span class="keyword">NameVirtualHost</span> *:443</span><br><span class="line"><span class="tag">&lt;VirtualHost *:443&gt;</span></span><br><span class="line">	<span class="keyword">SSLEngine</span> <span class="literal">on</span></span><br><span class="line">        <span class="keyword">SSLProtocol</span> <span class="literal">all</span> -SSLv2</span><br><span class="line">        <span class="keyword">SSLCipherSuite</span> <span class="literal">ALL</span>:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL</span><br><span class="line">        <span class="keyword">SSLCertificateFile</span> <span class="string">"/opt/xyz/apache2.2.9_resin3.0.25/etc/apache2/server.crt"</span></span><br><span class="line">        <span class="keyword">SSLCertificateKeyFile</span> <span class="string">"/opt/xyz/apache2.2.9_resin3.0.25/etc/apache2/server.key"</span></span><br><span class="line">        <span class="keyword">SSLCertificateChainFile</span>  <span class="string">"/opt/xyz/apache2.2.9_resin3.0.25/etc/apache2//intermediate.crt"</span></span><br><span class="line"><span class="tag">&lt;/VirtualHost&gt;</span></span><br><span class="line"><span class="tag">&lt;VirtualHost  *:80&gt;</span></span><br><span class="line">        <span class="keyword"><span class="common">RewriteEngine</span></span> <span class="literal">on</span></span><br><span class="line">        <span class="keyword"><span class="common">RewriteCond</span></span> <span class="cbracket">%&#123;SERVER_PORT&#125;</span> !^443$</span><br><span class="line">        <span class="keyword"><span class="common">RewriteRule</span></span> ^/?(.*)$ https://<span class="cbracket">%&#123;SERVER_NAME&#125;</span><span class="cbracket">%&#123;REQUEST_URI&#125;</span><span class="sqbracket"> [L,R]</span></span><br><span class="line"><span class="tag">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="单url跳转">单url跳转</h1><p>比如<a href="http://sales.vemic.com/logon.do" target="_blank" rel="external">http://sales.vemic.com/logon.do</a> 跳转到<a href="https://sales.vemic.com/logon.do" target="_blank" rel="external">https://sales.vemic.com/logon.do</a></p>
<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword"><span class="common">RewriteEngine</span></span> <span class="literal">on</span></span><br><span class="line"><span class="keyword"><span class="common">RewriteCond</span></span> <span class="cbracket">%&#123;SERVER_PORT&#125;</span> !^443$</span><br><span class="line"><span class="keyword"><span class="common">RewriteRule</span></span> ^/logon.do$ https://<span class="cbracket">%&#123;SERVER_NAME&#125;</span><span class="cbracket">%&#123;REQUEST_URI&#125;</span><span class="sqbracket"> [L,R]</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>apache中开启转发配置，将http跳转到https<br>]]>
    
    </summary>
    
      <category term="apache" scheme="http://tonylit.me/tags/apache/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[dockerfile中的RUN、CMD和ENTRY]]></title>
    <link href="http://tonylit.me/2016/01/27/dockerCMD%E5%92%8CRUN/"/>
    <id>http://tonylit.me/2016/01/27/dockerCMD和RUN/</id>
    <published>2016-01-27T03:37:27.000Z</published>
    <updated>2016-01-27T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>最近在学习dockerfile，有几条指令着实比较混淆，RUN，CMD，ENTRYPOINT。<br>在此记录一下用法，回头好多看看！<br><a id="more"></a></p>
<h1 id="用法">用法</h1><blockquote>
<p><strong>RUN</strong>在构建image时运行的指令, 在Dockerfile中可以写多条RUN指令.<br><strong>CMD</strong>和<strong>ENTRYPOINT</strong>则是在运行container 时会运行的指令, 都只能写一条, 如果写了多条, 则最后一条生效.<br><strong>CMD</strong>和<strong>ENTRYPOINT</strong>的<strong>区别</strong>是:  CMD在运行时会被command覆盖, ENTRYPOINT不会被运行时的command覆盖</p>
</blockquote>
<p>CMD和ENTRYPOINT比较让人费解，举个例子就明白了：</p>
<blockquote>
<p>docker run [OPTIONS] IMAGE [COMMAND] [ARG…]   –entrypoint=””<br>docker run -ti tony/web1 /opt/resin.sh start</p>
</blockquote>
<p> 这里的/opt/resin.sh start就是command，将覆盖Dockerfile的CMD, 但是不会覆盖ENTRYPOINT.<br>如果要覆盖ENTRYPOINT, 那么可以在docker run运行时输入 –entrypoint=”….”.</p>
<p>CMD和ENTRYPOINT一般用于制作具备后台服务的image, 例如apache, database等. 在使用这种image启动container时, 自动启动服务</p>
<hr>
<h1 id="需要注意">需要注意</h1><p>在Docker　daemon模式下，无论你是使用ENTRYPOINT，还是CMD，最后的命令，一定要是当前进程需要一直运行的，才能够防容器退出。</p>
<h2 id="以下无效方式：">以下无效方式：</h2><blockquote>
<p> ENTRYPOINT service tomcat7 start #运行几秒钟之后，容器就会退出  CMD service tomcat7<br>start #运行几秒钟之后，容器就会退出</p>
</blockquote>
<h2 id="这样有效：">这样有效：</h2><blockquote>
<p>ENTRYPOINT service tomcat7 start &amp;&amp; tail -f<br>/var/lib/tomcat7/logs/catalina.out</p>
</blockquote>
<p> 或者</p>
<blockquote>
<p>CMD service tomcat7 start &amp;&amp; tail -f<br>/var/lib/tomcat7/logs/catalina.out</p>
</blockquote>
<p>这样也有效：</p>
<blockquote>
<p>ENTRYPOINT [“/usr/sbin/sshd”]  CMD [“-D”]</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在学习dockerfile，有几条指令着实比较混淆，RUN，CMD，ENTRYPOINT。<br>在此记录一下用法，回头好多看看！<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[resin性能监控]]></title>
    <link href="http://tonylit.me/2016/01/25/resin%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/"/>
    <id>http://tonylit.me/2016/01/25/resin性能监控/</id>
    <published>2016-01-25T03:37:27.000Z</published>
    <updated>2016-01-25T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<h1 id="性能分析过程">性能分析过程</h1><p>公司很多项目用的resin，resin3.0和3.1居多，如果需要监控resin，可以配置一下resin.conf就行了，监控起来也比较方便。<br><a id="more"></a></p>
<h1 id="简易版监控">简易版监控</h1><h2 id="resin3-0版本">resin3.0版本</h2><p>在resin.conf中加入以下配置信息，重启即可！</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">servlet-mapping</span> <span class="attribute">servlet-class</span>=<span class="value">'com.caucho.servlets.ResinStatusServlet'</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/resin-status<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">init</span> <span class="attribute">enable</span>=<span class="value">"read"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>重启完，访问<a href="http://域名/resin-status。" target="_blank" rel="external">http://域名/resin-status。</a><br><img src="/img/resin_monitor/resin3.0_1.PNG" alt="Alt text"></p>
<h1 id="全能版监控">全能版监控</h1><h2 id="resin3-0版本-1">resin3.0版本</h2><p>在resin.conf最下面加入以下配置信息，重启resin</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;web-app id=<span class="string">"/resin-admin"</span> root-directory=<span class="string">"$&#123;resin.home&#125;/php/admin"</span>&gt;</span><br><span class="line">        &lt;prologue&gt;</span><br><span class="line">          &lt;resin:<span class="keyword">set</span> <span class="keyword">var</span>=<span class="string">"resin_admin_user"</span> <span class="keyword">value</span>=<span class="string">"admin"</span>/&gt;</span><br><span class="line">          &lt;resin:<span class="keyword">set</span> <span class="keyword">var</span>=<span class="string">"resin_admin_password"</span> <span class="keyword">value</span>=<span class="string">"123456"</span>/&gt;</span><br><span class="line">          &lt;resin:<span class="keyword">set</span> <span class="keyword">var</span>=<span class="string">"resin_admin_external"</span> <span class="keyword">value</span>=<span class="string">"true"</span>/&gt;</span><br><span class="line"> &lt;resin:<span class="keyword">set</span> <span class="keyword">var</span>=<span class="string">"resin_admin_insecure"</span> <span class="keyword">value</span>=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;/prologue&gt;</span><br><span class="line">      &lt;/web-app&gt;</span><br></pre></td></tr></table></figure>
<p>重启后，进入<a href="http://域名/resin-admin后得到一个密码" target="_blank" rel="external">http://域名/resin-admin后得到一个密码</a><br><img src="/img/resin_monitor/resin3.0_2.PNG" alt="Alt text"></p>
<p>将resin.conf中management标签下替换上面的值</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;user <span class="property">name</span>=<span class="string">"ADMIN"</span> password=<span class="string">"3I9OqhqXNqcGeNZMu8BHlw=="</span>/&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/img/resin_monitor/resin_3.0_4.PNG" alt="Alt text"><br>重启即可！<br><img src="/img/resin_monitor/resin_3.0_3.PNG" alt="Alt text"></p>
<h2 id="resin3-1版本">resin3.1版本</h2><p>在resin.conf的<web-app-default>下面增加: </web-app-default></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">servlet-mapping</span> <span class="attribute">servlet-class</span>=<span class="value">'com.caucho.servlets.ResinStatusServlet'</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/resin-status<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="title">init</span> <span class="attribute">enable</span>=<span class="value">"read"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">security-constraint</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="title">web-resource-collection</span> <span class="attribute">url-pattern</span>=<span class="value">"/resin-status/*"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">security-constraint</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>进入<a href="http://域名/resin-status" target="_blank" rel="external">http://域名/resin-status</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="性能分析过程">性能分析过程</h1><p>公司很多项目用的resin，resin3.0和3.1居多，如果需要监控resin，可以配置一下resin.conf就行了，监控起来也比较方便。<br>]]>
    
    </summary>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[loadrunner11 负载机报错处理]]></title>
    <link href="http://tonylit.me/2016/01/22/loadrunner%E8%B4%9F%E8%BD%BD%E6%9C%BA%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86/"/>
    <id>http://tonylit.me/2016/01/22/loadrunner负载机报错处理/</id>
    <published>2016-01-22T03:37:27.000Z</published>
    <updated>2016-01-22T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>吐槽一下，坑！！！！<br>LR11可以连接负载机，但在跑场景的时候跪了，就连报错也搜不到解决办法，尝试各种设置终于解决！<br><img src="/img/agent_error2.PNG" alt="Alt text"><br><a id="more"></a></p>
<h1 id="负载机设置">负载机设置</h1><p>添加负载机的时候设置一下log的位置就行了<br><img src="/img/agent_error1.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>吐槽一下，坑！！！！<br>LR11可以连接负载机，但在跑场景的时候跪了，就连报错也搜不到解决办法，尝试各种设置终于解决！<br><img src="/img/agent_error2.PNG" alt="Alt text"><br>]]>
    
    </summary>
    
      <category term="loadrunner" scheme="http://tonylit.me/tags/loadrunner/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[服务器上连接数查看]]></title>
    <link href="http://tonylit.me/2016/01/20/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%9F%A5%E7%9C%8B/"/>
    <id>http://tonylit.me/2016/01/20/服务器上连接数查看/</id>
    <published>2016-01-20T03:37:27.000Z</published>
    <updated>2016-01-20T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>平时查看服务器连接数，很多命令记不住<br>在此整理一下！</p>
<a id="more"></a>
<h1 id="查看Web服务器（Nginx_Apache）的并发请求数及其TCP连接状态：">查看Web服务器（Nginx Apache）的并发请求数及其TCP连接状态：</h1><p>netstat -n | awk ‘/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}’</p>
<p>或者：<br>netstat -n|grep  ^tcp|awk ‘{print $NF}’|sort -nr|uniq -c</p>
<p>或者：<br>netstat -n | awk ‘/^tcp/ {++state[$NF]} END {for(key in state) print key,state[key]}’</p>
<p>返回结果一般如下：</p>
<blockquote>
<p>LAST_ACK 5 （正在等待处理的请求数）<br>SYN_RECV 30<br>ESTABLISHED 1597 （正常数据传输状态）<br>FIN_WAIT1 51<br>FIN_WAIT2 504<br>TIME_WAIT 1057 （处理完毕，等待超时结束的请求数）</p>
</blockquote>
<p>其他参数说明：</p>
<blockquote>
<p>CLOSED：无连接是活动的或正在进行<br>LISTEN：服务器在等待进入呼叫<br>SYN_RECV：一个连接请求已经到达，等待确认<br>SYN_SENT：应用已经开始，打开一个连接<br>ESTABLISHED：正常数据传输状态<br>FIN_WAIT1：应用说它已经完成<br>FIN_WAIT2：另一边已同意释放<br>ITMED_WAIT：等待所有分组死掉<br>CLOSING：两边同时尝试关闭<br>TIME_WAIT：另一边已初始化一个释放<br>LAST_ACK：等待所有分组死掉</p>
</blockquote>
<h1 id="查看Nginx运行进程数">查看Nginx运行进程数</h1><blockquote>
<p>ps -ef | grep nginx | wc -l<br>返回的数字就是nginx的运行进程数，如果是apache则执行<br>ps -ef | grep httpd | wc -l</p>
</blockquote>
<h1 id="查看Web服务器进程连接数：">查看Web服务器进程连接数：</h1><blockquote>
<p>netstat -antp | grep 80 | grep ESTABLISHED -c</p>
</blockquote>
<h1 id="查看MySQL进程连接数：">查看MySQL进程连接数：</h1><blockquote>
<p>ps -axef | grep mysqld -c</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>平时查看服务器连接数，很多命令记不住<br>在此整理一下！</p>]]>
    
    </summary>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Loadrunner11录制APP]]></title>
    <link href="http://tonylit.me/2016/01/13/loadrunner11%E5%BD%95%E5%88%B6app/"/>
    <id>http://tonylit.me/2016/01/13/loadrunner11录制app/</id>
    <published>2016-01-13T03:37:27.000Z</published>
    <updated>2016-01-13T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>app的性能测试，loadrunner12已经支持该协议，无奈12的破解….<br>而且我要吐槽一下，12的bug好多啊，而且界面风格非驴非马，看着着实难受！<br>so，怎么使用我们的11来录制app脚本呢？<br><a id="more"></a></p>
<h1 id="原理">原理</h1><p>手机终端和电脑在同一无线网络内，手机终端可以使用代理将请求通过电脑进行转发。</p>
<h1 id="步骤">步骤</h1><h2 id="手机和电脑连接同一wifi">手机和电脑连接同一wifi</h2><p>看一下电脑的ip，记录下来<br><img src="/img/LR_APP/77.png" alt="Alt text"></p>
<h2 id="loadrunner设置">loadrunner设置</h2><p>1.选择web（HTTP/HTML协议）<br><img src="/img/LR_APP/4.png" alt="Alt text"><br>2.选择Win32 Application<br>   Porgram to record:选择C:\Program Files(x86)\HP\LoadRunner\bin\wplus_init_wsock.exe<br>   <img src="/img/LR_APP/3.png" alt="Alt text"></p>
<p>3.录制选项的设置：<br>a. Capture Level Socket level data<br><img src="/img/LR_APP/5.png" alt="Alt text"><br>b. New Entry 配置<br><img src="/img/LR_APP/66.png" alt="Alt text"><br>192.168.51.27:8094是我们进行测试的网址<br>说明：Taregt Server为需要录制的地址，Port设置为80<br>Traffic Forwarding 为代理转发的IP，需要与手机端设置一致，设置为本机不冲突的端口即可，如2008</p>
<ol>
<li>配置完成后保存即可</li>
</ol>
<p>##手机设置<br><img src="/img/LR_APP/88.png" alt="Alt text"><br>其中IP为笔记本IP，代理端口为Loadrunner设置的代理转发端口号</p>
<h1 id="开始录制">开始录制</h1><p>点击开始录制，然后就可以操作手机app了。<br><img src="/img/LR_APP/1.png" alt="Alt text"><br><img src="/img/LR_APP/2.png" alt="Alt text"></p>
<p>如果手机不能走电脑代理，可以参考：<br><a href="http://bbs.zol.com.cn/sjbbs/d297_391410.html" target="_blank" rel="external">http://bbs.zol.com.cn/sjbbs/d297_391410.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>app的性能测试，loadrunner12已经支持该协议，无奈12的破解….<br>而且我要吐槽一下，12的bug好多啊，而且界面风格非驴非马，看着着实难受！<br>so，怎么使用我们的11来录制app脚本呢？<br>]]>
    
    </summary>
    
      <category term="loadrunner" scheme="http://tonylit.me/tags/loadrunner/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015年终总结]]></title>
    <link href="http://tonylit.me/2015/12/28/2015%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://tonylit.me/2015/12/28/2015年终总结/</id>
    <published>2015-12-28T03:37:27.000Z</published>
    <updated>2015-12-28T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>仔细回忆一整年的工作，点点滴滴，有苦有甜。<br>写在前面<br>今年的一月初进入部门，主要有三个工作需要接手：FDS维护、MIC测试环境发布、性能测试，之前对这三块都是一知半解，短时间内熟悉这些工作，可谓是压力很大。另外这几块工作需要自己去学习，相关的指导和文档很少，势必要走一些弯路。 大概在7月份才掌握这几块工作，比自己的预期晚了2个多月。一路走来，自己的努力、同事的鼓励帮助与包容、领导的关心与指导，我感到很温暖，感谢所有帮助我的人。<br><a id="more"></a></p>
<h1 id="2015工作总结如下：">2015工作总结如下：</h1><h1 id="结果和产出">结果和产出</h1><h2 id="一、FDS维护方面：">一、FDS维护方面：</h2><ol>
<li>bug修复与优化<br>增加事务管理、Micstatic应用优先发布控制、单应用发布功能、部署优先级优化等。 </li>
<li>配合新版FTM，升级FDS和DNS服务接口<br>18个接口升级并联调，线上未发现问题，升级比较成功。 </li>
<li>老版FDS完全迁移新版FDS<br>之前还有小部分功能在老版FDS中，将其全部迁移至新版FDS，目前老版已废弃。 </li>
<li>内外网迁移工作<br>配合MIC外网迁移，FDS以及测试环境迁移外网。 </li>
<li>FDS发布管理系统-直观的展现版本发布进度、日志、报错等<br>做这个项目主要因为处理测试环境问题耗时耗力，几十个版本三百台机器查找问题很痛苦。 4月份第一版上线，<a href="http://192.168.43.10:22222/main，将测试版本发布过程、发布失败的版本、机器IP、原因很清楚的展示，在环境问题处理上节省很多时间。" target="_blank" rel="external">http://192.168.43.10:22222/main，将测试版本发布过程、发布失败的版本、机器IP、原因很清楚的展示，在环境问题处理上节省很多时间。</a> 目前已推广至整个MIC测试部以及研发部门，功能已经比较多，包括单应用发布功能暂时也集成在里面。<h2 id="二、测试环境方面：">二、测试环境方面：</h2></li>
<li>环境问题处理<br>测试环境问题集中在MIC，多数问题测试人员结合FDS发布管理系统可以自己处理。 </li>
<li>内外网迁移<br>测试环境迁移至外网，由于前期准备不足，迁移后发布出现很多问题。尤其在maven仓库和micstatic应用上，maven仓库jar包不全，前期全部手动将jar包拷贝到发布机器；由于svn路径的问题，导致外网的micstatic编译时间很长，与邢世康配合解决该问题。 </li>
<li>测试环境搭建<br>今年新增47个应用，后面考虑将环境搭建工作自动化。 <h2 id="三、_性能测试方面：">三、 性能测试方面：</h2>工作不是很多，大概22个测试任务。包括数据库、JAVA、接口、IM、页面、功能。<br>印象比较深刻的是中文版MRO和FTM性能测试，MRO首页调优后性能提升4倍（首页6.5s-&gt;1.6s），FTM调优后性能提升10倍以上(新建用例20s-&gt;2s)。<br>最难的是TM的性能测试，需要用socket模拟长连接。<br>功能最多的是优采企业版，一共30个功能，c3p0连接池释放问题对性能影响比较大。<br>整体来看，性能测试做的不多，调优这块很大欠缺，只能说马马虎虎完成工作。<h2 id="四、分享方面：">四、分享方面：</h2>部门分享比较少，只有性能测试实践和FDS发布流程2个分享。<br>兴趣小组内分享比较多，组织小组活动13次，10次性能测试方面分享。 <h1 id="成长和进步">成长和进步</h1>年初，结合工作在笔记本上大概的列出全年学习的方向：测试环境、性能测试、java，当然列出的点比较多，很多细化的东西，回头看看，大多方面都完成了。<br>1、测试环境<br>现在可以快速搭建测试环境，处理环境问题比较得心应手，快速解决问题。相比之前对环境一知半解的，处理问题花费大半天时间，确实有很大的进步。<br>2、性能测试<br>相比去年录制脚本还存在问题，现在可以独立完成整个性能测试流程，并且能够有效定位到性能问题，进行简单的调优工作，有不小的进步。但后面的路还很长，自己也是刚刚入门级，继续加油吧。<br>3、java<br>一直没好的机会去写。接手FDS以后，重新把springmvc拾起来，对FDS进行优化、写了FDS发布管理系统，学习了一些前后端的技术，也算对java真正入了门。<br>4、其他<br>今年兴趣小组内的分享比较多，也愿意去做这种分享，帮助大家的同时自己也有所提升。<h1 id="不足和差距">不足和差距</h1>如果给全年的工作打分，我给自己打75分。很多想去做的事情没去做，很多要去学习的知识也没去学。<br>目前的工作也只是工作，没有多少创新。<br>测试环境发布时间比较长，一直也没有解决掉该问题。<br>性能测试很多方面只掌握到了皮毛，实际碰到问题不知道如何下手解决。<br>平时缺少总结，很多工作做完了就做完了，该犯的错下次还在犯。<br>当然，问题不止这些，明年对自己严格一些，多做改变。<h1 id="2016年规划">2016年规划</h1>第一：自动化性能测试平台搭建，结合jmeter、jenkins、maven进行自动化性能测试，希望明年可以将平台搞起来。<br>第二：测试环境docker化，现在很多云平台都使用docker，性能、资源使用方面都有很大提升，不过这块还在学习实践当中，希望明年尽快将docker用在测试环境上。<br>第三：测试环境发布完全托管，包括问题定位，配置文件替换，新应用搭建。目前环境工作也就这几块占据比重，明年可以结合FDS发布管理系统做一些功能。<br>规划的再好，不去做也没用，明年对自己严格一些，多想多做吧。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>仔细回忆一整年的工作，点点滴滴，有苦有甜。<br>写在前面<br>今年的一月初进入部门，主要有三个工作需要接手：FDS维护、MIC测试环境发布、性能测试，之前对这三块都是一知半解，短时间内熟悉这些工作，可谓是压力很大。另外这几块工作需要自己去学习，相关的指导和文档很少，势必要走一些弯路。 大概在7月份才掌握这几块工作，比自己的预期晚了2个多月。一路走来，自己的努力、同事的鼓励帮助与包容、领导的关心与指导，我感到很温暖，感谢所有帮助我的人。<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[export、import导出导入docker容器]]></title>
    <link href="http://tonylit.me/2015/12/22/docker%20import%E5%92%8Cexport/"/>
    <id>http://tonylit.me/2015/12/22/docker import和export/</id>
    <published>2015-12-22T03:37:27.000Z</published>
    <updated>2015-12-22T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<h1 id="导入容器快照">导入容器快照</h1><p>可以使用docker import导入docker的镜像，已centos系统为例，我们导入<a href="http://download.openvz.org/template/precreated/" target="_blank" rel="external">centos-6-x86_64.tar.gz</a></p>
<blockquote>
<p>Usage: docker import [OPTIONS] URL|- [REPOSITORY[:TAG]]</p>
<p>Create an empty filesystem image and import the contents of the<br>tarball (.tar, .tar.gz, .tgz, .bzip, .tar.xz, .txz) into it, then<br>optionally tag it.<br><a id="more"></a></p>
</blockquote>
<h2 id="实例">实例</h2><blockquote>
<p>cat centos-6-x86_64.tar.gz|docker import - test/centos-6:v1.0<br><img src="/img/docker/docker_import.PNG" alt="Alt text"></p>
</blockquote>
<p>此外，也可以通过指定 URL 或者某个目录来导入，例如</p>
<blockquote>
<p> docker import <a href="http://example.com/exampleimage.tgz" target="_blank" rel="external">http://example.com/exampleimage.tgz</a> example/imagerepo</p>
</blockquote>
<p>*注：用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。</p>
<h1 id="导出容器">导出容器</h1><p>先启动一下容器：</p>
<blockquote>
<p>docker run -t -i 5de0ac2f6f7e /bin/bash</p>
</blockquote>
<p>两个参数，-t表示给容器tty终端，-i表示可以interactive，可以交互。</p>
<p><img src="/img/docker/docker_ps.PNG" alt="Alt text"></p>
<blockquote>
<p>docker export 5d73efeb9a38 &gt; tonylit_centos6.tar</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="导入容器快照">导入容器快照</h1><p>可以使用docker import导入docker的镜像，已centos系统为例，我们导入<a href="http://download.openvz.org/template/precreated/">centos-6-x86_64.tar.gz</a></p>
<blockquote>
<p>Usage: docker import [OPTIONS] URL|- [REPOSITORY[:TAG]]</p>
<p>Create an empty filesystem image and import the contents of the<br>tarball (.tar, .tar.gz, .tgz, .bzip, .tar.xz, .txz) into it, then<br>optionally tag it.<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[staf使用]]></title>
    <link href="http://tonylit.me/2015/12/22/staf%E4%BD%BF%E7%94%A8/"/>
    <id>http://tonylit.me/2015/12/22/staf使用/</id>
    <published>2015-12-22T03:37:27.000Z</published>
    <updated>2015-12-22T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<h1 id="STAF概念：">STAF概念：</h1><p>全称：Software Testing AntoMation Framework,软件测试自动化框架，为测试人员提供了一个端到端的自动化测试解决方案。<br>每台装有STAF环境的机器都是对等的，一个端可以直接调用另一个端提供服务。采用P2P架构，没有服务端、客户端之分，任何一台机器都可以向其他的机器发送请求。可以利用STAF的这种特性来实现分布式执行的功能。</p>
<hr>
<a id="more"></a>
<h1 id="STAF在linunx下的安装：">STAF在linunx下的安装：</h1><p>1.下载STAF的安装包STAF3412-linux.tar.gz</p>
<p>2.解压：tar -xzvf  STAF3412-linux.tar.gz</p>
<p>3.解压缩完进入staf文件夹，执行./STAFIns，一直回车，安装OK</p>
<p>4.在环境变量中加入STAF配置<br>编辑 /etc/profile，加入以下配置信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PATH=<span class="string">"/usr/local/staf/bin:<span class="variable">$&#123;PATH&#125;</span>"</span> <span class="built_in">export</span> STAFCONVDIR=/usr/<span class="built_in">local</span>/staf/codepage <span class="built_in">export</span></span><br><span class="line">LD_LIBRARY_PATH=<span class="string">"/usr/local/staf/lib:<span class="variable">$&#123;LD_LIBRARY_PATH&#125;</span>"</span> <span class="built_in">export</span></span><br><span class="line">CLASSPATH=<span class="string">"/usr/local/staf/lib/JSTAF.jar:/usr/local/staf/samples/demo/STAFDemo.jar:<span class="variable">$&#123;CLASSPATH&#125;</span>"</span></span><br></pre></td></tr></table></figure></p>
<p>5.输入source /etc/profile,让配置文件生效</p>
<p>6.修改staf配置文件，在staf安装目录下（默认会安装在/usr/local/staf/）的bin文件夹中-STAF.cfg<br><strong>参数格式</strong></p>
<blockquote>
<p>#当错误条件发生的时候形成trace信息 trace enable tracepoints “error deprecated”  </p>
<p>#Enable TCP/IP connections</p>
<p>#在网络上发送和接受STAF请求，默认端口为6500。如果需要定义自己的端口可以使用interface tcp library STAFTCP option Secure=No  option Port=6600</p>
<p>#interface ssl library STAFTCP option Secure=Yes option Port=6550 interface tcp library STAFTCP option Secure=No  option Port=55500  </p>
<p>#Set default local trust</p>
<p>#设置本地机器为full access 信任级别 trust machine local://local level 5 trust machine <em>.</em>.<em>.</em> level 5</p>
<p>#Add default service loader</p>
<p>#注册默认的Service Loader。可以动态加载Log,Monitor等服务 serviceloader library STAFDSLS</p>
</blockquote>
<p>TRUST LEVEL 5 MACHINE，利用命令staf local trust list. 可以查看本机的信任机器<br>每种请求都有安全级别的限制，只有你达到这种安全级别才能发送这种请求。<br>分为六级，级别0-5,0最低，5最高</p>
<blockquote>
<p> Level 0 - No access<br>    Level 1 - Restricted access. Only PING and helps available.<br>    Level 2 - Limited access. Only query/view facilities available.<br>    Level 3 - Standard access. Non-destructive updates allowed, e.g., logging.<br>    Level 4 - Advanced access. Update abilities, e.g., copying files, deleting log files.<br>    Level 5 - All access, e.g., SHUTDOWN, Process invocation, Trust definition manipulation</p>
</blockquote>
<p>默认是trust machine local://local level 5     //表示本地local的操作是5级权限<br>如果需要外部的pc能够 操作本地的staf，发送各种请求的话，需要执行ip地址或是网段<br>trust machine ssl://192.100.<em> level 5   //表示 对于192.100 网段开放 5级权限  针对ssl<br>trust machine tcp://192.100.</em> level 5    //表示 对于192.100 网段开放 5级权限  针对tcp</p>
<p>7.启动STAF服务<br>cd /usr/local/staf/bin<br>./STAFProc &amp;<br>查看是否启动</p>
<p>8.确认已经安装完成<br>staf local service list<br><img src="/img/staf/staf_1.PNG" alt="Alt text"></p>
<p>说明安装成功了</p>
<h1 id="STAF请求格式">STAF请求格式</h1><p>STAF  <endpoint>  &lt; Service&gt;  <request></request></endpoint></p>
<p><endpoint> 远程机器的IP或者localhost。表示向哪台机器发送请求</endpoint></p>
<p><server> Endpoint端机器上STAF环境中的服务名称。表示向哪个服务发送请求</server></p>
<p><request>请求的内容。<br> 例子：<br>staf 192.168.10.18 ping ping<br><img src="/img/staf/staf_2.PNG" alt="Alt text"></request></p>
<h1 id="STAF服务">STAF服务</h1><p>STAF所有功能都是通过服务实现的<br>主要有两种类型的服务：内部服务（Internal Service），外部服务(External Service)。每种服务都可以处理多种请求，每种请求都有安全级别限制<br>内部服务：开启staf这些服务就可以工作了。一般被集成到STAFProc,一般都是一些比较基本常用的服务。<br>外部服务：不是staf基本服务，必须将服务注册到staf才可以使用。需要动态载入，可执行代码不在STAFProc中，一般都在jar中或者外部dll库中。<br><img src="/img/staf/staf_3.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="STAF概念：">STAF概念：</h1><p>全称：Software Testing AntoMation Framework,软件测试自动化框架，为测试人员提供了一个端到端的自动化测试解决方案。<br>每台装有STAF环境的机器都是对等的，一个端可以直接调用另一个端提供服务。采用P2P架构，没有服务端、客户端之分，任何一台机器都可以向其他的机器发送请求。可以利用STAF的这种特性来实现分布式执行的功能。</p>
<hr>]]>
    
    </summary>
    
      <category term="工作" scheme="http://tonylit.me/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[loadrunner测试webservice]]></title>
    <link href="http://tonylit.me/2015/12/20/loadrunner%E6%B5%8B%E8%AF%95webservice/"/>
    <id>http://tonylit.me/2015/12/20/loadrunner测试webservice/</id>
    <published>2015-12-20T03:37:27.000Z</published>
    <updated>2015-12-20T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>现在很多应用都提供webservice服务，在做性能测试的时候免不了去测试webservice，我们来看看怎样使用LR进行测试。<br><a id="more"></a></p>
<h1 id="什么是webservice">什么是webservice</h1><p>测试之前先了解下什么是webservice<br>WebService是一个SOA（面向服务的编程）的结构，它不依赖语言、不依赖平台，可以实现不同语言间的相互调用，通过网络进行基于Http协议的网络应用间的交互。<br>一句话概括：WebService是一种跨编程语言和跨操作系统平台的远程调用技术。<br>WebService=WSDL+SOAP+UDDI（webservice的注册）<br><img src="/img/webservice/webservice_1.PNG" alt="Alt text"></p>
<h1 id="loadruner怎样测试webservice">loadruner怎样测试webservice</h1><p>1.打开vugen，选择webservice协议<br><img src="/img/webservice/webservice_2.PNG" alt="Alt text"></p>
<p>2.导入WSDL<br><img src="/img/webservice/webservice_3.PNG" alt="Alt text"></p>
<p>3.点击import后，输入url，这里的url是开发提供的wsdl接口url（如：<a href="http://localhost:9001/Service/ServiceHello?wsdl）" target="_blank" rel="external">http://localhost:9001/Service/ServiceHello?wsdl）</a></p>
<p><img src="/img/webservice/webservice_4.PNG" alt="Alt text"></p>
<p>4.点击OK<br>5.选择目标测试函数<br><img src="/img/webservice/webservice_5.PNG" alt="Alt text"></p>
<p>6.填写参数值，将返回值放入变量中<br><img src="/img/webservice/webservice_6.PNG" alt="Alt text"><br><img src="/img/webservice/webservice_7.PNG" alt="Alt text"></p>
<p>7.点击OK后，自动生成脚本<br><img src="/img/webservice/webservice_8.PNG" alt="Alt text"></p>
<p>8.我们可以进行参数化<br><img src="/img/webservice/webservice_9.PNG" alt="Alt text"></p>
<p>9.运行脚本<br><img src="/img/webservice/webservice_10.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>现在很多应用都提供webservice服务，在做性能测试的时候免不了去测试webservice，我们来看看怎样使用LR进行测试。<br>]]>
    
    </summary>
    
      <category term="loadrunner" scheme="http://tonylit.me/tags/loadrunner/"/>
    
      <category term="工作" scheme="http://tonylit.me/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java调用shell脚本]]></title>
    <link href="http://tonylit.me/2015/12/19/java%E8%B0%83%E7%94%A8shell%E8%84%9A%E6%9C%AC/"/>
    <id>http://tonylit.me/2015/12/19/java调用shell脚本/</id>
    <published>2015-12-19T03:37:27.000Z</published>
    <updated>2015-12-19T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>测试环境发布系统，通过java调用远程机器上的shell脚本，实现自动化发布工作。<br>在此记录一下java调用shell脚本的实现。<br><a id="more"></a><br>需要的jar包：ganymed-ssh2-build210-sources.jar 和apache的commons-io包commons-io-1.3.2.jar<br>pom.xml依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">     </span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>ch.ethz.ganymed<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>ganymed-ssh2<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>build210<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最终实现的情况：<br>远程机器：192.168.xx.xx<br>用户名：xxxx<br>密码：xxxx<br>登陆后执行服务器上的脚本 /master/bin/a.sh<br> 代码比较简单，如下 a.sh脚本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"aaa"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"bbb"</span></span><br><span class="line"><span class="built_in">exit</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>java实现：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.focustech.fds.common.utils;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> ch.ethz.ssh2.ChannelCondition;</span><br><span class="line"><span class="keyword">import</span> ch.ethz.ssh2.Connection;</span><br><span class="line"><span class="keyword">import</span> ch.ethz.ssh2.Session;</span><br><span class="line"><span class="keyword">import</span> ch.ethz.ssh2.StreamGobbler;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * RmtShellExecutor.java</span><br><span class="line"> * </span><br><span class="line"> * @author lit</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> class RmtShellExecutor &#123;</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="comment">/**  */</span></span><br><span class="line">    <span class="keyword">private</span> Connection conn;</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="comment">/** 远程机器IP */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> ip;</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="comment">/** 用户名 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> usr;</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="comment">/** 密码 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> psword;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> charset = Charset.defaultCharset().toString();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> TIME_OUT = <span class="number">1000</span> * <span class="number">5</span> * <span class="number">60</span>;</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 构造函数</span><br><span class="line">     * </span><br><span class="line">     * @param ip</span><br><span class="line">     * @param usr</span><br><span class="line">     * @param ps</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> RmtShellExecutor() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> RmtShellExecutor(<span class="keyword">String</span> ip, <span class="keyword">String</span> usr, <span class="keyword">String</span> ps) &#123;</span><br><span class="line">        <span class="keyword">this</span>.ip = ip;</span><br><span class="line">        <span class="keyword">this</span>.usr = usr;</span><br><span class="line">        psword = ps;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 登录</span><br><span class="line">     * </span><br><span class="line">     * @return</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">boolean</span> login() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        conn = <span class="keyword">new</span> Connection(ip);</span><br><span class="line">        conn.connect();</span><br><span class="line">        <span class="keyword">return</span> conn.authenticateWithPassword(usr, psword);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 执行脚本</span><br><span class="line">     * </span><br><span class="line">     * @param cmds</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> exec(<span class="keyword">String</span> cmds) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        InputStream stdOut = <span class="keyword">null</span>;</span><br><span class="line">        InputStream stdErr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">String</span> outStr = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">String</span> outErr = <span class="string">""</span>;</span><br><span class="line">        <span class="built_in">int</span> ret = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (login()) &#123;</span><br><span class="line">                <span class="comment">// 创建session</span></span><br><span class="line">                Session session = conn.openSession();</span><br><span class="line">                <span class="comment">// 执行远程脚本.</span></span><br><span class="line">                session.execCommand(cmds);</span><br><span class="line">                stdOut = <span class="keyword">new</span> StreamGobbler(session.getStdout());</span><br><span class="line">                outStr = processStream(stdOut, charset);</span><br><span class="line">                stdErr = <span class="keyword">new</span> StreamGobbler(session.getStderr());</span><br><span class="line">                outErr = processStream(stdErr, charset);</span><br><span class="line">                session.waitForCondition(ChannelCondition.EXIT_STATUS, TIME_OUT);</span><br><span class="line">                ret = session.getExitStatus();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"登录远程机器失败"</span> + ip); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;</span><br><span class="line">            IOUtils.closeQuietly(stdOut);</span><br><span class="line">            IOUtils.closeQuietly(stdErr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * @param in</span><br><span class="line">     * @param charset</span><br><span class="line">     * @return</span><br><span class="line">     * @throws IOException</span><br><span class="line">     * @throws UnsupportedEncodingException</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> processStream(InputStream in, <span class="keyword">String</span> charset) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] buf = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span> (in.read(buf) != -<span class="number">1</span>) &#123;</span><br><span class="line">            sb.<span class="built_in">append</span>(<span class="keyword">new</span> <span class="keyword">String</span>(buf, charset));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// bash参数：bash /master/bin/a.sh</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> execute(<span class="keyword">String</span> bash) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        RmtShellExecutor exe = <span class="keyword">new</span> RmtShellExecutor(<span class="string">"192.168.10.199"</span>, <span class="string">"admin"</span>, <span class="string">"focus1234"</span>);</span><br><span class="line">        System.out.<span class="built_in">println</span>(exe.exec(bash));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~</span><br></pre></td></tr></table></figure></p>
<p>结果如下：<br>aaa<br>bbb<br>1</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>测试环境发布系统，通过java调用远程机器上的shell脚本，实现自动化发布工作。<br>在此记录一下java调用shell脚本的实现。<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
      <category term="工作" scheme="http://tonylit.me/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java线程状态学习]]></title>
    <link href="http://tonylit.me/2015/12/18/java%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%AD%A6%E4%B9%A0/"/>
    <id>http://tonylit.me/2015/12/18/java线程状态学习/</id>
    <published>2015-12-18T03:37:27.000Z</published>
    <updated>2015-12-18T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>一直对java线程的几种状态认识的模模糊糊，平时在对java进行监控的时候，用jstack打出一堆线程状态，看的不是很懂，另外网上一堆乌七八糟的东西，看着着实难受，自己学习一下，整理整理。<br><a id="more"></a></p>
<h1 id="可以直接看java-lang-Thread-State类，里面对几种状态有详细解释。">可以直接看java.lang.Thread.State类，里面对几种状态有详细解释。</h1><blockquote>
<p><strong>NEW</strong> 状态是指线程刚创建, 尚未启动</p>
<p><strong>RUNNABLE</strong> 状态是线程正在正常运行中, 当然可能会有某种耗时计算/IO等待的操作/CPU时间片切换等, 这个状态下发生的等待一般是其他系统资源, 而不是锁, Sleep等</p>
<p><strong>BLOCKED </strong> 这个状态下, 是在多个线程有同步操作的场景, 比如正在等待另一个线程的synchronized 块的执行释放, 或者可重入的 synchronized块里别人调用wait() 方法, 也就是这里是线程在等待进入临界区  </p>
<p><strong>WAITING</strong>  这个状态下是指线程拥有了某个锁之后, 调用了他的wait方法, 等待其他线程/锁拥有者调用 notify / notifyAll 一遍该线程可以继续下一步操作, 这里要区分 BLOCKED 和 WATING 的区别, 一个是在临界点外面等待进入. 一个是在理解点里面wait等待别人notify, 线程调用了join方法 join了另外的线程的时候, 也会进入WAITING状态,<br>等待被他join的线程执行结束</p>
<p><strong>TIMED_WAITING</strong>  这个状态就是有限的(时间限制)的WAITING, 一般出现在调用wait(long), join(long)等情况下, 另外一个线程sleep后, 也会进入TIMED_WAITING状态</p>
<p><strong>TERMINATED</strong> 这个状态下表示 该线程的run方法已经执行完毕了, 基本上就等于死亡了(当时如果线程被持久持有, 可能不会被回收)</p>
</blockquote>
<hr>
<p> 上面的几段话仔细读一读，想一想</p>
<h1 id="下面我们来写写代码，让这些线程进入以上几种状态：">下面我们来写写代码，让这些线程进入以上几种状态：</h1><h2 id="NEW，这个比较easy：">NEW，这个比较easy：</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Thread</span> <span class="keyword">thread</span> = <span class="literal">new</span> <span class="keyword">Thread</span>();</span><br><span class="line"> System<span class="built_in">.</span>out<span class="built_in">.</span>println(<span class="keyword">thread</span><span class="built_in">.</span>getState());</span><br></pre></td></tr></table></figure>
<p>输出NEW</p>
<h2 id="RUNABLE，也easy，将线程start，同时代码里面不要wait或者sleep">RUNABLE，也easy，将线程start，同时代码里面不要wait或者sleep</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Thread thread = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">     @<span class="function">Override</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">             System.out.println(currentThread().getState());</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;;</span><br><span class="line"> thread.start();</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br>RUNNABLE<br><img src="/img/thread/runnable.png" alt="Alt text"></p>
</blockquote>
<h2 id="BLOCKED，这个需要至少两个线程，然后互相等待synchronized">BLOCKED，这个需要至少两个线程，然后互相等待synchronized</h2><pre><code><span class="comment"><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">final Object lock = new Object<span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"> Thread run = new Thread<span class="params">()</span> &#123;</span><br><span class="line">     @Override</span><br><span class="line">     public void run<span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">for</span> <span class="params">(int i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++)</span> &#123;</span><br><span class="line">             synchronized <span class="params">(lock)</span> &#123;</span><br><span class="line">                 System.out.println<span class="params">(currentThread<span class="params">()</span>.getState<span class="params">()</span>)</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> Thread t1 = new Thread<span class="params">(run)</span>;</span><br><span class="line"> t1.setName<span class="params">( “t1”)</span>;</span><br><span class="line"> Thread t2 = new Thread<span class="params">(run)</span>;</span><br><span class="line"> t2.setName<span class="params">( “t2”)</span>;</span><br><span class="line"> t1.start<span class="params">()</span>;</span><br><span class="line"> t2.start<span class="params">()</span>;</span><br></pre></td></tr></table></figure></span>
</code></pre><p><img src="/img/thread/BLOCKED.png" alt="Alt text"><br>这时候, 一个在RUNNABLE, 另一个就会在BLOCKED (等待另一个线程的 System.out.println.. 这是个IO操作, 属于系统资源, 不会造成WAITING</p>
<h2 id="WAITING,这个需要用到生产者消费者模型,_当生产者生产过慢的时候,_消费者就会等待生产者的下一次notify">WAITING,这个需要用到生产者消费者模型, 当生产者生产过慢的时候, 消费者就会等待生产者的下一次notify</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">final Object <span class="keyword">lock</span> = <span class="keyword">new</span> Object();</span><br><span class="line">         Thread t1 = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">              @<span class="function">Override</span><br><span class="line">              <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                 </span><br><span class="line">                  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                 </span><br><span class="line">                  <span class="keyword">while</span>(<span class="keyword">true</span> )&#123;</span><br><span class="line">                       synchronized (<span class="keyword">lock</span>) &#123;</span><br><span class="line">                           <span class="keyword">try</span> &#123;</span><br><span class="line">                               <span class="keyword">lock</span>.wait();</span><br><span class="line">                          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                          &#125;</span><br><span class="line">                          System. <span class="keyword">out</span>.println(i++);</span><br><span class="line">                      &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;;</span><br><span class="line">         </span><br><span class="line">         Thread t2 = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">              @<span class="function">Override</span><br><span class="line">              <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                 </span><br><span class="line">                  <span class="keyword">while</span>(<span class="keyword">true</span> )&#123;</span><br><span class="line">                       synchronized (<span class="keyword">lock</span>) &#123;</span><br><span class="line">                           <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; <span class="number">10000000</span>; i++)&#123;</span><br><span class="line">                              System. <span class="keyword">out</span>.println(i);</span><br><span class="line">                          &#125;</span><br><span class="line">                          <span class="keyword">lock</span>.notifyAll();</span><br><span class="line">                      &#125;</span><br><span class="line">                      </span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;;</span><br><span class="line">         </span><br><span class="line">         t1.setName( “^^t1^^”);</span><br><span class="line">         t2.setName( “^^t2^^”);</span><br><span class="line">         </span><br><span class="line">         t1.start();</span><br><span class="line">         t2.start();</span><br></pre></td></tr></table></figure>
<p><img src="/img/thread/WAITTING.png" alt="Alt text"></p>
<h1 id="TIMED_WAITING,_这个仅需要在4的基础上,_在wait方法加上一个时间参数进行限制就OK了">TIMED_WAITING, 这个仅需要在4的基础上, 在wait方法加上一个时间参数进行限制就OK了</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">synchronized (<span class="keyword">lock</span>) &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">lock</span>.wait(<span class="number">60</span> * <span class="number">1000</span>L);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">   &#125;</span><br><span class="line">   System. <span class="keyword">out</span> .println(i++);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p> <img src="/img/thread/TIMED_WAITING.png" alt="Alt text"></p>
<p>另外看stack的输出,  他叫 TIMED_WAITING(on  object monitor) , 说明括号后面还有其他的情况, 比如sleep, 我们直接把t2的for循环改成sleep试试:<br> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">synchronized (lock) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">          sleep(<span class="number">30</span>*<span class="number">1000L</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    lock.notifyAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/thread/TIMED_WAITING_2.png" alt="Alt text"><br>t2的state是 TIMED_WAITING( sleeping),  而t1依然是on object monitor , 因为t1还是wait在等待t2 notify, 而t2是自己sleep</p>
<h2 id="TERMINATED,_这个状态只要线程结束了run方法,_就会进入了">TERMINATED, 这个状态只要线程结束了run方法, 就会进入了</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>一直对java线程的几种状态认识的模模糊糊，平时在对java进行监控的时候，用jstack打出一堆线程状态，看的不是很懂，另外网上一堆乌七八糟的东西，看着着实难受，自己学习一下，整理整理。<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[系统监控-nmon使用]]></title>
    <link href="http://tonylit.me/2015/12/17/%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7-nmon%E4%BD%BF%E7%94%A8/"/>
    <id>http://tonylit.me/2015/12/17/系统监控-nmon使用/</id>
    <published>2015-12-17T03:37:27.000Z</published>
    <updated>2015-12-17T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>压力测试的时候，可以使用nmon收集服务器资源使用情况。工具很不错，收集的结果展示起来也比较直观，是性能测试监控工具的一把好刷子。<br><img src="/img/nmon/nmon_2.PNG" alt="Alt text"></p>
<a id="more"></a>
<h1 id="Nmon简介">Nmon简介</h1><p>Nmon是由IBM提供的，免费监控AIX系统和 linux系统资源的工具，使用比较广泛。相对于其他的监控工具来说，nmon所记录的信息比较全面，它能在系统运行中实时地捕捉系统资源的使用情况，并 能输出结果到文件中，然后通过nmon_analyzer工具产生数据文件和图形化的结果。<br>另外，它不会消耗大量的CPU周期，通常低于百分之一。<br>nmon所记录的数据包含以下几个方面：</p>
<blockquote>
<p>● cpu占用率<br>● 内存使用情况<br>● 磁盘I/O速度、传输和读写比<br>● 文件系统的使用率<br>● 网络I/O速度、传输和读写比率、错误统计率与传输包的大小<br>● 消耗资源最多的进程<br>● 计算机详细信息和资源<br>● 页面空间和页面I/O速度<br>●用户自定义的磁盘组<br>● 网络文件系统</p>
</blockquote>
<h1 id="Nmon安装使用">Nmon安装使用</h1><p>1.首先检查自己的操作系统，我这里为centos5.8 64位<br>下载nmon监控工具和nmon analyser分析工具<br><a href="http://pan.baidu.com/s/1nuicjHJ" target="_blank" rel="external">http://pan.baidu.com/s/1nuicjHJ</a><br>2.将nmon监控工具放在监控服务器上，解压；该文件无执行权限，给它加上chmod +x mon_x86_64_centos5<br><img src="/img/nmon/nmon_1.PNG" alt="Alt text"><br>3.运行./nmon_x86_64_centos5，便可进入nmon监控界面<br><img src="/img/nmon/nmon_2.PNG" alt="Alt text"></p>
<p>按h键，查看选项<br><img src="/img/nmon/nmon_3.PNG" alt="Alt text"><br>4.我们键入c，m，d，看下cpu，内存，磁盘I/O<br><img src="/img/nmon/nmon_4.PNG" alt="Alt text"></p>
<h1 id="nmon数据采集与分析">nmon数据采集与分析</h1><blockquote>
<p>./nmon_x86_64_centos5 -f -t -s 30 -c 180<br>-f:按标准格式输出文件：<hostname>_YYYYMMDD_HHMM.nmon<br>-t:输出中包括占用率较高的进程<br>-s 30：每30秒收集一次数据<br>-c 180：一共收集180次</hostname></p>
</blockquote>
<p>生成的文件如下：<br><img src="/img/nmon/nmon_5.PNG" alt="Alt text"><br>为了分析nmon监控获得的结果，我们用nmon_analyser工具图形化监控结果<br>打开nmon_analyser<br><img src="/img/nmon/nmon_6.PNG" alt="Alt text"></p>
<p>将我们监控的结果添加进来，自动生成图形：<br><img src="/img/nmon/nmon_7.PNG" alt="Alt text"></p>
<h1 id="性能参数介绍：">性能参数介绍：</h1><p>nmon analyser生成的execl中包括很多工作表<br><img src="/img/nmon/nmon_8.PNG" alt="Alt text"></p>
<blockquote>
<p>?    系统汇总（对应SYS_SUMM标签），其中蓝线为cpu占用的变化情况，粉线代表磁盘IO的变化情况<br>?    磁盘读写情况汇总（对应DIS_SUMM标签），其中蓝色为磁盘读的速率KB/S，紫色为磁盘写的速率KB/S<br>?    内存情况汇总（对应MEM标签），曲线表示内存剩余量（MB）</p>
</blockquote>
<h2 id="SYS_SUMM标签页：系统汇总页面">SYS_SUMM标签页：系统汇总页面</h2><blockquote>
<p> User%  ：用户进程占CPU时间百分比  Sys%    ：线程和中断占用CPU时间百分比<br>Wait%    ：所有进程线程被阻塞等待完成一次IO所占CPU时间百分比 Idle%    ：CPU空闲时间百分比 CPU%    ：CPU利用率的百分比</p>
</blockquote>
<p>如果一个CPU被充分利用，比例应该是：65%~70% user time，30%~35% system time，0%~5% idle time</p>
<h2 id="AAA标签页：系统信息">AAA标签页：系统信息</h2><p>页面信息包括：执行的命令、主机cpu数、操作系统版本信息、主机名等信息<br><img src="/img/nmon/nmon_9.PNG" alt="Alt text"></p>
<h2 id="CPU使用情况：标签页（CPU_ALL,CPU_SUMM,CPU001，CPU002）">CPU使用情况：标签页（CPU_ALL,CPU_SUMM,CPU001，CPU002）</h2><p>主机CPU使用情况以及单颗CPU的使用情况<br><img src="/img/nmon/nmon_10.PNG" alt="Alt text"></p>
<h2 id="磁盘读写情况：标签页（DISK_SUMM/DISKBUSY/DISKREAD/DISKWRITE/DISKXFER）">磁盘读写情况：标签页（DISK_SUMM/DISKBUSY/DISKREAD/DISKWRITE/DISKXFER）</h2><p>磁盘的读写、及I/O的统计信息，系统各磁盘分区的情况。<br><img src="/img/nmon/nmon_11.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>压力测试的时候，可以使用nmon收集服务器资源使用情况。工具很不错，收集的结果展示起来也比较直观，是性能测试监控工具的一把好刷子。<br><img src="/img/nmon/nmon_2.PNG" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="工作" scheme="http://tonylit.me/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SoupUI接口性能测试]]></title>
    <link href="http://tonylit.me/2015/12/16/soupui%E6%8E%A5%E5%8F%A3%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <id>http://tonylit.me/2015/12/16/soupui接口性能测试/</id>
    <published>2015-12-16T03:37:27.000Z</published>
    <updated>2015-12-16T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>SoapUI做接口测试时，可能会忽略它有压力测试的套件LoadTest，在做WebServices接口压力测试时，比loadrunner更胜一筹。<br><a id="more"></a><br><img src="/img/soupui/soupui_1.PNG" alt="Alt text"><br>Threads：线程数量，相对于LR中的虚拟用户数<br>Strategy：我们选择Simple就可以了<br>Test Delay：用例之间的等待时间，相对于LR中的思考时间<br>Random：思考时间取值区间，相对于LR中思考时间设置里面的Use Random Percent…<br>Limit：运行时间，相对于LR中的持续时间<br>这里的设置项比较少，但一般情况是够用了；另外结果的展现部分和LR是没法比较的。最主要的它的免费的。<br>在WebServices接口测试方面，准确性比LR高。至于原因（网上说的）：<br>soapui 是专门针对webservices接口的测试工具，在发送请求的时候，直接以组装好的soapui报文进行发送，而LR是使用 web_services_call方法，从方法传入相应的参数，由LR组装成soap报文后再发送接口调用。所以相应时间上LR更长。<br>对于非webservices接口，我也测试了一下（REST POST请求），看下图对比：<br><img src="/img/soupui/soupui_2.PNG" alt="Alt text"><br><img src="/img/soupui/soupui_3.PNG" alt="Alt text"><br>可以看到响应时间上面，soapui更小</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>SoapUI做接口测试时，可能会忽略它有压力测试的套件LoadTest，在做WebServices接口压力测试时，比loadrunner更胜一筹。<br>]]>
    
    </summary>
    
      <category term="工作" scheme="http://tonylit.me/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaMelody监控java应用]]></title>
    <link href="http://tonylit.me/2015/12/16/javamelody%E7%9B%91%E6%8E%A7java%E5%BA%94%E7%94%A8/"/>
    <id>http://tonylit.me/2015/12/16/javamelody监控java应用/</id>
    <published>2015-12-16T03:37:27.000Z</published>
    <updated>2015-12-16T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>公司里大多都是java项目，之前监控一直用jprofiler，最近在论坛上发现JavaMelody这个监控神器，真是眼前一亮！<br><img src="/img/javamelody/javamelody_1.jpg" alt="Alt text"></p>
<a id="more"></a>
<h1 id="JavaMelody介绍">JavaMelody介绍</h1><p>JavaMelody 能够监测Java或Java EE应用程序服务器，并以图表的方式显示：Java内存和Java  CPU使用情况，用户Session数量，JDBC连接数，和http请求、sql请求、jsp页面与业务接口方法（EJB3、Spring、 Guice）的执行数量，平均执行时间，错误百分比等。图表可以按天，周，月，年或自定义时间段查看。</p>
<h1 id="监控配置">监控配置</h1><p>今天先介绍怎样简单的做项目监控，与spring或者Struts集成先不谈。<br>你需要做的只是拷贝两个jar包，添加10行xml的代码就OK了。</p>
<h2 id="下载一个javamelody-1-58-0-zip_解压开来">下载一个javamelody-1.58.0.zip 解压开来</h2><p>下载地址在github上，<a href="https://github.com/javamelody/javamelody/releases，现在的最新版本是1.58，下载javamelody-1.58.0.zip" target="_blank" rel="external">https://github.com/javamelody/javamelody/releases，现在的最新版本是1.58，下载javamelody-1.58.0.zip</a><br>解压开，将里面的javamelody.jar和jrobin-1.5.9.1.jar拷贝到项目WEB-INF下的lib中。</p>
<h1 id="配置web-xml">配置web.xml</h1><p>在web.xml中添加配置：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;filter&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="variable">&lt;filter-name&gt;</span>monitoring<span class="variable">&lt;/filter-name&gt;</span></span><br><span class="line">      <span class="variable">&lt;filter-class&gt;</span>net.bull.javamelody.MonitoringFilter<span class="variable">&lt;/filter-class&gt;</span></span><br><span class="line"><span class="variable">&lt;/filter&gt;</span></span><br><span class="line"><span class="variable">&lt;filter-mapping&gt;</span></span><br><span class="line">       <span class="variable">&lt;filter-name&gt;</span>monitoring<span class="variable">&lt;/filter-name&gt;</span></span><br><span class="line">       <span class="variable">&lt;url-pattern&gt;</span>/<span class="keyword">*</span><span class="variable">&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="variable">&lt;/filter-mapping&gt;</span></span><br><span class="line"><span class="variable">&lt;listener&gt;</span></span><br><span class="line">       <span class="variable">&lt;listener-class&gt;</span>net.bull.javamelody.SessionListener<span class="variable">&lt;/listener-class&gt;</span></span><br><span class="line"><span class="variable">&lt;/listener&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="重启应用，完成配置">重启应用，完成配置</h1><p>现在就可以启动应用服务器打开网址查看监控效果了。网址：http://<host>/monitoring<br>如：<a href="http://192.168.43.103:82/monitoring" target="_blank" rel="external">http://192.168.43.103:82/monitoring</a><br><img src="/img/javamelody/javamelody.PNG" alt="Alt text"></host></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>公司里大多都是java项目，之前监控一直用jprofiler，最近在论坛上发现JavaMelody这个监控神器，真是眼前一亮！<br><img src="/img/javamelody/javamelody_1.jpg" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="工作" scheme="http://tonylit.me/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jenkins+maven+jmeter 性能自动化实践]]></title>
    <link href="http://tonylit.me/2015/12/16/jenkins+maven+jmeter%E6%80%A7%E8%83%BD%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%9E%E8%B7%B5/"/>
    <id>http://tonylit.me/2015/12/16/jenkins+maven+jmeter性能自动化实践/</id>
    <published>2015-12-16T03:37:27.000Z</published>
    <updated>2015-12-16T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>先简单介绍这几个工具，其实都不陌生了，平时工作中都会接触到<br>jenkins：前身hudson，开源的CI服务器<br>maven：这里主要是要用到maven与jmeter集成的插件（jmeter-maven-plugin）<br>jmeter：java编写的apache下开源的性能测试工具</p>
<h1 id="整个环境搭建过程：">整个环境搭建过程：</h1><blockquote>
<ol>
<li>新建maven工程，在pom中加入jmeter的插件，将jmeter脚本放入项目中，测试</li>
<li>搭建jenkins（这里使用的linux环境 centos5.8）</li>
<li>将maven项目配置在jenkins中</li>
<li>在jenkins中集成jmeter结果展示的插件（Performance），进行jenkins构建，测试</li>
</ol>
</blockquote>
<a id="more"></a>
<h1 id="第一步：新建maven项目">第一步：新建maven项目</h1><p>1.新建maven项目，在pom中加入jmeter-maven-plugin插件（由于jmeter-maven插件运行时会自动引入jmeter所需要的类库，所以机器上可以不单独安装jmeter）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>com.lazerycode.jmeter<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>jmeter-maven-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.10.1<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">id</span>&gt;</span>jmeter-tests<span class="tag">&lt;/<span class="title">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="title">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">goal</span>&gt;</span>jmeter<span class="tag">&lt;/<span class="title">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.在项目中新建source Folder：src/test/jmeter，因为插件中指定在此目录下面查找jmeter脚本来执行，如果想更改路径的话，在pom中自己配置<br><img src="/img/jenkins/jenkins_1.PNG" alt="Alt text"></p>
<p>3.在Command Line Shell中执行：mvn verify或者mvn jmeter:jmeter，这样jmeter的脚本运行了。<br><img src="/img/jenkins/jenkins_2.PNG" alt="Alt text"></p>
<p>这里的jmeter脚本比较简单，就是打开一个页面，10个并发，我们可以看下执行结果，确实是按照我们的设置运行了。</p>
<p><img src="/img/jenkins/jenkins_3.PNG" alt="Alt text"></p>
<p>以上，我们集成Jmeter插件的maven项目就OK了。</p>
<hr>
<h1 id="第二步，搭建jenkins">第二步，搭建jenkins</h1><p>我是linux环境下安装的（下载地址：  <a href="http://pan.baidu.com/s/1bnYTisn" target="_blank" rel="external">jenkins.war</a> 和它常用的插件<a href="http://updates.jenkins-ci.org/download/plugins/" target="_blank" rel="external">jenkins_plugin</a>）（先下载performance，后面会用），jenkins启动直接采用java -jar，用nginx进行访问代理<br>1.将jenkins.war放入服务器上</p>
<ol>
<li>直接命令（java的版本需要jdk1.7+）：java -jar jenkins.war，jenkins就启动了，默认端口8080，也可以指定端口启动:加入启动参数 –httpPort=$HTTP_PORT(设置端口)，–httpsPort=$HTTP_PORT(便是使用https协议)；当然完全可以搭建在 tomcat或者resin服务器中。<br><img src="/img/jenkins/jenkins_4.PNG" alt="Alt text"></li>
</ol>
<p>3.启动完，我们可以访问jenkins了，输入ip:端口<br><img src="/img/jenkins/jenkins_5.PNG" alt="Alt text"><br>4.使用nginx代理访问jenkins，这一步可以不要，主要是我想用域名方式访问。我们在nginx中简单配置下就可以了：<br><img src="/img/jenkins/jenkins_6.PNG" alt="Alt text"><br><img src="/img/jenkins/jenkins_7.PNG" alt="Alt text"><br>以上，jenkins搭建完成了，比较简单。</p>
<hr>
<h1 id="第三步：将项目放在jenkins中构建">第三步：将项目放在jenkins中构建</h1><p>我这里实现的很简单，直接调用的服务器上的脚本运行的；而且本人对jenkins的配置刚开始了解，不太懂，关于项目配置大家可以具体学习下，网上资料比较多。<br>1.开始之前，需要在jenkins中加入上面下载的插件，在jenkins的插件管理中上传就可以了。<br>2.新建一个项目（我这里新建的构建一个自由风格的软件项目），直接运行服务器上的脚本<br><img src="/img/jenkins/jenkins_8.PNG" alt="Alt text"><br>脚本中实现如下：<br><img src="/img/jenkins/jenkins_9.PNG" alt="Alt text"></p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export LANG=en_US</span><br><span class="line">export LC_ALL=en_US</span><br><span class="line">export JAVA_HOME=/opt/jdk1.<span class="number">7.0_40</span>/</span><br><span class="line">export CLASSPATH=<span class="variable">$JAVA</span>_HOME/lib:<span class="variable">$JAVA</span>_HOME/jre/lib:<span class="variable">$CLASSPATH</span></span><br><span class="line">export MAVEN_HOME=/opt/apache-maven-<span class="number">3.0</span>.<span class="number">4</span>/</span><br><span class="line">export PATH=<span class="variable">$JAVA</span>_HOME/bin:$&#123;MAVEN_HOME&#125;/bin:<span class="variable">$PATH</span></span><br><span class="line">export MAVEN_OPTS=<span class="string">"-Xmx1024m -XX:MaxPermSize=512m"</span></span><br><span class="line"> </span><br><span class="line">cd  /app/maven_jmeter/</span><br><span class="line">/opt/apache-maven-<span class="number">3.0</span>.<span class="number">4</span>/bin/mvn -s /opt/apache-maven-<span class="number">3.0</span>.<span class="number">4</span>/conf/voen_setting.xml jmeter:jmeter</span><br></pre></td></tr></table></figure>
<p>以上，jenkins的项目构建结束。</p>
<hr>
<h1 id="第四步：测试结果展示">第四步：测试结果展示</h1><p>测试的结果怎样在jenkins中显示呢？这里需要performance插件（上面svn中有）<br>1.我们先来看下结果放在哪<br><img src="/img/jenkins/jenkins_10.PNG" alt="Alt text"><br>2.在jenkins中加入publish perfoemance test result resport<br><img src="/img/jenkins/jenkins_11.PNG" alt="Alt text"><br>3.我们进行构建，看下结果<br><img src="/img/jenkins/jenkins_12.PNG" alt="Alt text"><br>这里展现的结果可以做优化，并且可以集成邮件功能<br>以上，整个实践结束，整体还是比较简单的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>先简单介绍这几个工具，其实都不陌生了，平时工作中都会接触到<br>jenkins：前身hudson，开源的CI服务器<br>maven：这里主要是要用到maven与jmeter集成的插件（jmeter-maven-plugin）<br>jmeter：java编写的apache下开源的性能测试工具</p>
<h1 id="整个环境搭建过程：">整个环境搭建过程：</h1><blockquote>
<ol>
<li>新建maven工程，在pom中加入jmeter的插件，将jmeter脚本放入项目中，测试</li>
<li>搭建jenkins（这里使用的linux环境 centos5.8）</li>
<li>将maven项目配置在jenkins中</li>
<li>在jenkins中集成jmeter结果展示的插件（Performance），进行jenkins构建，测试</li>
</ol>
</blockquote>]]>
    
    </summary>
    
      <category term="Jmeter" scheme="http://tonylit.me/tags/Jmeter/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Druid连接池监控]]></title>
    <link href="http://tonylit.me/2015/12/15/druid%E8%BF%9E%E6%8E%A5%E6%B1%A0%E7%9B%91%E6%8E%A7/"/>
    <id>http://tonylit.me/2015/12/15/druid连接池监控/</id>
    <published>2015-12-15T03:37:27.000Z</published>
    <updated>2015-12-15T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>Druid是一个JDBC组件， 首先是一个数据库连接池，属于阿里巴巴众多开源项目的一个。如果想看具体的介绍请看这里：<br>官网介绍：<a href="http://code.alibabatech.com/wiki/display/Druid/Home" target="_blank" rel="external">http://code.alibabatech.com/wiki/display/Druid/Home</a><br>我这里主要介绍怎么监控druid<br><a id="more"></a></p>
<h1 id="在web-xml中添加如下：">在web.xml中添加如下：</h1><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;servlet&gt;</span>  </span><br><span class="line"></span><br><span class="line">        <span class="variable">&lt;servlet-name&gt;</span>DruidStatView<span class="variable">&lt;/servlet-name&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;servlet-class&gt;</span>com.alibaba.druid.support.http.StatViewServlet<span class="variable">&lt;/servlet-class&gt;</span>  </span><br><span class="line">    <span class="variable">&lt;/servlet&gt;</span>  </span><br><span class="line">    <span class="variable">&lt;servlet-mapping&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;servlet-name&gt;</span>DruidStatView<span class="variable">&lt;/servlet-name&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;url-pattern&gt;</span>/druid/<span class="keyword">*</span><span class="variable">&lt;/url-pattern&gt;</span>  </span><br><span class="line">    <span class="variable">&lt;/servlet-mapping&gt;</span> </span><br><span class="line"><span class="variable">&lt;filter&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;filter-name&gt;</span>DruidWebStatFilter<span class="variable">&lt;/filter-name&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;filter-class&gt;</span>com.alibaba.druid.support.http.WebStatFilter<span class="variable">&lt;/filter-class&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;init-param&gt;</span>  </span><br><span class="line">            <span class="variable">&lt;param-name&gt;</span>exclusions<span class="variable">&lt;/param-name&gt;</span>  </span><br><span class="line">            <span class="variable">&lt;param-value&gt;</span><span class="keyword">*</span>.js,<span class="keyword">*</span>.gif,<span class="keyword">*</span>.jpg,<span class="keyword">*</span>.png,<span class="keyword">*</span>.css,<span class="keyword">*</span>.ico,/druid/<span class="keyword">*</span><span class="variable">&lt;/param-value&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;/init-param&gt;</span>  </span><br><span class="line">      <span class="variable">&lt;/filter&gt;</span>  </span><br><span class="line">      <span class="variable">&lt;filter-mapping&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;filter-name&gt;</span>DruidWebStatFilter<span class="variable">&lt;/filter-name&gt;</span>  </span><br><span class="line">        <span class="variable">&lt;url-pattern&gt;</span>/<span class="keyword">*</span><span class="variable">&lt;/url-pattern&gt;</span>  </span><br><span class="line">      <span class="variable">&lt;/filter-mapping&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="配置完成，重启应用，访问http://ip地址+端口/druid/index-html">配置完成，重启应用，访问<a href="http://ip地址+端口/druid/index.html" target="_blank" rel="external">http://ip地址+端口/druid/index.html</a></h1><p><img src="/img/druid.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Druid是一个JDBC组件， 首先是一个数据库连接池，属于阿里巴巴众多开源项目的一个。如果想看具体的介绍请看这里：<br>官网介绍：<a href="http://code.alibabatech.com/wiki/display/Druid/Home">http://code.alibabatech.com/wiki/display/Druid/Home</a><br>我这里主要介绍怎么监控druid<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[性能测试葵花宝典]]></title>
    <link href="http://tonylit.me/2015/12/10/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E8%91%B5%E8%8A%B1%E5%AE%9D%E5%85%B8/"/>
    <id>http://tonylit.me/2015/12/10/性能测试葵花宝典/</id>
    <published>2015-12-10T03:37:27.000Z</published>
    <updated>2015-12-10T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>在此整理性能测试过程中的一些精华内容，并持续进行<br>为此命名为性能测试葵花宝典，我先练上！<br><img src="/img/葵花宝典.jpg" alt="Alt text"></p>
<a id="more"></a>
<h1 id="压力机的资源利用率">压力机的资源利用率</h1><blockquote>
<p>cpu%&lt;50%<br>内存&lt;80%<br>network&lt;30%,高了容易丢包<br>disk的忙闲&lt;50%<br>disk的空间&lt;90%，高了会碎片整理</p>
</blockquote>
<h1 id="OS常用阀值">OS常用阀值</h1><blockquote>
<p>TotalCPU%&lt;75%<br> sysCPU%&lt;30%<br>  load average&lt;5<br> wio%&lt;40%<br>  network%&lt;30%<br>mem%&lt;80%~90%<br> disk%busy&lt;60%<br> disk queueing &lt;5<br> disk usage&lt;90%</p>
</blockquote>
<h1 id="OSI7层模型">OSI7层模型</h1><p><img src="/img/OSI_7.gif" alt="Alt text"></p>
<h1 id="线程状态">线程状态</h1><p><img src="/img/threadstatus.gif" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在此整理性能测试过程中的一些精华内容，并持续进行<br>为此命名为性能测试葵花宝典，我先练上！<br><img src="/img/葵花宝典.jpg" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Jmeter测试java程序]]></title>
    <link href="http://tonylit.me/2015/12/10/jmeter%E6%B5%8B%E8%AF%95java/"/>
    <id>http://tonylit.me/2015/12/10/jmeter测试java/</id>
    <published>2015-12-10T03:37:27.000Z</published>
    <updated>2015-12-10T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>之前写过用loadrunner测试java程序。其实Jmeter同样可以，它本身是开源、java实现的，对java的支持比较优秀。<br>那么问题来了，怎么使用Jmeter进行工作呢？<br><img src="/img/jmeter/jmeter.jpg" alt="Alt text"></p>
<a id="more"></a>
<h1 id="第一步：">第一步：</h1><p>创建java工程，并把Jmeter文件夹中lib目录下的jar包添加进入工程。<br><img src="/img/jmeter/jmeter_jar.PNG" alt="Alt text"></p>
<h1 id="第二步">第二步</h1><p>创建一个类继承AbstractJavaSamplerClient，并重写；</p>
<blockquote>
<p>public Arguments getDefaultParameters();设置可用参数及默认值；<br>public void setupTest(JavaSamplerContext arg0)：每个线程测试前执行一次，做一些初始化工作；<br>public SampleResult runTest(JavaSamplerContext arg0)：开始测试，从arg0参数可以获得参数值；<br>public void teardownTest(JavaSamplerContext arg0)：测试结束时调用；</p>
</blockquote>
<p>执行的先后顺序为：<br>getDefaultParameters() –&gt; setupTest(JavaSamplerContext context) –&gt; runTest(JavaSamplerContext context) –&gt; teardownTest(JavaSamplerContext context)</p>
<blockquote>
<p>常用的方法： </p>
<ul>
<li>addArgument(“name”, “value”)    定义参数</li>
<li>sampleStart()   定义事务的开始，类似于LR的lr_start_transaction，和LR一样事务间不要放无关代码 </li>
<li>sampleEnd()    定义事务的结束，类似于LR的lr_end_transaction </li>
<li>setSuccessful(true、false)   设置运行结果的成功或失败，Jmeter统计成功失败的次数，在聚合报告中能够体现。</li>
</ul>
</blockquote>
<h1 id="第三步">第三步</h1><p>将java工程导出为jar包，将此jar包放入JMETER_HOME\lib\ext目录</p>
<h1 id="第四步">第四步</h1><p>打开JMeter，创建线程组、Java Request、查看结果树，进行测试；</p>
<h1 id="实例">实例</h1><h2 id="先写一个被测试的类">先写一个被测试的类</h2><p>简单一点：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">     <span class="keyword">*</span> Copyright 2015 Focus Technology, Co., Ltd. All rights reserved.</span><br><span class="line">package jmeter.test;</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> HelloWorld.java</span><br><span class="line"> <span class="keyword">*</span> </span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@author lit</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">public class HelloWorld &#123;</span><br><span class="line"></span><br><span class="line">  public String sayHello(String world1, String world2) &#123;</span><br><span class="line">        return world1 + world2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="创建一个JmeterTest类，并继承AbstractJavaSamplerClient：">创建一个JmeterTest类，并继承AbstractJavaSamplerClient：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"> * Copyright <span class="number">2015</span> Focus Technology, Co., Ltd. All rights reserved.</span><br><span class="line"><span class="keyword">package</span> jmeter.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.jmeter.config.Arguments;</span><br><span class="line"><span class="keyword">import</span> org.apache.jmeter.protocol.java.sampler.AbstractJavaSamplerClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.jmeter.samplers.SampleResult;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * JmeterTest.java</span><br><span class="line"> * </span><br><span class="line"> * <span class="doctag">@author</span> lit</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmeterTest</span> <span class="keyword">extends</span> <span class="title">AbstractJavaSamplerClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String world1;</span><br><span class="line">    <span class="keyword">private</span> String world2;</span><br><span class="line">    <span class="keyword">private</span> String world_final;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 这个方法是用来自定义java方法入参的。 params.addArgument("name","guodegang");表示入参名字叫name,值为guodegang。 设置可用参数及的默认值；</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Arguments <span class="title">getDefaultParameters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Arguments arguments = <span class="keyword">new</span> Arguments();</span><br><span class="line">        arguments.addArgument(<span class="string">"name"</span>, <span class="string">"guodegang"</span>);</span><br><span class="line">        arguments.addArgument(<span class="string">"age"</span>, <span class="string">"48"</span>);</span><br><span class="line">        <span class="keyword">return</span> arguments;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每个线程测试前执行一次，做一些初始化工作；</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setupTest</span><span class="params">(JavaSamplerContext arg0)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 开始测试，从arg0参数可以获得参数值；</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SampleResult <span class="title">runTest</span><span class="params">(JavaSamplerContext arg0)</span> </span>&#123;</span><br><span class="line">        world1 = arg0.getParameter(<span class="string">"name"</span>);</span><br><span class="line">        world2 = arg0.getParameter(<span class="string">"age"</span>);</span><br><span class="line">        <span class="comment">// 增加jmter的sample</span></span><br><span class="line">        SampleResult sr = <span class="keyword">new</span> SampleResult();</span><br><span class="line">        sr.setSampleLabel(<span class="string">"java request"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// jmeter 开始统计响应时间标记</span></span><br><span class="line">            sr.sampleStart();</span><br><span class="line">            HelloWorld helloWorld = <span class="keyword">new</span> HelloWorld();</span><br><span class="line">            world_final = helloWorld.sayHello(world1, world2);</span><br><span class="line">            <span class="keyword">if</span> (world_final != <span class="keyword">null</span> &amp;&amp; world_final.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                sr.setResponseData(<span class="string">"结果是："</span> + world_final, <span class="keyword">null</span>);</span><br><span class="line">                sr.setDataType(SampleResult.TEXT);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sr.setSuccessful(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            sr.setSuccessful(<span class="keyword">false</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// jmeter 结束统计响应时间标记</span></span><br><span class="line">            sr.sampleEnd();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试结束时调用；</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teardownTest</span><span class="params">(JavaSamplerContext arg0)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 本地测试用</span><br><span class="line">     * </span><br><span class="line">     * <span class="doctag">@param</span> args</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        Arguments params = <span class="keyword">new</span> Arguments();</span><br><span class="line">        params.addArgument(<span class="string">"name"</span>, <span class="string">"guodegang"</span>);</span><br><span class="line">        params.addArgument(<span class="string">"age"</span>, <span class="string">"48"</span>);</span><br><span class="line">        JavaSamplerContext arg0 = <span class="keyword">new</span> JavaSamplerContext(params);</span><br><span class="line">        JmeterTest test = <span class="keyword">new</span> JmeterTest();</span><br><span class="line">        test.setupTest(arg0);</span><br><span class="line">        test.runTest(arg0);</span><br><span class="line">        test.teardownTest(arg0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Export为Runnable_Jar_File：hello-jar">Export为Runnable Jar File：hello.jar</h2><h2 id="将此hello-jar包放入JMETER_HOME\lib\ext目录；">将此hello.jar包放入JMETER_HOME\lib\ext目录；</h2><h2 id="打开JMeter,添加线程组，添加Java请求，查看结果树。">打开JMeter,添加线程组，添加Java请求，查看结果树。</h2><p><img src="/img/jmeter/jmeter_java.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前写过用loadrunner测试java程序。其实Jmeter同样可以，它本身是开源、java实现的，对java的支持比较优秀。<br>那么问题来了，怎么使用Jmeter进行工作呢？<br><img src="/img/jmeter/jmeter.jpg" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="Jmeter" scheme="http://tonylit.me/tags/Jmeter/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[loadrunner调用java程序]]></title>
    <link href="http://tonylit.me/2015/12/07/loadrunner%E8%B0%83%E7%94%A8java/"/>
    <id>http://tonylit.me/2015/12/07/loadrunner调用java/</id>
    <published>2015-12-07T03:37:27.000Z</published>
    <updated>2015-12-07T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>有些时候，需要使用LR来调用我们写好的java程序（接口），做一些压力测试。<br>那么问题来了，怎么使用LR进行工作呢？<br><a id="more"></a></p>
<p>步骤如下：<br>1.将java项目中使用的jar包找出来<br>2.将java工程文件打成jar包<br>3.打开loadrunner，新建一个Java Vuser的脚本<br><img src="/img/java_vuser.PNG" alt="Alt text"><br>4.设置Run—time Settings中的ClassPath，加入java工程中调用的jar包<br><img src="/img/java_jar.PNG" alt="Alt text"><br>5.接下来我们编写Vuser脚本，和java一样，导入需要的包名，调用项目中的接口或者函数<br><img src="/img/java_java.PNG" alt="Alt text"><br>6.写完以后，编译运行一下，没问题，就可以设置测试场景加压了<br>当然还有其他方式调用java程序，以上是比较简单的一种。<br>对于业务场景，完全可以在Vuser中编写，不过在Vuser中编写有些不方便，看个人喜好吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有些时候，需要使用LR来调用我们写好的java程序（接口），做一些压力测试。<br>那么问题来了，怎么使用LR进行工作呢？<br>]]>
    
    </summary>
    
      <category term="loadrunner" scheme="http://tonylit.me/tags/loadrunner/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[lrs_set_recv_timeout 解决长连接等待]]></title>
    <link href="http://tonylit.me/2015/12/04/tcp/"/>
    <id>http://tonylit.me/2015/12/04/tcp/</id>
    <published>2015-12-04T03:37:27.000Z</published>
    <updated>2015-12-04T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>最近又碰到坑爹的通讯项目，web端登录与客户端登录消息用的一套长连接机制。<br>脚本写的真是蛋疼、累死，不仅要用socket协议，还要模拟长连接接收消息，最后要看一堆无语的data.ws文件。<br>而且，两个部门协作起来真是无力吐槽了！<br>还好有<strong>lrs_set_recv_timeout</strong><br><a id="more"></a><br>lrs_set_recv_timeout有两个函数<br>lrs_set_recv_timeout和lrs_set_recv_timeout2</p>
<blockquote>
<p> lrs_set_recv_timeout(long sec, long u_sec);  // 设置接收数据的等待时间（超时时间）<br>lrs_set_recv_timeout2(long sec, long u_sec);  // 设置建立连接成功之后，接收数据的等待时间。</p>
</blockquote>
<p>Example:</p>
<blockquote>
<p>lrs_create_socket(“socket2”, “TCP”,<br>“RemoteHost=tears.mercury.co.il:23”, LrsLastArg); lrs_send(“socket2”,<br>“buf2”, LrsLastArg); lrs_set_recv_timeout(120,0);<br>lrs_set_recv_timeout2(10,0); lrs_receive(“socket2”, “buf3”,<br>LrsLastArg);</p>
</blockquote>
<p>我的脚本：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">/*********************************************************************</span><br><span class="line"> * Created by Mercury Interactive Windows Sockets Recorder</span><br><span class="line"> *</span><br><span class="line"> * Created on: Tue Oct 27 17:48:09</span><br><span class="line"> *********************************************************************/</span><br><span class="line"></span><br><span class="line">#include "lrs.h"</span><br><span class="line">...</span><br><span class="line">char *position;</span><br><span class="line">char *position2;</span><br><span class="line">Action()</span><br><span class="line"></span><span class="expression">&#123;</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket0"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line">	/<span class="end-block">/GET mictouch</span>_<span class="variable">logout</span> <span class="variable">HTTP</span>1<span class="variable">.</span>1 <span class="variable">Host</span>: <span class="variable">m.made-in-china.com</span></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket0"</span>, <span class="string">"buf0"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket0"</span>, <span class="string">"buf1"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">    /<span class="end-block">/location</span>: <span class="end-block">/login</span></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket0"</span>, <span class="string">"buf2"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket0"</span>, <span class="string">"buf3"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket1"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket2"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line">   /<span class="end-block">/GET </span><span class="end-block">/mt</span><span class="end-block">/img</span><span class="end-block">/phone.svg</span>?_<span class="variable">v</span>=1445919622415 <span class="variable">HTTP</span>/1<span class="variable">.</span>1\<span class="variable">r</span>\<span class="variable">n</span></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket1"</span>, <span class="string">"buf4"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket3"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket1"</span>, <span class="string">"buf5"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket4"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket5"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket6"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket7"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket8"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=203.208.40.135:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket0"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket9"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=203.208.40.135:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket4"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket2"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket3"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket6"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket5"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket7"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket9"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket8"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket10"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line">    /<span class="end-block">/GET </span><span class="end-block">/favicon.ico HTTP</span>/1<span class="variable">.</span>1\<span class="variable">r</span>\<span class="variable">n</span><span class="string">"</span><br><span class="line"></span><br><span class="line">    lrs_send("</span><span class="variable">socket</span>10<span class="string">", "</span><span class="variable">buf</span>7<span class="string">", LrsLastArg);</span><br><span class="line"></span><br><span class="line">    lrs_create_socket("</span><span class="variable">socket</span>11<span class="string">", "</span><span class="variable">TCP</span><span class="string">", "</span><span class="variable">RemoteHost</span>=<span class="variable">webserver.trademessenger.com</span>:80<span class="string">",  LrsLastArg);</span><br><span class="line"></span><br><span class="line">    lrs_receive("</span><span class="variable">socket</span>10<span class="string">", "</span><span class="variable">buf</span>8<span class="string">", LrsLastArg);</span><br><span class="line">    //POST /mictouch_login HTTP/1.1\r\n"</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket10"</span>, <span class="string">"buf9"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket10"</span>, <span class="string">"buf10"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket11"</span>, <span class="string">"buf11"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket11"</span>, <span class="string">"buf12"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket12"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket13"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=203.208.40.135:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket14"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">//<span class="end-block">/tm</span><span class="end-block">/leaveword</span><span class="end-block">/count.jsonp</span>?<span class="variable">domainUserId</span>=<span class="variable">CdekVYuGXQJi</span>_00&amp;<span class="variable">domain</span>=<span class="variable">micen</span>&amp;<span class="variable">ca</span></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket14"</span>, <span class="string">"buf16"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket15"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket14"</span>, <span class="string">"buf17"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket10"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket12"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket11"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket14"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket15"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket13"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"login----------------------"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket16"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket17"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line">/<span class="end-block">/GET </span><span class="end-block">/favicon.ico</span></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket16"</span>, <span class="string">"buf18"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">/<span class="end-block">/GET </span><span class="end-block">/webtm</span><span class="end-block">/contacts</span></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket17"</span>, <span class="string">"buf19"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">     <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(15,0);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">receive</span>_<span class="variable">option</span>(<span class="variable">EndMarker</span>, <span class="variable">StringTerminator</span> , <span class="string">"HTTP/1.1"</span>);</span><br><span class="line">	 <span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket16"</span>, <span class="string">"buf20"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">     </span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"1"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(15,0);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"2"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket17"</span>, <span class="string">"buf21"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"2"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line">/<span class="end-block">/GET </span><span class="end-block">/mt</span><span class="end-block">/webim</span><span class="end-block">/dist</span><span class="end-block">/css</span><span class="end-block">/webim.css</span>?<span class="variable">v</span>=1444877296783 <span class="variable">HTTP</span>/1<span class="variable">.</span>1\<span class="variable">r</span>\<span class="variable">n</span></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket1"</span>, <span class="string">"buf22"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(15,0);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"3"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket1"</span>, <span class="string">"buf23"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"3"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line">/<span class="end-block">/GET </span><span class="end-block">/mt</span><span class="end-block">/webim</span><span class="end-block">/dist</span><span class="end-block">/js</span><span class="end-block">/webim.js</span>?<span class="variable">v</span>=1444877296783</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket1"</span>, <span class="string">"buf24"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(15,0);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"4"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket1"</span>, <span class="string">"buf25"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"4"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket18"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=203.208.40.135:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket19"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=192.168.17.54:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket20"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=203.208.40.135:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket21"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket22"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line">/<span class="end-block">/GET </span><span class="end-block">/connect</span>?<span class="variable">callback</span>=<span class="variable">jQuery</span>21406809277604824309_1445939283967&amp;_=144593928</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket21"</span>, <span class="string">"buf27"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(15,0);</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">receive</span>_<span class="variable">option</span>(<span class="variable">EndMarker</span>, <span class="variable">StringTerminator</span> , <span class="string">":15"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"5"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket21"</span>, <span class="string">"buf28"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">    </span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"5"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line">/<span class="end-block">/GET </span><span class="end-block">/webtm</span><span class="end-block">/getauth</span>/?<span class="variable">callback</span>=<span class="variable">jQuery</span>21406809277604824309_1445939283967&amp;_=14</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">create</span>_<span class="variable">socket</span>(<span class="string">"socket23"</span>, <span class="string">"TCP"</span>, <span class="string">"RemoteHost=webserver.trademessenger.com:80"</span>,  <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket23"</span>, <span class="string">"buf29"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">/<span class="end-block">/GET </span><span class="end-block">/connect</span>?<span class="variable">callback</span>=<span class="variable">jQuery</span>21406809277604824309_1445939283970&amp;<span class="variable">s</span>=<span class="variable">fc</span>90<span class="variable">b</span>31<span class="variable">b</span>1</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket21"</span>, <span class="string">"buf30"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(60,0);</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">receive</span>_<span class="variable">option</span>(<span class="variable">EndMarker</span>, <span class="variable">StringTerminator</span> , <span class="string">"username"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"6"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">receive</span>_<span class="variable">option</span>(<span class="variable">EndMarker</span>, <span class="variable">StringTerminator</span> , <span class="string">"HTTP/1.1"</span>);</span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket23"</span>, <span class="string">"buf31"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"6"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket22"</span>, <span class="string">"buf32"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(15,0);</span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">receive</span>_<span class="variable">option</span>(<span class="variable">EndMarker</span>, <span class="variable">StringTerminator</span> , <span class="string">"jQuery"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"7"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket22"</span>, <span class="string">"buf33"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"7"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">receive</span>_<span class="variable">option</span>(<span class="variable">EndMarker</span>, <span class="variable">StringTerminator</span> , <span class="string">"LoginReq"</span>);</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(15,0);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">start</span>_<span class="variable">transaction</span>(<span class="string">"8"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket21"</span>, <span class="string">"buf34"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"8"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">send</span>(<span class="string">"socket21"</span>, <span class="string">"buf35"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line">//	<span class="variable">lrs</span>_<span class="variable">save</span>_<span class="variable">param</span>_<span class="variable">ex</span>(<span class="string">"socket21"</span>,<span class="string">"received"</span>,<span class="variable">NULL</span>,200,400,<span class="variable">NULL</span>,<span class="string">"Param_Received"</span>);</span><br><span class="line">//	<span class="variable">lr</span>_<span class="variable">output</span>_<span class="variable">message</span>(<span class="variable">lr</span>_<span class="variable">eval</span>_<span class="variable">string</span>(<span class="string">"&lt;Param_Received&gt;"</span>));</span><br><span class="line">    <span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">recv</span>_<span class="variable">timeout</span>2(15,0);</span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">set</span>_<span class="variable">receive</span>_<span class="variable">option</span>(<span class="variable">EndMarker</span>, <span class="variable">StringTerminator</span> , <span class="string">"plantData"</span>);</span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">receive</span>(<span class="string">"socket21"</span>, <span class="string">"buf36"</span>, <span class="variable">LrsLastArg</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/<span class="end-block">/   position </span>=(<span class="variable">char</span>*) <span class="variable">strstr</span>(<span class="variable">lr</span>_<span class="variable">eval</span>_<span class="variable">string</span>(<span class="string">"&lt;Param_Received&gt;"</span>),<span class="variable">lr</span>_<span class="variable">eval</span>_<span class="variable">string</span>(<span class="string">"LoginReq"</span>)); </span><br><span class="line">/<span class="end-block">/  position</span>2 =(<span class="variable">char</span>*) <span class="variable">strstr</span>(<span class="variable">lr</span>_<span class="variable">eval</span>_<span class="variable">string</span>(<span class="string">"&lt;Param_Received&gt;"</span>),<span class="variable">lr</span>_<span class="variable">eval</span>_<span class="variable">string</span>(<span class="string">"plantData"</span>)); </span><br><span class="line">/<span class="end-block">/  <span class="keyword">if</span></span>(<span class="variable">position</span>==<span class="variable">NULL</span>&amp;&amp;<span class="variable">position</span>2==<span class="variable">NULL</span>)</span><br><span class="line">/<span class="end-block">/lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"login----------------------"</span>, <span class="variable">LR</span>_<span class="variable">FAIL</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">	<span class="variable">lr</span>_<span class="variable">end</span>_<span class="variable">transaction</span>(<span class="string">"login----------------------"</span>, <span class="variable">LR</span>_<span class="variable">AUTO</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket16"</span>);</span><br><span class="line"><span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket17"</span>);</span><br><span class="line"><span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket18"</span>);</span><br><span class="line"><span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket19"</span>);</span><br><span class="line"><span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket20"</span>);</span><br><span class="line"><span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket21"</span>);</span><br><span class="line"><span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket22"</span>);</span><br><span class="line"><span class="variable">lrs</span>_<span class="variable">close</span>_<span class="variable">socket</span>(<span class="string">"socket23"</span>);</span><br><span class="line">    <span class="variable">return</span> 0;</span><br><span class="line">&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近又碰到坑爹的通讯项目，web端登录与客户端登录消息用的一套长连接机制。<br>脚本写的真是蛋疼、累死，不仅要用socket协议，还要模拟长连接接收消息，最后要看一堆无语的data.ws文件。<br>而且，两个部门协作起来真是无力吐槽了！<br>还好有<strong>lrs_set_recv_timeout</strong><br>]]>
    
    </summary>
    
      <category term="loadrunner" scheme="http://tonylit.me/tags/loadrunner/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux系统抓包-tcpdump与tcpflow]]></title>
    <link href="http://tonylit.me/2015/12/04/tcpdump/"/>
    <id>http://tonylit.me/2015/12/04/tcpdump/</id>
    <published>2015-12-04T03:37:27.000Z</published>
    <updated>2015-12-04T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>平时抓包用的最多的是wireshark和httpwatch，<br>如果想在linux服务器上抓包，比较常用tcpdump，tcpflow命令，tcpdump对http包的抓取支持不好，tcpflow的http的抓取表现不错<br><a id="more"></a></p>
<h1 id="tcpdump">tcpdump</h1><h2 id="tcpdump的命令格式">tcpdump的命令格式</h2><blockquote>
<p>tcpdump [-i 网卡] -nnAX ‘表达式’ 各参数说明如下：<br>-i：interface 监听的网卡。<br>-nn：表示以ip和port的方式显示来源主机和目的主机，而不是用主机名和服务。<br>-A：以ascii的方式显示数据包，抓取web数据时很有用。<br>-X：数据包将会以16进制和ascii的方式显示。  表达式：表达式有很多种，常见的有：host 主机；port 端口；src host 发包主机；dst host 收包主机。</p>
</blockquote>
<h2 id="监听网卡eth0">监听网卡eth0</h2><blockquote>
<p>tcpdump -i eth0</p>
</blockquote>
<h2 id="监听指定协议的数据">监听指定协议的数据</h2><blockquote>
<p>tcpdump -i eth0 -nn ‘icmp’</p>
</blockquote>
<p>这个是用来监听icmp协议的数据，就是ping命令使用的协议。<br>类似的，如果要监听tcp或者是udp协议，只需要修改上例的icmp就可以了</p>
<h2 id="监听指定的主机">监听指定的主机</h2><blockquote>
<p> tcpdump -i eth0 -nn ‘host 192.168.43.59’</p>
</blockquote>
<p>这样的话，192.168.1.231这台主机接收到的包和发送的包都会被抓取。</p>
<blockquote>
<p>  tcpdump -i eth0 -nn ‘src host 192.168.43.59’ </p>
</blockquote>
<p>这样只有192.168.43.59这台主机发送的包才会被抓取。</p>
<blockquote>
<p> tcpdump -i eth0 -nn ‘dst host 192.168.43.59’ </p>
</blockquote>
<p>  这样只有192.168.43.59这台主机接收到的包才会被抓取。</p>
<p>监听指定端口</p>
<blockquote>
<p> tcpdump -i eth0 -nnA ‘port 80’</p>
</blockquote>
<p>用来监听主机的80端口收到和发送的所有数据包。</p>
<p>监听指定主机和端口<br> tcpdump -i eth0 -nnA ‘port 80 and src host 192.168.43.59’<br>多个条件可以用and，or连接。<br>上例表示监听192.168.43.59主机通过80端口发送的数据包。</p>
<h1 id="tcpflow">tcpflow</h1><p>一般情况操作系统不会自带tcpflow，下载一个<br><a href="http://download.chinaunix.net/download/0011000/10190.shtml" target="_blank" rel="external">tcpflow下载</a></p>
<p>安装啥的就不说了，主要看一下抓取包的内容</p>
<blockquote>
<p>tcpflow -i eth0 host ‘192.168.17.39’</p>
</blockquote>
<p>他会生成很多文件：<br><img src="/img/tcoflow1.PNG" alt="Alt text"></p>
<p>打开看看：<br><img src="/img/tcvpflow2.PNG" alt="Alt text"></p>
<p>是不是和浏览器查看的差不多！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>平时抓包用的最多的是wireshark和httpwatch，<br>如果想在linux服务器上抓包，比较常用tcpdump，tcpflow命令，tcpdump对http包的抓取支持不好，tcpflow的http的抓取表现不错<br>]]>
    
    </summary>
    
      <category term="工作" scheme="http://tonylit.me/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[centos7.1下docker安装]]></title>
    <link href="http://tonylit.me/2015/12/02/centos7.1%E4%B8%8B%E5%AE%89%E8%A3%85docker/"/>
    <id>http://tonylit.me/2015/12/02/centos7.1下安装docker/</id>
    <published>2015-12-02T03:37:27.000Z</published>
    <updated>2015-12-02T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>之前已经<a href="http://tonylit.me/2015/11/24/docker/">介绍了docker</a>，今天来安装一下。<br>首先，准备一个 CentOS 的操作系统<br>Ubuntu 或其它 Linux 操作系统也能玩 Docker，这里就不介绍了。<br><a id="more"></a><br><strong>CentOS 具体要求如下：</strong><br>必须是 64 位操作系统<br>建议内核在 3.8 以上<br>低版本的请升级系统~</p>
<p>安装起来很简单：</p>
<h1 id="安装docker">安装docker</h1><p>1.由于条件限制，只能把rpm包下载下来：<a href="http://pan.baidu.com/s/1c0C0X0G，" target="_blank" rel="external">http://pan.baidu.com/s/1c0C0X0G，</a> 也可以直接：</p>
<blockquote>
<p>rpm -Uvh<br><a href="https://get.docker.com/rpm/1.7.1/centos-7/RPMS/x86_64/docker-engine-1.7.1-1.el7.centos.x86_64.rpm" target="_blank" rel="external">https://get.docker.com/rpm/1.7.1/centos-7/RPMS/x86_64/docker-engine-1.7.1-1.el7.centos.x86_64.rpm</a></p>
</blockquote>
<p>2.然后rpm安装一下就可以了：</p>
<blockquote>
<p>rpm -Uvh docker-engine-1.7.1-1.el7.centos.x86_64.rpm</p>
</blockquote>
<hr>
<p><img src="/img/docker/docker-anzhuang2.PNG" alt="Alt text"></p>
<p>如果有如下报错：</p>
<blockquote>
<p>error: Failed dependencies:     libcgroup is needed by<br>docker-engine-1.7.1-1.el7.centos.x86_64<br>请安装libcgroup<br><img src="/img/docker/docker-anzhuang1.png" alt="Alt text"></p>
</blockquote>
<h1 id="验证安装：">验证安装：</h1><p>安装完成看一看有木有安装好：</p>
<blockquote>
<p>docker version</p>
</blockquote>
<h1 id="启动docker">启动docker</h1><blockquote>
<p>service docker start<br><img src="/img/docker/docker-begin.PNG" alt="Alt text"></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前已经<a href="http://tonylit.me/2015/11/24/docker/">介绍了docker</a>，今天来安装一下。<br>首先，准备一个 CentOS 的操作系统<br>Ubuntu 或其它 Linux 操作系统也能玩 Docker，这里就不介绍了。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[atom编辑器爆爆爆]]></title>
    <link href="http://tonylit.me/2015/12/01/atom%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>http://tonylit.me/2015/12/01/atom编辑器/</id>
    <published>2015-12-01T03:37:27.000Z</published>
    <updated>2015-12-01T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>狂拽炫酷屌炸天的编辑器插件，<br>来点音乐、再配上机械键盘，啪啪啪！爆爆爆爆！!<br><img src="/img/atom/atom1.gif" alt="Alt text"><br><img src="/img/atom/atom2.gif" alt="Alt text"><br><a id="more"></a></p>
<h1 id="网页效果">网页效果</h1><p>demo：<a href="http://kushagragour.in/code-blast-codemirror/demo/index.html" target="_blank" rel="external">http://kushagragour.in/code-blast-codemirror/demo/index.html</a></p>
<p>安装起来很简单</p>
<h1 id="下载atom编辑器并安装">下载atom编辑器并安装</h1><p>网上很多，自行下载并安装</p>
<h1 id="下载插件">下载插件</h1><p>1.github上面<a href="https://github.com/tonylit/activate-power-mode，" target="_blank" rel="external">https://github.com/tonylit/activate-power-mode，</a><br>  先fork一下，下载下来<br><img src="/img/atom/gitatom.PNG" alt="Alt text"></p>
<h1 id="安装插件">安装插件</h1><p>2.把下载的插件放入C:\Users\pc.atom\packages 文件夹中<br>  打开cmd调到activate-power-mode-master这个文件里面apm install就可以了<br> 如果有如下报错：<br> <img src="/img/atom/error.PNG" alt="Alt text"><br> 请多执行几次apm install（我是执行了几十次，网络实在是不稳定）</p>
<h1 id="开启插件">开启插件</h1><p> 重新打开atom，按快捷键ctrl+alt+o，如果快捷键冲突，请按 ctrl + alt + r reload window 之后就可以按 ctrl + alt + o </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>狂拽炫酷屌炸天的编辑器插件，<br>来点音乐、再配上机械键盘，啪啪啪！爆爆爆爆！!<br><img src="/img/atom/atom1.gif" alt="Alt text"><br><img src="/img/atom/atom2.gif" alt="Alt text"><br>]]>
    
    </summary>
    
      <category term="atom" scheme="http://tonylit.me/tags/atom/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[抽奖性能测试]]></title>
    <link href="http://tonylit.me/2015/11/30/%E6%8A%BD%E5%A5%96%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <id>http://tonylit.me/2015/11/30/抽奖性能测试/</id>
    <published>2015-11-30T03:37:27.000Z</published>
    <updated>2015-11-13T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>公司成立20周年在网站上搞了个<strong>抽奖活动</strong>，应邀给项目组做一次压力测试。<br>之前也没有过类似业务的测试，无指标参考，在此记录下，下次类似测试可以参考参考。<br><a id="more"></a></p>
<h1 id="业务说明">业务说明</h1><ul>
<li>第一步：填写祝福语</li>
<li>第二步：抽奖</li>
</ul>
<h1 id="技术架构：">技术架构：</h1><p>所有的记录先提交至redis中，<br>数据由定时程序1分钟从redis同步至数据库。</p>
<h1 id="测试环境：">测试环境：</h1><p><img src="/img/redis.png" alt="Alt text"></p>
<h1 id="被测系统硬件">被测系统硬件</h1><p>应用服务器    Intel(R) Xeon(R) CPU E5-2650<br>Processor :  1×2<br>Memory：1.5G</p>
<h1 id="结果：">结果：</h1><p>发送祝福语TPS:222<br>抽奖TPS：192</p>
<h1 id="其他：">其他：</h1><p>抽奖需要考虑的点：</p>
<ul>
<li>cache和db端持久化问题<br>redis这边数据不能每次入库就清空，保证要在redis中有持久化。</li>
<li>数据量保证一致<br>有多少奖就抽多少，不能发现多抽的情况</li>
<li>单个奖项数量一致<br>一等奖只有一个，不会被几个人同时抽中</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>公司成立20周年在网站上搞了个<strong>抽奖活动</strong>，应邀给项目组做一次压力测试。<br>之前也没有过类似业务的测试，无指标参考，在此记录下，下次类似测试可以参考参考。<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Jprofiler安装]]></title>
    <link href="http://tonylit.me/2015/11/25/Jprofiler%E5%AE%89%E8%A3%85/"/>
    <id>http://tonylit.me/2015/11/25/Jprofiler安装/</id>
    <published>2015-11-25T03:37:27.000Z</published>
    <updated>2015-11-25T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>Jprofiler是一个全面的JAVA剖析工具，它有很好的GUI帮助我们定位性能瓶颈、抓住内容泄露等问题。<br>之前一直没机会用，最近在某新项目组压性能的时候用了一下。<br>灰常牛X，直接定位到sql层面的问题（耗时长），在问题定位上省了很多时间。<br>项目组用的mysql数据库，慢查询真的挺shi的，如果用的oracle，AWR,ADDM,SLA一下，啪啪啪完事~</p>
<a id="more"></a>
<p>Jprofiler监控这块其实挺简单的，主要是安装，尤其是要监控远程resin或者tomcat，装起来还是挺麻烦的，搞了我一个多小时…</p>
<h1 id="Jprofiler下载">Jprofiler下载</h1><p><a href="http://www.ej-technologies.com/download/jprofiler/files" target="_blank" rel="external">下载最新版本的Jprofiler</a>，<a href="http://pan.baidu.com/s/1hqe2rv2" target="_blank" rel="external">我的网盘下载</a>，我用的9.0，windows和linux版本都需要下载。</p>
<h1 id="Jprofiler安装">Jprofiler安装</h1><p>windows下的安装不用说了，.exe文件一直next<br>这里说下linux下的，我用的centos5.8</p>
<h2 id="步骤一、服务器端安装Jprofiler">步骤一、服务器端安装Jprofiler</h2><p>将下载的Jprofiler放入服务器上，解压缩，比如我的目录：</p>
<blockquote>
<p>/home/admin/jprofiler9</p>
</blockquote>
<h2 id="步骤二、增加全部变量">步骤二、增加全部变量</h2><p>在/etc/profile中增加：</p>
<blockquote>
<p>export JPROFILE_HOME=/home/admin/jprofiler9 export<br>LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/admin/jprofiler9/bin/linux-x86</p>
</blockquote>
<p>添加完记得source一下：</p>
<blockquote>
<p>source /etc/profile</p>
</blockquote>
<h2 id="步骤三、在中间件中导入Jprofiler的jar包">步骤三、在中间件中导入Jprofiler的jar包</h2><p>我用的是resin，以此为例：<br>在resin.conf的<class-loader>标签中增加：</class-loader></p>
<blockquote>
<pre><code><span class="tag">&lt;<span class="title">tree-loader</span> <span class="attribute">path</span>=<span class="value">"/home/admin/jprofiler9/lib"</span>/&gt;</span>
 <span class="tag">&lt;<span class="title">tree-loader</span> <span class="attribute">path</span>=<span class="value">"/home/admin/jprofiler9/bin"</span>/&gt;</span>
</code></pre></blockquote>
<h2 id="步骤四、在启动脚本中增加jprofiler的启动参数">步骤四、在启动脚本中增加jprofiler的启动参数</h2><p>以resin为例，在resin的启动脚本中加入启动参数：</p>
<blockquote>
<p>-agentpath:/home/admin/jprofiler9/bin/linux-x64/libjprofilerti.so=port=8849,nowait<br>resin3.1的在配置文件中加入<br> <jvm-arg>-agentpath:/home/admin/jprofiler9/bin/linux-x64/libjprofilerti.so=port=8849,nowait</jvm-arg></p>
</blockquote>
<p>端口可以自己制定，注意后面连接的时候需要用到此端口</p>
<p>##步骤五、启动本地jprofiler客户端，配置信息</p>
<ul>
<li><p>启动客户端<br><img src="/img/jprofiler/jprofiler_1.PNG" alt="Alt text"></p>
</li>
<li><p>选择中间件<br><img src="/img/jprofiler/jprofiler_2.PNG" alt="Alt text"></p>
</li>
<li><p>选择远程监控的系统<br><img src="/img/jprofiler/jprofiler_3.PNG" alt="Alt text"></p>
</li>
<li><p>选择JDK版本，主要看下服务器上的jdk版本，是不是64位的<br><img src="/img/jprofiler/jprofiler_4.PNG" alt="Alt text"></p>
</li>
<li><p>选择启动方式，默认就行了<br><img src="/img/jprofiler/jprofiler_5.PNG" alt="Alt text"></p>
</li>
<li><p>填写服务器ip<br><img src="/img/jprofiler/jprofier_6.PNG" alt="Alt text"></p>
</li>
<li><p>填写服务器的哪个目录安装了jprofiler<br><img src="/img/jprofiler/jprofiler_7.PNG" alt="Alt text"></p>
</li>
<li><p>选择resin的启动脚本，我是将服务器上resin的启动脚本拿到本地<br><img src="/img/jprofiler/jprofiler_8.PNG" alt="Alt text"></p>
</li>
<li><p>端口号和上面设置的保持一样<br><img src="/img/jprofiler/jprofiler_9.PNG" alt="Alt text"></p>
</li>
</ul>
<p>后面一直next，就可以了</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Jprofiler是一个全面的JAVA剖析工具，它有很好的GUI帮助我们定位性能瓶颈、抓住内容泄露等问题。<br>之前一直没机会用，最近在某新项目组压性能的时候用了一下。<br>灰常牛X，直接定位到sql层面的问题（耗时长），在问题定位上省了很多时间。<br>项目组用的mysql数据库，慢查询真的挺shi的，如果用的oracle，AWR,ADDM,SLA一下，啪啪啪完事~</p>]]>
    
    </summary>
    
      <category term="Jprofiler" scheme="http://tonylit.me/tags/Jprofiler/"/>
    
      <category term="jvm" scheme="http://tonylit.me/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[kafka与countdownlatch]]></title>
    <link href="http://tonylit.me/2015/11/24/kafka%E4%B8%8Ecountdownlatch/"/>
    <id>http://tonylit.me/2015/11/24/kafka与countdownlatch/</id>
    <published>2015-11-24T03:37:27.000Z</published>
    <updated>2015-11-24T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>之前测试kafka消息发送的QPS，刚开始用loadrunner写java的，模拟kafka produce的send，发现loadrunner对这种高精确的请求有很大误差（kafka 的消息精确到毫秒，最小的测试40ms），可能loadrunner模拟请求自身需要耗费时间，遂改为直接通过编写代码多线程方式发送请求。<br><a id="more"></a><br>哎，很惭愧，对java不是很精通~<br>开始直接无脑new Thread，for循环依次启动10个线程执行，如下：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class KafkaProduce &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ProducerConfig config;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">// 设置配置属性</span></span><br><span class="line">    Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">    props.put(<span class="string">"metadata.broker.list"</span>, <span class="string">"192.168.28.191:9092,192.168.28.192:9092"</span>);</span><br><span class="line">    props.put(<span class="string">"serializer.class"</span>, <span class="string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line">    <span class="comment">// key.serializer.class默认为serializer.class</span></span><br><span class="line">    props.put(<span class="string">"key.serializer.class"</span>, <span class="string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line">    <span class="comment">// 值为0,1,-1,可以参考</span></span><br><span class="line">    <span class="comment">// http://kafka.apache.org/08/configuration.html</span></span><br><span class="line">    props.put(<span class="string">"request.required.acks"</span>, <span class="string">"0"</span>);</span><br><span class="line">    config = <span class="keyword">new</span> ProducerConfig(props);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">String</span> topic = <span class="string">"kafka_test_1"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] data = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                <span class="comment">// 创建producer</span></span><br><span class="line">                Producer&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; producer = <span class="keyword">new</span> Producer&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;(config);</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line">                    <span class="keyword">long</span> all = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">long</span> begin = System.nanoTime();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                        producer.send(<span class="keyword">new</span> KeyedMessage&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;(topic, <span class="keyword">new</span> <span class="keyword">String</span>(data)));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">                    all += end - begin;</span><br><span class="line">                    System.out.<span class="built_in">println</span>(TimeUnit.NANOSECONDS.toMillis(all));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;.start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"kafka failed"</span>);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1106</span></span><br><span class="line"><span class="number">1637</span></span><br><span class="line"><span class="number">1676</span></span><br><span class="line"><span class="number">1682</span></span><br><span class="line"><span class="number">1701</span></span><br><span class="line"><span class="number">1751</span></span><br><span class="line"><span class="number">1760</span></span><br><span class="line"><span class="number">1777</span></span><br><span class="line"><span class="number">1859</span></span><br><span class="line"><span class="number">1913</span></span><br><span class="line"><span class="number">1938</span></span><br></pre></td></tr></table></figure>
<p>今天无聊逛了逛贴吧，发现竟然有countdownlatch这么个东东，可以让10个线程一块跑，并发执行的话，这个应该更合理吧，遂改了一下代码：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> class KafaProduce2 &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ProducerConfig config;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">// 设置配置属性</span></span><br><span class="line">    Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">    props.put(<span class="string">"metadata.broker.list"</span>, <span class="string">"192.168.28.191:9092,192.168.28.192:9092"</span>);</span><br><span class="line">    props.put(<span class="string">"serializer.class"</span>, <span class="string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line">    <span class="comment">// key.serializer.class默认为serializer.class</span></span><br><span class="line">    props.put(<span class="string">"key.serializer.class"</span>, <span class="string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line">    <span class="comment">// 值为0,1,-1,可以参考</span></span><br><span class="line">    <span class="comment">// http://kafka.apache.org/08/configuration.html</span></span><br><span class="line">    props.put(<span class="string">"request.required.acks"</span>, <span class="string">"0"</span>);</span><br><span class="line">    config = <span class="keyword">new</span> ProducerConfig(props);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">String</span> topic = <span class="string">"kafka_test_1"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] data = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 倒数计数器</span></span><br><span class="line">    <span class="keyword">final</span> CountDownLatch begin = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 倒数计数器</span></span><br><span class="line">    <span class="keyword">final</span> CountDownLatch end = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建producer</span></span><br><span class="line">            Producer&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; producer = <span class="keyword">new</span> Producer&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;(config);</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    begin.await();</span><br><span class="line">                    <span class="keyword">long</span> all = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">long</span> begin = System.nanoTime();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                        producer.send(<span class="keyword">new</span> KeyedMessage&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;(topic, <span class="keyword">new</span> <span class="keyword">String</span>(data)));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">                    all = end - begin;</span><br><span class="line">                    System.out.<span class="built_in">println</span>(TimeUnit.NANOSECONDS.toMillis(all));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">finally</span> &#123;</span><br><span class="line">                    end.countDown();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    begin.countDown();</span><br><span class="line"></span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"开始。。。。"</span>);</span><br><span class="line"></span><br><span class="line">    end.await();</span><br><span class="line"></span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"结束。。。。"</span>);</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">开始。。。。</span><br><span class="line"><span class="number">1406</span></span><br><span class="line"><span class="number">1618</span></span><br><span class="line"><span class="number">1643</span></span><br><span class="line"><span class="number">1708</span></span><br><span class="line"><span class="number">1714</span></span><br><span class="line"><span class="number">1768</span></span><br><span class="line"><span class="number">1783</span></span><br><span class="line"><span class="number">1837</span></span><br><span class="line"><span class="number">1840</span></span><br><span class="line"><span class="number">1858</span></span><br><span class="line">结束。。。。</span><br></pre></td></tr></table></figure>
<p>然后，加了个线程池，如下：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class KafkaProduce3 &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ProducerConfig config;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">// 设置配置属性</span></span><br><span class="line">    Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">    props.put(<span class="string">"metadata.broker.list"</span>, <span class="string">"192.168.28.191:9092,192.168.28.192:9092"</span>);</span><br><span class="line">    props.put(<span class="string">"serializer.class"</span>, <span class="string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line">    <span class="comment">// key.serializer.class默认为serializer.class</span></span><br><span class="line">    props.put(<span class="string">"key.serializer.class"</span>, <span class="string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line">    <span class="comment">// 值为0,1,-1,可以参考</span></span><br><span class="line">    <span class="comment">// http://kafka.apache.org/08/configuration.html</span></span><br><span class="line">    props.put(<span class="string">"request.required.acks"</span>, <span class="string">"0"</span>);</span><br><span class="line">    config = <span class="keyword">new</span> ProducerConfig(props);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">String</span> topic = <span class="string">"kafka_test_1"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] data = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 倒数计数器</span></span><br><span class="line">    <span class="keyword">final</span> CountDownLatch begin = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 倒数计数器</span></span><br><span class="line">    <span class="keyword">final</span> CountDownLatch end = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    ExecutorService execu = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建producer</span></span><br><span class="line">            Producer&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; producer = <span class="keyword">new</span> Producer&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;(config);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    begin.await();</span><br><span class="line">                    <span class="keyword">long</span> all = <span class="number">0</span>;</span><br><span class="line">                    KeyedMessage k = <span class="keyword">new</span> KeyedMessage&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;(topic, <span class="keyword">new</span> <span class="keyword">String</span>(data));</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                        <span class="keyword">long</span> begin = System.nanoTime();</span><br><span class="line">                        producer.send(k);</span><br><span class="line">                        <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">                        all += end - begin;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.<span class="built_in">println</span>(TimeUnit.NANOSECONDS.toMillis(all));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">finally</span> &#123;</span><br><span class="line">                    end.countDown();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        execu.submit(r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    begin.countDown();</span><br><span class="line"></span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"开始。。。。"</span>);</span><br><span class="line"></span><br><span class="line">    end.await();</span><br><span class="line"></span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"结束。。。。"</span>);</span><br><span class="line">    execu.shutdown();</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">开始。。。。</span><br><span class="line"><span class="number">1296</span></span><br><span class="line"><span class="number">1463</span></span><br><span class="line"><span class="number">1464</span></span><br><span class="line"><span class="number">1578</span></span><br><span class="line"><span class="number">1603</span></span><br><span class="line"><span class="number">1630</span></span><br><span class="line"><span class="number">1755</span></span><br><span class="line"><span class="number">1771</span></span><br><span class="line"><span class="number">1826</span></span><br><span class="line"><span class="number">1854</span></span><br><span class="line">结束。。。。</span><br></pre></td></tr></table></figure>
<p>后面2个结果好一些，做并发测试的时候也更合理！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前测试kafka消息发送的QPS，刚开始用loadrunner写java的，模拟kafka produce的send，发现loadrunner对这种高精确的请求有很大误差（kafka 的消息精确到毫秒，最小的测试40ms），可能loadrunner模拟请求自身需要耗费时间，遂改为直接通过编写代码多线程方式发送请求。<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
      <category term="kafka" scheme="http://tonylit.me/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker]]></title>
    <link href="http://tonylit.me/2015/11/24/docker/"/>
    <id>http://tonylit.me/2015/11/24/docker/</id>
    <published>2015-11-24T03:37:27.000Z</published>
    <updated>2015-11-24T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>如果你现在不知道<strong>docker</strong>，那你在这个圈子里就low了。<br>docker作为一个轻量级的虚拟化解决方案，完爆其他的虚拟化技术（kvm、vmware…），各大互联网公司，阿里、百度、qiniu等等，只要是做云的，都开始转向docker，包括VMware也宣布与docker合作。<br>不得不说民间大神还是吊啊，脑子和技术杠杠的，生下来这个一条大鲸鱼，这即将是一场革命，开发和运维是不是都在哈哈哈啊！！<br><img src="/img/docker/docker-ico.png" alt="Alt text"><br><a id="more"></a></p>
<h1 id="史上最全的docker资料集">史上最全的docker资料集</h1><p>不错的整理，<a href="http://special.csdncms.csdn.net/BeDocker/" target="_blank" rel="external">docker的很多资料都在这</a></p>
<h1 id="docker安装请移步：">docker安装请移步：</h1><p>  <a href="http://tonylit.me/2015/12/02/centos7.1%E4%B8%8B%E5%AE%89%E8%A3%85docker/">centos7.1下docker安装</a></p>
<h1 id="什么是docker？">什么是docker？</h1><p>Docker 是一个开源项目，诞生于 2013 年初，最初是 dotCloud 公司内部的一个业余项目。它基于 Google 公司推出的 Go 语言实现。<br> Docker 的基础是 Linux 容器（<a href="http://baike.baidu.com/link?url=1MqaZ9yQUbI7hbcp3v4oZlKyKVVfn01E1aDJ4SmXnTCmybuaWyMzpr4sr6wPNIBYKj5NqMq3Y3MhC7Anptdnwa" target="_blank" rel="external">LXC</a>）等技术，在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。</p>
<h1 id="为啥都在使用docker？">为啥都在使用docker？</h1><p><strong>Dock可以用来：</strong></p>
<ul>
<li>自动化打包和部署任何应用</li>
<li>创建一个轻量级私有PaaS云</li>
<li>搭建开发测试环境</li>
<li>部署可扩展的Web应用</li>
</ul>
<table>
<thead>
<tr>
<th>特性</th>
<th style="text-align:center">docker</th>
<th style="text-align:right">虚拟机</th>
</tr>
</thead>
<tbody>
<tr>
<td>启动</td>
<td style="text-align:center">秒级</td>
<td style="text-align:right">分钟级</td>
</tr>
<tr>
<td>硬盘使用</td>
<td style="text-align:center">一般为 MB</td>
<td style="text-align:right">一般为 GB</td>
</tr>
<tr>
<td>性能</td>
<td style="text-align:center">接近原生</td>
<td style="text-align:right">弱于</td>
</tr>
<tr>
<td>系统支持量</td>
<td style="text-align:center">单机支持上千个容器</td>
<td style="text-align:right">一般几十个</td>
</tr>
</tbody>
</table>
<h1 id="docker与传统虚拟机的比较">docker与传统虚拟机的比较</h1><p><strong>传统vm</strong><br><img src="/img/docker/docker-jiagou.png" alt="Alt text">  </p>
<p><strong>docker</strong><br><img src="/img/docker/vm-jiagou.png" alt="Alt text"></p>
<p>比较两图的差异，虚拟机的Guest OS层和Hypervisor层在docker中被Docker Engine层所替代。虚拟机的Guest OS就是虚拟机安装的操作系统，它是一个完整操作系统内核；虚拟机的Hypervisor层可以简单理解为一个硬件虚拟化平台，它在Host OS是以内核态的驱动存在的。<br>虚拟机实现资源隔离的方法是利用独立的OS，并利用Hypervisor虚拟化CPU、内存、IO设备等实现的。例如，为了虚拟CPU，Hypervisor会为每个虚拟的CPU创建一个数据结构，模拟CPU的全部寄存器的值，在适当的时候跟踪并修改这些值。需要指出的是在大多数情况下，虚拟机软件代码是直接跑在硬件上的，而不需要Hypervisor介入。只有在一些权限高的请求下，Guest OS需要运行内核态修改CPU的寄存器数据，Hypervisor会介入，修改并维护虚拟的CPU状态。<br>docker直接利用宿主机的内核，而不需要Guest OS。因此，当新建一个容器时，docker不需要和虚拟机一样重新加载一个操作系统内核。引导、加载操作系统内核是一个比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载Guest OS，这个新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统，则省略了这个过程，因此新建一个docker容器只需要几秒钟，因此，docker对比虚拟机在资源消耗上也占有比较大的优势。事实上，在一台物理机上我们可以很容易建立成百上千的容器，而只能建立几个虚拟机。</p>
<h2 id="计算能力上的比较（IBM发表的论文）">计算能力上的比较（IBM发表的论文）</h2><p>根据IBM发表的论文给出的数据进行分析。以下的数据均是在IBM x3650 M4服务器测得，其主要的硬件参数是：<br>（1）2颗英特尔xeon E5-2655 处理器，主频2.4-3.0 GHz。每颗处理器有8个核，因此总共有16个核。<br>（2）256 GB RAM.<br>在测试中是通过运算Linpack程序来获得计算能力数据的。结果如下图所示：<br><img src="/img/docker/yunsuan.png" alt="Alt text"><br>从左往右分别是物理机、docker和虚拟机的计算能力数据。<br>差距还是很明显的，docker相对于物理机其计算能力几乎没有损耗，而虚拟机对比物理机则有着非常明显的损耗。虚拟机的计算能力损耗在50%左右。<br>为什么会有这么大的性能损耗呢？一方面是因为虚拟机增加了一层虚拟硬件层，运行在虚拟机上的应用程序在进行数值计算时是运行在Hypervisor虚拟的CPU上的；另外一方面是由于计算程序本身的特性导致的差异。虚拟机虚拟的cpu架构不同于实际cpu架构，数值计算程序一般针对特定的cpu架构有一定的优化措施，虚拟化使这些措施作废，甚至起到反效果。</p>
<h1 id="docker的劣势">docker的劣势</h1><p>docker的劣势</p>
<p>docker也不是完美的系统。相对于虚拟机，docker还存在着以下几个缺点：<br>1.资源隔离方面不如虚拟机，docker是利用cgroup实现资源限制的，只能限制资源消耗的最大值，而不能隔绝其他程序占用自己的资源。<br>2.安全性问题。docker目前并不能分辨具体执行指令的用户，只要一个用户拥有执行docker的权限，那么他就可以对docker的容器进行所有操作，不管该容器是否是由该用户创建。比如A和B都拥有执行docker的权限，由于docker的server端并不会具体判断docker cline是由哪个用户发起的，A可以删除B创建的容器，存在一定的安全风险。<br>3.docker目前还在版本的快速更新中，细节功能调整比较大。一些核心模块依赖于高版本内核，存在版本兼容问题</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>如果你现在不知道<strong>docker</strong>，那你在这个圈子里就low了。<br>docker作为一个轻量级的虚拟化解决方案，完爆其他的虚拟化技术（kvm、vmware…），各大互联网公司，阿里、百度、qiniu等等，只要是做云的，都开始转向docker，包括VMware也宣布与docker合作。<br>不得不说民间大神还是吊啊，脑子和技术杠杠的，生下来这个一条大鲸鱼，这即将是一场革命，开发和运维是不是都在哈哈哈啊！！<br><img src="/img/docker/docker-ico.png" alt="Alt text"><br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://tonylit.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[天选之子-lebron james]]></title>
    <link href="http://tonylit.me/2015/11/22/%E5%A4%A9%E9%80%89%E4%B9%8B%E5%AD%90-%E8%A9%B9%E5%A7%86%E6%96%AF/"/>
    <id>http://tonylit.me/2015/11/22/天选之子-詹姆斯/</id>
    <published>2015-11-22T03:37:27.000Z</published>
    <updated>2015-11-22T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>什么时候开始喜欢詹姆斯，<br>应该是09年东决G2绝杀魔术，<br>1s绝杀的时候，真的是把我看哭了，一个人带队实在是太不容易！<br>现在，23号又回到了家乡，<br>剑指总冠军，我们拭目以待！！</p>
<p><img src="/img/levron-james.jpg" alt="Alt text"></p>
<a id="more"></a>
<hr>
<h1 id="荣誉榜-What_is_the_MVP_means？">荣誉榜-What is the MVP means？</h1><p><img src="/img/king.jpg" alt="Alt text"></p>
<h1 id="激情夺冠之路">激情夺冠之路</h1><div class="owl-youku"><br><div class="owl-media owl-video owl-youku"><iframe src="http://player.youku.com/embed/XNTAzODA2ODYw" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen></iframe></div><br></div>]]></content>
    <summary type="html">
    <![CDATA[<p>什么时候开始喜欢詹姆斯，<br>应该是09年东决G2绝杀魔术，<br>1s绝杀的时候，真的是把我看哭了，一个人带队实在是太不容易！<br>现在，23号又回到了家乡，<br>剑指总冠军，我们拭目以待！！</p>
<p><img src="/img/levron-james.jpg" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="lebron james" scheme="http://tonylit.me/tags/lebron-james/"/>
    
      <category term="life" scheme="http://tonylit.me/tags/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[kafka入门]]></title>
    <link href="http://tonylit.me/2015/11/19/kafka%E5%85%A5%E9%97%A8/"/>
    <id>http://tonylit.me/2015/11/19/kafka入门/</id>
    <published>2015-11-19T03:37:27.000Z</published>
    <updated>2015-11-19T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>公司的一些项目用的<a href="http://www.cnblogs.com/kgdxpr/p/3381974.html" target="_blank" rel="external">ActivemMQ</a>，最近有个项目开始尝试使用Kafka，有幸帮忙测试了kafka-Producer和Consumer消息吞吐相关的性能，包括broker切换消息的丢失率。在此之前，我对kafka完全不了解。<br>kafka 作为分布式的消息系统，性能大大超过传统的ActiveMQ，市场前景很广，虽然目前还有一些不足的地方，但以后很可能会是分布式消息系统的主流，有必要学习一下！<br><a id="more"></a></p>
<h1 id="介绍">介绍</h1><p>kafka是Linkedin于2010年12月份开源的消息系统，它主要用于处理活跃的流式数据。活跃的流式数据在web网站应用中非常常见，这些数据包括网站的pv、用户访问了什么内容，搜索了什么内容等。 这些数据通常以日志的形式记录下来，然后每隔一段时间进行一次统计处理。<br>传统的日志分析系统提供了一种离线处理日志信息的可扩展方案，但若要进行实时处理，通常会有较大延迟。而现有的消息（队列）系统能够很好的处理实时或者近似实时的应用，但未处理的数据通常不会写到磁盘上，这对于Hadoop之类（一小时或者一天只处理一部分数据）的离线应用而言，可能存在问题。Kafka正是为了解决以上问题而设计的，它能够很好地离线和在线应用。</p>
<h1 id="与其他常用Message_Queue对比">与其他常用Message Queue对比</h1><ul>
<li><strong>RabbitMQ</strong><br>RabbitMQ是使用Erlang编写的一个开源的消息队列，本身支持很多的协议：AMQP，XMPP, SMTP, STOMP，也正因如此，它非常重量级，更适合于企业级的开发。同时实现了Broker构架，这意味着消息在发送给客户端时先在中心队列排队。对路由，负载均衡或者数据持久化都有很好的支持。</li>
<li><strong>Redis</strong><br>Redis是一个基于Key-Value对的NoSQL数据库，开发维护很活跃。虽然它是一个Key-Value数据库存储系统，但它本身支持MQ功能，所以完全可以当做一个轻量级的队列服务来使用。对于RabbitMQ和Redis的入队和出队操作，各执行100万次，每10万次记录一次执行时间。测试数据分为128Bytes、512Bytes、1K和10K四个不同大小的数据。实验表明：入队时，当数据比较小时Redis的性能要高于RabbitMQ，而如果数据大小超过了10K，Redis则慢的无法忍受；出队时，无论数据大小，Redis都表现出非常好的性能，而RabbitMQ的出队性能则远低于Redis。</li>
<li><strong>ZeroMQ</strong><br>ZeroMQ号称最快的消息队列系统，尤其针对大吞吐量的需求场景。ZMQ能够实现RabbitMQ不擅长的高级/复杂的队列，但是开发人员需要自己组合多种技术框架，技术上的复杂度是对这MQ能够应用成功的挑战。ZeroMQ具有一个独特的非中间件的模式，你不需要安装和运行一个消息服务器或中间件，因为你的应用程序将扮演了这个服务角色。你只需要简单的引用ZeroMQ程序库，可以使用NuGet安装，然后你就可以愉快的在应用程序之间发送消息了。但是ZeroMQ仅提供非持久性的队列，也就是说如果宕机，数据将会丢失。其中，Twitter的Storm 0.9.0以前的版本中默认使用ZeroMQ作为数据流的传输（Storm从0.9版本开始同时支持ZeroMQ和Netty作为传输模块）。</li>
<li><strong>ActiveMQ</strong><br>ActiveMQ是Apache下的一个子项目。 类似于ZeroMQ，它能够以代理人和点对点的技术实现队列。同时类似于RabbitMQ，它少量代码就可以高效地实现高级应用场景。<br>-<strong>Kafka/Jafka</strong><br>Kafka是Apache下的一个子项目，是一个高性能跨语言分布式发布/订阅消息队列系统，而Jafka是在Kafka之上孵化而来的，即Kafka的一个升级版。具有以下特性：快速持久化，可以在O(1)的系统开销下进行消息持久化；高吞吐，在一台普通的服务器上既可以达到10W/s的吞吐速率；完全的分布式系统，Broker、Producer、Consumer都原生自动支持分布式，自动实现复杂均衡；支持Hadoop数据并行加载，对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka通过Hadoop的并行加载机制来统一了在线和离线的消息处理。Apache Kafka相对于ActiveMQ是一个非常轻量级的消息系统，除了性能非常好之外，还是一个工作良好的分布式系统。<h2 id="术语">术语</h2>首先让我们看几个基本的消息系统术语：</li>
<li><strong>Broker</strong><br>Kafka集群包含一个或多个服务器，这种服务器被称为broker</li>
<li><strong>Topic</strong><br>每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic。（物理上不同Topic的消息分开存储，逻辑上一个Topic的消息虽然保存于一个或多个broker上但用户只需指定消息的Topic即可生产或消费数据而不必关心数据存于何处）</li>
<li><strong>Partition</strong><br>Parition是物理上的概念，每个Topic包含一个或多个Partition.</li>
<li><strong>Producer</strong><br>负责发布消息到Kafka broker</li>
<li><strong>Consumer</strong><br>消息消费者，向Kafka broker读取消息的客户端。</li>
<li><strong>Consumer Group</strong><br>每个Consumer属于一个特定的Consumer Group（可为每个Consumer指定group name，若不指定group name则属于默认的group）。<h2 id="拓扑结构">拓扑结构</h2><img src="/img/kafkatuopu.jpg" alt="Alt text"><br>如上图所示，一个典型的Kafka集群中包含若干Producer（可以是web前端产生的Page View，或者是服务器日志，系统CPU、Memory等），若干broker（Kafka支持水平扩展，一般broker数量越多，集群吞吐率越高），若干Consumer Group，以及一个Zookeeper集群。Kafka通过Zookeeper管理集群配置，选举leader，以及在Consumer Group发生变化时进行rebalance。Producer使用push模式将消息发布到broker，Consumer使用pull模式从broker订阅并消费消息。<br>需要提到的一点：<strong>客户端和服务端通过TCP协议通信</strong>。Kafka提供了Java客户端，并且对多种语言都提供了支持。<h2 id="Topics_和Logs">Topics 和Logs</h2>先来看一下Kafka提供的一个抽象概念:topic.<br>一个topic是对一组消息的归纳。Topic在逻辑上可以被认为是一个queue，每条消费都必须指定它的topic，可以简单理解为必须指明把这条消息放进哪个queue里。对每个topic，Kafka 对它的日志进行了分区，如下图所示：<br><img src="/img/topic.png" alt="Alt text"><br>每个分区都由一系列有序的、不可变的消息组成，这些消息被连续的追加到分区中。分区中的每个消息都有一个连续的序列号叫做offset,用来在分区中唯一的标识这个消息。<br>在一个可配置的时间段内，Kafka集群保留所有发布的消息，不管这些消息有没有被消费。比如，如果消息的保存策略被设置为2天，那么在一个消息被发布的两天时间内，它都是可以被消费的。之后它将被丢弃以释放空间。Kafka的性能是和数据量无关的常量级的，所以保留太多的数据并不是问题。</li>
</ul>
<p>实际上每个consumer唯一需要维护的数据是消息在日志中的位置，也就是offset.这个offset有consumer来维护：一般情况下随着consumer不断的读取消息，这offset的值不断增加，但其实consumer可以以任意的顺序读取消息，比如它可以将offset设置成为一个旧的值来重读之前的消息。</p>
<p>以上特点的结合，使Kafka consumers非常的轻量级：它们可以在不对集群和其他consumer造成影响的情况下读取消息。你可以使用命令行来”tail”消息而不会对其他正在消费消息的consumer造成影响。</p>
<p>将日志分区可以达到以下目的：首先这使得每个日志的数量不会太大，可以在单个服务上保存。另外每个分区可以单独发布和消费，为并发操作topic提供了一种可能。</p>
<h2 id="分布式">分布式</h2><p>每个分区在Kafka集群的若干服务中都有副本，这样这些持有副本的服务可以共同处理数据和请求，副本数量是可以配置的。副本使Kafka具备了容错能力。<br>每个分区都由一个服务器作为“leader”，零或若干服务器作为“followers”,leader负责处理消息的读和写，followers则去复制leader.如果leader down了，followers中的一台则会自动成为leader。集群中的每个服务都会同时扮演两个角色：作为它所持有的一部分分区的leader，同时作为其他分区的followers，这样集群就会据有较好的负载均衡。</p>
<h2 id="Producers">Producers</h2><p>Producer将消息发布到它指定的topic中,并负责决定发布到哪个分区。通常简单的由负载均衡机制随机选择分区，但也可以通过特定的分区函数选择分区。使用的更多的是第二种,我们也是使用的这个。</p>
<h2 id="Consumers">Consumers</h2><p>发布消息通常有两种模式：队列模式（queuing）和发布-订阅模式(publish-subscribe)。队列模式中，consumers可以同时从服务端读取消息，每个消息只被其中一个consumer读到；发布-订阅模式中消息被广播到所有的consumer中。Consumers可以加入一个consumer 组，共同竞争一个topic，topic中的消息将被分发到组中的一个成员中。同一组中的consumer可以在不同的程序中，也可以在不同的机器上。如果所有的consumer都在一个组中，这就成为了传统的队列模式，在各consumer中实现负载均衡。如果所有的consumer都不在不同的组中，这就成为了发布-订阅模式，所有的消息都被分发到所有的consumer中。更常见的是，每个topic都有若干数量的consumer组，每个组都是一个逻辑上的“订阅者”，为了容错和更好的稳定性，每个组由若干consumer组成。这其实就是一个发布-订阅模式，只不过订阅者是个组而不是单个consumer。<br><img src="/img/consumers.png" alt="Alt text"><br>由两个机器组成的集群拥有4个分区 (P0-P3) 2个consumer组. A组有两个consumerB组有4个</p>
<h2 id="消息的有序性">消息的有序性</h2><p><strong>相比传统的消息系统，Kafka可以很好的保证有序性。</strong><br>传统的队列在服务器上保存有序的消息，如果多个consumers同时从这个服务器消费消息，服务器就会以消息存储的顺序向consumer分发消息。虽然服务器按顺序发布消息，但是消息是被异步的分发到各consumer上，所以当消息到达时可能已经失去了原来的顺序，这意味着并发消费将导致顺序错乱。为了避免故障，这样的消息系统通常使用“专用consumer”的概念，其实就是只允许一个消费者消费消息，当然这就意味着失去了并发性。</p>
<p>在这方面Kafka做的更好，通过分区的概念，Kafka可以在多个consumer组并发的情况下提供较好的有序性和负载均衡。将每个分区分只分发给一个consumer组，这样一个分区就只被这个组的一个consumer消费，就可以顺序的消费这个分区的消息。因为有多个分区，依然可以在多个consumer组之间进行负载均衡。注意consumer组的数量不能多于分区的数量，也就是有多少分区就允许多少并发消费。</p>
<p>Kafka只能保证一个分区之内消息的有序性，在不同的分区之间是不可以的，这已经可以满足大部分应用的需求。如果需要topic中所有消息的有序性，那就只能让这个topic只有一个分区，当然也就只有一个consumer组消费它。</p>
<hr>
<h1 id="环境搭建">环境搭建</h1><h2 id="下载kafka">下载kafka</h2><p><a href="http://kafka.apache.org/downloads.html" target="_blank" rel="external">下载最新版本的kafka</a>，我用的kafka_2.9.2-0.8.1.1</p>
<blockquote>
<p>我是放在/opt 目录下的<br>tar -xvf kafka_2.9.2-0.8.1.1.tgz</p>
</blockquote>
<h2 id="启动服务">启动服务</h2><h3 id="先启动zookeeper">先启动zookeeper</h3><p>Kafka用到了Zookeeper，所有首先启动Zookper，下面简单的启用一个单实例的Zookkeeper服务。可以在命令的结尾加个&amp;符号，这样就可以启动后离开控制台。</p>
<blockquote>
<p>cd kafka_2.9.2-0.8.1.1/bin/<br>bash zookeeper-server-start.sh /opt/kafka_2.9.2-0.8.1.1/config/zookeeper.properties &amp;</p>
</blockquote>
<p>这里可能会报错：<br>Unrecognized VM option ‘+UseCompressedOops’<br>Could not create the Java virtual machine.</p>
<blockquote>
<p>解决方法：<br>查看 bin/kafka-run-class.sh<br>找到<br>if [ -z “$KAFKA_JVM_PERFORMANCE_OPTS” ]; then<br>  KAFKA_JVM_PERFORMANCE_OPTS=”-server  -XX:+UseCompressedOops -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+CMSScavengeBeforeRemark -XX:+DisableExplicitGC -Djava.awt.headless=true”<br>fi<br>去掉-XX:+UseCompressedOops<br>再启用就可以了</p>
</blockquote>
<h3 id="再启动kafka">再启动kafka</h3><blockquote>
<p>bash kafka-server-start.sh /opt/kafka_2.9.2-0.8.1.1/config/server.properties &amp;</p>
</blockquote>
<p>如果报错，启动不了，可以多开几个终端试一试。</p>
<h2 id="创建_topic">创建 topic</h2><p>创建一个叫做“test”的topic，它只有一个分区，一个副本。</p>
<blockquote>
<p>bash kafka-topics.sh –create –zookeeper localhost:2181 –replication-factor 1 –partitions 1 –topic test</p>
</blockquote>
<p>可以通过list命令查看创建的topic:</p>
<blockquote>
<p>bash kafka-topics.sh –list –zookeeper localhost:2181</p>
</blockquote>
<p>除了手动创建topic，还可以配置broker让它自动创建topic.</p>
<h2 id="发送消息">发送消息</h2><p>Kafka 使用一个简单的命令行producer，从文件中或者从标准输入中读取消息并发送到服务端。默认的每条命令将发送一条消息。<br>运行producer并在控制台中输一些消息，这些消息将被发送到服务端：</p>
<blockquote>
<p>bash kafka-console-producer.sh –broker-list localhost:9092 –topic<br>test</p>
</blockquote>
<p>ctrl+c可以退出发送。</p>
<h2 id="启动consumer">启动consumer</h2><p>Kafka也有一个命令行consumer可以读取消息并输出到标准输出</p>
<blockquote>
<p>bash kafka-console-consumer.sh –zookeeper localhost:2181 –topic test –from-beginning</p>
</blockquote>
<h2 id="搭建一个多个broker的集群">搭建一个多个broker的集群</h2><p>刚才只是启动了单个broker，现在启动有3个broker组成的集群，这些broker节点也都是在本机上的：<br>首先为每个节点编写配置文件：</p>
<blockquote>
<p>cp config/server.properties config/server-1.properties<br>cp config/server.properties config/server-2.properties</p>
</blockquote>
<p>在拷贝出的新文件中添加以下参数：<br>config/server-1.properties:<br>    broker.id=1<br>    port=9093<br>    log.dir=/tmp/kafka-logs-1</p>
<p>config/server-2.properties:<br>    broker.id=2<br>    port=9094<br>    log.dir=/tmp/kafka-logs-2</p>
<p>broker.id在集群中唯一的标注一个节点，因为在同一个机器上，所以必须制定不同的端口和日志文件，避免数据被覆盖。<br>刚才已经启动可Zookeeper和一个节点，现在启动另外两个节点：</p>
<blockquote>
<p>bin/kafka-server-start.sh config/server-1.properties &amp;<br>bin/kafka-server-start.sh config/server-2.properties &amp;</p>
</blockquote>
<p>创建一个拥有3个副本的topic:</p>
<blockquote>
<p>bin/kafka-topics.sh –create –zookeeper localhost:2181 –replication-factor 3 –partitions 1 –topic my-replicated-topic</p>
</blockquote>
<p>现在我们搭建了一个集群，怎么知道每个节点的信息呢？运行“”describe topics”命令就可以了：</p>
<blockquote>
<p>bin/kafka-topics.sh –describe –zookeeper localhost:2181 –topic my-replicated-topic<br>Topic:my-replicated-topic       PartitionCount:1        ReplicationFactor:3     Configs:<br>        Topic: my-replicated-topic      Partition: 0    Leader: 1       Replicas: 1,2,0 Isr: 1,2,0</p>
</blockquote>
<p>下面解释一下这些输出。第一行是对所有分区的一个描述，然后每个分区都会对应一行，因为我们只有一个分区所以下面就只加了一行。<br><strong>leader</strong>：负责处理消息的读和写，leader是从所有节点中随机选择的.<br><strong>replicas</strong>：列出了所有的副本节点，不管节点是否在服务中.<br><strong>isr</strong>：是正在服务中的节点.<br>在我们的例子中，节点1是作为leader运行。<br>向topic发送消息：</p>
<blockquote>
<p>bin/kafka-console-producer.sh –broker-list localhost:9092 –topic my-replicated-topic<br>my test message 1my test message 2</p>
</blockquote>
<p>消费这些消息：</p>
<blockquote>
<p>bin/kafka-console-consumer.sh –zookeeper localhost:2181 –from-beginning –topic my-replicated-topic</p>
<p>my test message 1<br>my test message 2</p>
</blockquote>
<p>测试一下容错能力.Broker 1作为leader运行，现在我们kill掉它：</p>
<blockquote>
<p>ps | grep server-1.properties7564 ttys002    0:15.91 /System/Library/Frameworks/JavaVM.framework/Versions/1.6/Home/bin/java…<br>kill -9 7564</p>
</blockquote>
<p>另外一个节点被选做了leader,node 1 不再出现在 in-sync 副本列表中：</p>
<blockquote>
<p>bin/kafka-topics.sh –describe –zookeeper localhost:218192 –topic my-replicated-topic<br>Topic:my-replicated-topic       PartitionCount:1        ReplicationFactor:3     Configs:<br>        Topic: my-replicated-topic      Partition: 0    Leader: 2       Replicas: 1,2,0 Isr: 2,0</p>
</blockquote>
<p>虽然最初负责续写消息的leader down掉了，但之前的消息还是可以消费的：</p>
<blockquote>
<p>bin/kafka-console-consumer.sh –zookeeper localhost:2181 –from-beginning –topic my-replicated-topic<br>…<br>my test message 1<br>my test message 2</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>公司的一些项目用的<a href="http://www.cnblogs.com/kgdxpr/p/3381974.html">ActivemMQ</a>，最近有个项目开始尝试使用Kafka，有幸帮忙测试了kafka-Producer和Consumer消息吞吐相关的性能，包括broker切换消息的丢失率。在此之前，我对kafka完全不了解。<br>kafka 作为分布式的消息系统，性能大大超过传统的ActiveMQ，市场前景很广，虽然目前还有一些不足的地方，但以后很可能会是分布式消息系统的主流，有必要学习一下！<br>]]>
    
    </summary>
    
      <category term="kafka" scheme="http://tonylit.me/tags/kafka/"/>
    
      <category term="工作" scheme="http://tonylit.me/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[全球黑客撕逼，蓝翔又在毕业考试吗？]]></title>
    <link href="http://tonylit.me/2015/11/18/%E5%85%A8%E7%90%83%E9%BB%91%E5%AE%A2%E6%92%95%E9%80%BC%EF%BC%8C%E8%93%9D%E7%BF%94%E5%8F%88%E5%9C%A8%E6%AF%95%E4%B8%9A%E8%80%83%E8%AF%95%E5%90%97%EF%BC%9F/"/>
    <id>http://tonylit.me/2015/11/18/全球黑客撕逼，蓝翔又在毕业考试吗？/</id>
    <published>2015-11-18T03:37:27.000Z</published>
    <updated>2015-11-18T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>前段时间全球黑客大战，在norse上看了一下世界地图，中国真是亮了，当然外行只能看看热闹~<br>世界地图上不时闪烁亮点，发射光波，攻击其他地域。每一次这样的闪烁表明某个地区施行了一次攻击<br><img src="/img/norse.gif" alt="Alt text"><br>附上两个网络攻击的监控网站，有兴趣的mark下~<br><a href="http://map.norsecorp.com/" target="_blank" rel="external">norse</a>  和 <a href="https://cybermap.kaspersky.com/" target="_blank" rel="external">cybermap</a></p>
<a id="more"></a>
<p><img src="/img/norse-attrack.jpg" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前段时间全球黑客大战，在norse上看了一下世界地图，中国真是亮了，当然外行只能看看热闹~<br>世界地图上不时闪烁亮点，发射光波，攻击其他地域。每一次这样的闪烁表明某个地区施行了一次攻击<br><img src="/img/norse.gif" alt="Alt text"><br>附上两个网络攻击的监控网站，有兴趣的mark下~<br><a href="http://map.norsecorp.com/">norse</a>  和 <a href="https://cybermap.kaspersky.com/">cybermap</a></p>]]>
    
    </summary>
    
      <category term="网络攻击" scheme="http://tonylit.me/tags/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB/"/>
    
      <category term="随笔" scheme="http://tonylit.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[性能分析过程]]></title>
    <link href="http://tonylit.me/2015/11/14/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/"/>
    <id>http://tonylit.me/2015/11/14/性能分析过程/</id>
    <published>2015-11-14T03:37:27.000Z</published>
    <updated>2015-11-14T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<h1 id="性能分析过程">性能分析过程</h1><p>一般情况，该怎样定位性能问题：<br><img src="/img/xingnengfenxiguocheng.PNG" alt="Alt text"></p>
<blockquote>
<p>资源利用率：top、vmstat、iostat、netstat<br>进程：top，top -Hp  &lt; pid &gt;<br>系统调用：strace<br>应用监控：jstack、jprofile、jvisualvm<br><a id="more"></a></p>
<h2 id="资源利用率">资源利用率</h2><p>top、vmstat、iostat、netstat、还有很多（sar、nmon），我比较喜欢用vmstat。</p>
</blockquote>
<p><img src="/img/vmstat.PNG" alt="Alt text"></p>
<blockquote>
<p>r： 表示运行队列,简单理解为有多少线程在排队，一般不要超过cpu个数的5倍。<br>b： 表示阻塞的进程,这个不多说，进程阻塞，大家懂的。<br>swpd ：虚拟内存已使用的大小。<br>free ：  空闲的物理内存的大小。<br>buff ：  物理内存用来缓存读写操作的buffer大小<br>cache： 物理内存用来缓存进程地址空间的 cache 大小<br>si ： 每秒从磁盘读入虚拟内存的大小，如果这个值大于0，表示物理内存不够用。<br>so：  每秒虚拟内存写入磁盘的大小，如果这个值大于0，同上。<br>bi ： 块设备每秒接收的块数量，一般指磁盘读入。<br>bo： 块设备每秒发送的块数量，一般指磁盘读出。<br>in： 每秒CPU的中断次数，包括时间中断<br>cs ：每秒上下文切换次数。<br>us： 用户CPU时间。<br>sy ：系统CPU时间，小于30%。<br>id ： 空闲 CPU时间。<br>wt：等待IO CPU时间，小于40%。</p>
</blockquote>
<p>我们先看一看哪一块的利用率超标了，下面附上OS常用阀值：</p>
<pre><code>-<span class="ruby"><span class="constant">TotalCPU</span>% &lt; <span class="number">75</span>%
</span>-<span class="ruby"><span class="constant">SysCPU</span>% &lt; <span class="number">30</span>%
</span>-<span class="ruby"><span class="constant">Load</span> <span class="constant">Average</span> &lt; <span class="number">5</span>
</span>-<span class="ruby"><span class="constant">Wio</span>% &lt; <span class="number">40</span>%
</span>-<span class="ruby">network% &lt; <span class="number">30</span>% -高了会大量丢包
</span>-<span class="ruby">mem% &lt; <span class="number">80</span>%~<span class="number">90</span>%
</span>-<span class="ruby"><span class="constant">Disk</span> busy% &lt; <span class="number">60</span>%
</span>-<span class="ruby"><span class="constant">Disk</span> usage &lt; <span class="number">90</span>% -高了会进行碎片整理</span>
</code></pre><p>如果发现比阀值高，肿么办？<br>不要着急，我们需要精确定位到具体的进程，看看到底哪个进程在捣鬼！<br>top 一下，看下cpu利用率占用或者内存占用高的进程。<br>将它的pid记住，开始动手分尸（分析）</p>
<pre><code><span class="number">1</span><span class="class">.strace</span> -f -c -<span class="tag">p</span> &lt;pid&gt;
<span class="number">2</span><span class="class">.jstack</span> -l &lt;pid&gt;
<span class="number">3</span>.jprofile或者jvisualvm
.....
</code></pre><p>strace：可以将应用对系统的所有调用都打出来，我们可以看到应用程序到底对内核干了多少坏坏的事儿~~~</p>
<blockquote>
<p>strace -f -c -p <pid><br><img src="/img/strace.PNG" alt="Alt text"></pid></p>
</blockquote>
<p>啥？？看不懂syscall，我也看不懂，老老实实百度~~<br>因为我接触大多都是java程序，所以我还是比较钟情于jstack和jprofiler的，嘿嘿！</p>
<blockquote>
<p>jstack -l <pid><br><img src="/img/jstack.PNG" alt="Alt text"><br>JVM的所有线程都打出来，建议输出到文件中，多打几次。</pid></p>
</blockquote>
<p>至于jprofiler，灰常牛X的jvm监控工具，线程数量，方法调用次数，sql执行时间，方法占用cpu的比例，内存大小，gc频率……所有的jvm相关的东东都有，具体怎么用在这里先不多说，上个图看看先~<br><img src="/img/jprofiler.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="性能分析过程">性能分析过程</h1><p>一般情况，该怎样定位性能问题：<br><img src="/img/xingnengfenxiguocheng.PNG" alt="Alt text"></p>
<blockquote>
<p>资源利用率：top、vmstat、iostat、netstat<br>进程：top，top -Hp  &lt; pid &gt;<br>系统调用：strace<br>应用监控：jstack、jprofile、jvisualvm<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[性能监控与分析-数据库]]></title>
    <link href="http://tonylit.me/2015/11/13/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%88%86%E6%9E%90-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://tonylit.me/2015/11/13/性能监控与分析-数据库/</id>
    <published>2015-11-13T03:37:27.000Z</published>
    <updated>2015-11-13T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>  一个网站的性能分为很多方面，从网络、OS、中间件、code、sql、数据库，还有前端的很多方面，比如：page size、请求数、开启压缩等，实在是太多太多，估计一辈子搞完所有的是不可能了。<br>    大型网站在访问高峰的时候，实际上<strong>最大的瓶颈在数据库</strong>。很多互联网公司为了解决数据库瓶颈，会在DB端应用很多缓存机制，memcache、redis、包括减轻流复制的压力会应用MQ，kafka等消息队列。据统计，某宝和某度数据库的压力仅占期请求的10%~20%,大多数都是被redis等处理掉了。<br>    那么问题来了，我们在性能测试的时候遇到DB端的性能问题该怎么定位与分析呢？</p>
<a id="more"></a>
<p>数据库的性能无非就两个方面-<strong>sql和配置</strong></p>
<h1 id="常见的数据库问题有哪些？">常见的数据库问题有哪些？</h1><blockquote>
<p>SQL语句低效或高负载<br>应用程序使用ORCLE数据库效果不佳<br>数据库内存结构大小不足<br>并发问题<br>I/O问题<br>数据库配置问题<br>数据库性能随着时间下降</p>
</blockquote>
<h1 id="ORCLE性能监控-AWR报告和ADDM">ORCLE性能监控-AWR报告和ADDM</h1><h2 id="awr和addm介绍">awr和addm介绍</h2><blockquote>
<p><strong>AWR</strong>:Automatic Workload Repository 是 10g 引入的一个重要组件，存贮着近期一段时间内数据库活动状态的详细信息、信息保留默认是7天。<br><img src="/img/ORACLE-AWR.png" alt="Alt text"></p>
<p><strong>ADDM</strong>：Oracle10g中推出了新的优化诊断工具：就是通过诊断和分析awr得到的数据来推断数据库可能存在的问题，addm给出的建议是依照减少db_time为依据。每次收集完awr报告后，都会产生一个addm分析，分析结果在shared_pool里，mmon进程定期将其写入磁盘，AWR每产生一次快照，MMON进程就通知ADDM把AWR最近两次快照之间的差值进行分析。因此，在默认情况下，每当有AWR的快照产生，ADDM将自动运行。通过em可以查看。所以说白了，addm应该是帮助我们发现问题的一个很好的工具。<strong>addm可以定位出很多问题，或许你想不到的，它都能帮你想到。</strong></p>
</blockquote>
<h2 id="如何导出awr报告">如何导出awr报告</h2><p>首先进入$ORACLE_HOME/rdbms/admin目录，在sqlplus下运行<strong>@awrrpt</strong>脚本（记得切换oralce用户哦~），按照提示一步一步就可以达成，导出的格式有两种，txt格式和html格式</p>
<p><img src="/img/login_oracle.PNG" alt="Alt text"></p>
<p><img src="/img/awr-create.PNG" alt="Alt text"></p>
<p><img src="/img/shengchengawr.PNG" alt="Alt text"></p>
<p>我们看到最后生成一个awr报告文件，把它拿出来，改成html格式的文件。</p>
<p><img src="/img/AWR-1.PNG" alt="Alt text"></p>
<h2 id="如何快速定位问题">如何快速定位问题</h2><p>刚开始看到AWR报告的时候我就mengbi了，内容实在是太多，从上到下哗啦啦的好多屏。<br>其实大家别害怕，里面99%的内容可以忽略了，我们直接看核心的东东-<strong>Top 5 Timed Events</strong> ，这个是oracle占用时间最长的5个events，直接看这个就行了。<br><img src="/img/Top_5_Timed_Events.PNG" alt="Alt text"></p>
<p>什么？里面写的啥，看不懂？？<br>其实，里面很多东西DBA也不懂，我们百度，谷歌搜起来，很多优化的方案都有，更专业的话，请看一些oracle自己的文章。<br>还有更懒省事、简单有效的方法，使用ADDM报告，上面也介绍了，它就像个私人医生，给你诊断oracle的性能问题并且给你解决方案。<br><strong>我们来看看ADDM能定位哪些问题</strong>：</p>
<blockquote>
<p>•操作系统内存页入页出问题<br>•由于Oracle负载和非Oracle负载导致的CPU瓶颈问题<br>•导致不同资源负载的Top SQL语句和对象——CPU消耗、IO带宽占用、潜在IO问题、RAC内部通讯繁忙<br>•按照PLSQL和JAVA执行时间排的Top SQL语句.<br>•过多地连接 (login/logoff).<br>•过多硬解析问题——由于shared pool过小、书写问题、绑定大小不适应、解析失败原因引起的。<br>•过多软解析问题<br>•索引查询过多导致资源争用.<br>•由于用户锁导致的过多的等待时间 (通过包dbms_lock加的锁)<br>•由于DML锁导致的过多等待时间(例如锁住表了)<br>•由于管道输出导致的过多等待时间(如通过包dbms_pipe.put进行管道输出)<br>•由于并发更新同一个记录导致的过多等待时间(行级锁等待)<br>•由于ITL不够导致的过多等待时间（大量的事务操作同一个数据块）<br>•系统中过多的commit和rollback(logfile sync事件).<br>•由于磁盘带宽太小和其他潜在问题（如由于logfile太小导致过多的checkpoint，MTTR设置问题，过多的undo操作等等）导致的IO性能问题I<br>•对于DBWR进程写数据块，磁盘IO吞吐量不足<br>•由于归档进程无法跟上redo日至产生的速度，导致系统变慢<br>•redo数据文件太小导致的问题<br>•由于扩展磁盘分配导致的争用<br>•由于移动一个对象的高水位导致的争用问题<br>•内存太小问题——SGA Target, PGA, Buffer Cache, Shared Pool<br>•在一个实例或者一个机群环境中存在频繁读写争用的热块<br>•在一个实例或者一个机群环境中存在频繁读写争用的热对象<br>•RAC环境中内部通讯问题<br>•LMS进程无法跟上导致锁请求阻塞<br>•在RAC环境中由于阻塞和争用导致的实例倾斜<br>•RMAN导致的IO和CPU问题<br>•Streams和AQ问题<br>•资源管理等待事件</p>
</blockquote>
<h2 id="如何导出ADDM报告">如何导出ADDM报告</h2><p>和上面导出AWR报告一样，首先进入$ORACLE_HOME/rdbms/admin目录，在sqlplus下运行<strong>@addmrpt</strong>脚本（记得切换oralce用户哦~），按照提示一步一步就可以达成。<br>我们把生成的addm报告拿出来，瞅一瞅~<br><img src="/img/addm-1.PNG" alt="Alt text"></p>
<p>哎，我英语不好，很多看不懂，没办法啊！！！<br>去百度整片翻译一下吧~~<br><img src="/img/addm-2.PNG" alt="Alt text"></p>
<p>好了，后面的事情不用多少了，调参数，优化sql，改bug吧~~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>  一个网站的性能分为很多方面，从网络、OS、中间件、code、sql、数据库，还有前端的很多方面，比如：page size、请求数、开启压缩等，实在是太多太多，估计一辈子搞完所有的是不可能了。<br>    大型网站在访问高峰的时候，实际上<strong>最大的瓶颈在数据库</strong>。很多互联网公司为了解决数据库瓶颈，会在DB端应用很多缓存机制，memcache、redis、包括减轻流复制的压力会应用MQ，kafka等消息队列。据统计，某宝和某度数据库的压力仅占期请求的10%~20%,大多数都是被redis等处理掉了。<br>    那么问题来了，我们在性能测试的时候遇到DB端的性能问题该怎么定位与分析呢？</p>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[登录filter实现]]></title>
    <link href="http://tonylit.me/2015/10/20/%E7%99%BB%E5%BD%95filter%E5%AE%9E%E7%8E%B0/"/>
    <id>http://tonylit.me/2015/10/20/登录filter实现/</id>
    <published>2015-10-20T03:37:27.000Z</published>
    <updated>2015-10-20T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>   最近想实现一个vo登录的功能，左思右想~~<br>   嗯，应该是需要实现权限和登录认证的功能，看来是做写一个登录过滤器或者拦截器了。<br> 项目使用的springmvc框架，查阅了一些资料，决定使用<strong>filter</strong>过滤器，<a href="http://blog.csdn.net/chenleixing/article/details/44573495" target="_blank" rel="external">拦截器与过滤器的区别</a>    </p>
<a id="more"></a>
<p>具体实现比较简单，配置配置，写个filter类就行了，如下：</p>
<ul>
<li><h1 id="在web-xml中增加对filer的配置">在web.xml中增加对filer的配置</h1><p><img src="/img/webxml-filter.PNG" alt="Alt text"></p>
</li>
<li><h1 id="新建一个filter类">新建一个filter类</h1></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.focustech.fds.web.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 登录验证的filter实现</span><br><span class="line"> * </span><br><span class="line"> * <span class="doctag">@author</span> lit</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> FilterConfig config;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] EXCEPT_PAGE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 登录页面</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOGIN_PAGE = <span class="string">"/login"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class="line">        request.setAttribute(<span class="string">"version"</span>, <span class="keyword">new</span> Random().nextInt());</span><br><span class="line">        BodyReaderHttpServletRequestWrapper requestWrapper = <span class="keyword">new</span> BodyReaderHttpServletRequestWrapper(request);</span><br><span class="line">        <span class="keyword">if</span> (requestWrapper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            request = requestWrapper;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排除一些jsp，css等文件</span></span><br><span class="line">        <span class="keyword">for</span> (String exception : EXCEPT_PAGE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (request.getRequestURI().endsWith(exception)) &#123;</span><br><span class="line"></span><br><span class="line">                filterChain.doFilter(request, response);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// String ref = request.getHeader("REFERER");</span></span><br><span class="line">        String ref = <span class="string">"REFERER"</span>;</span><br><span class="line">        HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line">        String type = request.getHeader(<span class="string">"X-Requested-With"</span>);</span><br><span class="line">        <span class="keyword">if</span> (session == <span class="keyword">null</span> || session.getAttribute(<span class="string">"fdsUser"</span>) == <span class="keyword">null</span> || ref == <span class="keyword">null</span> || <span class="string">""</span>.equals(ref)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"XMLHttpRequest"</span>.equalsIgnoreCase(type)) &#123;<span class="comment">// AJAX REQUEST</span></span><br><span class="line">                                                          <span class="comment">// PROCESS</span></span><br><span class="line">                response.setHeader(<span class="string">"sessionstatus"</span>, <span class="string">"timeout"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            response.sendRedirect(request.getContextPath() + LOGIN_PAGE);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        String exception = filterConfig.getInitParameter(<span class="string">"exception"</span>);</span><br><span class="line">        <span class="keyword">if</span> (exception != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(exception)) &#123;</span><br><span class="line">            EXCEPT_PAGE = exception.split(<span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        config = filterConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>搞定~<br>以后凡是URL中带有/vo/的请求都走过滤器滤一滤！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>   最近想实现一个vo登录的功能，左思右想~~<br>   嗯，应该是需要实现权限和登录认证的功能，看来是做写一个登录过滤器或者拦截器了。<br> 项目使用的springmvc框架，查阅了一些资料，决定使用<strong>filter</strong>过滤器，<a href="http://blog.csdn.net/chenleixing/article/details/44573495">拦截器与过滤器的区别</a>    </p>]]>
    
    </summary>
    
      <category term="java" scheme="http://tonylit.me/tags/java/"/>
    
      <category term="springmvc" scheme="http://tonylit.me/tags/springmvc/"/>
    
      <category term="工作" scheme="http://tonylit.me/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端性能测试]]></title>
    <link href="http://tonylit.me/2015/10/14/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <id>http://tonylit.me/2015/10/14/前端性能测试/</id>
    <published>2015-10-14T03:37:27.000Z</published>
    <updated>2015-10-14T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>前端时间领导要求统计网站几个核心页面的<strong>性能指标，pagesize、request数量、请求体积</strong>等，本身对前端 的东东不是很了解，看了一些资料，学习了一些前端的知识，包括页面渲染的顺序，各浏览器对请求的处理机制，各大公司对前端性能的一些指标等，结合网友总结 的一些工具的使用，简单的搭建了前端性能监控平台。<br><a id="more"></a><br>当然目前有很多前端性能测试网站，如阿里测、监控宝、webpagetest等，我搭建该平台的原因有三点，第一：网络问题，由于生成环境不能连接外网 第二：开源工具webpagetest搭建没搞定，网上的资料不全，英语不好，看不懂英文网站 第三：学习<br>前端知识的学习推荐：fex.baidu.com<br>性能测试网站推荐：<a href="http://www.alibench.com/" target="_blank" rel="external">http://www.alibench.com/</a><br>webpagetest开源工具：<a href="http://www.webpagetest.org/" target="_blank" rel="external">http://www.webpagetest.org/</a></p>
<h1 id="工具介绍：">工具介绍：</h1><h2 id="dynatrace：">dynatrace：</h2><p><a href="http://www.ibm.com/developerworks/cn/web/1205_xieju_dtraceajax/" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/web/1205_xieju_dtraceajax/</a></p>
<h2 id="showlsow：">showlsow：</h2><p>showslow是yslow的数据收集与展示平台<a href="http://www.showslow.com/，它是一个开源的php项目，可以用来与firefox的yslow插件、page" target="_blank" rel="external">http://www.showslow.com/，它是一个开源的php项目，可以用来与firefox的yslow插件、page</a> speed插件或者dynatrace通信，收集插件或程序所发送过来的信息并集中展示。只需要在dynatrace安装目录下进行一些设置，即可自动实现上传结果到showslow平台作为存档、分析及监控。<br><a href="http://www.showslow.org/Main_Page" target="_blank" rel="external">http://www.showslow.org/Main_Page</a></p>
<h2 id="yslow：">yslow：</h2><p>基于firebug的评测分析工具，yahoo产；和page speed类似工具，会给出页面的评分和优化说规则，同时会提供页面下载资源的统计分析功能，还提供了一些小工具，如js运行检测，图片的优化工具，未符合规则的资源有哪些等等。总的来说是page speed的增强版。<br>yslow前端评分标准：<br><a href="http://developer.yahoo.com/performance/rules.html" target="_blank" rel="external">http://developer.yahoo.com/performance/rules.html</a> </p>
<h2 id="pagespeed：">pagespeed：</h2><p>基于firebug的web页面优化的评测工具，同时还有支持chrome的插件，因为是google产的。<br><a href="https://developers.google.com/speed/docs/best-practices/rules_intro" target="_blank" rel="external">https://developers.google.com/speed/docs/best-practices/rules_intro</a></p>
<h2 id="selenium：">selenium：</h2><p>web自动化测试工具<br><a href="http://baike.baidu.com/subview/478050/6464537.htm?fr=aladdin" target="_blank" rel="external">http://baike.baidu.com/subview/478050/6464537.htm?fr=aladdin</a></p>
<h1 id="测试方案：">测试方案：</h1><p><img src="/img/ceshifangan.PNG" alt="Alt text"></p>
<h1 id="环境以及工具准备：">环境以及工具准备：</h1><p>下载相关工具<br>pagespeed插件：<a href="http://pan.baidu.com/s/1c0vP4VA" target="_blank" rel="external">http://pan.baidu.com/s/1c0vP4VA</a><br>yslow插件：<a href="http://pan.baidu.com/s/1eQkWdKu" target="_blank" rel="external">http://pan.baidu.com/s/1eQkWdKu</a><br>firebug：<a href="http://pan.baidu.com/s/1hq44Q92" target="_blank" rel="external">http://pan.baidu.com/s/1hq44Q92</a><br>dynatrace4.3.0：<a href="http://pan.baidu.com/s/1c01piBu" target="_blank" rel="external">http://pan.baidu.com/s/1c01piBu</a><br>xampp集成软件包：<a href="http://pan.baidu.com/s/1sj8Wkqh" target="_blank" rel="external">http://pan.baidu.com/s/1sj8Wkqh</a><br>MyEclipse8.6：<a href="http://pan.baidu.com/s/1eQEcuSq" target="_blank" rel="external">http://pan.baidu.com/s/1eQEcuSq</a></p>
<h2 id="说明：">说明：</h2><ul>
<li>(1).之所以用firefox19.0，因为坑爹的yslow、pagespeed、dynatrace、firebug、firefox之间的兼容问题，firefox30的兼容性不好，我也没多找资料，就用了19，我觉得完全可以用</li>
<li>(2).showslow为php的小项目，完全可以自己搭建一套php的环境、apache、，mysql，在此推荐xampp（XAMPP（Apache+MySQL+PHP+PERL）是一个功能强大的建 XAMPP 软件站集成软件包）<a href="http://baike.baidu.com/view/864591.htm?fr=aladdin" target="_blank" rel="external">http://baike.baidu.com/view/864591.htm?fr=aladdin</a><h1 id="工具下载好了，我们开始合体：">工具下载好了，我们开始合体：</h1></li>
<li><p>1.安装firefox19.0浏览器，把firebug、yslow、pagespeed插件加入<br><img src="/img/chajianjiaru.PNG" alt="Alt text"></p>
</li>
<li><p>2.安装dynatrace<br><img src="/img/dynatrace.PNG" alt="Alt text"></p>
</li>
</ul>
<ul>
<li><ol>
<li>安装xampp，整合showslow<br><img src="/img/showslow.PNG" alt="Alt text"></li>
</ol>
</li>
</ul>
<p>点击mysql的admin按钮，我们可以添加showslow的数据库，添加用户，设置权限，都比较简单，我添加了一个叫showslow的数据库<br> <img src="/img/showslowdatabase.PNG" alt="Alt text"></p>
<p>数据库方面的ok了，apache方面我们不用进行设置，默认的DocumentRoot在xampp文件夹下的htdocs文件。<br>进入xmapp安装目录的htdocs文件夹，清空所有东西，将下载的showslow减压到该文件夹中，修改showslow解压目录下的config.sample.php文件名为config.php，修改该文件的数据库连接信息，按照上面创建的数据库名，用户名，密码即可<br> <img src="/img/db-setting.PNG" alt="Alt text"></p>
<p>给showslow创建表结构，通过运行showslow解压主目录下的dbupgrade.php和users子目录下dbupgrade.php文件，我们只要在浏览器中输入<a href="http://localhost/dbupgrade.php" target="_blank" rel="external">http://localhost/dbupgrade.php</a> 和<a href="http://localhost/users/dbupgrade.php就可以了" target="_blank" rel="external">http://localhost/users/dbupgrade.php就可以了</a><br>然后，我们输入<a href="http://localhost/，测试一下showslow是否ok" target="_blank" rel="external">http://localhost/，测试一下showslow是否ok</a></p>
<ul>
<li><ol>
<li>环境基本搭建完成，下面我们设置dynatrace，yslow,pagespeed自动上传数据到showslow<h2 id="Dynatrace配置">Dynatrace配置</h2>配置：dynatrace安装文件下的dtajax.ini文件增加如下三行，其中第三行可设置dynatrace自动上传结果至showslow：<br>-Dcom.dynatrace.diagnostics.ajax.beacon.uploadurl=http:// localhost/beacon/dynatrace<br>-Dcom.dynatrace.diagnostics.ajax.beacon.portalurl=http:// localhost/<br>-Dcom.dynatrace.diagnostics.ajax.beacon.autoupload=true<h2 id="Yslow配置：">Yslow配置：</h2>配置YSlow  </li>
</ol>
</li>
<li>1.打开Firefox输入：about:config（我保证会很小心的）  </li>
<li>2.filter中输入：yslow  </li>
<li>3.修改以下三条数据<br>extensions.yslow.beaconUrl = <a href="http://localhost/showslow/beacon/yslow/" target="_blank" rel="external">http://localhost/showslow/beacon/yslow/</a><br>如果测试和服务器不在同一机器上，请将localhost改成实际地址<br>extensions.yslow.beaconInfo = grade<br>extensions.yslow.optinBeacon = true  </li>
<li>4.重启Firefox<br><img src="/img/firefox.PNG" alt="Alt text"></li>
</ul>
<p>Pagespeed配置：<br> <img src="/img/pagespeed.PNG" alt="Alt text"></p>
<p>万恶的pagespeed，不知道怎么的，数据上传不到showslow中，有知道原因的请解惑<br><a href="http://zhidao.baidu.com/question/552903737028719092.html?quesup2&amp;oldq=1" target="_blank" rel="external">http://zhidao.baidu.com/question/552903737028719092.html?quesup2&amp;oldq=1</a></p>
<h1 id="配置方面的可以参考：">配置方面的可以参考：</h1><p><a href="http://blog.csdn.net/five3/article/details/7688298" target="_blank" rel="external">http://blog.csdn.net/five3/article/details/7688298</a><br>结合selenium自动化性能测试：</p>
<h1 id="可以下载项目，自己看吧">可以下载项目，自己看吧</h1><p><a href="http://pan.baidu.com/s/1kTIBPEB" target="_blank" rel="external">http://pan.baidu.com/s/1kTIBPEB</a><br>设置环境变量<br>DT_AE_AGENTACTIVE=true<br>DT_AE_AGENTNAME=”any string name”</p>
<p><img src="/img/selenium-env.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前端时间领导要求统计网站几个核心页面的<strong>性能指标，pagesize、request数量、请求体积</strong>等，本身对前端 的东东不是很了解，看了一些资料，学习了一些前端的知识，包括页面渲染的顺序，各浏览器对请求的处理机制，各大公司对前端性能的一些指标等，结合网友总结 的一些工具的使用，简单的搭建了前端性能监控平台。<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="前端性能" scheme="http://tonylit.me/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[loadrunner监控linux服务器]]></title>
    <link href="http://tonylit.me/2015/10/14/loadrunner%E7%9B%91%E6%8E%A7linux%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://tonylit.me/2015/10/14/loadrunner监控linux服务器/</id>
    <published>2015-10-14T03:37:27.000Z</published>
    <updated>2015-10-14T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p><strong>loadrunner监控linux服务器的cpu、io、内存等</strong><br><img src="/img/linux-server.PNG" alt="Alt text"></p>
<a id="more"></a>
<p>需要在linux服务器上开启rstatd服务，首先看下机器上面有没有装过rstatd<br>rstatd 是一个为网络上其他机器收集和提供系统信息的守候程序</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">whereis</span> <span class="tag">rpc</span><span class="class">.ratatd</span></span><br></pre></td></tr></table></figure>
<p>如果没安装过，安装一下</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf rpc<span class="class">.rstatd-4</span>.<span class="number">0.1</span><span class="class">.tar</span><span class="class">.gz</span></span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>安装完成，启动rstatd</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">rpc</span><span class="class">.rstatd</span></span><br></pre></td></tr></table></figure>
<p>检查下是否启动成功</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">rpcinfo</span> -p</span><br></pre></td></tr></table></figure>
<p><img src="/img/rpcinfo.PNG" alt="Alt text"><br>说明rstatd启动成功了</p>
<p>最后在controller中添加UNIX resources监控，然后选择监控指标就行了。<br><img src="/img/unix_resources.PNG" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>loadrunner监控linux服务器的cpu、io、内存等</strong><br><img src="/img/linux-server.PNG" alt="Alt text"></p>]]>
    
    </summary>
    
      <category term="loadrunner" scheme="http://tonylit.me/tags/loadrunner/"/>
    
      <category term="work" scheme="http://tonylit.me/tags/work/"/>
    
      <category term="性能" scheme="http://tonylit.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
</feed>
